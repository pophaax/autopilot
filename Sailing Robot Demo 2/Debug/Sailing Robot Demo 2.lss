
Sailing Robot Demo 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010d30  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010d30  00010d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d64  20000000  00010d38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000248  20000d64  00011a9c  00020d64  2**2
                  ALLOC
  4 .stack        00001004  20000fac  00011ce4  00020d64  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020d64  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00020d8e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003f9ff  00000000  00000000  00020dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000b00c  00000000  00000000  000607fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001a18  00000000  00000000  0006b810  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00034a3d  00000000  00000000  0006d228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000255c0  00000000  00000000  000a1c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000e8ba3  00000000  00000000  000c7225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000173fb  00000000  00000000  001afdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001168  00000000  00000000  001c71c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004da4  00000000  00000000  001c832c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
       0:	20001fb0 	.word	0x20001fb0
       4:	000060b9 	.word	0x000060b9
	if (cpu_irq_critical_section_counter == 0) {
       8:	000060b1 	.word	0x000060b1
       c:	000060b1 	.word	0x000060b1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
      10:	000060b1 	.word	0x000060b1
  return(result);
      14:	000060b1 	.word	0x000060b1
		if (cpu_irq_is_enabled()) {
      18:	000060b1 	.word	0x000060b1
	...
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
      2c:	000060b1 	.word	0x000060b1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      30:	000060b1 	.word	0x000060b1
		}

	}

	cpu_irq_critical_section_counter++;
      34:	00000000 	.word	0x00000000
      38:	000060b1 	.word	0x000060b1
      3c:	000060b1 	.word	0x000060b1
}
      40:	000060b1 	.word	0x000060b1
      44:	000060b1 	.word	0x000060b1
      48:	000060b1 	.word	0x000060b1
      4c:	000060b1 	.word	0x000060b1
      50:	000060b1 	.word	0x000060b1
      54:	000060b1 	.word	0x000060b1
      58:	000060b1 	.word	0x000060b1
      5c:	000060b1 	.word	0x000060b1
      60:	000060b1 	.word	0x000060b1
      64:	000060b1 	.word	0x000060b1
      68:	000060b1 	.word	0x000060b1
      6c:	000060b1 	.word	0x000060b1
      70:	000060b1 	.word	0x000060b1
      74:	000060b1 	.word	0x000060b1
      78:	000060b1 	.word	0x000060b1
      7c:	000060b1 	.word	0x000060b1
      80:	000060b1 	.word	0x000060b1
      84:	000060b1 	.word	0x000060b1
      88:	000060b1 	.word	0x000060b1
      8c:	000060b1 	.word	0x000060b1
      90:	000060b1 	.word	0x000060b1
      94:	000060b1 	.word	0x000060b1
      98:	000060b1 	.word	0x000060b1
      9c:	000060b1 	.word	0x000060b1
      a0:	000060b1 	.word	0x000060b1
      a4:	00001381 	.word	0x00001381
      a8:	00001395 	.word	0x00001395
      ac:	000013a9 	.word	0x000013a9
      b0:	000013bd 	.word	0x000013bd
      b4:	000013d1 	.word	0x000013d1
      b8:	000013e5 	.word	0x000013e5
      bc:	000013f9 	.word	0x000013f9
      c0:	0000140d 	.word	0x0000140d
      c4:	00001421 	.word	0x00001421
      c8:	00001435 	.word	0x00001435
      cc:	00001449 	.word	0x00001449
      d0:	0000145d 	.word	0x0000145d
      d4:	000060b1 	.word	0x000060b1
      d8:	000060b1 	.word	0x000060b1
      dc:	000060b1 	.word	0x000060b1
      e0:	000010a1 	.word	0x000010a1
      e4:	000060b1 	.word	0x000060b1
      e8:	000060b1 	.word	0x000060b1
      ec:	000060b1 	.word	0x000060b1
      f0:	000060b1 	.word	0x000060b1
      f4:	000060b1 	.word	0x000060b1
      f8:	000060b1 	.word	0x000060b1
      fc:	000060b1 	.word	0x000060b1
     100:	000060b1 	.word	0x000060b1
     104:	000060b1 	.word	0x000060b1
     108:	000060b1 	.word	0x000060b1
     10c:	000060b1 	.word	0x000060b1
     110:	000060b1 	.word	0x000060b1
     114:	000060b1 	.word	0x000060b1
     118:	000060b1 	.word	0x000060b1
     11c:	000060b1 	.word	0x000060b1
     120:	000060b1 	.word	0x000060b1
     124:	00006b45 	.word	0x00006b45
     128:	000060b1 	.word	0x000060b1
     12c:	000060b1 	.word	0x000060b1
     130:	000060b1 	.word	0x000060b1
     134:	000060b1 	.word	0x000060b1
     138:	000060b1 	.word	0x000060b1
     13c:	000060b1 	.word	0x000060b1
     140:	000060b1 	.word	0x000060b1
     144:	00006b35 	.word	0x00006b35
     148:	00006b25 	.word	0x00006b25
     14c:	000060b1 	.word	0x000060b1
     150:	000060b1 	.word	0x000060b1
     154:	000060b1 	.word	0x000060b1
     158:	000060b1 	.word	0x000060b1
     15c:	000060b1 	.word	0x000060b1
     160:	000060b1 	.word	0x000060b1
     164:	000060b1 	.word	0x000060b1
     168:	000060b1 	.word	0x000060b1
     16c:	000060b1 	.word	0x000060b1
     170:	000060b1 	.word	0x000060b1
     174:	000060b1 	.word	0x000060b1
     178:	000060b1 	.word	0x000060b1
     17c:	000060b1 	.word	0x000060b1

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a1b      	subs	r3, r3, r0
     188:	2b06      	cmp	r3, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4b04      	ldr	r3, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2b00      	cmp	r3, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4798      	blx	r3
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00010d38 	.word	0x00010d38
     19c:	00010d3b 	.word	0x00010d3b
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a1b      	subs	r3, r3, r0
     1ac:	109b      	asrs	r3, r3, #2
     1ae:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00010d38 	.word	0x00010d38
     1c8:	00010d38 	.word	0x00010d38
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b113      	cbz	r3, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2301      	movs	r3, #1
     1e8:	7023      	strb	r3, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000d64 	.word	0x20000d64
     1f0:	00000000 	.word	0x00000000
     1f4:	00010d38 	.word	0x00010d38

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6803      	ldr	r3, [r0, #0]
     20a:	b113      	cbz	r3, 212 <frame_dummy+0x1a>
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b103      	cbz	r3, 212 <frame_dummy+0x1a>
     210:	4798      	blx	r3
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00010d38 	.word	0x00010d38
     224:	20000d68 	.word	0x20000d68
     228:	00010d38 	.word	0x00010d38
     22c:	00000000 	.word	0x00000000

00000230 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
     230:	b480      	push	{r7}
     232:	b083      	sub	sp, #12
     234:	af00      	add	r7, sp, #0
     236:	4603      	mov	r3, r0
     238:	71fb      	strb	r3, [r7, #7]
	switch (id) {
     23a:	79fb      	ldrb	r3, [r7, #7]
     23c:	2b06      	cmp	r3, #6
     23e:	d821      	bhi.n	284 <osc_get_rate+0x54>
     240:	a201      	add	r2, pc, #4	; (adr r2, 248 <osc_get_rate+0x18>)
     242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     246:	bf00      	nop
     248:	00000265 	.word	0x00000265
     24c:	00000269 	.word	0x00000269
     250:	0000026f 	.word	0x0000026f
     254:	00000275 	.word	0x00000275
     258:	00000279 	.word	0x00000279
     25c:	0000027d 	.word	0x0000027d
     260:	00000281 	.word	0x00000281
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
     264:	4b0b      	ldr	r3, [pc, #44]	; (294 <osc_get_rate+0x64>)
     266:	e00e      	b.n	286 <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
     268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     26c:	e00b      	b.n	286 <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
     26e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     272:	e008      	b.n	286 <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
     274:	4b08      	ldr	r3, [pc, #32]	; (298 <osc_get_rate+0x68>)
     276:	e006      	b.n	286 <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
     278:	4b08      	ldr	r3, [pc, #32]	; (29c <osc_get_rate+0x6c>)
     27a:	e004      	b.n	286 <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
     27c:	4b08      	ldr	r3, [pc, #32]	; (2a0 <osc_get_rate+0x70>)
     27e:	e002      	b.n	286 <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
     280:	4b08      	ldr	r3, [pc, #32]	; (2a4 <osc_get_rate+0x74>)
     282:	e000      	b.n	286 <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
     284:	2300      	movs	r3, #0
	}
}
     286:	4618      	mov	r0, r3
     288:	370c      	adds	r7, #12
     28a:	46bd      	mov	sp, r7
     28c:	f85d 7b04 	ldr.w	r7, [sp], #4
     290:	4770      	bx	lr
     292:	bf00      	nop
     294:	00b71b00 	.word	0x00b71b00
     298:	04c4b400 	.word	0x04c4b400
     29c:	003d0900 	.word	0x003d0900
     2a0:	000f4240 	.word	0x000f4240
     2a4:	0001c138 	.word	0x0001c138

000002a8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
     2a8:	b580      	push	{r7, lr}
     2aa:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
     2ac:	2000      	movs	r0, #0
     2ae:	4b03      	ldr	r3, [pc, #12]	; (2bc <sysclk_get_main_hz+0x14>)
     2b0:	4798      	blx	r3
     2b2:	4603      	mov	r3, r0
     2b4:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
     2b6:	4618      	mov	r0, r3
     2b8:	bd80      	pop	{r7, pc}
     2ba:	bf00      	nop
     2bc:	00000231 	.word	0x00000231

000002c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     2c0:	b580      	push	{r7, lr}
     2c2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
     2c4:	4b02      	ldr	r3, [pc, #8]	; (2d0 <sysclk_get_cpu_hz+0x10>)
     2c6:	4798      	blx	r3
     2c8:	4603      	mov	r3, r0
}
     2ca:	4618      	mov	r0, r3
     2cc:	bd80      	pop	{r7, pc}
     2ce:	bf00      	nop
     2d0:	000002a9 	.word	0x000002a9
     2d4:	00000000 	.word	0x00000000

000002d8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     2d8:	b5b0      	push	{r4, r5, r7, lr}
     2da:	b08e      	sub	sp, #56	; 0x38
     2dc:	af00      	add	r7, sp, #0
     2de:	4603      	mov	r3, r0
     2e0:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
     2e2:	2311      	movs	r3, #17
     2e4:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
     2e6:	f107 030c 	add.w	r3, r7, #12
     2ea:	4839      	ldr	r0, [pc, #228]	; (3d0 <ssd1306_write_command+0xf8>)
     2ec:	4619      	mov	r1, r3
     2ee:	4b39      	ldr	r3, [pc, #228]	; (3d4 <ssd1306_write_command+0xfc>)
     2f0:	4798      	blx	r3
     2f2:	234f      	movs	r3, #79	; 0x4f
     2f4:	637b      	str	r3, [r7, #52]	; 0x34
     2f6:	2300      	movs	r3, #0
     2f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     2fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
     300:	2b00      	cmp	r3, #0
     302:	d016      	beq.n	332 <ssd1306_write_command+0x5a>
     304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     306:	62fb      	str	r3, [r7, #44]	; 0x2c
     308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     30a:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     30e:	095b      	lsrs	r3, r3, #5
     310:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     314:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     318:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     31c:	025b      	lsls	r3, r3, #9
     31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     320:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     322:	6a3a      	ldr	r2, [r7, #32]
     324:	f002 021f 	and.w	r2, r2, #31
     328:	2101      	movs	r1, #1
     32a:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     32e:	655a      	str	r2, [r3, #84]	; 0x54
     330:	e015      	b.n	35e <ssd1306_write_command+0x86>
     332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     334:	61fb      	str	r3, [r7, #28]
     336:	69fb      	ldr	r3, [r7, #28]
     338:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     33a:	69bb      	ldr	r3, [r7, #24]
     33c:	095b      	lsrs	r3, r3, #5
     33e:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     340:	697b      	ldr	r3, [r7, #20]
     342:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     346:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     34a:	025b      	lsls	r3, r3, #9
     34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     34e:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     350:	693a      	ldr	r2, [r7, #16]
     352:	f002 021f 	and.w	r2, r2, #31
     356:	2101      	movs	r1, #1
     358:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     35c:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
     35e:	79fb      	ldrb	r3, [r7, #7]
     360:	481b      	ldr	r0, [pc, #108]	; (3d0 <ssd1306_write_command+0xf8>)
     362:	4619      	mov	r1, r3
     364:	4b1c      	ldr	r3, [pc, #112]	; (3d8 <ssd1306_write_command+0x100>)
     366:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
     368:	4b1c      	ldr	r3, [pc, #112]	; (3dc <ssd1306_write_command+0x104>)
     36a:	4798      	blx	r3
     36c:	4603      	mov	r3, r0
     36e:	4618      	mov	r0, r3
     370:	f04f 0100 	mov.w	r1, #0
     374:	4602      	mov	r2, r0
     376:	460b      	mov	r3, r1
     378:	009d      	lsls	r5, r3, #2
     37a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
     37e:	0094      	lsls	r4, r2, #2
     380:	4622      	mov	r2, r4
     382:	462b      	mov	r3, r5
     384:	1880      	adds	r0, r0, r2
     386:	eb41 0103 	adc.w	r1, r1, r3
     38a:	a30f      	add	r3, pc, #60	; (adr r3, 3c8 <ssd1306_write_command+0xf0>)
     38c:	e9d3 2300 	ldrd	r2, r3, [r3]
     390:	1812      	adds	r2, r2, r0
     392:	eb43 0301 	adc.w	r3, r3, r1
     396:	4c12      	ldr	r4, [pc, #72]	; (3e0 <ssd1306_write_command+0x108>)
     398:	4610      	mov	r0, r2
     39a:	4619      	mov	r1, r3
     39c:	4a11      	ldr	r2, [pc, #68]	; (3e4 <ssd1306_write_command+0x10c>)
     39e:	f04f 0300 	mov.w	r3, #0
     3a2:	47a0      	blx	r4
     3a4:	4602      	mov	r2, r0
     3a6:	460b      	mov	r3, r1
     3a8:	4613      	mov	r3, r2
     3aa:	4618      	mov	r0, r3
     3ac:	4b0e      	ldr	r3, [pc, #56]	; (3e8 <ssd1306_write_command+0x110>)
     3ae:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
     3b0:	f107 030c 	add.w	r3, r7, #12
     3b4:	4806      	ldr	r0, [pc, #24]	; (3d0 <ssd1306_write_command+0xf8>)
     3b6:	4619      	mov	r1, r3
     3b8:	4b0c      	ldr	r3, [pc, #48]	; (3ec <ssd1306_write_command+0x114>)
     3ba:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
     3bc:	3738      	adds	r7, #56	; 0x38
     3be:	46bd      	mov	sp, r7
     3c0:	bdb0      	pop	{r4, r5, r7, pc}
     3c2:	bf00      	nop
     3c4:	f3af 8000 	nop.w
     3c8:	00d59f7f 	.word	0x00d59f7f
     3cc:	00000000 	.word	0x00000000
     3d0:	4002c000 	.word	0x4002c000
     3d4:	00000a69 	.word	0x00000a69
     3d8:	00000a49 	.word	0x00000a49
     3dc:	000002c1 	.word	0x000002c1
     3e0:	00007cd1 	.word	0x00007cd1
     3e4:	00d59f80 	.word	0x00d59f80
     3e8:	20000001 	.word	0x20000001
     3ec:	00000a85 	.word	0x00000a85

000003f0 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
     3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3f4:	b099      	sub	sp, #100	; 0x64
     3f6:	af00      	add	r7, sp, #0
     3f8:	4603      	mov	r3, r0
     3fa:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
     3fc:	2311      	movs	r3, #17
     3fe:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
     400:	f107 030c 	add.w	r3, r7, #12
     404:	4866      	ldr	r0, [pc, #408]	; (5a0 <ssd1306_write_data+0x1b0>)
     406:	4619      	mov	r1, r3
     408:	4b66      	ldr	r3, [pc, #408]	; (5a4 <ssd1306_write_data+0x1b4>)
     40a:	4798      	blx	r3
     40c:	234f      	movs	r3, #79	; 0x4f
     40e:	65fb      	str	r3, [r7, #92]	; 0x5c
     410:	2301      	movs	r3, #1
     412:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     416:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
     41a:	2b00      	cmp	r3, #0
     41c:	d016      	beq.n	44c <ssd1306_write_data+0x5c>
     41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     420:	657b      	str	r3, [r7, #84]	; 0x54
     422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     424:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     428:	095b      	lsrs	r3, r3, #5
     42a:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     42e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     432:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     436:	025b      	lsls	r3, r3, #9
     438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     43a:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
     43e:	f002 021f 	and.w	r2, r2, #31
     442:	2101      	movs	r1, #1
     444:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     448:	655a      	str	r2, [r3, #84]	; 0x54
     44a:	e015      	b.n	478 <ssd1306_write_data+0x88>
     44c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     44e:	647b      	str	r3, [r7, #68]	; 0x44
     450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     452:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     456:	095b      	lsrs	r3, r3, #5
     458:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     45c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     460:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     464:	025b      	lsls	r3, r3, #9
     466:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     468:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     46c:	f002 021f 	and.w	r2, r2, #31
     470:	2101      	movs	r1, #1
     472:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     476:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
     478:	4b4b      	ldr	r3, [pc, #300]	; (5a8 <ssd1306_write_data+0x1b8>)
     47a:	4798      	blx	r3
     47c:	4603      	mov	r3, r0
     47e:	4618      	mov	r0, r3
     480:	f04f 0100 	mov.w	r1, #0
     484:	4602      	mov	r2, r0
     486:	460b      	mov	r3, r1
     488:	ea4f 0983 	mov.w	r9, r3, lsl #2
     48c:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
     490:	ea4f 0882 	mov.w	r8, r2, lsl #2
     494:	4642      	mov	r2, r8
     496:	464b      	mov	r3, r9
     498:	1880      	adds	r0, r0, r2
     49a:	eb41 0103 	adc.w	r1, r1, r3
     49e:	a33e      	add	r3, pc, #248	; (adr r3, 598 <ssd1306_write_data+0x1a8>)
     4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
     4a4:	1812      	adds	r2, r2, r0
     4a6:	eb43 0301 	adc.w	r3, r3, r1
     4aa:	4e40      	ldr	r6, [pc, #256]	; (5ac <ssd1306_write_data+0x1bc>)
     4ac:	4610      	mov	r0, r2
     4ae:	4619      	mov	r1, r3
     4b0:	4a3f      	ldr	r2, [pc, #252]	; (5b0 <ssd1306_write_data+0x1c0>)
     4b2:	f04f 0300 	mov.w	r3, #0
     4b6:	47b0      	blx	r6
     4b8:	4602      	mov	r2, r0
     4ba:	460b      	mov	r3, r1
     4bc:	4613      	mov	r3, r2
     4be:	4618      	mov	r0, r3
     4c0:	4b3c      	ldr	r3, [pc, #240]	; (5b4 <ssd1306_write_data+0x1c4>)
     4c2:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
     4c4:	79fb      	ldrb	r3, [r7, #7]
     4c6:	4836      	ldr	r0, [pc, #216]	; (5a0 <ssd1306_write_data+0x1b0>)
     4c8:	4619      	mov	r1, r3
     4ca:	4b3b      	ldr	r3, [pc, #236]	; (5b8 <ssd1306_write_data+0x1c8>)
     4cc:	4798      	blx	r3
     4ce:	234f      	movs	r3, #79	; 0x4f
     4d0:	637b      	str	r3, [r7, #52]	; 0x34
     4d2:	2301      	movs	r3, #1
     4d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     4d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
     4dc:	2b00      	cmp	r3, #0
     4de:	d016      	beq.n	50e <ssd1306_write_data+0x11e>
     4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
     4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     4e6:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     4ea:	095b      	lsrs	r3, r3, #5
     4ec:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     4f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     4f4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     4f8:	025b      	lsls	r3, r3, #9
     4fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     4fc:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     4fe:	6a3a      	ldr	r2, [r7, #32]
     500:	f002 021f 	and.w	r2, r2, #31
     504:	2101      	movs	r1, #1
     506:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     50a:	655a      	str	r2, [r3, #84]	; 0x54
     50c:	e015      	b.n	53a <ssd1306_write_data+0x14a>
     50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     510:	61fb      	str	r3, [r7, #28]
     512:	69fb      	ldr	r3, [r7, #28]
     514:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     516:	69bb      	ldr	r3, [r7, #24]
     518:	095b      	lsrs	r3, r3, #5
     51a:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     51c:	697b      	ldr	r3, [r7, #20]
     51e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     522:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     526:	025b      	lsls	r3, r3, #9
     528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     52a:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     52c:	693a      	ldr	r2, [r7, #16]
     52e:	f002 021f 	and.w	r2, r2, #31
     532:	2101      	movs	r1, #1
     534:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     538:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
     53a:	4b1b      	ldr	r3, [pc, #108]	; (5a8 <ssd1306_write_data+0x1b8>)
     53c:	4798      	blx	r3
     53e:	4603      	mov	r3, r0
     540:	4618      	mov	r0, r3
     542:	f04f 0100 	mov.w	r1, #0
     546:	4602      	mov	r2, r0
     548:	460b      	mov	r3, r1
     54a:	009d      	lsls	r5, r3, #2
     54c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
     550:	0094      	lsls	r4, r2, #2
     552:	4622      	mov	r2, r4
     554:	462b      	mov	r3, r5
     556:	1880      	adds	r0, r0, r2
     558:	eb41 0103 	adc.w	r1, r1, r3
     55c:	a30e      	add	r3, pc, #56	; (adr r3, 598 <ssd1306_write_data+0x1a8>)
     55e:	e9d3 2300 	ldrd	r2, r3, [r3]
     562:	1812      	adds	r2, r2, r0
     564:	eb43 0301 	adc.w	r3, r3, r1
     568:	4c10      	ldr	r4, [pc, #64]	; (5ac <ssd1306_write_data+0x1bc>)
     56a:	4610      	mov	r0, r2
     56c:	4619      	mov	r1, r3
     56e:	4a10      	ldr	r2, [pc, #64]	; (5b0 <ssd1306_write_data+0x1c0>)
     570:	f04f 0300 	mov.w	r3, #0
     574:	47a0      	blx	r4
     576:	4602      	mov	r2, r0
     578:	460b      	mov	r3, r1
     57a:	4613      	mov	r3, r2
     57c:	4618      	mov	r0, r3
     57e:	4b0d      	ldr	r3, [pc, #52]	; (5b4 <ssd1306_write_data+0x1c4>)
     580:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
     582:	f107 030c 	add.w	r3, r7, #12
     586:	4806      	ldr	r0, [pc, #24]	; (5a0 <ssd1306_write_data+0x1b0>)
     588:	4619      	mov	r1, r3
     58a:	4b0c      	ldr	r3, [pc, #48]	; (5bc <ssd1306_write_data+0x1cc>)
     58c:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
     58e:	3764      	adds	r7, #100	; 0x64
     590:	46bd      	mov	sp, r7
     592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     596:	bf00      	nop
     598:	00d59f7f 	.word	0x00d59f7f
     59c:	00000000 	.word	0x00000000
     5a0:	4002c000 	.word	0x4002c000
     5a4:	00000a69 	.word	0x00000a69
     5a8:	000002c1 	.word	0x000002c1
     5ac:	00007cd1 	.word	0x00007cd1
     5b0:	00d59f80 	.word	0x00d59f80
     5b4:	20000001 	.word	0x20000001
     5b8:	00000a49 	.word	0x00000a49
     5bc:	00000a85 	.word	0x00000a85

000005c0 <ssd1306_hard_reset>:
 * This functions will reset the OLED controller by setting the reset pin low.
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
     5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     5c4:	b095      	sub	sp, #84	; 0x54
     5c6:	af00      	add	r7, sp, #0
     5c8:	230a      	movs	r3, #10
     5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
     5cc:	2300      	movs	r3, #0
     5ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     5d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
     5d6:	2b00      	cmp	r3, #0
     5d8:	d016      	beq.n	608 <ssd1306_hard_reset+0x48>
     5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5dc:	647b      	str	r3, [r7, #68]	; 0x44
     5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5e0:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5e4:	095b      	lsrs	r3, r3, #5
     5e6:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     5ee:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     5f2:	025b      	lsls	r3, r3, #9
     5f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     5f6:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     5f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     5fa:	f002 021f 	and.w	r2, r2, #31
     5fe:	2101      	movs	r1, #1
     600:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     604:	655a      	str	r2, [r3, #84]	; 0x54
     606:	e015      	b.n	634 <ssd1306_hard_reset+0x74>
     608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     60a:	637b      	str	r3, [r7, #52]	; 0x34
     60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     60e:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     612:	095b      	lsrs	r3, r3, #5
     614:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     618:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     61c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     620:	025b      	lsls	r3, r3, #9
     622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     624:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     626:	6aba      	ldr	r2, [r7, #40]	; 0x28
     628:	f002 021f 	and.w	r2, r2, #31
     62c:	2101      	movs	r1, #1
     62e:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     632:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
     634:	4b44      	ldr	r3, [pc, #272]	; (748 <ssd1306_hard_reset+0x188>)
     636:	4798      	blx	r3
     638:	4603      	mov	r3, r0
     63a:	4618      	mov	r0, r3
     63c:	f04f 0100 	mov.w	r1, #0
     640:	4602      	mov	r2, r0
     642:	460b      	mov	r3, r1
     644:	ea4f 0983 	mov.w	r9, r3, lsl #2
     648:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
     64c:	ea4f 0882 	mov.w	r8, r2, lsl #2
     650:	4642      	mov	r2, r8
     652:	464b      	mov	r3, r9
     654:	1880      	adds	r0, r0, r2
     656:	eb41 0103 	adc.w	r1, r1, r3
     65a:	a339      	add	r3, pc, #228	; (adr r3, 740 <ssd1306_hard_reset+0x180>)
     65c:	e9d3 2300 	ldrd	r2, r3, [r3]
     660:	1812      	adds	r2, r2, r0
     662:	eb43 0301 	adc.w	r3, r3, r1
     666:	4e39      	ldr	r6, [pc, #228]	; (74c <ssd1306_hard_reset+0x18c>)
     668:	4610      	mov	r0, r2
     66a:	4619      	mov	r1, r3
     66c:	4a38      	ldr	r2, [pc, #224]	; (750 <ssd1306_hard_reset+0x190>)
     66e:	f04f 0300 	mov.w	r3, #0
     672:	47b0      	blx	r6
     674:	4602      	mov	r2, r0
     676:	460b      	mov	r3, r1
     678:	4613      	mov	r3, r2
     67a:	4618      	mov	r0, r3
     67c:	4b35      	ldr	r3, [pc, #212]	; (754 <ssd1306_hard_reset+0x194>)
     67e:	4798      	blx	r3
     680:	230a      	movs	r3, #10
     682:	627b      	str	r3, [r7, #36]	; 0x24
     684:	2301      	movs	r3, #1
     686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     68a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
     68e:	2b00      	cmp	r3, #0
     690:	d016      	beq.n	6c0 <ssd1306_hard_reset+0x100>
     692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     694:	61fb      	str	r3, [r7, #28]
     696:	69fb      	ldr	r3, [r7, #28]
     698:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     69a:	69bb      	ldr	r3, [r7, #24]
     69c:	095b      	lsrs	r3, r3, #5
     69e:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     6a0:	697b      	ldr	r3, [r7, #20]
     6a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     6a6:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     6aa:	025b      	lsls	r3, r3, #9
     6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     6ae:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     6b0:	693a      	ldr	r2, [r7, #16]
     6b2:	f002 021f 	and.w	r2, r2, #31
     6b6:	2101      	movs	r1, #1
     6b8:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     6bc:	655a      	str	r2, [r3, #84]	; 0x54
     6be:	e015      	b.n	6ec <ssd1306_hard_reset+0x12c>
     6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6c2:	60fb      	str	r3, [r7, #12]
     6c4:	68fb      	ldr	r3, [r7, #12]
     6c6:	60bb      	str	r3, [r7, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     6c8:	68bb      	ldr	r3, [r7, #8]
     6ca:	095b      	lsrs	r3, r3, #5
     6cc:	607b      	str	r3, [r7, #4]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     6d4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     6d8:	025b      	lsls	r3, r3, #9
     6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     6dc:	603a      	str	r2, [r7, #0]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     6de:	683a      	ldr	r2, [r7, #0]
     6e0:	f002 021f 	and.w	r2, r2, #31
     6e4:	2101      	movs	r1, #1
     6e6:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     6ea:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
     6ec:	4b16      	ldr	r3, [pc, #88]	; (748 <ssd1306_hard_reset+0x188>)
     6ee:	4798      	blx	r3
     6f0:	4603      	mov	r3, r0
     6f2:	4618      	mov	r0, r3
     6f4:	f04f 0100 	mov.w	r1, #0
     6f8:	4602      	mov	r2, r0
     6fa:	460b      	mov	r3, r1
     6fc:	009d      	lsls	r5, r3, #2
     6fe:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
     702:	0094      	lsls	r4, r2, #2
     704:	4622      	mov	r2, r4
     706:	462b      	mov	r3, r5
     708:	1880      	adds	r0, r0, r2
     70a:	eb41 0103 	adc.w	r1, r1, r3
     70e:	a30c      	add	r3, pc, #48	; (adr r3, 740 <ssd1306_hard_reset+0x180>)
     710:	e9d3 2300 	ldrd	r2, r3, [r3]
     714:	1812      	adds	r2, r2, r0
     716:	eb43 0301 	adc.w	r3, r3, r1
     71a:	4c0c      	ldr	r4, [pc, #48]	; (74c <ssd1306_hard_reset+0x18c>)
     71c:	4610      	mov	r0, r2
     71e:	4619      	mov	r1, r3
     720:	4a0b      	ldr	r2, [pc, #44]	; (750 <ssd1306_hard_reset+0x190>)
     722:	f04f 0300 	mov.w	r3, #0
     726:	47a0      	blx	r4
     728:	4602      	mov	r2, r0
     72a:	460b      	mov	r3, r1
     72c:	4613      	mov	r3, r2
     72e:	4618      	mov	r0, r3
     730:	4b08      	ldr	r3, [pc, #32]	; (754 <ssd1306_hard_reset+0x194>)
     732:	4798      	blx	r3
}
     734:	3754      	adds	r7, #84	; 0x54
     736:	46bd      	mov	sp, r7
     738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     73c:	f3af 8000 	nop.w
     740:	00d59f7f 	.word	0x00d59f7f
     744:	00000000 	.word	0x00000000
     748:	000002c1 	.word	0x000002c1
     74c:	00007cd1 	.word	0x00007cd1
     750:	00d59f80 	.word	0x00d59f80
     754:	20000001 	.word	0x20000001

00000758 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
     758:	b580      	push	{r7, lr}
     75a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     75c:	20af      	movs	r0, #175	; 0xaf
     75e:	4b01      	ldr	r3, [pc, #4]	; (764 <ssd1306_display_on+0xc>)
     760:	4798      	blx	r3
}
     762:	bd80      	pop	{r7, pc}
     764:	000002d9 	.word	0x000002d9

00000768 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
     768:	b580      	push	{r7, lr}
     76a:	b082      	sub	sp, #8
     76c:	af00      	add	r7, sp, #0
     76e:	4603      	mov	r3, r0
     770:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     772:	2081      	movs	r0, #129	; 0x81
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <ssd1306_set_contrast+0x24>)
     776:	4798      	blx	r3
	ssd1306_write_command(contrast);
     778:	79fb      	ldrb	r3, [r7, #7]
     77a:	4618      	mov	r0, r3
     77c:	4b03      	ldr	r3, [pc, #12]	; (78c <ssd1306_set_contrast+0x24>)
     77e:	4798      	blx	r3
	return contrast;
     780:	79fb      	ldrb	r3, [r7, #7]
}
     782:	4618      	mov	r0, r3
     784:	3708      	adds	r7, #8
     786:	46bd      	mov	sp, r7
     788:	bd80      	pop	{r7, pc}
     78a:	bf00      	nop
     78c:	000002d9 	.word	0x000002d9

00000790 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
     790:	b580      	push	{r7, lr}
     792:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     794:	20a6      	movs	r0, #166	; 0xa6
     796:	4b01      	ldr	r3, [pc, #4]	; (79c <ssd1306_display_invert_disable+0xc>)
     798:	4798      	blx	r3
}
     79a:	bd80      	pop	{r7, pc}
     79c:	000002d9 	.word	0x000002d9

000007a0 <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
     7a0:	b590      	push	{r4, r7, lr}
     7a2:	b087      	sub	sp, #28
     7a4:	af02      	add	r7, sp, #8
#ifdef SSD1306_SERIAL_INTERFACE
	spi_flags_t spi_flags = SPI_MODE_0;
     7a6:	2300      	movs	r3, #0
     7a8:	73fb      	strb	r3, [r7, #15]
	board_spi_select_id_t spi_select_id = 0;
     7aa:	2300      	movs	r3, #0
     7ac:	60bb      	str	r3, [r7, #8]
#endif

#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     7ae:	2311      	movs	r3, #17
     7b0:	713b      	strb	r3, [r7, #4]
		.id = SSD1306_CS_PIN,
	};
	usart_spi_init(SSD1306_USART_SPI);
     7b2:	4808      	ldr	r0, [pc, #32]	; (7d4 <ssd1306_interface_init+0x34>)
     7b4:	4b08      	ldr	r3, [pc, #32]	; (7d8 <ssd1306_interface_init+0x38>)
     7b6:	4798      	blx	r3
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
     7b8:	1d3a      	adds	r2, r7, #4
     7ba:	7bfb      	ldrb	r3, [r7, #15]
     7bc:	68b9      	ldr	r1, [r7, #8]
     7be:	9100      	str	r1, [sp, #0]
     7c0:	4804      	ldr	r0, [pc, #16]	; (7d4 <ssd1306_interface_init+0x34>)
     7c2:	4611      	mov	r1, r2
     7c4:	461a      	mov	r2, r3
     7c6:	4b05      	ldr	r3, [pc, #20]	; (7dc <ssd1306_interface_init+0x3c>)
     7c8:	4c05      	ldr	r4, [pc, #20]	; (7e0 <ssd1306_interface_init+0x40>)
     7ca:	47a0      	blx	r4
			SSD1306_CLOCK_SPEED, spi_select_id);
#ifdef SAM
	spi_enable(SSD1306_SPI);
#endif
#endif
}
     7cc:	3714      	adds	r7, #20
     7ce:	46bd      	mov	sp, r7
     7d0:	bd90      	pop	{r4, r7, pc}
     7d2:	bf00      	nop
     7d4:	4002c000 	.word	0x4002c000
     7d8:	00000991 	.word	0x00000991
     7dc:	00989680 	.word	0x00989680
     7e0:	000009f1 	.word	0x000009f1

000007e4 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{	
     7e4:	b580      	push	{r7, lr}
     7e6:	af00      	add	r7, sp, #0
	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
     7e8:	4b20      	ldr	r3, [pc, #128]	; (86c <ssd1306_init+0x88>)
     7ea:	4798      	blx	r3

	// Initialize the interface
	ssd1306_interface_init();
     7ec:	4b20      	ldr	r3, [pc, #128]	; (870 <ssd1306_init+0x8c>)
     7ee:	4798      	blx	r3

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     7f0:	20a8      	movs	r0, #168	; 0xa8
     7f2:	4b20      	ldr	r3, [pc, #128]	; (874 <ssd1306_init+0x90>)
     7f4:	4798      	blx	r3
	ssd1306_write_command(0x1F);
     7f6:	201f      	movs	r0, #31
     7f8:	4b1e      	ldr	r3, [pc, #120]	; (874 <ssd1306_init+0x90>)
     7fa:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     7fc:	20d3      	movs	r0, #211	; 0xd3
     7fe:	4b1d      	ldr	r3, [pc, #116]	; (874 <ssd1306_init+0x90>)
     800:	4798      	blx	r3
	ssd1306_write_command(0x00);
     802:	2000      	movs	r0, #0
     804:	4b1b      	ldr	r3, [pc, #108]	; (874 <ssd1306_init+0x90>)
     806:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     808:	2040      	movs	r0, #64	; 0x40
     80a:	4b1a      	ldr	r3, [pc, #104]	; (874 <ssd1306_init+0x90>)
     80c:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     80e:	20a1      	movs	r0, #161	; 0xa1
     810:	4b18      	ldr	r3, [pc, #96]	; (874 <ssd1306_init+0x90>)
     812:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     814:	20c8      	movs	r0, #200	; 0xc8
     816:	4b17      	ldr	r3, [pc, #92]	; (874 <ssd1306_init+0x90>)
     818:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     81a:	20da      	movs	r0, #218	; 0xda
     81c:	4b15      	ldr	r3, [pc, #84]	; (874 <ssd1306_init+0x90>)
     81e:	4798      	blx	r3
	ssd1306_write_command(0x02);
     820:	2002      	movs	r0, #2
     822:	4b14      	ldr	r3, [pc, #80]	; (874 <ssd1306_init+0x90>)
     824:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
     826:	208f      	movs	r0, #143	; 0x8f
     828:	4b13      	ldr	r3, [pc, #76]	; (878 <ssd1306_init+0x94>)
     82a:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     82c:	20a4      	movs	r0, #164	; 0xa4
     82e:	4b11      	ldr	r3, [pc, #68]	; (874 <ssd1306_init+0x90>)
     830:	4798      	blx	r3

	ssd1306_display_invert_disable();
     832:	4b12      	ldr	r3, [pc, #72]	; (87c <ssd1306_init+0x98>)
     834:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     836:	20d5      	movs	r0, #213	; 0xd5
     838:	4b0e      	ldr	r3, [pc, #56]	; (874 <ssd1306_init+0x90>)
     83a:	4798      	blx	r3
	ssd1306_write_command(0x80);
     83c:	2080      	movs	r0, #128	; 0x80
     83e:	4b0d      	ldr	r3, [pc, #52]	; (874 <ssd1306_init+0x90>)
     840:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     842:	208d      	movs	r0, #141	; 0x8d
     844:	4b0b      	ldr	r3, [pc, #44]	; (874 <ssd1306_init+0x90>)
     846:	4798      	blx	r3
	ssd1306_write_command(0x14);
     848:	2014      	movs	r0, #20
     84a:	4b0a      	ldr	r3, [pc, #40]	; (874 <ssd1306_init+0x90>)
     84c:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     84e:	20db      	movs	r0, #219	; 0xdb
     850:	4b08      	ldr	r3, [pc, #32]	; (874 <ssd1306_init+0x90>)
     852:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     854:	2040      	movs	r0, #64	; 0x40
     856:	4b07      	ldr	r3, [pc, #28]	; (874 <ssd1306_init+0x90>)
     858:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     85a:	20d9      	movs	r0, #217	; 0xd9
     85c:	4b05      	ldr	r3, [pc, #20]	; (874 <ssd1306_init+0x90>)
     85e:	4798      	blx	r3
	ssd1306_write_command(0xF1);
     860:	20f1      	movs	r0, #241	; 0xf1
     862:	4b04      	ldr	r3, [pc, #16]	; (874 <ssd1306_init+0x90>)
     864:	4798      	blx	r3

	ssd1306_display_on();
     866:	4b06      	ldr	r3, [pc, #24]	; (880 <ssd1306_init+0x9c>)
     868:	4798      	blx	r3
}
     86a:	bd80      	pop	{r7, pc}
     86c:	000005c1 	.word	0x000005c1
     870:	000007a1 	.word	0x000007a1
     874:	000002d9 	.word	0x000002d9
     878:	00000769 	.word	0x00000769
     87c:	00000791 	.word	0x00000791
     880:	00000759 	.word	0x00000759

00000884 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
     88c:	e023      	b.n	8d6 <ssd1306_write_text+0x52>
		if (*string < 0x7F) {
     88e:	687b      	ldr	r3, [r7, #4]
     890:	781b      	ldrb	r3, [r3, #0]
     892:	2b7e      	cmp	r3, #126	; 0x7e
     894:	d81c      	bhi.n	8d0 <ssd1306_write_text+0x4c>
			char_ptr = font_table[*string - 32];
     896:	687b      	ldr	r3, [r7, #4]
     898:	781b      	ldrb	r3, [r3, #0]
     89a:	f1a3 0220 	sub.w	r2, r3, #32
     89e:	4b11      	ldr	r3, [pc, #68]	; (8e4 <ssd1306_write_text+0x60>)
     8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     8a4:	60bb      	str	r3, [r7, #8]
			for (i = 1; i <= char_ptr[0]; i++) {
     8a6:	2301      	movs	r3, #1
     8a8:	73fb      	strb	r3, [r7, #15]
     8aa:	e009      	b.n	8c0 <ssd1306_write_text+0x3c>
				ssd1306_write_data(char_ptr[i]);
     8ac:	7bfb      	ldrb	r3, [r7, #15]
     8ae:	68ba      	ldr	r2, [r7, #8]
     8b0:	4413      	add	r3, r2
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	4618      	mov	r0, r3
     8b6:	4b0c      	ldr	r3, [pc, #48]	; (8e8 <ssd1306_write_text+0x64>)
     8b8:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     8ba:	7bfb      	ldrb	r3, [r7, #15]
     8bc:	3301      	adds	r3, #1
     8be:	73fb      	strb	r3, [r7, #15]
     8c0:	68bb      	ldr	r3, [r7, #8]
     8c2:	781b      	ldrb	r3, [r3, #0]
     8c4:	7bfa      	ldrb	r2, [r7, #15]
     8c6:	429a      	cmp	r2, r3
     8c8:	d9f0      	bls.n	8ac <ssd1306_write_text+0x28>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     8ca:	2000      	movs	r0, #0
     8cc:	4b06      	ldr	r3, [pc, #24]	; (8e8 <ssd1306_write_text+0x64>)
     8ce:	4798      	blx	r3
		}
			string++;
     8d0:	687b      	ldr	r3, [r7, #4]
     8d2:	3301      	adds	r3, #1
     8d4:	607b      	str	r3, [r7, #4]
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	781b      	ldrb	r3, [r3, #0]
     8da:	2b00      	cmp	r3, #0
     8dc:	d1d7      	bne.n	88e <ssd1306_write_text+0xa>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     8de:	3710      	adds	r7, #16
     8e0:	46bd      	mov	sp, r7
     8e2:	bd80      	pop	{r7, pc}
     8e4:	20000090 	.word	0x20000090
     8e8:	000003f1 	.word	0x000003f1

000008ec <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
     8ec:	b480      	push	{r7}
     8ee:	b083      	sub	sp, #12
     8f0:	af00      	add	r7, sp, #0
     8f2:	4603      	mov	r3, r0
     8f4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	2b06      	cmp	r3, #6
     8fa:	d821      	bhi.n	940 <osc_get_rate+0x54>
     8fc:	a201      	add	r2, pc, #4	; (adr r2, 904 <osc_get_rate+0x18>)
     8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     902:	bf00      	nop
     904:	00000921 	.word	0x00000921
     908:	00000925 	.word	0x00000925
     90c:	0000092b 	.word	0x0000092b
     910:	00000931 	.word	0x00000931
     914:	00000935 	.word	0x00000935
     918:	00000939 	.word	0x00000939
     91c:	0000093d 	.word	0x0000093d
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
     920:	4b0b      	ldr	r3, [pc, #44]	; (950 <osc_get_rate+0x64>)
     922:	e00e      	b.n	942 <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
     924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     928:	e00b      	b.n	942 <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
     92a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     92e:	e008      	b.n	942 <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
     930:	4b08      	ldr	r3, [pc, #32]	; (954 <osc_get_rate+0x68>)
     932:	e006      	b.n	942 <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
     934:	4b08      	ldr	r3, [pc, #32]	; (958 <osc_get_rate+0x6c>)
     936:	e004      	b.n	942 <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
     938:	4b08      	ldr	r3, [pc, #32]	; (95c <osc_get_rate+0x70>)
     93a:	e002      	b.n	942 <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <osc_get_rate+0x74>)
     93e:	e000      	b.n	942 <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
     940:	2300      	movs	r3, #0
	}
}
     942:	4618      	mov	r0, r3
     944:	370c      	adds	r7, #12
     946:	46bd      	mov	sp, r7
     948:	f85d 7b04 	ldr.w	r7, [sp], #4
     94c:	4770      	bx	lr
     94e:	bf00      	nop
     950:	00b71b00 	.word	0x00b71b00
     954:	04c4b400 	.word	0x04c4b400
     958:	003d0900 	.word	0x003d0900
     95c:	000f4240 	.word	0x000f4240
     960:	0001c138 	.word	0x0001c138

00000964 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
     964:	b580      	push	{r7, lr}
     966:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
     968:	2000      	movs	r0, #0
     96a:	4b03      	ldr	r3, [pc, #12]	; (978 <sysclk_get_main_hz+0x14>)
     96c:	4798      	blx	r3
     96e:	4603      	mov	r3, r0
     970:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
     972:	4618      	mov	r0, r3
     974:	bd80      	pop	{r7, pc}
     976:	bf00      	nop
     978:	000008ed 	.word	0x000008ed

0000097c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     97c:	b580      	push	{r7, lr}
     97e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
     980:	4b02      	ldr	r3, [pc, #8]	; (98c <sysclk_get_cpu_hz+0x10>)
     982:	4798      	blx	r3
     984:	4603      	mov	r3, r0
}
     986:	4618      	mov	r0, r3
     988:	bd80      	pop	{r7, pc}
     98a:	bf00      	nop
     98c:	00000965 	.word	0x00000965

00000990 <usart_spi_init>:
 *
 * \param p_usart Pointer to Base address of the USART instance.
 *
 */
void usart_spi_init(Usart *p_usart)
{
     990:	b580      	push	{r7, lr}
     992:	b084      	sub	sp, #16
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
	uint8_t uc_id;

#ifdef USART0
	if (p_usart == USART0) {
     998:	687a      	ldr	r2, [r7, #4]
     99a:	4b10      	ldr	r3, [pc, #64]	; (9dc <usart_spi_init+0x4c>)
     99c:	429a      	cmp	r2, r3
     99e:	d102      	bne.n	9a6 <usart_spi_init+0x16>
		uc_id = ID_USART0;
     9a0:	2308      	movs	r3, #8
     9a2:	73fb      	strb	r3, [r7, #15]
     9a4:	e013      	b.n	9ce <usart_spi_init+0x3e>
	}
#endif

#ifdef USART1
	else if(p_usart == USART1) {
     9a6:	687a      	ldr	r2, [r7, #4]
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <usart_spi_init+0x50>)
     9aa:	429a      	cmp	r2, r3
     9ac:	d102      	bne.n	9b4 <usart_spi_init+0x24>
		uc_id = ID_USART1;
     9ae:	2309      	movs	r3, #9
     9b0:	73fb      	strb	r3, [r7, #15]
     9b2:	e00c      	b.n	9ce <usart_spi_init+0x3e>
	}
#endif

#ifdef USART2
	else if(p_usart == USART2) {
     9b4:	687a      	ldr	r2, [r7, #4]
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <usart_spi_init+0x54>)
     9b8:	429a      	cmp	r2, r3
     9ba:	d102      	bne.n	9c2 <usart_spi_init+0x32>
		uc_id = ID_USART2;
     9bc:	230a      	movs	r3, #10
     9be:	73fb      	strb	r3, [r7, #15]
     9c0:	e005      	b.n	9ce <usart_spi_init+0x3e>
	}
#endif

#ifdef USART3
	else if(p_usart == USART3) {
     9c2:	687a      	ldr	r2, [r7, #4]
     9c4:	4b08      	ldr	r3, [pc, #32]	; (9e8 <usart_spi_init+0x58>)
     9c6:	429a      	cmp	r2, r3
     9c8:	d101      	bne.n	9ce <usart_spi_init+0x3e>
		uc_id = ID_USART3;
     9ca:	230b      	movs	r3, #11
     9cc:	73fb      	strb	r3, [r7, #15]
	}
#endif

#if SAM4L
	sysclk_enable_peripheral_clock(p_usart);
     9ce:	6878      	ldr	r0, [r7, #4]
     9d0:	4b06      	ldr	r3, [pc, #24]	; (9ec <usart_spi_init+0x5c>)
     9d2:	4798      	blx	r3
#else
	sysclk_enable_peripheral_clock(uc_id);
#endif
}
     9d4:	3710      	adds	r7, #16
     9d6:	46bd      	mov	sp, r7
     9d8:	bd80      	pop	{r7, pc}
     9da:	bf00      	nop
     9dc:	40024000 	.word	0x40024000
     9e0:	40028000 	.word	0x40028000
     9e4:	4002c000 	.word	0x4002c000
     9e8:	40030000 	.word	0x40030000
     9ec:	00004899 	.word	0x00004899

000009f0 <usart_spi_setup_device>:
 * \param sel_id    Board specific select id.
 */
void usart_spi_setup_device(Usart *p_usart, struct usart_spi_device *device, 
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b088      	sub	sp, #32
     9f4:	af00      	add	r7, sp, #0
     9f6:	60f8      	str	r0, [r7, #12]
     9f8:	60b9      	str	r1, [r7, #8]
     9fa:	603b      	str	r3, [r7, #0]
     9fc:	4613      	mov	r3, r2
     9fe:	71fb      	strb	r3, [r7, #7]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	UNUSED(sel_id);

	/* Basic usart SPI configuration. */
	opt.baudrate = baud_rate;
     a00:	683b      	ldr	r3, [r7, #0]
     a02:	613b      	str	r3, [r7, #16]
	opt.char_length = US_MR_CHRL_8_BIT;
     a04:	23c0      	movs	r3, #192	; 0xc0
     a06:	617b      	str	r3, [r7, #20]
	opt.spi_mode = flags;
     a08:	79fb      	ldrb	r3, [r7, #7]
     a0a:	61bb      	str	r3, [r7, #24]
	opt.channel_mode = US_MR_CHMODE_NORMAL;
     a0c:	2300      	movs	r3, #0
     a0e:	61fb      	str	r3, [r7, #28]
	
	/* Initialize the USART module as SPI master. */
	usart_init_spi_master(p_usart, &opt, sysclk_get_cpu_hz());
     a10:	4b09      	ldr	r3, [pc, #36]	; (a38 <usart_spi_setup_device+0x48>)
     a12:	4798      	blx	r3
     a14:	4603      	mov	r3, r0
     a16:	f107 0210 	add.w	r2, r7, #16
     a1a:	68f8      	ldr	r0, [r7, #12]
     a1c:	4611      	mov	r1, r2
     a1e:	461a      	mov	r2, r3
     a20:	4b06      	ldr	r3, [pc, #24]	; (a3c <usart_spi_setup_device+0x4c>)
     a22:	4798      	blx	r3

	usart_enable_rx(p_usart);
     a24:	68f8      	ldr	r0, [r7, #12]
     a26:	4b06      	ldr	r3, [pc, #24]	; (a40 <usart_spi_setup_device+0x50>)
     a28:	4798      	blx	r3
	usart_enable_tx(p_usart);
     a2a:	68f8      	ldr	r0, [r7, #12]
     a2c:	4b05      	ldr	r3, [pc, #20]	; (a44 <usart_spi_setup_device+0x54>)
     a2e:	4798      	blx	r3
}
     a30:	3720      	adds	r7, #32
     a32:	46bd      	mov	sp, r7
     a34:	bd80      	pop	{r7, pc}
     a36:	bf00      	nop
     a38:	0000097d 	.word	0x0000097d
     a3c:	00001775 	.word	0x00001775
     a40:	000018b5 	.word	0x000018b5
     a44:	00001885 	.word	0x00001885

00000a48 <usart_spi_write_single>:
 * \param p_usart Base address of the USART instance.
 * \param data    The data to be sent out. 
 *
 */
void usart_spi_write_single(Usart *p_usart, uint8_t data)
{
     a48:	b580      	push	{r7, lr}
     a4a:	b082      	sub	sp, #8
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
     a50:	460b      	mov	r3, r1
     a52:	70fb      	strb	r3, [r7, #3]
	usart_putchar(p_usart, data);
     a54:	78fb      	ldrb	r3, [r7, #3]
     a56:	6878      	ldr	r0, [r7, #4]
     a58:	4619      	mov	r1, r3
     a5a:	4b02      	ldr	r3, [pc, #8]	; (a64 <usart_spi_write_single+0x1c>)
     a5c:	4798      	blx	r3
}
     a5e:	3708      	adds	r7, #8
     a60:	46bd      	mov	sp, r7
     a62:	bd80      	pop	{r7, pc}
     a64:	000019c1 	.word	0x000019c1

00000a68 <usart_spi_select_device>:
 * \param p_usart  Base address of the USART instance.
 * \param device   SPI device.
 *
 */
void usart_spi_select_device(Usart *p_usart, struct usart_spi_device *device)
{
     a68:	b580      	push	{r7, lr}
     a6a:	b082      	sub	sp, #8
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]
     a70:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	
	usart_spi_force_chip_select(p_usart);
     a72:	6878      	ldr	r0, [r7, #4]
     a74:	4b02      	ldr	r3, [pc, #8]	; (a80 <usart_spi_select_device+0x18>)
     a76:	4798      	blx	r3
}
     a78:	3708      	adds	r7, #8
     a7a:	46bd      	mov	sp, r7
     a7c:	bd80      	pop	{r7, pc}
     a7e:	bf00      	nop
     a80:	00001955 	.word	0x00001955

00000a84 <usart_spi_deselect_device>:
 *
 * \param p_usart Base address of the USART instance.
 * \param device  SPI device.
 */
void usart_spi_deselect_device(Usart *p_usart, struct usart_spi_device *device)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
     a8c:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	
	usart_spi_release_chip_select(p_usart);
     a8e:	6878      	ldr	r0, [r7, #4]
     a90:	4b02      	ldr	r3, [pc, #8]	; (a9c <usart_spi_deselect_device+0x18>)
     a92:	4798      	blx	r3
}
     a94:	3708      	adds	r7, #8
     a96:	46bd      	mov	sp, r7
     a98:	bd80      	pop	{r7, pc}
     a9a:	bf00      	nop
     a9c:	00001971 	.word	0x00001971

00000aa0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b086      	sub	sp, #24
     aa4:	af00      	add	r7, sp, #0
     aa6:	60f8      	str	r0, [r7, #12]
     aa8:	60b9      	str	r1, [r7, #8]
     aaa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     aac:	2300      	movs	r3, #0
     aae:	617b      	str	r3, [r7, #20]

	if (file != 0) {
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d002      	beq.n	abc <_read+0x1c>
		return -1;
     ab6:	f04f 33ff 	mov.w	r3, #4294967295
     aba:	e014      	b.n	ae6 <_read+0x46>
	}

	for (; len > 0; --len) {
     abc:	e00f      	b.n	ade <_read+0x3e>
		ptr_get(stdio_base, ptr);
     abe:	4b0c      	ldr	r3, [pc, #48]	; (af0 <_read+0x50>)
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	4a0c      	ldr	r2, [pc, #48]	; (af4 <_read+0x54>)
     ac4:	6812      	ldr	r2, [r2, #0]
     ac6:	4610      	mov	r0, r2
     ac8:	68b9      	ldr	r1, [r7, #8]
     aca:	4798      	blx	r3
		ptr++;
     acc:	68bb      	ldr	r3, [r7, #8]
     ace:	3301      	adds	r3, #1
     ad0:	60bb      	str	r3, [r7, #8]
		nChars++;
     ad2:	697b      	ldr	r3, [r7, #20]
     ad4:	3301      	adds	r3, #1
     ad6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	3b01      	subs	r3, #1
     adc:	607b      	str	r3, [r7, #4]
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	2b00      	cmp	r3, #0
     ae2:	dcec      	bgt.n	abe <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     ae4:	697b      	ldr	r3, [r7, #20]
}
     ae6:	4618      	mov	r0, r3
     ae8:	3718      	adds	r7, #24
     aea:	46bd      	mov	sp, r7
     aec:	bd80      	pop	{r7, pc}
     aee:	bf00      	nop
     af0:	20000e0c 	.word	0x20000e0c
     af4:	20000e14 	.word	0x20000e14

00000af8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     af8:	b580      	push	{r7, lr}
     afa:	b086      	sub	sp, #24
     afc:	af00      	add	r7, sp, #0
     afe:	60f8      	str	r0, [r7, #12]
     b00:	60b9      	str	r1, [r7, #8]
     b02:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     b04:	2300      	movs	r3, #0
     b06:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	2b01      	cmp	r3, #1
     b0c:	d008      	beq.n	b20 <_write+0x28>
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	2b02      	cmp	r3, #2
     b12:	d005      	beq.n	b20 <_write+0x28>
     b14:	68fb      	ldr	r3, [r7, #12]
     b16:	2b03      	cmp	r3, #3
     b18:	d002      	beq.n	b20 <_write+0x28>
		return -1;
     b1a:	f04f 33ff 	mov.w	r3, #4294967295
     b1e:	e01b      	b.n	b58 <_write+0x60>
	}

	for (; len != 0; --len) {
     b20:	e016      	b.n	b50 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
     b22:	4b0f      	ldr	r3, [pc, #60]	; (b60 <_write+0x68>)
     b24:	681a      	ldr	r2, [r3, #0]
     b26:	4b0f      	ldr	r3, [pc, #60]	; (b64 <_write+0x6c>)
     b28:	6819      	ldr	r1, [r3, #0]
     b2a:	68bb      	ldr	r3, [r7, #8]
     b2c:	1c58      	adds	r0, r3, #1
     b2e:	60b8      	str	r0, [r7, #8]
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	4608      	mov	r0, r1
     b34:	4619      	mov	r1, r3
     b36:	4790      	blx	r2
     b38:	4603      	mov	r3, r0
     b3a:	2b00      	cmp	r3, #0
     b3c:	da02      	bge.n	b44 <_write+0x4c>
			return -1;
     b3e:	f04f 33ff 	mov.w	r3, #4294967295
     b42:	e009      	b.n	b58 <_write+0x60>
		}
		++nChars;
     b44:	697b      	ldr	r3, [r7, #20]
     b46:	3301      	adds	r3, #1
     b48:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	3b01      	subs	r3, #1
     b4e:	607b      	str	r3, [r7, #4]
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	2b00      	cmp	r3, #0
     b54:	d1e5      	bne.n	b22 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     b56:	697b      	ldr	r3, [r7, #20]
}
     b58:	4618      	mov	r0, r3
     b5a:	3718      	adds	r7, #24
     b5c:	46bd      	mov	sp, r7
     b5e:	bd80      	pop	{r7, pc}
     b60:	20000e10 	.word	0x20000e10
     b64:	20000e14 	.word	0x20000e14

00000b68 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	4603      	mov	r3, r0
     b70:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     b72:	4b08      	ldr	r3, [pc, #32]	; (b94 <NVIC_EnableIRQ+0x2c>)
     b74:	f997 2007 	ldrsb.w	r2, [r7, #7]
     b78:	0952      	lsrs	r2, r2, #5
     b7a:	79f9      	ldrb	r1, [r7, #7]
     b7c:	f001 011f 	and.w	r1, r1, #31
     b80:	2001      	movs	r0, #1
     b82:	fa00 f101 	lsl.w	r1, r0, r1
     b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     b8a:	370c      	adds	r7, #12
     b8c:	46bd      	mov	sp, r7
     b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
     b92:	4770      	bx	lr
     b94:	e000e100 	.word	0xe000e100

00000b98 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     b98:	b480      	push	{r7}
     b9a:	b083      	sub	sp, #12
     b9c:	af00      	add	r7, sp, #0
     b9e:	4603      	mov	r3, r0
     ba0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     ba2:	4b09      	ldr	r3, [pc, #36]	; (bc8 <NVIC_ClearPendingIRQ+0x30>)
     ba4:	f997 2007 	ldrsb.w	r2, [r7, #7]
     ba8:	0952      	lsrs	r2, r2, #5
     baa:	79f9      	ldrb	r1, [r7, #7]
     bac:	f001 011f 	and.w	r1, r1, #31
     bb0:	2001      	movs	r0, #1
     bb2:	fa00 f101 	lsl.w	r1, r0, r1
     bb6:	3260      	adds	r2, #96	; 0x60
     bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     bbc:	370c      	adds	r7, #12
     bbe:	46bd      	mov	sp, r7
     bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop
     bc8:	e000e100 	.word	0xe000e100

00000bcc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     bcc:	b480      	push	{r7}
     bce:	b083      	sub	sp, #12
     bd0:	af00      	add	r7, sp, #0
     bd2:	4603      	mov	r3, r0
     bd4:	6039      	str	r1, [r7, #0]
     bd6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
     bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
     bdc:	2b00      	cmp	r3, #0
     bde:	da0b      	bge.n	bf8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     be0:	490d      	ldr	r1, [pc, #52]	; (c18 <NVIC_SetPriority+0x4c>)
     be2:	79fb      	ldrb	r3, [r7, #7]
     be4:	f003 030f 	and.w	r3, r3, #15
     be8:	3b04      	subs	r3, #4
     bea:	683a      	ldr	r2, [r7, #0]
     bec:	b2d2      	uxtb	r2, r2
     bee:	0112      	lsls	r2, r2, #4
     bf0:	b2d2      	uxtb	r2, r2
     bf2:	440b      	add	r3, r1
     bf4:	761a      	strb	r2, [r3, #24]
     bf6:	e009      	b.n	c0c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     bf8:	4908      	ldr	r1, [pc, #32]	; (c1c <NVIC_SetPriority+0x50>)
     bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
     bfe:	683a      	ldr	r2, [r7, #0]
     c00:	b2d2      	uxtb	r2, r2
     c02:	0112      	lsls	r2, r2, #4
     c04:	b2d2      	uxtb	r2, r2
     c06:	440b      	add	r3, r1
     c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	f85d 7b04 	ldr.w	r7, [sp], #4
     c14:	4770      	bx	lr
     c16:	bf00      	nop
     c18:	e000ed00 	.word	0xe000ed00
     c1c:	e000e100 	.word	0xe000e100

00000c20 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     c20:	b480      	push	{r7}
     c22:	b083      	sub	sp, #12
     c24:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c26:	f3ef 8310 	mrs	r3, PRIMASK
     c2a:	603b      	str	r3, [r7, #0]
  return(result);
     c2c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
     c2e:	2b00      	cmp	r3, #0
     c30:	bf14      	ite	ne
     c32:	2300      	movne	r3, #0
     c34:	2301      	moveq	r3, #1
     c36:	b2db      	uxtb	r3, r3
     c38:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     c3a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <cpu_irq_save+0x34>)
     c42:	2200      	movs	r2, #0
     c44:	701a      	strb	r2, [r3, #0]
	return flags;
     c46:	687b      	ldr	r3, [r7, #4]
}
     c48:	4618      	mov	r0, r3
     c4a:	370c      	adds	r7, #12
     c4c:	46bd      	mov	sp, r7
     c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
     c52:	4770      	bx	lr
     c54:	2000048c 	.word	0x2000048c

00000c58 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     c58:	b480      	push	{r7}
     c5a:	b083      	sub	sp, #12
     c5c:	af00      	add	r7, sp, #0
     c5e:	6078      	str	r0, [r7, #4]
	return (flags);
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	2b00      	cmp	r3, #0
     c64:	bf0c      	ite	eq
     c66:	2300      	moveq	r3, #0
     c68:	2301      	movne	r3, #1
     c6a:	b2db      	uxtb	r3, r3
}
     c6c:	4618      	mov	r0, r3
     c6e:	370c      	adds	r7, #12
     c70:	46bd      	mov	sp, r7
     c72:	f85d 7b04 	ldr.w	r7, [sp], #4
     c76:	4770      	bx	lr

00000c78 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     c78:	b580      	push	{r7, lr}
     c7a:	b082      	sub	sp, #8
     c7c:	af00      	add	r7, sp, #0
     c7e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     c80:	6878      	ldr	r0, [r7, #4]
     c82:	4b07      	ldr	r3, [pc, #28]	; (ca0 <cpu_irq_restore+0x28>)
     c84:	4798      	blx	r3
     c86:	4603      	mov	r3, r0
     c88:	2b00      	cmp	r3, #0
     c8a:	d005      	beq.n	c98 <cpu_irq_restore+0x20>
		cpu_irq_enable();
     c8c:	4b05      	ldr	r3, [pc, #20]	; (ca4 <cpu_irq_restore+0x2c>)
     c8e:	2201      	movs	r2, #1
     c90:	701a      	strb	r2, [r3, #0]
     c92:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c96:	b662      	cpsie	i
}
     c98:	3708      	adds	r7, #8
     c9a:	46bd      	mov	sp, r7
     c9c:	bd80      	pop	{r7, pc}
     c9e:	bf00      	nop
     ca0:	00000c59 	.word	0x00000c59
     ca4:	2000048c 	.word	0x2000048c

00000ca8 <ast_is_clkbusy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST clock is busy, else it will return 0.
 */
static inline bool ast_is_clkbusy(Ast *ast)
{
     ca8:	b480      	push	{r7}
     caa:	b083      	sub	sp, #12
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_CLKBUSY) != 0;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	689b      	ldr	r3, [r3, #8]
     cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     cb8:	2b00      	cmp	r3, #0
     cba:	bf0c      	ite	eq
     cbc:	2300      	moveq	r3, #0
     cbe:	2301      	movne	r3, #1
     cc0:	b2db      	uxtb	r3, r3
}
     cc2:	4618      	mov	r0, r3
     cc4:	370c      	adds	r7, #12
     cc6:	46bd      	mov	sp, r7
     cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ccc:	4770      	bx	lr
     cce:	bf00      	nop

00000cd0 <ast_is_busy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST is busy, else it will return 0.
 */
static inline bool ast_is_busy(Ast *ast)
{
     cd0:	b480      	push	{r7}
     cd2:	b083      	sub	sp, #12
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	689b      	ldr	r3, [r3, #8]
     cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
     ce0:	2b00      	cmp	r3, #0
     ce2:	bf0c      	ite	eq
     ce4:	2300      	moveq	r3, #0
     ce6:	2301      	movne	r3, #1
     ce8:	b2db      	uxtb	r3, r3
}
     cea:	4618      	mov	r0, r3
     cec:	370c      	adds	r7, #12
     cee:	46bd      	mov	sp, r7
     cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	b084      	sub	sp, #16
     cfc:	af00      	add	r7, sp, #0
     cfe:	4603      	mov	r3, r0
     d00:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
     d02:	4b08      	ldr	r3, [pc, #32]	; (d24 <sleepmgr_lock_mode+0x2c>)
     d04:	4798      	blx	r3
     d06:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
     d08:	79fb      	ldrb	r3, [r7, #7]
     d0a:	4a07      	ldr	r2, [pc, #28]	; (d28 <sleepmgr_lock_mode+0x30>)
     d0c:	5cd2      	ldrb	r2, [r2, r3]
     d0e:	3201      	adds	r2, #1
     d10:	b2d1      	uxtb	r1, r2
     d12:	4a05      	ldr	r2, [pc, #20]	; (d28 <sleepmgr_lock_mode+0x30>)
     d14:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
     d16:	68f8      	ldr	r0, [r7, #12]
     d18:	4b04      	ldr	r3, [pc, #16]	; (d2c <sleepmgr_lock_mode+0x34>)
     d1a:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     d1c:	3710      	adds	r7, #16
     d1e:	46bd      	mov	sp, r7
     d20:	bd80      	pop	{r7, pc}
     d22:	bf00      	nop
     d24:	00000c21 	.word	0x00000c21
     d28:	20000e04 	.word	0x20000e04
     d2c:	00000c79 	.word	0x00000c79

00000d30 <ast_enable>:
 * \brief Enable the AST.
 *
 * \param ast Base address of the AST.
 */
void ast_enable(Ast *ast)
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
	sysclk_enable_peripheral_clock(ast);
     d38:	6878      	ldr	r0, [r7, #4]
     d3a:	4b04      	ldr	r3, [pc, #16]	; (d4c <ast_enable+0x1c>)
     d3c:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
     d3e:	2007      	movs	r0, #7
     d40:	4b03      	ldr	r3, [pc, #12]	; (d50 <ast_enable+0x20>)
     d42:	4798      	blx	r3
}
     d44:	3708      	adds	r7, #8
     d46:	46bd      	mov	sp, r7
     d48:	bd80      	pop	{r7, pc}
     d4a:	bf00      	nop
     d4c:	00004899 	.word	0x00004899
     d50:	00000cf9 	.word	0x00000cf9

00000d54 <ast_set_config>:
 * \param ast_conf The AST configuration
 *
 * \return 1 if the initialization succeeds otherwise it will return 0.
 */
uint32_t ast_set_config(Ast *ast, struct ast_config *ast_conf)
{
     d54:	b580      	push	{r7, lr}
     d56:	b084      	sub	sp, #16
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
     d5c:	6039      	str	r1, [r7, #0]
	uint32_t time_out = AST_POLL_TIMEOUT;
     d5e:	f242 7310 	movw	r3, #10000	; 0x2710
     d62:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
     d64:	e007      	b.n	d76 <ast_set_config+0x22>
		if (--time_out == 0) {
     d66:	68fb      	ldr	r3, [r7, #12]
     d68:	3b01      	subs	r3, #1
     d6a:	60fb      	str	r3, [r7, #12]
     d6c:	68fb      	ldr	r3, [r7, #12]
     d6e:	2b00      	cmp	r3, #0
     d70:	d101      	bne.n	d76 <ast_set_config+0x22>
			return 0;
     d72:	2300      	movs	r3, #0
     d74:	e07b      	b.n	e6e <ast_set_config+0x11a>
 * \return 1 if the initialization succeeds otherwise it will return 0.
 */
uint32_t ast_set_config(Ast *ast, struct ast_config *ast_conf)
{
	uint32_t time_out = AST_POLL_TIMEOUT;
	while (ast_is_clkbusy(ast)) {
     d76:	6878      	ldr	r0, [r7, #4]
     d78:	4b3f      	ldr	r3, [pc, #252]	; (e78 <ast_set_config+0x124>)
     d7a:	4798      	blx	r3
     d7c:	4603      	mov	r3, r0
     d7e:	2b00      	cmp	r3, #0
     d80:	d1f1      	bne.n	d66 <ast_set_config+0x12>
		if (--time_out == 0) {
			return 0;
		}
	}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
     d82:	683b      	ldr	r3, [r7, #0]
     d84:	785b      	ldrb	r3, [r3, #1]
     d86:	021b      	lsls	r3, r3, #8
     d88:	461a      	mov	r2, r3
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	641a      	str	r2, [r3, #64]	; 0x40
	time_out = AST_POLL_TIMEOUT;
     d8e:	f242 7310 	movw	r3, #10000	; 0x2710
     d92:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
     d94:	e007      	b.n	da6 <ast_set_config+0x52>
		if (--time_out == 0) {
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	3b01      	subs	r3, #1
     d9a:	60fb      	str	r3, [r7, #12]
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	2b00      	cmp	r3, #0
     da0:	d101      	bne.n	da6 <ast_set_config+0x52>
			return 0;
     da2:	2300      	movs	r3, #0
     da4:	e063      	b.n	e6e <ast_set_config+0x11a>
			return 0;
		}
	}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
	time_out = AST_POLL_TIMEOUT;
	while (ast_is_clkbusy(ast)) {
     da6:	6878      	ldr	r0, [r7, #4]
     da8:	4b33      	ldr	r3, [pc, #204]	; (e78 <ast_set_config+0x124>)
     daa:	4798      	blx	r3
     dac:	4603      	mov	r3, r0
     dae:	2b00      	cmp	r3, #0
     db0:	d1f1      	bne.n	d96 <ast_set_config+0x42>
		if (--time_out == 0) {
			return 0;
		}
	}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     db6:	f043 0201 	orr.w	r2, r3, #1
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	641a      	str	r2, [r3, #64]	; 0x40
	time_out = AST_POLL_TIMEOUT;
     dbe:	f242 7310 	movw	r3, #10000	; 0x2710
     dc2:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
     dc4:	e007      	b.n	dd6 <ast_set_config+0x82>
		if (--time_out == 0) {
     dc6:	68fb      	ldr	r3, [r7, #12]
     dc8:	3b01      	subs	r3, #1
     dca:	60fb      	str	r3, [r7, #12]
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	2b00      	cmp	r3, #0
     dd0:	d101      	bne.n	dd6 <ast_set_config+0x82>
			return 0;
     dd2:	2300      	movs	r3, #0
     dd4:	e04b      	b.n	e6e <ast_set_config+0x11a>
			return 0;
		}
	}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
	time_out = AST_POLL_TIMEOUT;
	while (ast_is_clkbusy(ast)) {
     dd6:	6878      	ldr	r0, [r7, #4]
     dd8:	4b27      	ldr	r3, [pc, #156]	; (e78 <ast_set_config+0x124>)
     dda:	4798      	blx	r3
     ddc:	4603      	mov	r3, r0
     dde:	2b00      	cmp	r3, #0
     de0:	d1f1      	bne.n	dc6 <ast_set_config+0x72>
		if (--time_out == 0) {
			return 0;
		}
	}
	/* Set the new AST configuration */
	if (ast_conf->mode == AST_CALENDAR_MODE) {
     de2:	683b      	ldr	r3, [r7, #0]
     de4:	781b      	ldrb	r3, [r3, #0]
     de6:	2b01      	cmp	r3, #1
     de8:	d106      	bne.n	df8 <ast_set_config+0xa4>
		ast->AST_CR = AST_CR_CAL | ast_conf->psel << AST_CR_PSEL_Pos;
     dea:	683b      	ldr	r3, [r7, #0]
     dec:	789b      	ldrb	r3, [r3, #2]
     dee:	041b      	lsls	r3, r3, #16
     df0:	f043 0204 	orr.w	r2, r3, #4
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	601a      	str	r2, [r3, #0]
	}

	if (ast_conf->mode == AST_COUNTER_MODE) {
     df8:	683b      	ldr	r3, [r7, #0]
     dfa:	781b      	ldrb	r3, [r3, #0]
     dfc:	2b00      	cmp	r3, #0
     dfe:	d106      	bne.n	e0e <ast_set_config+0xba>
		ast->AST_CR = ast_conf->psel << AST_CR_PSEL_Pos;
     e00:	683b      	ldr	r3, [r7, #0]
     e02:	789b      	ldrb	r3, [r3, #2]
     e04:	041b      	lsls	r3, r3, #16
     e06:	461a      	mov	r2, r3
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	601a      	str	r2, [r3, #0]
	}

	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     e0c:	e7ff      	b.n	e0e <ast_set_config+0xba>
     e0e:	bf00      	nop
     e10:	6878      	ldr	r0, [r7, #4]
     e12:	4b1a      	ldr	r3, [pc, #104]	; (e7c <ast_set_config+0x128>)
     e14:	4798      	blx	r3
     e16:	4603      	mov	r3, r0
     e18:	2b00      	cmp	r3, #0
     e1a:	d1f9      	bne.n	e10 <ast_set_config+0xbc>
	}

	/* Set the calendar */
	if (ast_conf->mode == AST_CALENDAR_MODE) {
     e1c:	683b      	ldr	r3, [r7, #0]
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	2b01      	cmp	r3, #1
     e22:	d104      	bne.n	e2e <ast_set_config+0xda>
		ast_write_calendar_value(ast, ast_conf->calendar);
     e24:	683b      	ldr	r3, [r7, #0]
     e26:	6878      	ldr	r0, [r7, #4]
     e28:	6899      	ldr	r1, [r3, #8]
     e2a:	4b15      	ldr	r3, [pc, #84]	; (e80 <ast_set_config+0x12c>)
     e2c:	4798      	blx	r3
	}

	if (ast_conf->mode == AST_COUNTER_MODE) {
     e2e:	683b      	ldr	r3, [r7, #0]
     e30:	781b      	ldrb	r3, [r3, #0]
     e32:	2b00      	cmp	r3, #0
     e34:	d106      	bne.n	e44 <ast_set_config+0xf0>
		ast_write_counter_value(ast, ast_conf->counter);
     e36:	683b      	ldr	r3, [r7, #0]
     e38:	685b      	ldr	r3, [r3, #4]
     e3a:	6878      	ldr	r0, [r7, #4]
     e3c:	4619      	mov	r1, r3
     e3e:	4b11      	ldr	r3, [pc, #68]	; (e84 <ast_set_config+0x130>)
     e40:	4798      	blx	r3
	}

	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     e42:	e7ff      	b.n	e44 <ast_set_config+0xf0>
     e44:	bf00      	nop
     e46:	6878      	ldr	r0, [r7, #4]
     e48:	4b0c      	ldr	r3, [pc, #48]	; (e7c <ast_set_config+0x128>)
     e4a:	4798      	blx	r3
     e4c:	4603      	mov	r3, r0
     e4e:	2b00      	cmp	r3, #0
     e50:	d1f9      	bne.n	e46 <ast_set_config+0xf2>
	}
	/* Enable the AST */
	ast->AST_CR |= AST_CR_EN;
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	681b      	ldr	r3, [r3, #0]
     e56:	f043 0201 	orr.w	r2, r3, #1
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	601a      	str	r2, [r3, #0]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     e5e:	bf00      	nop
     e60:	6878      	ldr	r0, [r7, #4]
     e62:	4b06      	ldr	r3, [pc, #24]	; (e7c <ast_set_config+0x128>)
     e64:	4798      	blx	r3
     e66:	4603      	mov	r3, r0
     e68:	2b00      	cmp	r3, #0
     e6a:	d1f9      	bne.n	e60 <ast_set_config+0x10c>
	}

	return 1;
     e6c:	2301      	movs	r3, #1
}
     e6e:	4618      	mov	r0, r3
     e70:	3710      	adds	r7, #16
     e72:	46bd      	mov	sp, r7
     e74:	bd80      	pop	{r7, pc}
     e76:	bf00      	nop
     e78:	00000ca9 	.word	0x00000ca9
     e7c:	00000cd1 	.word	0x00000cd1
     e80:	00000e89 	.word	0x00000e89
     e84:	00000ec1 	.word	0x00000ec1

00000e88 <ast_write_calendar_value>:
 * \param ast          Base address of the AST.
 * \param ast_calendar Startup date
 */
void ast_write_calendar_value(Ast *ast,
		struct ast_calendar calendar)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
     e90:	6039      	str	r1, [r7, #0]
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
     e92:	bf00      	nop
     e94:	6878      	ldr	r0, [r7, #4]
     e96:	4b09      	ldr	r3, [pc, #36]	; (ebc <ast_write_calendar_value+0x34>)
     e98:	4798      	blx	r3
     e9a:	4603      	mov	r3, r0
     e9c:	2b00      	cmp	r3, #0
     e9e:	d1f9      	bne.n	e94 <ast_write_calendar_value+0xc>
	}
	/* Set the new val value */
	ast->AST_CALV = calendar.field;
     ea0:	683a      	ldr	r2, [r7, #0]
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	655a      	str	r2, [r3, #84]	; 0x54
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     ea6:	bf00      	nop
     ea8:	6878      	ldr	r0, [r7, #4]
     eaa:	4b04      	ldr	r3, [pc, #16]	; (ebc <ast_write_calendar_value+0x34>)
     eac:	4798      	blx	r3
     eae:	4603      	mov	r3, r0
     eb0:	2b00      	cmp	r3, #0
     eb2:	d1f9      	bne.n	ea8 <ast_write_calendar_value+0x20>
	}
}
     eb4:	3708      	adds	r7, #8
     eb6:	46bd      	mov	sp, r7
     eb8:	bd80      	pop	{r7, pc}
     eba:	bf00      	nop
     ebc:	00000cd1 	.word	0x00000cd1

00000ec0 <ast_write_counter_value>:
 * \param ast         Base address of the AST.
 * \param ast_counter Startup counter value
 */
void ast_write_counter_value(Ast *ast,
		uint32_t ast_counter)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b082      	sub	sp, #8
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
     ec8:	6039      	str	r1, [r7, #0]
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
     eca:	bf00      	nop
     ecc:	6878      	ldr	r0, [r7, #4]
     ece:	4b09      	ldr	r3, [pc, #36]	; (ef4 <ast_write_counter_value+0x34>)
     ed0:	4798      	blx	r3
     ed2:	4603      	mov	r3, r0
     ed4:	2b00      	cmp	r3, #0
     ed6:	d1f9      	bne.n	ecc <ast_write_counter_value+0xc>
	}
	/* Set the new val value */
	ast->AST_CV = ast_counter;
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	683a      	ldr	r2, [r7, #0]
     edc:	605a      	str	r2, [r3, #4]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     ede:	bf00      	nop
     ee0:	6878      	ldr	r0, [r7, #4]
     ee2:	4b04      	ldr	r3, [pc, #16]	; (ef4 <ast_write_counter_value+0x34>)
     ee4:	4798      	blx	r3
     ee6:	4603      	mov	r3, r0
     ee8:	2b00      	cmp	r3, #0
     eea:	d1f9      	bne.n	ee0 <ast_write_counter_value+0x20>
	}
}
     eec:	3708      	adds	r7, #8
     eee:	46bd      	mov	sp, r7
     ef0:	bd80      	pop	{r7, pc}
     ef2:	bf00      	nop
     ef4:	00000cd1 	.word	0x00000cd1

00000ef8 <ast_write_periodic0_value>:
 *
 * \param ast Base address of the AST.
 * \param pir AST periodic0.
 */
void ast_write_periodic0_value(Ast *ast, uint32_t pir)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
     f00:	6039      	str	r1, [r7, #0]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     f02:	bf00      	nop
     f04:	6878      	ldr	r0, [r7, #4]
     f06:	4b09      	ldr	r3, [pc, #36]	; (f2c <ast_write_periodic0_value+0x34>)
     f08:	4798      	blx	r3
     f0a:	4603      	mov	r3, r0
     f0c:	2b00      	cmp	r3, #0
     f0e:	d1f9      	bne.n	f04 <ast_write_periodic0_value+0xc>
	}
	/* Set the periodic prescaler value */
	ast->AST_PIR0 = pir;
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	683a      	ldr	r2, [r7, #0]
     f14:	631a      	str	r2, [r3, #48]	; 0x30
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     f16:	bf00      	nop
     f18:	6878      	ldr	r0, [r7, #4]
     f1a:	4b04      	ldr	r3, [pc, #16]	; (f2c <ast_write_periodic0_value+0x34>)
     f1c:	4798      	blx	r3
     f1e:	4603      	mov	r3, r0
     f20:	2b00      	cmp	r3, #0
     f22:	d1f9      	bne.n	f18 <ast_write_periodic0_value+0x20>
	}
}
     f24:	3708      	adds	r7, #8
     f26:	46bd      	mov	sp, r7
     f28:	bd80      	pop	{r7, pc}
     f2a:	bf00      	nop
     f2c:	00000cd1 	.word	0x00000cd1

00000f30 <ast_enable_interrupt>:
 *
 * \param ast             Base address of the AST.
 * \param source  AST Interrupts to be enabled
 */
void ast_enable_interrupt(Ast *ast, ast_interrupt_source_t source)
{
     f30:	b580      	push	{r7, lr}
     f32:	b082      	sub	sp, #8
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]
     f38:	460b      	mov	r3, r1
     f3a:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     f3c:	bf00      	nop
     f3e:	6878      	ldr	r0, [r7, #4]
     f40:	4b1c      	ldr	r3, [pc, #112]	; (fb4 <ast_enable_interrupt+0x84>)
     f42:	4798      	blx	r3
     f44:	4603      	mov	r3, r0
     f46:	2b00      	cmp	r3, #0
     f48:	d1f9      	bne.n	f3e <ast_enable_interrupt+0xe>
	}

	switch (source) {
     f4a:	78fb      	ldrb	r3, [r7, #3]
     f4c:	2b04      	cmp	r3, #4
     f4e:	d825      	bhi.n	f9c <ast_enable_interrupt+0x6c>
     f50:	a201      	add	r2, pc, #4	; (adr r2, f58 <ast_enable_interrupt+0x28>)
     f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f56:	bf00      	nop
     f58:	00000f6d 	.word	0x00000f6d
     f5c:	00000f77 	.word	0x00000f77
     f60:	00000f81 	.word	0x00000f81
     f64:	00000f89 	.word	0x00000f89
     f68:	00000f93 	.word	0x00000f93
	case AST_INTERRUPT_ALARM:
		ast->AST_IER = AST_IER_ALARM0_1;
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
     f72:	611a      	str	r2, [r3, #16]
		break;
     f74:	e013      	b.n	f9e <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_IER = AST_IER_PER0_1;
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     f7c:	611a      	str	r2, [r3, #16]
		break;
     f7e:	e00e      	b.n	f9e <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_IER = AST_IER_OVF_1;
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	2201      	movs	r2, #1
     f84:	611a      	str	r2, [r3, #16]
		break;
     f86:	e00a      	b.n	f9e <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_IER = AST_IER_READY_1;
     f88:	687b      	ldr	r3, [r7, #4]
     f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     f8e:	611a      	str	r2, [r3, #16]
		break;
     f90:	e005      	b.n	f9e <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_IER = AST_IER_CLKRDY_1;
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     f98:	611a      	str	r2, [r3, #16]
		break;
     f9a:	e000      	b.n	f9e <ast_enable_interrupt+0x6e>

	default:
		break;
     f9c:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     f9e:	bf00      	nop
     fa0:	6878      	ldr	r0, [r7, #4]
     fa2:	4b04      	ldr	r3, [pc, #16]	; (fb4 <ast_enable_interrupt+0x84>)
     fa4:	4798      	blx	r3
     fa6:	4603      	mov	r3, r0
     fa8:	2b00      	cmp	r3, #0
     faa:	d1f9      	bne.n	fa0 <ast_enable_interrupt+0x70>
	}
}
     fac:	3708      	adds	r7, #8
     fae:	46bd      	mov	sp, r7
     fb0:	bd80      	pop	{r7, pc}
     fb2:	bf00      	nop
     fb4:	00000cd1 	.word	0x00000cd1

00000fb8 <ast_clear_interrupt_flag>:
 *
 * \param ast          Base address of the AST.
 * \param source  AST status flag to be cleared
 */
void ast_clear_interrupt_flag(Ast *ast, ast_interrupt_source_t source)
{
     fb8:	b580      	push	{r7, lr}
     fba:	b082      	sub	sp, #8
     fbc:	af00      	add	r7, sp, #0
     fbe:	6078      	str	r0, [r7, #4]
     fc0:	460b      	mov	r3, r1
     fc2:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     fc4:	bf00      	nop
     fc6:	6878      	ldr	r0, [r7, #4]
     fc8:	4b1c      	ldr	r3, [pc, #112]	; (103c <__stack_size__+0x3c>)
     fca:	4798      	blx	r3
     fcc:	4603      	mov	r3, r0
     fce:	2b00      	cmp	r3, #0
     fd0:	d1f9      	bne.n	fc6 <ast_clear_interrupt_flag+0xe>
	}

	switch (source) {
     fd2:	78fb      	ldrb	r3, [r7, #3]
     fd4:	2b04      	cmp	r3, #4
     fd6:	d825      	bhi.n	1024 <__stack_size__+0x24>
     fd8:	a201      	add	r2, pc, #4	; (adr r2, fe0 <ast_clear_interrupt_flag+0x28>)
     fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fde:	bf00      	nop
     fe0:	00000ff5 	.word	0x00000ff5
     fe4:	00000fff 	.word	0x00000fff
     fe8:	00001009 	.word	0x00001009
     fec:	00001011 	.word	0x00001011
     ff0:	0000101b 	.word	0x0000101b
	case AST_INTERRUPT_ALARM:
		ast->AST_SCR = AST_SCR_ALARM0;
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
     ffa:	60da      	str	r2, [r3, #12]
		break;
     ffc:	e013      	b.n	1026 <__stack_size__+0x26>

	case AST_INTERRUPT_PER:
		ast->AST_SCR = AST_SCR_PER0;
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1004:	60da      	str	r2, [r3, #12]
		break;
    1006:	e00e      	b.n	1026 <__stack_size__+0x26>

	case AST_INTERRUPT_OVF:
		ast->AST_SCR = AST_SCR_OVF;
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	2201      	movs	r2, #1
    100c:	60da      	str	r2, [r3, #12]
		break;
    100e:	e00a      	b.n	1026 <__stack_size__+0x26>

	case AST_INTERRUPT_READY:
		ast->AST_SCR = AST_SCR_READY;
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    1016:	60da      	str	r2, [r3, #12]
		break;
    1018:	e005      	b.n	1026 <__stack_size__+0x26>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_SCR = AST_SCR_CLKRDY;
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    1020:	60da      	str	r2, [r3, #12]
		break;
    1022:	e000      	b.n	1026 <__stack_size__+0x26>

	default:
		break;
    1024:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    1026:	bf00      	nop
    1028:	6878      	ldr	r0, [r7, #4]
    102a:	4b04      	ldr	r3, [pc, #16]	; (103c <__stack_size__+0x3c>)
    102c:	4798      	blx	r3
    102e:	4603      	mov	r3, r0
    1030:	2b00      	cmp	r3, #0
    1032:	d1f9      	bne.n	1028 <__stack_size__+0x28>
	}
}
    1034:	3708      	adds	r7, #8
    1036:	46bd      	mov	sp, r7
    1038:	bd80      	pop	{r7, pc}
    103a:	bf00      	nop
    103c:	00000cd1 	.word	0x00000cd1

00001040 <ast_set_callback>:
 * \param irq_line  interrupt line.
 * \param irq_level interrupt level.
 */
void ast_set_callback(Ast *ast, ast_interrupt_source_t source,
		ast_callback_t callback, uint8_t irq_line, uint8_t irq_level)
{
    1040:	b580      	push	{r7, lr}
    1042:	b084      	sub	sp, #16
    1044:	af00      	add	r7, sp, #0
    1046:	60f8      	str	r0, [r7, #12]
    1048:	607a      	str	r2, [r7, #4]
    104a:	460a      	mov	r2, r1
    104c:	72fa      	strb	r2, [r7, #11]
    104e:	72bb      	strb	r3, [r7, #10]
	ast_callback_pointer[source] = callback;
    1050:	7afa      	ldrb	r2, [r7, #11]
    1052:	4b0e      	ldr	r3, [pc, #56]	; (108c <ast_set_callback+0x4c>)
    1054:	6879      	ldr	r1, [r7, #4]
    1056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    105a:	7abb      	ldrb	r3, [r7, #10]
    105c:	b25b      	sxtb	r3, r3
    105e:	4618      	mov	r0, r3
    1060:	4b0b      	ldr	r3, [pc, #44]	; (1090 <ast_set_callback+0x50>)
    1062:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    1064:	7aba      	ldrb	r2, [r7, #10]
    1066:	7e3b      	ldrb	r3, [r7, #24]
    1068:	b252      	sxtb	r2, r2
    106a:	4610      	mov	r0, r2
    106c:	4619      	mov	r1, r3
    106e:	4b09      	ldr	r3, [pc, #36]	; (1094 <ast_set_callback+0x54>)
    1070:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    1072:	7abb      	ldrb	r3, [r7, #10]
    1074:	b25b      	sxtb	r3, r3
    1076:	4618      	mov	r0, r3
    1078:	4b07      	ldr	r3, [pc, #28]	; (1098 <ast_set_callback+0x58>)
    107a:	4798      	blx	r3
	ast_enable_interrupt(ast, source);
    107c:	7afb      	ldrb	r3, [r7, #11]
    107e:	68f8      	ldr	r0, [r7, #12]
    1080:	4619      	mov	r1, r3
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <ast_set_callback+0x5c>)
    1084:	4798      	blx	r3
}
    1086:	3710      	adds	r7, #16
    1088:	46bd      	mov	sp, r7
    108a:	bd80      	pop	{r7, pc}
    108c:	20000e18 	.word	0x20000e18
    1090:	00000b99 	.word	0x00000b99
    1094:	00000bcd 	.word	0x00000bcd
    1098:	00000b69 	.word	0x00000b69
    109c:	00000f31 	.word	0x00000f31

000010a0 <AST_PER_Handler>:
/**
 * \brief Interrupt handler for AST periodic.
 */
#ifdef AST_PER_ENABLE
void AST_PER_Handler(void)
{
    10a0:	b580      	push	{r7, lr}
    10a2:	af00      	add	r7, sp, #0
	ast_callback_pointer[AST_INTERRUPT_PER]();
    10a4:	4b01      	ldr	r3, [pc, #4]	; (10ac <AST_PER_Handler+0xc>)
    10a6:	685b      	ldr	r3, [r3, #4]
    10a8:	4798      	blx	r3
}
    10aa:	bd80      	pop	{r7, pc}
    10ac:	20000e18 	.word	0x20000e18

000010b0 <ast_enable_wakeup>:
 *
 * \param ast          Base address of the AST.
 * \param source  AST wake-up flag to be enabled.
 */
void ast_enable_wakeup(Ast *ast, ast_wakeup_source_t source)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	af00      	add	r7, sp, #0
    10b6:	6078      	str	r0, [r7, #4]
    10b8:	460b      	mov	r3, r1
    10ba:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    10bc:	bf00      	nop
    10be:	6878      	ldr	r0, [r7, #4]
    10c0:	4b15      	ldr	r3, [pc, #84]	; (1118 <ast_enable_wakeup+0x68>)
    10c2:	4798      	blx	r3
    10c4:	4603      	mov	r3, r0
    10c6:	2b00      	cmp	r3, #0
    10c8:	d1f9      	bne.n	10be <ast_enable_wakeup+0xe>
	}

	switch (source) {
    10ca:	78fb      	ldrb	r3, [r7, #3]
    10cc:	2b01      	cmp	r3, #1
    10ce:	d00b      	beq.n	10e8 <ast_enable_wakeup+0x38>
    10d0:	2b02      	cmp	r3, #2
    10d2:	d010      	beq.n	10f6 <ast_enable_wakeup+0x46>
    10d4:	2b00      	cmp	r3, #0
    10d6:	d000      	beq.n	10da <ast_enable_wakeup+0x2a>
	case AST_WAKEUP_OVF:
		ast->AST_WER |= AST_WER_OVF_1;
		break;

	default:
		break;
    10d8:	e014      	b.n	1104 <ast_enable_wakeup+0x54>
	while (ast_is_busy(ast)) {
	}

	switch (source) {
	case AST_WAKEUP_ALARM:
		ast->AST_WER |= AST_WER_ALARM0_1;
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	69db      	ldr	r3, [r3, #28]
    10de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	61da      	str	r2, [r3, #28]
		break;
    10e6:	e00d      	b.n	1104 <ast_enable_wakeup+0x54>

	case AST_WAKEUP_PER:
		ast->AST_WER |= AST_WER_PER0_1;
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	69db      	ldr	r3, [r3, #28]
    10ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	61da      	str	r2, [r3, #28]
		break;
    10f4:	e006      	b.n	1104 <ast_enable_wakeup+0x54>

	case AST_WAKEUP_OVF:
		ast->AST_WER |= AST_WER_OVF_1;
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	69db      	ldr	r3, [r3, #28]
    10fa:	f043 0201 	orr.w	r2, r3, #1
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	61da      	str	r2, [r3, #28]
		break;
    1102:	bf00      	nop
	default:
		break;
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    1104:	bf00      	nop
    1106:	6878      	ldr	r0, [r7, #4]
    1108:	4b03      	ldr	r3, [pc, #12]	; (1118 <ast_enable_wakeup+0x68>)
    110a:	4798      	blx	r3
    110c:	4603      	mov	r3, r0
    110e:	2b00      	cmp	r3, #0
    1110:	d1f9      	bne.n	1106 <ast_enable_wakeup+0x56>
	}
}
    1112:	3708      	adds	r7, #8
    1114:	46bd      	mov	sp, r7
    1116:	bd80      	pop	{r7, pc}
    1118:	00000cd1 	.word	0x00000cd1

0000111c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    111c:	b480      	push	{r7}
    111e:	b083      	sub	sp, #12
    1120:	af00      	add	r7, sp, #0
    1122:	4603      	mov	r3, r0
    1124:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    1126:	4b08      	ldr	r3, [pc, #32]	; (1148 <NVIC_EnableIRQ+0x2c>)
    1128:	f997 2007 	ldrsb.w	r2, [r7, #7]
    112c:	0952      	lsrs	r2, r2, #5
    112e:	79f9      	ldrb	r1, [r7, #7]
    1130:	f001 011f 	and.w	r1, r1, #31
    1134:	2001      	movs	r0, #1
    1136:	fa00 f101 	lsl.w	r1, r0, r1
    113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    113e:	370c      	adds	r7, #12
    1140:	46bd      	mov	sp, r7
    1142:	f85d 7b04 	ldr.w	r7, [sp], #4
    1146:	4770      	bx	lr
    1148:	e000e100 	.word	0xe000e100

0000114c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    114c:	b480      	push	{r7}
    114e:	b083      	sub	sp, #12
    1150:	af00      	add	r7, sp, #0
    1152:	4603      	mov	r3, r0
    1154:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1156:	4b09      	ldr	r3, [pc, #36]	; (117c <NVIC_ClearPendingIRQ+0x30>)
    1158:	f997 2007 	ldrsb.w	r2, [r7, #7]
    115c:	0952      	lsrs	r2, r2, #5
    115e:	79f9      	ldrb	r1, [r7, #7]
    1160:	f001 011f 	and.w	r1, r1, #31
    1164:	2001      	movs	r0, #1
    1166:	fa00 f101 	lsl.w	r1, r0, r1
    116a:	3260      	adds	r2, #96	; 0x60
    116c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1170:	370c      	adds	r7, #12
    1172:	46bd      	mov	sp, r7
    1174:	f85d 7b04 	ldr.w	r7, [sp], #4
    1178:	4770      	bx	lr
    117a:	bf00      	nop
    117c:	e000e100 	.word	0xe000e100

00001180 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1180:	b480      	push	{r7}
    1182:	b083      	sub	sp, #12
    1184:	af00      	add	r7, sp, #0
    1186:	4603      	mov	r3, r0
    1188:	6039      	str	r1, [r7, #0]
    118a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1190:	2b00      	cmp	r3, #0
    1192:	da0b      	bge.n	11ac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1194:	490d      	ldr	r1, [pc, #52]	; (11cc <NVIC_SetPriority+0x4c>)
    1196:	79fb      	ldrb	r3, [r7, #7]
    1198:	f003 030f 	and.w	r3, r3, #15
    119c:	3b04      	subs	r3, #4
    119e:	683a      	ldr	r2, [r7, #0]
    11a0:	b2d2      	uxtb	r2, r2
    11a2:	0112      	lsls	r2, r2, #4
    11a4:	b2d2      	uxtb	r2, r2
    11a6:	440b      	add	r3, r1
    11a8:	761a      	strb	r2, [r3, #24]
    11aa:	e009      	b.n	11c0 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    11ac:	4908      	ldr	r1, [pc, #32]	; (11d0 <NVIC_SetPriority+0x50>)
    11ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    11b2:	683a      	ldr	r2, [r7, #0]
    11b4:	b2d2      	uxtb	r2, r2
    11b6:	0112      	lsls	r2, r2, #4
    11b8:	b2d2      	uxtb	r2, r2
    11ba:	440b      	add	r3, r1
    11bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    11c0:	370c      	adds	r7, #12
    11c2:	46bd      	mov	sp, r7
    11c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    11c8:	4770      	bx	lr
    11ca:	bf00      	nop
    11cc:	e000ed00 	.word	0xe000ed00
    11d0:	e000e100 	.word	0xe000e100

000011d4 <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
    11d4:	b480      	push	{r7}
    11d6:	b085      	sub	sp, #20
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	60fb      	str	r3, [r7, #12]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    11e0:	68fb      	ldr	r3, [r7, #12]
    11e2:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
}
    11e4:	4618      	mov	r0, r3
    11e6:	3714      	adds	r7, #20
    11e8:	46bd      	mov	sp, r7
    11ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ee:	4770      	bx	lr

000011f0 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    11f0:	b480      	push	{r7}
    11f2:	b085      	sub	sp, #20
    11f4:	af00      	add	r7, sp, #0
    11f6:	6078      	str	r0, [r7, #4]
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    11fc:	68fb      	ldr	r3, [r7, #12]
    11fe:	f003 031f 	and.w	r3, r3, #31
    1202:	2201      	movs	r2, #1
    1204:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
}
    1208:	4618      	mov	r0, r3
    120a:	3714      	adds	r7, #20
    120c:	46bd      	mov	sp, r7
    120e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1212:	4770      	bx	lr

00001214 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
    1214:	b580      	push	{r7, lr}
    1216:	b086      	sub	sp, #24
    1218:	af00      	add	r7, sp, #0
    121a:	60f8      	str	r0, [r7, #12]
    121c:	60b9      	str	r1, [r7, #8]
    121e:	4613      	mov	r3, r2
    1220:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    1222:	4b29      	ldr	r3, [pc, #164]	; (12c8 <gpio_set_pin_callback+0xb4>)
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	2b05      	cmp	r3, #5
    1228:	d901      	bls.n	122e <gpio_set_pin_callback+0x1a>
		return false;
    122a:	2300      	movs	r3, #0
    122c:	e048      	b.n	12c0 <gpio_set_pin_callback+0xac>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    122e:	2300      	movs	r3, #0
    1230:	75fb      	strb	r3, [r7, #23]
    1232:	e010      	b.n	1256 <gpio_set_pin_callback+0x42>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    1234:	68f8      	ldr	r0, [r7, #12]
    1236:	4b25      	ldr	r3, [pc, #148]	; (12cc <gpio_set_pin_callback+0xb8>)
    1238:	4798      	blx	r3
    123a:	4602      	mov	r2, r0
    123c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1240:	00db      	lsls	r3, r3, #3
    1242:	21ff      	movs	r1, #255	; 0xff
    1244:	fa01 f303 	lsl.w	r3, r1, r3
    1248:	4013      	ands	r3, r2
    124a:	2b00      	cmp	r3, #0
    124c:	d000      	beq.n	1250 <gpio_set_pin_callback+0x3c>
			break;
    124e:	e006      	b.n	125e <gpio_set_pin_callback+0x4a>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    1250:	7dfb      	ldrb	r3, [r7, #23]
    1252:	3301      	adds	r3, #1
    1254:	75fb      	strb	r3, [r7, #23]
    1256:	f997 3017 	ldrsb.w	r3, [r7, #23]
    125a:	2b03      	cmp	r3, #3
    125c:	ddea      	ble.n	1234 <gpio_set_pin_callback+0x20>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    125e:	68f8      	ldr	r0, [r7, #12]
    1260:	4b1b      	ldr	r3, [pc, #108]	; (12d0 <gpio_set_pin_callback+0xbc>)
    1262:	4798      	blx	r3
    1264:	4603      	mov	r3, r0
    1266:	b2db      	uxtb	r3, r3
    1268:	009b      	lsls	r3, r3, #2
    126a:	b2da      	uxtb	r2, r3
    126c:	7dfb      	ldrb	r3, [r7, #23]
    126e:	4413      	add	r3, r2
    1270:	b2db      	uxtb	r3, r3
    1272:	3319      	adds	r3, #25
    1274:	b2db      	uxtb	r3, r3
    1276:	75bb      	strb	r3, [r7, #22]

	gpio_int_sources[gpio_nb_sources].pin = pin;
    1278:	4b13      	ldr	r3, [pc, #76]	; (12c8 <gpio_set_pin_callback+0xb4>)
    127a:	681a      	ldr	r2, [r3, #0]
    127c:	4b15      	ldr	r3, [pc, #84]	; (12d4 <gpio_set_pin_callback+0xc0>)
    127e:	68f9      	ldr	r1, [r7, #12]
    1280:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    1284:	4b10      	ldr	r3, [pc, #64]	; (12c8 <gpio_set_pin_callback+0xb4>)
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	4a12      	ldr	r2, [pc, #72]	; (12d4 <gpio_set_pin_callback+0xc0>)
    128a:	00db      	lsls	r3, r3, #3
    128c:	4413      	add	r3, r2
    128e:	68ba      	ldr	r2, [r7, #8]
    1290:	605a      	str	r2, [r3, #4]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    1292:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1296:	4618      	mov	r0, r3
    1298:	4b0f      	ldr	r3, [pc, #60]	; (12d8 <gpio_set_pin_callback+0xc4>)
    129a:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    129c:	79fb      	ldrb	r3, [r7, #7]
    129e:	f997 2016 	ldrsb.w	r2, [r7, #22]
    12a2:	4610      	mov	r0, r2
    12a4:	4619      	mov	r1, r3
    12a6:	4b0d      	ldr	r3, [pc, #52]	; (12dc <gpio_set_pin_callback+0xc8>)
    12a8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    12aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
    12ae:	4618      	mov	r0, r3
    12b0:	4b0b      	ldr	r3, [pc, #44]	; (12e0 <gpio_set_pin_callback+0xcc>)
    12b2:	4798      	blx	r3

	gpio_nb_sources++;
    12b4:	4b04      	ldr	r3, [pc, #16]	; (12c8 <gpio_set_pin_callback+0xb4>)
    12b6:	681b      	ldr	r3, [r3, #0]
    12b8:	1c5a      	adds	r2, r3, #1
    12ba:	4b03      	ldr	r3, [pc, #12]	; (12c8 <gpio_set_pin_callback+0xb4>)
    12bc:	601a      	str	r2, [r3, #0]

	return true;
    12be:	2301      	movs	r3, #1
}
    12c0:	4618      	mov	r0, r3
    12c2:	3718      	adds	r7, #24
    12c4:	46bd      	mov	sp, r7
    12c6:	bd80      	pop	{r7, pc}
    12c8:	20000db0 	.word	0x20000db0
    12cc:	000011f1 	.word	0x000011f1
    12d0:	000011d5 	.word	0x000011d5
    12d4:	20000d80 	.word	0x20000d80
    12d8:	0000114d 	.word	0x0000114d
    12dc:	00001181 	.word	0x00001181
    12e0:	0000111d 	.word	0x0000111d

000012e4 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b086      	sub	sp, #24
    12e8:	af00      	add	r7, sp, #0
    12ea:	6078      	str	r0, [r7, #4]
    12ec:	6039      	str	r1, [r7, #0]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	025b      	lsls	r3, r3, #9
    12f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    12f6:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    12fa:	613b      	str	r3, [r7, #16]
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    12fc:	693b      	ldr	r3, [r7, #16]
    12fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    1302:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    1304:	68fa      	ldr	r2, [r7, #12]
    1306:	683b      	ldr	r3, [r7, #0]
    1308:	401a      	ands	r2, r3
    130a:	693b      	ldr	r3, [r7, #16]
    130c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
    1310:	2300      	movs	r3, #0
    1312:	617b      	str	r3, [r7, #20]
    1314:	e023      	b.n	135e <gpio_common_handler+0x7a>
		pin = gpio_int_sources[i].pin;
    1316:	4b16      	ldr	r3, [pc, #88]	; (1370 <gpio_common_handler+0x8c>)
    1318:	697a      	ldr	r2, [r7, #20]
    131a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    131e:	60bb      	str	r3, [r7, #8]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    1320:	68b8      	ldr	r0, [r7, #8]
    1322:	4b14      	ldr	r3, [pc, #80]	; (1374 <gpio_common_handler+0x90>)
    1324:	4798      	blx	r3
    1326:	4602      	mov	r2, r0
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	429a      	cmp	r2, r3
    132c:	d114      	bne.n	1358 <gpio_common_handler+0x74>
				(ioport_pin_to_mask(pin) & int_flags)) {
    132e:	68b8      	ldr	r0, [r7, #8]
    1330:	4b11      	ldr	r3, [pc, #68]	; (1378 <gpio_common_handler+0x94>)
    1332:	4798      	blx	r3
    1334:	4602      	mov	r2, r0
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	4013      	ands	r3, r2
	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    133a:	2b00      	cmp	r3, #0
    133c:	d00c      	beq.n	1358 <gpio_common_handler+0x74>
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    133e:	4a0c      	ldr	r2, [pc, #48]	; (1370 <gpio_common_handler+0x8c>)
    1340:	697b      	ldr	r3, [r7, #20]
    1342:	00db      	lsls	r3, r3, #3
    1344:	4413      	add	r3, r2
    1346:	685b      	ldr	r3, [r3, #4]
    1348:	2b00      	cmp	r3, #0
    134a:	d005      	beq.n	1358 <gpio_common_handler+0x74>
				gpio_int_sources[i].callback();
    134c:	4a08      	ldr	r2, [pc, #32]	; (1370 <gpio_common_handler+0x8c>)
    134e:	697b      	ldr	r3, [r7, #20]
    1350:	00db      	lsls	r3, r3, #3
    1352:	4413      	add	r3, r2
    1354:	685b      	ldr	r3, [r3, #4]
    1356:	4798      	blx	r3
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
    1358:	697b      	ldr	r3, [r7, #20]
    135a:	3301      	adds	r3, #1
    135c:	617b      	str	r3, [r7, #20]
    135e:	4b07      	ldr	r3, [pc, #28]	; (137c <gpio_common_handler+0x98>)
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	697a      	ldr	r2, [r7, #20]
    1364:	429a      	cmp	r2, r3
    1366:	d3d6      	bcc.n	1316 <gpio_common_handler+0x32>
			} else {
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}
}
    1368:	3718      	adds	r7, #24
    136a:	46bd      	mov	sp, r7
    136c:	bd80      	pop	{r7, pc}
    136e:	bf00      	nop
    1370:	20000d80 	.word	0x20000d80
    1374:	000011d5 	.word	0x000011d5
    1378:	000011f1 	.word	0x000011f1
    137c:	20000db0 	.word	0x20000db0

00001380 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    1380:	b580      	push	{r7, lr}
    1382:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    1384:	2000      	movs	r0, #0
    1386:	21ff      	movs	r1, #255	; 0xff
    1388:	4b01      	ldr	r3, [pc, #4]	; (1390 <GPIO_0_Handler+0x10>)
    138a:	4798      	blx	r3
}
    138c:	bd80      	pop	{r7, pc}
    138e:	bf00      	nop
    1390:	000012e5 	.word	0x000012e5

00001394 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    1394:	b580      	push	{r7, lr}
    1396:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    1398:	2000      	movs	r0, #0
    139a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    139e:	4b01      	ldr	r3, [pc, #4]	; (13a4 <GPIO_1_Handler+0x10>)
    13a0:	4798      	blx	r3
}
    13a2:	bd80      	pop	{r7, pc}
    13a4:	000012e5 	.word	0x000012e5

000013a8 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    13ac:	2000      	movs	r0, #0
    13ae:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    13b2:	4b01      	ldr	r3, [pc, #4]	; (13b8 <GPIO_2_Handler+0x10>)
    13b4:	4798      	blx	r3
}
    13b6:	bd80      	pop	{r7, pc}
    13b8:	000012e5 	.word	0x000012e5

000013bc <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    13bc:	b580      	push	{r7, lr}
    13be:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    13c0:	2000      	movs	r0, #0
    13c2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    13c6:	4b01      	ldr	r3, [pc, #4]	; (13cc <GPIO_3_Handler+0x10>)
    13c8:	4798      	blx	r3
}
    13ca:	bd80      	pop	{r7, pc}
    13cc:	000012e5 	.word	0x000012e5

000013d0 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    13d4:	2001      	movs	r0, #1
    13d6:	21ff      	movs	r1, #255	; 0xff
    13d8:	4b01      	ldr	r3, [pc, #4]	; (13e0 <GPIO_4_Handler+0x10>)
    13da:	4798      	blx	r3
}
    13dc:	bd80      	pop	{r7, pc}
    13de:	bf00      	nop
    13e0:	000012e5 	.word	0x000012e5

000013e4 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    13e4:	b580      	push	{r7, lr}
    13e6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    13e8:	2001      	movs	r0, #1
    13ea:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    13ee:	4b01      	ldr	r3, [pc, #4]	; (13f4 <GPIO_5_Handler+0x10>)
    13f0:	4798      	blx	r3
}
    13f2:	bd80      	pop	{r7, pc}
    13f4:	000012e5 	.word	0x000012e5

000013f8 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    13f8:	b580      	push	{r7, lr}
    13fa:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    13fc:	2001      	movs	r0, #1
    13fe:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1402:	4b01      	ldr	r3, [pc, #4]	; (1408 <GPIO_6_Handler+0x10>)
    1404:	4798      	blx	r3
}
    1406:	bd80      	pop	{r7, pc}
    1408:	000012e5 	.word	0x000012e5

0000140c <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    140c:	b580      	push	{r7, lr}
    140e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    1410:	2001      	movs	r0, #1
    1412:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1416:	4b01      	ldr	r3, [pc, #4]	; (141c <GPIO_7_Handler+0x10>)
    1418:	4798      	blx	r3
}
    141a:	bd80      	pop	{r7, pc}
    141c:	000012e5 	.word	0x000012e5

00001420 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    1420:	b580      	push	{r7, lr}
    1422:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    1424:	2002      	movs	r0, #2
    1426:	21ff      	movs	r1, #255	; 0xff
    1428:	4b01      	ldr	r3, [pc, #4]	; (1430 <GPIO_8_Handler+0x10>)
    142a:	4798      	blx	r3
}
    142c:	bd80      	pop	{r7, pc}
    142e:	bf00      	nop
    1430:	000012e5 	.word	0x000012e5

00001434 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    1438:	2002      	movs	r0, #2
    143a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    143e:	4b01      	ldr	r3, [pc, #4]	; (1444 <GPIO_9_Handler+0x10>)
    1440:	4798      	blx	r3
}
    1442:	bd80      	pop	{r7, pc}
    1444:	000012e5 	.word	0x000012e5

00001448 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    1448:	b580      	push	{r7, lr}
    144a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    144c:	2002      	movs	r0, #2
    144e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1452:	4b01      	ldr	r3, [pc, #4]	; (1458 <GPIO_10_Handler+0x10>)
    1454:	4798      	blx	r3
}
    1456:	bd80      	pop	{r7, pc}
    1458:	000012e5 	.word	0x000012e5

0000145c <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    145c:	b580      	push	{r7, lr}
    145e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    1460:	2002      	movs	r0, #2
    1462:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1466:	4b01      	ldr	r3, [pc, #4]	; (146c <GPIO_11_Handler+0x10>)
    1468:	4798      	blx	r3
}
    146a:	bd80      	pop	{r7, pc}
    146c:	000012e5 	.word	0x000012e5

00001470 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
    1470:	b480      	push	{r7}
    1472:	b087      	sub	sp, #28
    1474:	af00      	add	r7, sp, #0
    1476:	60f8      	str	r0, [r7, #12]
    1478:	60b9      	str	r1, [r7, #8]
    147a:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
    147c:	68bb      	ldr	r3, [r7, #8]
    147e:	019b      	lsls	r3, r3, #6
    1480:	68fa      	ldr	r2, [r7, #12]
    1482:	4413      	add	r3, r2
    1484:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
    1486:	697b      	ldr	r3, [r7, #20]
    1488:	2202      	movs	r2, #2
    148a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
    148c:	697b      	ldr	r3, [r7, #20]
    148e:	f04f 32ff 	mov.w	r2, #4294967295
    1492:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
    1494:	697b      	ldr	r3, [r7, #20]
    1496:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
    1498:	697b      	ldr	r3, [r7, #20]
    149a:	687a      	ldr	r2, [r7, #4]
    149c:	605a      	str	r2, [r3, #4]
}
    149e:	371c      	adds	r7, #28
    14a0:	46bd      	mov	sp, r7
    14a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14a6:	4770      	bx	lr

000014a8 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
    14b0:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
    14b2:	687a      	ldr	r2, [r7, #4]
    14b4:	683b      	ldr	r3, [r7, #0]
    14b6:	019b      	lsls	r3, r3, #6
    14b8:	4413      	add	r3, r2
    14ba:	2205      	movs	r2, #5
    14bc:	601a      	str	r2, [r3, #0]
}
    14be:	370c      	adds	r7, #12
    14c0:	46bd      	mov	sp, r7
    14c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14c6:	4770      	bx	lr

000014c8 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
    14c8:	b480      	push	{r7}
    14ca:	b083      	sub	sp, #12
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    14d0:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
    14d2:	687a      	ldr	r2, [r7, #4]
    14d4:	683b      	ldr	r3, [r7, #0]
    14d6:	019b      	lsls	r3, r3, #6
    14d8:	4413      	add	r3, r2
    14da:	2202      	movs	r2, #2
    14dc:	601a      	str	r2, [r3, #0]
}
    14de:	370c      	adds	r7, #12
    14e0:	46bd      	mov	sp, r7
    14e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14e6:	4770      	bx	lr

000014e8 <tc_read_ra>:
 * \param ul_channel Channel to configure.
 *
 * \return RA value.
 */
uint32_t tc_read_ra(Tc *p_tc, uint32_t ul_channel)
{
    14e8:	b480      	push	{r7}
    14ea:	b083      	sub	sp, #12
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
    14f0:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RA;
    14f2:	687a      	ldr	r2, [r7, #4]
    14f4:	683b      	ldr	r3, [r7, #0]
    14f6:	019b      	lsls	r3, r3, #6
    14f8:	4413      	add	r3, r2
    14fa:	3310      	adds	r3, #16
    14fc:	685b      	ldr	r3, [r3, #4]
}
    14fe:	4618      	mov	r0, r3
    1500:	370c      	adds	r7, #12
    1502:	46bd      	mov	sp, r7
    1504:	f85d 7b04 	ldr.w	r7, [sp], #4
    1508:	4770      	bx	lr
    150a:	bf00      	nop

0000150c <tc_read_rb>:
 * \param ul_channel Channel to configure.
 *
 * \return RB value.
 */
uint32_t tc_read_rb(Tc *p_tc, uint32_t ul_channel)
{
    150c:	b480      	push	{r7}
    150e:	b083      	sub	sp, #12
    1510:	af00      	add	r7, sp, #0
    1512:	6078      	str	r0, [r7, #4]
    1514:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RB;
    1516:	687a      	ldr	r2, [r7, #4]
    1518:	683b      	ldr	r3, [r7, #0]
    151a:	019b      	lsls	r3, r3, #6
    151c:	4413      	add	r3, r2
    151e:	3318      	adds	r3, #24
    1520:	681b      	ldr	r3, [r3, #0]
}
    1522:	4618      	mov	r0, r3
    1524:	370c      	adds	r7, #12
    1526:	46bd      	mov	sp, r7
    1528:	f85d 7b04 	ldr.w	r7, [sp], #4
    152c:	4770      	bx	lr
    152e:	bf00      	nop

00001530 <tc_write_ra>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_ra(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
    1530:	b480      	push	{r7}
    1532:	b085      	sub	sp, #20
    1534:	af00      	add	r7, sp, #0
    1536:	60f8      	str	r0, [r7, #12]
    1538:	60b9      	str	r1, [r7, #8]
    153a:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
    153c:	68fa      	ldr	r2, [r7, #12]
    153e:	68bb      	ldr	r3, [r7, #8]
    1540:	019b      	lsls	r3, r3, #6
    1542:	4413      	add	r3, r2
    1544:	3310      	adds	r3, #16
    1546:	687a      	ldr	r2, [r7, #4]
    1548:	605a      	str	r2, [r3, #4]
}
    154a:	3714      	adds	r7, #20
    154c:	46bd      	mov	sp, r7
    154e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1552:	4770      	bx	lr

00001554 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
    1554:	b480      	push	{r7}
    1556:	b085      	sub	sp, #20
    1558:	af00      	add	r7, sp, #0
    155a:	60f8      	str	r0, [r7, #12]
    155c:	60b9      	str	r1, [r7, #8]
    155e:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
    1560:	68fa      	ldr	r2, [r7, #12]
    1562:	68bb      	ldr	r3, [r7, #8]
    1564:	019b      	lsls	r3, r3, #6
    1566:	4413      	add	r3, r2
    1568:	3318      	adds	r3, #24
    156a:	687a      	ldr	r2, [r7, #4]
    156c:	605a      	str	r2, [r3, #4]
}
    156e:	3714      	adds	r7, #20
    1570:	46bd      	mov	sp, r7
    1572:	f85d 7b04 	ldr.w	r7, [sp], #4
    1576:	4770      	bx	lr

00001578 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
    1578:	b480      	push	{r7}
    157a:	b087      	sub	sp, #28
    157c:	af00      	add	r7, sp, #0
    157e:	60f8      	str	r0, [r7, #12]
    1580:	60b9      	str	r1, [r7, #8]
    1582:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
    1584:	68bb      	ldr	r3, [r7, #8]
    1586:	019b      	lsls	r3, r3, #6
    1588:	68fa      	ldr	r2, [r7, #12]
    158a:	4413      	add	r3, r2
    158c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
    158e:	697b      	ldr	r3, [r7, #20]
    1590:	687a      	ldr	r2, [r7, #4]
    1592:	625a      	str	r2, [r3, #36]	; 0x24
}
    1594:	371c      	adds	r7, #28
    1596:	46bd      	mov	sp, r7
    1598:	f85d 7b04 	ldr.w	r7, [sp], #4
    159c:	4770      	bx	lr
    159e:	bf00      	nop

000015a0 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
    15a0:	b480      	push	{r7}
    15a2:	b085      	sub	sp, #20
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
    15aa:	683b      	ldr	r3, [r7, #0]
    15ac:	019b      	lsls	r3, r3, #6
    15ae:	687a      	ldr	r2, [r7, #4]
    15b0:	4413      	add	r3, r2
    15b2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	6a1b      	ldr	r3, [r3, #32]
}
    15b8:	4618      	mov	r0, r3
    15ba:	3714      	adds	r7, #20
    15bc:	46bd      	mov	sp, r7
    15be:	f85d 7b04 	ldr.w	r7, [sp], #4
    15c2:	4770      	bx	lr

000015c4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    15c4:	b480      	push	{r7}
    15c6:	b089      	sub	sp, #36	; 0x24
    15c8:	af00      	add	r7, sp, #0
    15ca:	60f8      	str	r0, [r7, #12]
    15cc:	60b9      	str	r1, [r7, #8]
    15ce:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    15d0:	68bb      	ldr	r3, [r7, #8]
    15d2:	011a      	lsls	r2, r3, #4
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	429a      	cmp	r2, r3
    15d8:	d802      	bhi.n	15e0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
    15da:	2310      	movs	r3, #16
    15dc:	61fb      	str	r3, [r7, #28]
    15de:	e001      	b.n	15e4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
    15e0:	2308      	movs	r3, #8
    15e2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	00da      	lsls	r2, r3, #3
    15e8:	69fb      	ldr	r3, [r7, #28]
    15ea:	68b9      	ldr	r1, [r7, #8]
    15ec:	fb01 f303 	mul.w	r3, r1, r3
    15f0:	085b      	lsrs	r3, r3, #1
    15f2:	441a      	add	r2, r3
    15f4:	69fb      	ldr	r3, [r7, #28]
    15f6:	68b9      	ldr	r1, [r7, #8]
    15f8:	fb01 f303 	mul.w	r3, r1, r3
    15fc:	fbb2 f3f3 	udiv	r3, r2, r3
    1600:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
    1602:	69bb      	ldr	r3, [r7, #24]
    1604:	08db      	lsrs	r3, r3, #3
    1606:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
    1608:	69bb      	ldr	r3, [r7, #24]
    160a:	f003 0307 	and.w	r3, r3, #7
    160e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    1610:	697b      	ldr	r3, [r7, #20]
    1612:	2b00      	cmp	r3, #0
    1614:	d003      	beq.n	161e <usart_set_async_baudrate+0x5a>
    1616:	697b      	ldr	r3, [r7, #20]
    1618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    161c:	d301      	bcc.n	1622 <usart_set_async_baudrate+0x5e>
		return 1;
    161e:	2301      	movs	r3, #1
    1620:	e00f      	b.n	1642 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
    1622:	69fb      	ldr	r3, [r7, #28]
    1624:	2b08      	cmp	r3, #8
    1626:	d105      	bne.n	1634 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	685b      	ldr	r3, [r3, #4]
    162c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    1630:	68fb      	ldr	r3, [r7, #12]
    1632:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    1634:	693b      	ldr	r3, [r7, #16]
    1636:	041a      	lsls	r2, r3, #16
    1638:	697b      	ldr	r3, [r7, #20]
    163a:	431a      	orrs	r2, r3
    163c:	68fb      	ldr	r3, [r7, #12]
    163e:	621a      	str	r2, [r3, #32]

	return 0;
    1640:	2300      	movs	r3, #0
}
    1642:	4618      	mov	r0, r3
    1644:	3724      	adds	r7, #36	; 0x24
    1646:	46bd      	mov	sp, r7
    1648:	f85d 7b04 	ldr.w	r7, [sp], #4
    164c:	4770      	bx	lr
    164e:	bf00      	nop

00001650 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    1650:	b480      	push	{r7}
    1652:	b087      	sub	sp, #28
    1654:	af00      	add	r7, sp, #0
    1656:	60f8      	str	r0, [r7, #12]
    1658:	60b9      	str	r1, [r7, #8]
    165a:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
    165c:	68bb      	ldr	r3, [r7, #8]
    165e:	085a      	lsrs	r2, r3, #1
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	441a      	add	r2, r3
    1664:	68bb      	ldr	r3, [r7, #8]
    1666:	fbb2 f3f3 	udiv	r3, r2, r3
    166a:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
    166c:	697b      	ldr	r3, [r7, #20]
    166e:	2b03      	cmp	r3, #3
    1670:	d903      	bls.n	167a <usart_set_spi_master_baudrate+0x2a>
    1672:	697b      	ldr	r3, [r7, #20]
    1674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1678:	d301      	bcc.n	167e <usart_set_spi_master_baudrate+0x2e>
		return 1;
    167a:	2301      	movs	r3, #1
    167c:	e003      	b.n	1686 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
    167e:	68fb      	ldr	r3, [r7, #12]
    1680:	697a      	ldr	r2, [r7, #20]
    1682:	621a      	str	r2, [r3, #32]

	return 0;
    1684:	2300      	movs	r3, #0
}
    1686:	4618      	mov	r0, r3
    1688:	371c      	adds	r7, #28
    168a:	46bd      	mov	sp, r7
    168c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1690:	4770      	bx	lr
    1692:	bf00      	nop

00001694 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    1694:	b580      	push	{r7, lr}
    1696:	b082      	sub	sp, #8
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    169c:	6878      	ldr	r0, [r7, #4]
    169e:	4b0e      	ldr	r3, [pc, #56]	; (16d8 <usart_reset+0x44>)
    16a0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	2200      	movs	r2, #0
    16a6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	2200      	movs	r2, #0
    16ac:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	2200      	movs	r2, #0
    16b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    16b4:	6878      	ldr	r0, [r7, #4]
    16b6:	4b09      	ldr	r3, [pc, #36]	; (16dc <usart_reset+0x48>)
    16b8:	4798      	blx	r3
	usart_reset_rx(p_usart);
    16ba:	6878      	ldr	r0, [r7, #4]
    16bc:	4b08      	ldr	r3, [pc, #32]	; (16e0 <usart_reset+0x4c>)
    16be:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
    16c0:	6878      	ldr	r0, [r7, #4]
    16c2:	4b08      	ldr	r3, [pc, #32]	; (16e4 <usart_reset+0x50>)
    16c4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    16c6:	6878      	ldr	r0, [r7, #4]
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <usart_reset+0x54>)
    16ca:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    16cc:	6878      	ldr	r0, [r7, #4]
    16ce:	4b07      	ldr	r3, [pc, #28]	; (16ec <usart_reset+0x58>)
    16d0:	4798      	blx	r3
#endif
}
    16d2:	3708      	adds	r7, #8
    16d4:	46bd      	mov	sp, r7
    16d6:	bd80      	pop	{r7, pc}
    16d8:	00001a25 	.word	0x00001a25
    16dc:	0000189d 	.word	0x0000189d
    16e0:	000018cd 	.word	0x000018cd
    16e4:	00001901 	.word	0x00001901
    16e8:	00001939 	.word	0x00001939
    16ec:	0000191d 	.word	0x0000191d

000016f0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b084      	sub	sp, #16
    16f4:	af00      	add	r7, sp, #0
    16f6:	60f8      	str	r0, [r7, #12]
    16f8:	60b9      	str	r1, [r7, #8]
    16fa:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    16fc:	68f8      	ldr	r0, [r7, #12]
    16fe:	4b1a      	ldr	r3, [pc, #104]	; (1768 <usart_init_rs232+0x78>)
    1700:	4798      	blx	r3

	ul_reg_val = 0;
    1702:	4b1a      	ldr	r3, [pc, #104]	; (176c <usart_init_rs232+0x7c>)
    1704:	2200      	movs	r2, #0
    1706:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    1708:	68bb      	ldr	r3, [r7, #8]
    170a:	2b00      	cmp	r3, #0
    170c:	d009      	beq.n	1722 <usart_init_rs232+0x32>
    170e:	68bb      	ldr	r3, [r7, #8]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	68f8      	ldr	r0, [r7, #12]
    1714:	4619      	mov	r1, r3
    1716:	687a      	ldr	r2, [r7, #4]
    1718:	4b15      	ldr	r3, [pc, #84]	; (1770 <usart_init_rs232+0x80>)
    171a:	4798      	blx	r3
    171c:	4603      	mov	r3, r0
    171e:	2b00      	cmp	r3, #0
    1720:	d001      	beq.n	1726 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    1722:	2301      	movs	r3, #1
    1724:	e01b      	b.n	175e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1726:	68bb      	ldr	r3, [r7, #8]
    1728:	685a      	ldr	r2, [r3, #4]
    172a:	68bb      	ldr	r3, [r7, #8]
    172c:	689b      	ldr	r3, [r3, #8]
    172e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1730:	68bb      	ldr	r3, [r7, #8]
    1732:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1734:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1736:	68bb      	ldr	r3, [r7, #8]
    1738:	68db      	ldr	r3, [r3, #12]
    173a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    173c:	4b0b      	ldr	r3, [pc, #44]	; (176c <usart_init_rs232+0x7c>)
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	431a      	orrs	r2, r3
    1742:	4b0a      	ldr	r3, [pc, #40]	; (176c <usart_init_rs232+0x7c>)
    1744:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
    1746:	4b09      	ldr	r3, [pc, #36]	; (176c <usart_init_rs232+0x7c>)
    1748:	681a      	ldr	r2, [r3, #0]
    174a:	4b08      	ldr	r3, [pc, #32]	; (176c <usart_init_rs232+0x7c>)
    174c:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
    174e:	68fb      	ldr	r3, [r7, #12]
    1750:	685a      	ldr	r2, [r3, #4]
    1752:	4b06      	ldr	r3, [pc, #24]	; (176c <usart_init_rs232+0x7c>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	431a      	orrs	r2, r3
    1758:	68fb      	ldr	r3, [r7, #12]
    175a:	605a      	str	r2, [r3, #4]

	return 0;
    175c:	2300      	movs	r3, #0
}
    175e:	4618      	mov	r0, r3
    1760:	3710      	adds	r7, #16
    1762:	46bd      	mov	sp, r7
    1764:	bd80      	pop	{r7, pc}
    1766:	bf00      	nop
    1768:	00001695 	.word	0x00001695
    176c:	20000db4 	.word	0x20000db4
    1770:	000015c5 	.word	0x000015c5

00001774 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
    1774:	b580      	push	{r7, lr}
    1776:	b084      	sub	sp, #16
    1778:	af00      	add	r7, sp, #0
    177a:	60f8      	str	r0, [r7, #12]
    177c:	60b9      	str	r1, [r7, #8]
    177e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1780:	68f8      	ldr	r0, [r7, #12]
    1782:	4b3d      	ldr	r3, [pc, #244]	; (1878 <usart_init_spi_master+0x104>)
    1784:	4798      	blx	r3

	ul_reg_val = 0;
    1786:	4b3d      	ldr	r3, [pc, #244]	; (187c <usart_init_spi_master+0x108>)
    1788:	2200      	movs	r2, #0
    178a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
    178c:	68bb      	ldr	r3, [r7, #8]
    178e:	2b00      	cmp	r3, #0
    1790:	d00d      	beq.n	17ae <usart_init_spi_master+0x3a>
    1792:	68bb      	ldr	r3, [r7, #8]
    1794:	689b      	ldr	r3, [r3, #8]
    1796:	2b03      	cmp	r3, #3
    1798:	d809      	bhi.n	17ae <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
    179a:	68bb      	ldr	r3, [r7, #8]
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	68f8      	ldr	r0, [r7, #12]
    17a0:	4619      	mov	r1, r3
    17a2:	687a      	ldr	r2, [r7, #4]
    17a4:	4b36      	ldr	r3, [pc, #216]	; (1880 <usart_init_spi_master+0x10c>)
    17a6:	4798      	blx	r3
    17a8:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
    17aa:	2b00      	cmp	r3, #0
    17ac:	d001      	beq.n	17b2 <usart_init_spi_master+0x3e>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
			ul_mck)) {
		return 1;
    17ae:	2301      	movs	r3, #1
    17b0:	e05d      	b.n	186e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
    17b2:	68bb      	ldr	r3, [r7, #8]
    17b4:	685a      	ldr	r2, [r3, #4]
    17b6:	4b31      	ldr	r3, [pc, #196]	; (187c <usart_init_spi_master+0x108>)
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	431a      	orrs	r2, r3
    17bc:	4b2f      	ldr	r3, [pc, #188]	; (187c <usart_init_spi_master+0x108>)
    17be:	601a      	str	r2, [r3, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
    17c0:	68bb      	ldr	r3, [r7, #8]
    17c2:	68da      	ldr	r2, [r3, #12]

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
    17c4:	4b2d      	ldr	r3, [pc, #180]	; (187c <usart_init_spi_master+0x108>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	4313      	orrs	r3, r2
    17ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    17ce:	f043 030e 	orr.w	r3, r3, #14
    17d2:	4a2a      	ldr	r2, [pc, #168]	; (187c <usart_init_spi_master+0x108>)
    17d4:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode;

	switch (p_usart_opt->spi_mode) {
    17d6:	68bb      	ldr	r3, [r7, #8]
    17d8:	689b      	ldr	r3, [r3, #8]
    17da:	2b03      	cmp	r3, #3
    17dc:	d83e      	bhi.n	185c <usart_init_spi_master+0xe8>
    17de:	a201      	add	r2, pc, #4	; (adr r2, 17e4 <usart_init_spi_master+0x70>)
    17e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    17e4:	000017f5 	.word	0x000017f5
    17e8:	0000180f 	.word	0x0000180f
    17ec:	00001829 	.word	0x00001829
    17f0:	00001843 	.word	0x00001843
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
    17f4:	4b21      	ldr	r3, [pc, #132]	; (187c <usart_init_spi_master+0x108>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    17fc:	4b1f      	ldr	r3, [pc, #124]	; (187c <usart_init_spi_master+0x108>)
    17fe:	601a      	str	r2, [r3, #0]
		ul_reg_val &= ~US_MR_CPOL;
    1800:	4b1e      	ldr	r3, [pc, #120]	; (187c <usart_init_spi_master+0x108>)
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    1808:	4b1c      	ldr	r3, [pc, #112]	; (187c <usart_init_spi_master+0x108>)
    180a:	601a      	str	r2, [r3, #0]
		break;
    180c:	e027      	b.n	185e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
    180e:	4b1b      	ldr	r3, [pc, #108]	; (187c <usart_init_spi_master+0x108>)
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    1816:	4b19      	ldr	r3, [pc, #100]	; (187c <usart_init_spi_master+0x108>)
    1818:	601a      	str	r2, [r3, #0]
		ul_reg_val &= ~US_MR_CPOL;
    181a:	4b18      	ldr	r3, [pc, #96]	; (187c <usart_init_spi_master+0x108>)
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    1822:	4b16      	ldr	r3, [pc, #88]	; (187c <usart_init_spi_master+0x108>)
    1824:	601a      	str	r2, [r3, #0]
		break;
    1826:	e01a      	b.n	185e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
    1828:	4b14      	ldr	r3, [pc, #80]	; (187c <usart_init_spi_master+0x108>)
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    1830:	4b12      	ldr	r3, [pc, #72]	; (187c <usart_init_spi_master+0x108>)
    1832:	601a      	str	r2, [r3, #0]
		ul_reg_val |= US_MR_CPOL;
    1834:	4b11      	ldr	r3, [pc, #68]	; (187c <usart_init_spi_master+0x108>)
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    183c:	4b0f      	ldr	r3, [pc, #60]	; (187c <usart_init_spi_master+0x108>)
    183e:	601a      	str	r2, [r3, #0]
		break;
    1840:	e00d      	b.n	185e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
    1842:	4b0e      	ldr	r3, [pc, #56]	; (187c <usart_init_spi_master+0x108>)
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    184a:	4b0c      	ldr	r3, [pc, #48]	; (187c <usart_init_spi_master+0x108>)
    184c:	601a      	str	r2, [r3, #0]
		ul_reg_val |= US_MR_CPOL;
    184e:	4b0b      	ldr	r3, [pc, #44]	; (187c <usart_init_spi_master+0x108>)
    1850:	681b      	ldr	r3, [r3, #0]
    1852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    1856:	4b09      	ldr	r3, [pc, #36]	; (187c <usart_init_spi_master+0x108>)
    1858:	601a      	str	r2, [r3, #0]
		break;
    185a:	e000      	b.n	185e <usart_init_spi_master+0xea>

	default:
		break;
    185c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
    185e:	68fb      	ldr	r3, [r7, #12]
    1860:	685a      	ldr	r2, [r3, #4]
    1862:	4b06      	ldr	r3, [pc, #24]	; (187c <usart_init_spi_master+0x108>)
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	431a      	orrs	r2, r3
    1868:	68fb      	ldr	r3, [r7, #12]
    186a:	605a      	str	r2, [r3, #4]

	return 0;
    186c:	2300      	movs	r3, #0
}
    186e:	4618      	mov	r0, r3
    1870:	3710      	adds	r7, #16
    1872:	46bd      	mov	sp, r7
    1874:	bd80      	pop	{r7, pc}
    1876:	bf00      	nop
    1878:	00001695 	.word	0x00001695
    187c:	20000db8 	.word	0x20000db8
    1880:	00001651 	.word	0x00001651

00001884 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
    1884:	b480      	push	{r7}
    1886:	b083      	sub	sp, #12
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	2240      	movs	r2, #64	; 0x40
    1890:	601a      	str	r2, [r3, #0]
}
    1892:	370c      	adds	r7, #12
    1894:	46bd      	mov	sp, r7
    1896:	f85d 7b04 	ldr.w	r7, [sp], #4
    189a:	4770      	bx	lr

0000189c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
    189c:	b480      	push	{r7}
    189e:	b083      	sub	sp, #12
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	2288      	movs	r2, #136	; 0x88
    18a8:	601a      	str	r2, [r3, #0]
}
    18aa:	370c      	adds	r7, #12
    18ac:	46bd      	mov	sp, r7
    18ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    18b2:	4770      	bx	lr

000018b4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
    18b4:	b480      	push	{r7}
    18b6:	b083      	sub	sp, #12
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	2210      	movs	r2, #16
    18c0:	601a      	str	r2, [r3, #0]
}
    18c2:	370c      	adds	r7, #12
    18c4:	46bd      	mov	sp, r7
    18c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18ca:	4770      	bx	lr

000018cc <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
    18cc:	b480      	push	{r7}
    18ce:	b083      	sub	sp, #12
    18d0:	af00      	add	r7, sp, #0
    18d2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	2224      	movs	r2, #36	; 0x24
    18d8:	601a      	str	r2, [r3, #0]
}
    18da:	370c      	adds	r7, #12
    18dc:	46bd      	mov	sp, r7
    18de:	f85d 7b04 	ldr.w	r7, [sp], #4
    18e2:	4770      	bx	lr

000018e4 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
    18e4:	b480      	push	{r7}
    18e6:	b083      	sub	sp, #12
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
    18ec:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	683a      	ldr	r2, [r7, #0]
    18f2:	609a      	str	r2, [r3, #8]
}
    18f4:	370c      	adds	r7, #12
    18f6:	46bd      	mov	sp, r7
    18f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    18fc:	4770      	bx	lr
    18fe:	bf00      	nop

00001900 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
    1900:	b480      	push	{r7}
    1902:	b083      	sub	sp, #12
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	f44f 7280 	mov.w	r2, #256	; 0x100
    190e:	601a      	str	r2, [r3, #0]
}
    1910:	370c      	adds	r7, #12
    1912:	46bd      	mov	sp, r7
    1914:	f85d 7b04 	ldr.w	r7, [sp], #4
    1918:	4770      	bx	lr
    191a:	bf00      	nop

0000191c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
    191c:	b480      	push	{r7}
    191e:	b083      	sub	sp, #12
    1920:	af00      	add	r7, sp, #0
    1922:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
    1924:	687b      	ldr	r3, [r7, #4]
    1926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    192a:	601a      	str	r2, [r3, #0]
}
    192c:	370c      	adds	r7, #12
    192e:	46bd      	mov	sp, r7
    1930:	f85d 7b04 	ldr.w	r7, [sp], #4
    1934:	4770      	bx	lr
    1936:	bf00      	nop

00001938 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
    1938:	b480      	push	{r7}
    193a:	b083      	sub	sp, #12
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1946:	601a      	str	r2, [r3, #0]
}
    1948:	370c      	adds	r7, #12
    194a:	46bd      	mov	sp, r7
    194c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1950:	4770      	bx	lr
    1952:	bf00      	nop

00001954 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1962:	601a      	str	r2, [r3, #0]
}
    1964:	370c      	adds	r7, #12
    1966:	46bd      	mov	sp, r7
    1968:	f85d 7b04 	ldr.w	r7, [sp], #4
    196c:	4770      	bx	lr
    196e:	bf00      	nop

00001970 <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    197e:	601a      	str	r2, [r3, #0]
}
    1980:	370c      	adds	r7, #12
    1982:	46bd      	mov	sp, r7
    1984:	f85d 7b04 	ldr.w	r7, [sp], #4
    1988:	4770      	bx	lr
    198a:	bf00      	nop

0000198c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	695b      	ldr	r3, [r3, #20]
    199a:	f003 0302 	and.w	r3, r3, #2
    199e:	2b00      	cmp	r3, #0
    19a0:	d101      	bne.n	19a6 <usart_write+0x1a>
		return 1;
    19a2:	2301      	movs	r3, #1
    19a4:	e005      	b.n	19b2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    19a6:	683b      	ldr	r3, [r7, #0]
    19a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	61da      	str	r2, [r3, #28]
	return 0;
    19b0:	2300      	movs	r3, #0
}
    19b2:	4618      	mov	r0, r3
    19b4:	370c      	adds	r7, #12
    19b6:	46bd      	mov	sp, r7
    19b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    19bc:	4770      	bx	lr
    19be:	bf00      	nop

000019c0 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
    19c0:	b480      	push	{r7}
    19c2:	b083      	sub	sp, #12
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
    19c8:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    19ca:	bf00      	nop
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	695b      	ldr	r3, [r3, #20]
    19d0:	f003 0302 	and.w	r3, r3, #2
    19d4:	2b00      	cmp	r3, #0
    19d6:	d0f9      	beq.n	19cc <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    19d8:	683b      	ldr	r3, [r7, #0]
    19da:	f3c3 0208 	ubfx	r2, r3, #0, #9
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	61da      	str	r2, [r3, #28]

	return 0;
    19e2:	2300      	movs	r3, #0
}
    19e4:	4618      	mov	r0, r3
    19e6:	370c      	adds	r7, #12
    19e8:	46bd      	mov	sp, r7
    19ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ee:	4770      	bx	lr

000019f0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
    19f0:	b480      	push	{r7}
    19f2:	b083      	sub	sp, #12
    19f4:	af00      	add	r7, sp, #0
    19f6:	6078      	str	r0, [r7, #4]
    19f8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	695b      	ldr	r3, [r3, #20]
    19fe:	f003 0301 	and.w	r3, r3, #1
    1a02:	2b00      	cmp	r3, #0
    1a04:	d101      	bne.n	1a0a <usart_read+0x1a>
		return 1;
    1a06:	2301      	movs	r3, #1
    1a08:	e006      	b.n	1a18 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	699b      	ldr	r3, [r3, #24]
    1a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1a12:	683b      	ldr	r3, [r7, #0]
    1a14:	601a      	str	r2, [r3, #0]

	return 0;
    1a16:	2300      	movs	r3, #0
}
    1a18:	4618      	mov	r0, r3
    1a1a:	370c      	adds	r7, #12
    1a1c:	46bd      	mov	sp, r7
    1a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a22:	4770      	bx	lr

00001a24 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
    1a24:	b480      	push	{r7}
    1a26:	b083      	sub	sp, #12
    1a28:	af00      	add	r7, sp, #0
    1a2a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	4a04      	ldr	r2, [pc, #16]	; (1a40 <usart_disable_writeprotect+0x1c>)
    1a30:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
    1a34:	370c      	adds	r7, #12
    1a36:	46bd      	mov	sp, r7
    1a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a3c:	4770      	bx	lr
    1a3e:	bf00      	nop
    1a40:	55534100 	.word	0x55534100

00001a44 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	4603      	mov	r3, r0
    1a4c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    1a4e:	4b08      	ldr	r3, [pc, #32]	; (1a70 <NVIC_EnableIRQ+0x2c>)
    1a50:	f997 2007 	ldrsb.w	r2, [r7, #7]
    1a54:	0952      	lsrs	r2, r2, #5
    1a56:	79f9      	ldrb	r1, [r7, #7]
    1a58:	f001 011f 	and.w	r1, r1, #31
    1a5c:	2001      	movs	r0, #1
    1a5e:	fa00 f101 	lsl.w	r1, r0, r1
    1a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1a66:	370c      	adds	r7, #12
    1a68:	46bd      	mov	sp, r7
    1a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a6e:	4770      	bx	lr
    1a70:	e000e100 	.word	0xe000e100

00001a74 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1a74:	b480      	push	{r7}
    1a76:	b083      	sub	sp, #12
    1a78:	af00      	add	r7, sp, #0
    1a7a:	4603      	mov	r3, r0
    1a7c:	6039      	str	r1, [r7, #0]
    1a7e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1a84:	2b00      	cmp	r3, #0
    1a86:	da0b      	bge.n	1aa0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1a88:	490d      	ldr	r1, [pc, #52]	; (1ac0 <NVIC_SetPriority+0x4c>)
    1a8a:	79fb      	ldrb	r3, [r7, #7]
    1a8c:	f003 030f 	and.w	r3, r3, #15
    1a90:	3b04      	subs	r3, #4
    1a92:	683a      	ldr	r2, [r7, #0]
    1a94:	b2d2      	uxtb	r2, r2
    1a96:	0112      	lsls	r2, r2, #4
    1a98:	b2d2      	uxtb	r2, r2
    1a9a:	440b      	add	r3, r1
    1a9c:	761a      	strb	r2, [r3, #24]
    1a9e:	e009      	b.n	1ab4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1aa0:	4908      	ldr	r1, [pc, #32]	; (1ac4 <NVIC_SetPriority+0x50>)
    1aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1aa6:	683a      	ldr	r2, [r7, #0]
    1aa8:	b2d2      	uxtb	r2, r2
    1aaa:	0112      	lsls	r2, r2, #4
    1aac:	b2d2      	uxtb	r2, r2
    1aae:	440b      	add	r3, r1
    1ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1ab4:	370c      	adds	r7, #12
    1ab6:	46bd      	mov	sp, r7
    1ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1abc:	4770      	bx	lr
    1abe:	bf00      	nop
    1ac0:	e000ed00 	.word	0xe000ed00
    1ac4:	e000e100 	.word	0xe000e100

00001ac8 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
    1ac8:	b480      	push	{r7}
    1aca:	b083      	sub	sp, #12
    1acc:	af00      	add	r7, sp, #0
    1ace:	4603      	mov	r3, r0
    1ad0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    1ad2:	79fb      	ldrb	r3, [r7, #7]
    1ad4:	2b06      	cmp	r3, #6
    1ad6:	d821      	bhi.n	1b1c <osc_get_rate+0x54>
    1ad8:	a201      	add	r2, pc, #4	; (adr r2, 1ae0 <osc_get_rate+0x18>)
    1ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ade:	bf00      	nop
    1ae0:	00001afd 	.word	0x00001afd
    1ae4:	00001b01 	.word	0x00001b01
    1ae8:	00001b07 	.word	0x00001b07
    1aec:	00001b0d 	.word	0x00001b0d
    1af0:	00001b11 	.word	0x00001b11
    1af4:	00001b15 	.word	0x00001b15
    1af8:	00001b19 	.word	0x00001b19
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
    1afc:	4b0b      	ldr	r3, [pc, #44]	; (1b2c <osc_get_rate+0x64>)
    1afe:	e00e      	b.n	1b1e <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
    1b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1b04:	e00b      	b.n	1b1e <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    1b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1b0a:	e008      	b.n	1b1e <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <osc_get_rate+0x68>)
    1b0e:	e006      	b.n	1b1e <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
    1b10:	4b08      	ldr	r3, [pc, #32]	; (1b34 <osc_get_rate+0x6c>)
    1b12:	e004      	b.n	1b1e <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
    1b14:	4b08      	ldr	r3, [pc, #32]	; (1b38 <osc_get_rate+0x70>)
    1b16:	e002      	b.n	1b1e <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    1b18:	4b08      	ldr	r3, [pc, #32]	; (1b3c <osc_get_rate+0x74>)
    1b1a:	e000      	b.n	1b1e <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
    1b1c:	2300      	movs	r3, #0
	}
}
    1b1e:	4618      	mov	r0, r3
    1b20:	370c      	adds	r7, #12
    1b22:	46bd      	mov	sp, r7
    1b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop
    1b2c:	00b71b00 	.word	0x00b71b00
    1b30:	04c4b400 	.word	0x04c4b400
    1b34:	003d0900 	.word	0x003d0900
    1b38:	000f4240 	.word	0x000f4240
    1b3c:	0001c138 	.word	0x0001c138

00001b40 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
    1b44:	2000      	movs	r0, #0
    1b46:	4b03      	ldr	r3, [pc, #12]	; (1b54 <sysclk_get_main_hz+0x14>)
    1b48:	4798      	blx	r3
    1b4a:	4603      	mov	r3, r0
    1b4c:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    1b4e:	4618      	mov	r0, r3
    1b50:	bd80      	pop	{r7, pc}
    1b52:	bf00      	nop
    1b54:	00001ac9 	.word	0x00001ac9

00001b58 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    1b5c:	4b02      	ldr	r3, [pc, #8]	; (1b68 <sysclk_get_cpu_hz+0x10>)
    1b5e:	4798      	blx	r3
    1b60:	4603      	mov	r3, r0
}
    1b62:	4618      	mov	r0, r3
    1b64:	bd80      	pop	{r7, pc}
    1b66:	bf00      	nop
    1b68:	00001b41 	.word	0x00001b41

00001b6c <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <sysclk_get_pba_hz+0x10>)
    1b72:	4798      	blx	r3
    1b74:	4603      	mov	r3, r0
}
    1b76:	4618      	mov	r0, r3
    1b78:	bd80      	pop	{r7, pc}
    1b7a:	bf00      	nop
    1b7c:	00001b41 	.word	0x00001b41

00001b80 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
    1b84:	4b02      	ldr	r3, [pc, #8]	; (1b90 <sysclk_get_pbb_hz+0x10>)
    1b86:	4798      	blx	r3
    1b88:	4603      	mov	r3, r0
}
    1b8a:	4618      	mov	r0, r3
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	bf00      	nop
    1b90:	00001b41 	.word	0x00001b41

00001b94 <sysclk_get_pbc_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus C clock
 *
 * \return Frequency of the Peripheral Bus C clock, in Hz.
 */
static inline uint32_t sysclk_get_pbc_hz(void)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBC_DIV;
    1b98:	4b02      	ldr	r3, [pc, #8]	; (1ba4 <sysclk_get_pbc_hz+0x10>)
    1b9a:	4798      	blx	r3
    1b9c:	4603      	mov	r3, r0
}
    1b9e:	4618      	mov	r0, r3
    1ba0:	bd80      	pop	{r7, pc}
    1ba2:	bf00      	nop
    1ba4:	00001b41 	.word	0x00001b41

00001ba8 <sysclk_get_pbd_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus D clock
 *
 * \return Frequency of the Peripheral Bus D clock, in Hz.
 */
static inline uint32_t sysclk_get_pbd_hz(void)
{
    1ba8:	b580      	push	{r7, lr}
    1baa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBD_DIV;
    1bac:	4b02      	ldr	r3, [pc, #8]	; (1bb8 <sysclk_get_pbd_hz+0x10>)
    1bae:	4798      	blx	r3
    1bb0:	4603      	mov	r3, r0
}
    1bb2:	4618      	mov	r0, r3
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	bf00      	nop
    1bb8:	00001b41 	.word	0x00001b41
    1bbc:	00000000 	.word	0x00000000

00001bc0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    1bc0:	b5b0      	push	{r4, r5, r7, lr}
    1bc2:	b08e      	sub	sp, #56	; 0x38
    1bc4:	af00      	add	r7, sp, #0
    1bc6:	4603      	mov	r3, r0
    1bc8:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    1bca:	2311      	movs	r3, #17
    1bcc:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    1bce:	f107 030c 	add.w	r3, r7, #12
    1bd2:	4839      	ldr	r0, [pc, #228]	; (1cb8 <ssd1306_write_command+0xf8>)
    1bd4:	4619      	mov	r1, r3
    1bd6:	4b39      	ldr	r3, [pc, #228]	; (1cbc <ssd1306_write_command+0xfc>)
    1bd8:	4798      	blx	r3
    1bda:	234f      	movs	r3, #79	; 0x4f
    1bdc:	637b      	str	r3, [r7, #52]	; 0x34
    1bde:	2300      	movs	r3, #0
    1be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    1be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1be8:	2b00      	cmp	r3, #0
    1bea:	d016      	beq.n	1c1a <ssd1306_write_command+0x5a>
    1bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    1bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bf2:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1bf6:	095b      	lsrs	r3, r3, #5
    1bf8:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    1bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bfc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1c00:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    1c04:	025b      	lsls	r3, r3, #9
    1c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1c08:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1c0a:	6a3a      	ldr	r2, [r7, #32]
    1c0c:	f002 021f 	and.w	r2, r2, #31
    1c10:	2101      	movs	r1, #1
    1c12:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1c16:	655a      	str	r2, [r3, #84]	; 0x54
    1c18:	e015      	b.n	1c46 <ssd1306_write_command+0x86>
    1c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1c1c:	61fb      	str	r3, [r7, #28]
    1c1e:	69fb      	ldr	r3, [r7, #28]
    1c20:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1c22:	69bb      	ldr	r3, [r7, #24]
    1c24:	095b      	lsrs	r3, r3, #5
    1c26:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    1c28:	697b      	ldr	r3, [r7, #20]
    1c2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1c2e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    1c32:	025b      	lsls	r3, r3, #9
    1c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1c36:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1c38:	693a      	ldr	r2, [r7, #16]
    1c3a:	f002 021f 	and.w	r2, r2, #31
    1c3e:	2101      	movs	r1, #1
    1c40:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    1c44:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
    1c46:	79fb      	ldrb	r3, [r7, #7]
    1c48:	481b      	ldr	r0, [pc, #108]	; (1cb8 <ssd1306_write_command+0xf8>)
    1c4a:	4619      	mov	r1, r3
    1c4c:	4b1c      	ldr	r3, [pc, #112]	; (1cc0 <ssd1306_write_command+0x100>)
    1c4e:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
    1c50:	4b1c      	ldr	r3, [pc, #112]	; (1cc4 <ssd1306_write_command+0x104>)
    1c52:	4798      	blx	r3
    1c54:	4603      	mov	r3, r0
    1c56:	4618      	mov	r0, r3
    1c58:	f04f 0100 	mov.w	r1, #0
    1c5c:	4602      	mov	r2, r0
    1c5e:	460b      	mov	r3, r1
    1c60:	009d      	lsls	r5, r3, #2
    1c62:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    1c66:	0094      	lsls	r4, r2, #2
    1c68:	4622      	mov	r2, r4
    1c6a:	462b      	mov	r3, r5
    1c6c:	1880      	adds	r0, r0, r2
    1c6e:	eb41 0103 	adc.w	r1, r1, r3
    1c72:	a30f      	add	r3, pc, #60	; (adr r3, 1cb0 <ssd1306_write_command+0xf0>)
    1c74:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c78:	1812      	adds	r2, r2, r0
    1c7a:	eb43 0301 	adc.w	r3, r3, r1
    1c7e:	4c12      	ldr	r4, [pc, #72]	; (1cc8 <ssd1306_write_command+0x108>)
    1c80:	4610      	mov	r0, r2
    1c82:	4619      	mov	r1, r3
    1c84:	4a11      	ldr	r2, [pc, #68]	; (1ccc <ssd1306_write_command+0x10c>)
    1c86:	f04f 0300 	mov.w	r3, #0
    1c8a:	47a0      	blx	r4
    1c8c:	4602      	mov	r2, r0
    1c8e:	460b      	mov	r3, r1
    1c90:	4613      	mov	r3, r2
    1c92:	4618      	mov	r0, r3
    1c94:	4b0e      	ldr	r3, [pc, #56]	; (1cd0 <ssd1306_write_command+0x110>)
    1c96:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    1c98:	f107 030c 	add.w	r3, r7, #12
    1c9c:	4806      	ldr	r0, [pc, #24]	; (1cb8 <ssd1306_write_command+0xf8>)
    1c9e:	4619      	mov	r1, r3
    1ca0:	4b0c      	ldr	r3, [pc, #48]	; (1cd4 <ssd1306_write_command+0x114>)
    1ca2:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    1ca4:	3738      	adds	r7, #56	; 0x38
    1ca6:	46bd      	mov	sp, r7
    1ca8:	bdb0      	pop	{r4, r5, r7, pc}
    1caa:	bf00      	nop
    1cac:	f3af 8000 	nop.w
    1cb0:	00d59f7f 	.word	0x00d59f7f
    1cb4:	00000000 	.word	0x00000000
    1cb8:	4002c000 	.word	0x4002c000
    1cbc:	00000a69 	.word	0x00000a69
    1cc0:	00000a49 	.word	0x00000a49
    1cc4:	00001b59 	.word	0x00001b59
    1cc8:	00007cd1 	.word	0x00007cd1
    1ccc:	00d59f80 	.word	0x00d59f80
    1cd0:	20000001 	.word	0x20000001
    1cd4:	00000a85 	.word	0x00000a85

00001cd8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
    1cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1cdc:	b099      	sub	sp, #100	; 0x64
    1cde:	af00      	add	r7, sp, #0
    1ce0:	4603      	mov	r3, r0
    1ce2:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    1ce4:	2311      	movs	r3, #17
    1ce6:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    1ce8:	f107 030c 	add.w	r3, r7, #12
    1cec:	4866      	ldr	r0, [pc, #408]	; (1e88 <ssd1306_write_data+0x1b0>)
    1cee:	4619      	mov	r1, r3
    1cf0:	4b66      	ldr	r3, [pc, #408]	; (1e8c <ssd1306_write_data+0x1b4>)
    1cf2:	4798      	blx	r3
    1cf4:	234f      	movs	r3, #79	; 0x4f
    1cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    1cf8:	2301      	movs	r3, #1
    1cfa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    1cfe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    1d02:	2b00      	cmp	r3, #0
    1d04:	d016      	beq.n	1d34 <ssd1306_write_data+0x5c>
    1d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1d08:	657b      	str	r3, [r7, #84]	; 0x54
    1d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d0c:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1d10:	095b      	lsrs	r3, r3, #5
    1d12:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    1d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1d1a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    1d1e:	025b      	lsls	r3, r3, #9
    1d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    1d22:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
    1d26:	f002 021f 	and.w	r2, r2, #31
    1d2a:	2101      	movs	r1, #1
    1d2c:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1d30:	655a      	str	r2, [r3, #84]	; 0x54
    1d32:	e015      	b.n	1d60 <ssd1306_write_data+0x88>
    1d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1d36:	647b      	str	r3, [r7, #68]	; 0x44
    1d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1d3a:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d3e:	095b      	lsrs	r3, r3, #5
    1d40:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    1d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d44:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1d48:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    1d4c:	025b      	lsls	r3, r3, #9
    1d4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    1d50:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1d54:	f002 021f 	and.w	r2, r2, #31
    1d58:	2101      	movs	r1, #1
    1d5a:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    1d5e:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    1d60:	4b4b      	ldr	r3, [pc, #300]	; (1e90 <ssd1306_write_data+0x1b8>)
    1d62:	4798      	blx	r3
    1d64:	4603      	mov	r3, r0
    1d66:	4618      	mov	r0, r3
    1d68:	f04f 0100 	mov.w	r1, #0
    1d6c:	4602      	mov	r2, r0
    1d6e:	460b      	mov	r3, r1
    1d70:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1d74:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    1d78:	ea4f 0882 	mov.w	r8, r2, lsl #2
    1d7c:	4642      	mov	r2, r8
    1d7e:	464b      	mov	r3, r9
    1d80:	1880      	adds	r0, r0, r2
    1d82:	eb41 0103 	adc.w	r1, r1, r3
    1d86:	a33e      	add	r3, pc, #248	; (adr r3, 1e80 <ssd1306_write_data+0x1a8>)
    1d88:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d8c:	1812      	adds	r2, r2, r0
    1d8e:	eb43 0301 	adc.w	r3, r3, r1
    1d92:	4e40      	ldr	r6, [pc, #256]	; (1e94 <ssd1306_write_data+0x1bc>)
    1d94:	4610      	mov	r0, r2
    1d96:	4619      	mov	r1, r3
    1d98:	4a3f      	ldr	r2, [pc, #252]	; (1e98 <ssd1306_write_data+0x1c0>)
    1d9a:	f04f 0300 	mov.w	r3, #0
    1d9e:	47b0      	blx	r6
    1da0:	4602      	mov	r2, r0
    1da2:	460b      	mov	r3, r1
    1da4:	4613      	mov	r3, r2
    1da6:	4618      	mov	r0, r3
    1da8:	4b3c      	ldr	r3, [pc, #240]	; (1e9c <ssd1306_write_data+0x1c4>)
    1daa:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
    1dac:	79fb      	ldrb	r3, [r7, #7]
    1dae:	4836      	ldr	r0, [pc, #216]	; (1e88 <ssd1306_write_data+0x1b0>)
    1db0:	4619      	mov	r1, r3
    1db2:	4b3b      	ldr	r3, [pc, #236]	; (1ea0 <ssd1306_write_data+0x1c8>)
    1db4:	4798      	blx	r3
    1db6:	234f      	movs	r3, #79	; 0x4f
    1db8:	637b      	str	r3, [r7, #52]	; 0x34
    1dba:	2301      	movs	r3, #1
    1dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    1dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d016      	beq.n	1df6 <ssd1306_write_data+0x11e>
    1dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    1dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1dce:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1dd2:	095b      	lsrs	r3, r3, #5
    1dd4:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    1dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1dd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1ddc:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    1de0:	025b      	lsls	r3, r3, #9
    1de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1de4:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1de6:	6a3a      	ldr	r2, [r7, #32]
    1de8:	f002 021f 	and.w	r2, r2, #31
    1dec:	2101      	movs	r1, #1
    1dee:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1df2:	655a      	str	r2, [r3, #84]	; 0x54
    1df4:	e015      	b.n	1e22 <ssd1306_write_data+0x14a>
    1df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1df8:	61fb      	str	r3, [r7, #28]
    1dfa:	69fb      	ldr	r3, [r7, #28]
    1dfc:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1dfe:	69bb      	ldr	r3, [r7, #24]
    1e00:	095b      	lsrs	r3, r3, #5
    1e02:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    1e04:	697b      	ldr	r3, [r7, #20]
    1e06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1e0a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    1e0e:	025b      	lsls	r3, r3, #9
    1e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1e12:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1e14:	693a      	ldr	r2, [r7, #16]
    1e16:	f002 021f 	and.w	r2, r2, #31
    1e1a:	2101      	movs	r1, #1
    1e1c:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    1e20:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
    1e22:	4b1b      	ldr	r3, [pc, #108]	; (1e90 <ssd1306_write_data+0x1b8>)
    1e24:	4798      	blx	r3
    1e26:	4603      	mov	r3, r0
    1e28:	4618      	mov	r0, r3
    1e2a:	f04f 0100 	mov.w	r1, #0
    1e2e:	4602      	mov	r2, r0
    1e30:	460b      	mov	r3, r1
    1e32:	009d      	lsls	r5, r3, #2
    1e34:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    1e38:	0094      	lsls	r4, r2, #2
    1e3a:	4622      	mov	r2, r4
    1e3c:	462b      	mov	r3, r5
    1e3e:	1880      	adds	r0, r0, r2
    1e40:	eb41 0103 	adc.w	r1, r1, r3
    1e44:	a30e      	add	r3, pc, #56	; (adr r3, 1e80 <ssd1306_write_data+0x1a8>)
    1e46:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e4a:	1812      	adds	r2, r2, r0
    1e4c:	eb43 0301 	adc.w	r3, r3, r1
    1e50:	4c10      	ldr	r4, [pc, #64]	; (1e94 <ssd1306_write_data+0x1bc>)
    1e52:	4610      	mov	r0, r2
    1e54:	4619      	mov	r1, r3
    1e56:	4a10      	ldr	r2, [pc, #64]	; (1e98 <ssd1306_write_data+0x1c0>)
    1e58:	f04f 0300 	mov.w	r3, #0
    1e5c:	47a0      	blx	r4
    1e5e:	4602      	mov	r2, r0
    1e60:	460b      	mov	r3, r1
    1e62:	4613      	mov	r3, r2
    1e64:	4618      	mov	r0, r3
    1e66:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <ssd1306_write_data+0x1c4>)
    1e68:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    1e6a:	f107 030c 	add.w	r3, r7, #12
    1e6e:	4806      	ldr	r0, [pc, #24]	; (1e88 <ssd1306_write_data+0x1b0>)
    1e70:	4619      	mov	r1, r3
    1e72:	4b0c      	ldr	r3, [pc, #48]	; (1ea4 <ssd1306_write_data+0x1cc>)
    1e74:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    1e76:	3764      	adds	r7, #100	; 0x64
    1e78:	46bd      	mov	sp, r7
    1e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e7e:	bf00      	nop
    1e80:	00d59f7f 	.word	0x00d59f7f
    1e84:	00000000 	.word	0x00000000
    1e88:	4002c000 	.word	0x4002c000
    1e8c:	00000a69 	.word	0x00000a69
    1e90:	00001b59 	.word	0x00001b59
    1e94:	00007cd1 	.word	0x00007cd1
    1e98:	00d59f80 	.word	0x00d59f80
    1e9c:	20000001 	.word	0x20000001
    1ea0:	00000a49 	.word	0x00000a49
    1ea4:	00000a85 	.word	0x00000a85

00001ea8 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b082      	sub	sp, #8
    1eac:	af00      	add	r7, sp, #0
    1eae:	4603      	mov	r3, r0
    1eb0:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    1eb2:	79fb      	ldrb	r3, [r7, #7]
    1eb4:	f003 030f 	and.w	r3, r3, #15
    1eb8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    1eba:	79fb      	ldrb	r3, [r7, #7]
    1ebc:	f003 0307 	and.w	r3, r3, #7
    1ec0:	b2db      	uxtb	r3, r3
    1ec2:	f063 034f 	orn	r3, r3, #79	; 0x4f
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	b2db      	uxtb	r3, r3
    1eca:	4618      	mov	r0, r3
    1ecc:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <ssd1306_set_page_address+0x30>)
    1ece:	4798      	blx	r3
}
    1ed0:	3708      	adds	r7, #8
    1ed2:	46bd      	mov	sp, r7
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	bf00      	nop
    1ed8:	00001bc1 	.word	0x00001bc1

00001edc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	4603      	mov	r3, r0
    1ee4:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
    1ee6:	79fb      	ldrb	r3, [r7, #7]
    1ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1eec:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    1eee:	79fb      	ldrb	r3, [r7, #7]
    1ef0:	091b      	lsrs	r3, r3, #4
    1ef2:	b2db      	uxtb	r3, r3
    1ef4:	f043 0310 	orr.w	r3, r3, #16
    1ef8:	b2db      	uxtb	r3, r3
    1efa:	4618      	mov	r0, r3
    1efc:	4b05      	ldr	r3, [pc, #20]	; (1f14 <ssd1306_set_column_address+0x38>)
    1efe:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    1f00:	79fb      	ldrb	r3, [r7, #7]
    1f02:	f003 030f 	and.w	r3, r3, #15
    1f06:	b2db      	uxtb	r3, r3
    1f08:	4618      	mov	r0, r3
    1f0a:	4b02      	ldr	r3, [pc, #8]	; (1f14 <ssd1306_set_column_address+0x38>)
    1f0c:	4798      	blx	r3
}
    1f0e:	3708      	adds	r7, #8
    1f10:	46bd      	mov	sp, r7
    1f12:	bd80      	pop	{r7, pc}
    1f14:	00001bc1 	.word	0x00001bc1

00001f18 <ssd1306_clear>:
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
}

static inline void ssd1306_clear(void)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b082      	sub	sp, #8
    1f1c:	af00      	add	r7, sp, #0
	uint8_t page = 0;
    1f1e:	2300      	movs	r3, #0
    1f20:	71fb      	strb	r3, [r7, #7]
	uint8_t col = 0;
    1f22:	2300      	movs	r3, #0
    1f24:	71bb      	strb	r3, [r7, #6]

	for (page = 0; page < 4; ++page)
    1f26:	2300      	movs	r3, #0
    1f28:	71fb      	strb	r3, [r7, #7]
    1f2a:	e016      	b.n	1f5a <ssd1306_clear+0x42>
	{
		ssd1306_set_page_address(page);
    1f2c:	79fb      	ldrb	r3, [r7, #7]
    1f2e:	4618      	mov	r0, r3
    1f30:	4b0d      	ldr	r3, [pc, #52]	; (1f68 <ssd1306_clear+0x50>)
    1f32:	4798      	blx	r3
		ssd1306_set_column_address(0);
    1f34:	2000      	movs	r0, #0
    1f36:	4b0d      	ldr	r3, [pc, #52]	; (1f6c <ssd1306_clear+0x54>)
    1f38:	4798      	blx	r3
		for (col = 0; col < 128; ++col)
    1f3a:	2300      	movs	r3, #0
    1f3c:	71bb      	strb	r3, [r7, #6]
    1f3e:	e005      	b.n	1f4c <ssd1306_clear+0x34>
		{
			ssd1306_write_data(0x00);
    1f40:	2000      	movs	r0, #0
    1f42:	4b0b      	ldr	r3, [pc, #44]	; (1f70 <ssd1306_clear+0x58>)
    1f44:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    1f46:	79bb      	ldrb	r3, [r7, #6]
    1f48:	3301      	adds	r3, #1
    1f4a:	71bb      	strb	r3, [r7, #6]
    1f4c:	79bb      	ldrb	r3, [r7, #6]
    1f4e:	b25b      	sxtb	r3, r3
    1f50:	2b00      	cmp	r3, #0
    1f52:	daf5      	bge.n	1f40 <ssd1306_clear+0x28>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    1f54:	79fb      	ldrb	r3, [r7, #7]
    1f56:	3301      	adds	r3, #1
    1f58:	71fb      	strb	r3, [r7, #7]
    1f5a:	79fb      	ldrb	r3, [r7, #7]
    1f5c:	2b03      	cmp	r3, #3
    1f5e:	d9e5      	bls.n	1f2c <ssd1306_clear+0x14>
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
		}
	}
}
    1f60:	3708      	adds	r7, #8
    1f62:	46bd      	mov	sp, r7
    1f64:	bd80      	pop	{r7, pc}
    1f66:	bf00      	nop
    1f68:	00001ea9 	.word	0x00001ea9
    1f6c:	00001edd 	.word	0x00001edd
    1f70:	00001cd9 	.word	0x00001cd9

00001f74 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
    1f74:	b580      	push	{r7, lr}
    1f76:	b088      	sub	sp, #32
    1f78:	af00      	add	r7, sp, #0
    1f7a:	6078      	str	r0, [r7, #4]
    1f7c:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    1f7e:	683b      	ldr	r3, [r7, #0]
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
    1f84:	683b      	ldr	r3, [r7, #0]
    1f86:	685b      	ldr	r3, [r3, #4]
    1f88:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
    1f8a:	683b      	ldr	r3, [r7, #0]
    1f8c:	689b      	ldr	r3, [r3, #8]
    1f8e:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
    1f90:	683b      	ldr	r3, [r7, #0]
    1f92:	7b1b      	ldrb	r3, [r3, #12]
    1f94:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    1f96:	2300      	movs	r3, #0
    1f98:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1f9a:	687a      	ldr	r2, [r7, #4]
    1f9c:	4b30      	ldr	r3, [pc, #192]	; (2060 <usart_serial_init+0xec>)
    1f9e:	429a      	cmp	r2, r3
    1fa0:	d113      	bne.n	1fca <usart_serial_init+0x56>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    1fa2:	6878      	ldr	r0, [r7, #4]
    1fa4:	4b2f      	ldr	r3, [pc, #188]	; (2064 <usart_serial_init+0xf0>)
    1fa6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1fa8:	6878      	ldr	r0, [r7, #4]
    1faa:	4b2f      	ldr	r3, [pc, #188]	; (2068 <usart_serial_init+0xf4>)
    1fac:	4798      	blx	r3
    1fae:	4603      	mov	r3, r0
    1fb0:	f107 0208 	add.w	r2, r7, #8
    1fb4:	6878      	ldr	r0, [r7, #4]
    1fb6:	4611      	mov	r1, r2
    1fb8:	461a      	mov	r2, r3
    1fba:	4b2c      	ldr	r3, [pc, #176]	; (206c <usart_serial_init+0xf8>)
    1fbc:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    1fbe:	6878      	ldr	r0, [r7, #4]
    1fc0:	4b2b      	ldr	r3, [pc, #172]	; (2070 <usart_serial_init+0xfc>)
    1fc2:	4798      	blx	r3
		usart_enable_rx(p_usart);
    1fc4:	6878      	ldr	r0, [r7, #4]
    1fc6:	4b2b      	ldr	r3, [pc, #172]	; (2074 <usart_serial_init+0x100>)
    1fc8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1fca:	687a      	ldr	r2, [r7, #4]
    1fcc:	4b2a      	ldr	r3, [pc, #168]	; (2078 <usart_serial_init+0x104>)
    1fce:	429a      	cmp	r2, r3
    1fd0:	d113      	bne.n	1ffa <usart_serial_init+0x86>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    1fd2:	6878      	ldr	r0, [r7, #4]
    1fd4:	4b23      	ldr	r3, [pc, #140]	; (2064 <usart_serial_init+0xf0>)
    1fd6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    1fd8:	6878      	ldr	r0, [r7, #4]
    1fda:	4b23      	ldr	r3, [pc, #140]	; (2068 <usart_serial_init+0xf4>)
    1fdc:	4798      	blx	r3
    1fde:	4603      	mov	r3, r0
    1fe0:	f107 0208 	add.w	r2, r7, #8
    1fe4:	6878      	ldr	r0, [r7, #4]
    1fe6:	4611      	mov	r1, r2
    1fe8:	461a      	mov	r2, r3
    1fea:	4b20      	ldr	r3, [pc, #128]	; (206c <usart_serial_init+0xf8>)
    1fec:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    1fee:	6878      	ldr	r0, [r7, #4]
    1ff0:	4b1f      	ldr	r3, [pc, #124]	; (2070 <usart_serial_init+0xfc>)
    1ff2:	4798      	blx	r3
		usart_enable_rx(p_usart);
    1ff4:	6878      	ldr	r0, [r7, #4]
    1ff6:	4b1f      	ldr	r3, [pc, #124]	; (2074 <usart_serial_init+0x100>)
    1ff8:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    1ffa:	687a      	ldr	r2, [r7, #4]
    1ffc:	4b1f      	ldr	r3, [pc, #124]	; (207c <usart_serial_init+0x108>)
    1ffe:	429a      	cmp	r2, r3
    2000:	d113      	bne.n	202a <usart_serial_init+0xb6>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    2002:	6878      	ldr	r0, [r7, #4]
    2004:	4b17      	ldr	r3, [pc, #92]	; (2064 <usart_serial_init+0xf0>)
    2006:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    2008:	6878      	ldr	r0, [r7, #4]
    200a:	4b17      	ldr	r3, [pc, #92]	; (2068 <usart_serial_init+0xf4>)
    200c:	4798      	blx	r3
    200e:	4603      	mov	r3, r0
    2010:	f107 0208 	add.w	r2, r7, #8
    2014:	6878      	ldr	r0, [r7, #4]
    2016:	4611      	mov	r1, r2
    2018:	461a      	mov	r2, r3
    201a:	4b14      	ldr	r3, [pc, #80]	; (206c <usart_serial_init+0xf8>)
    201c:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    201e:	6878      	ldr	r0, [r7, #4]
    2020:	4b13      	ldr	r3, [pc, #76]	; (2070 <usart_serial_init+0xfc>)
    2022:	4798      	blx	r3
		usart_enable_rx(p_usart);
    2024:	6878      	ldr	r0, [r7, #4]
    2026:	4b13      	ldr	r3, [pc, #76]	; (2074 <usart_serial_init+0x100>)
    2028:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    202a:	687a      	ldr	r2, [r7, #4]
    202c:	4b14      	ldr	r3, [pc, #80]	; (2080 <usart_serial_init+0x10c>)
    202e:	429a      	cmp	r2, r3
    2030:	d113      	bne.n	205a <usart_serial_init+0xe6>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    2032:	6878      	ldr	r0, [r7, #4]
    2034:	4b0b      	ldr	r3, [pc, #44]	; (2064 <usart_serial_init+0xf0>)
    2036:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    2038:	6878      	ldr	r0, [r7, #4]
    203a:	4b0b      	ldr	r3, [pc, #44]	; (2068 <usart_serial_init+0xf4>)
    203c:	4798      	blx	r3
    203e:	4603      	mov	r3, r0
    2040:	f107 0208 	add.w	r2, r7, #8
    2044:	6878      	ldr	r0, [r7, #4]
    2046:	4611      	mov	r1, r2
    2048:	461a      	mov	r2, r3
    204a:	4b08      	ldr	r3, [pc, #32]	; (206c <usart_serial_init+0xf8>)
    204c:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    204e:	6878      	ldr	r0, [r7, #4]
    2050:	4b07      	ldr	r3, [pc, #28]	; (2070 <usart_serial_init+0xfc>)
    2052:	4798      	blx	r3
		usart_enable_rx(p_usart);
    2054:	6878      	ldr	r0, [r7, #4]
    2056:	4b07      	ldr	r3, [pc, #28]	; (2074 <usart_serial_init+0x100>)
    2058:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
    205a:	3720      	adds	r7, #32
    205c:	46bd      	mov	sp, r7
    205e:	bd80      	pop	{r7, pc}
    2060:	40024000 	.word	0x40024000
    2064:	00004899 	.word	0x00004899
    2068:	0000462d 	.word	0x0000462d
    206c:	000016f1 	.word	0x000016f1
    2070:	00001885 	.word	0x00001885
    2074:	000018b5 	.word	0x000018b5
    2078:	40028000 	.word	0x40028000
    207c:	4002c000 	.word	0x4002c000
    2080:	40030000 	.word	0x40030000

00002084 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    2084:	b580      	push	{r7, lr}
    2086:	b082      	sub	sp, #8
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
    208c:	460b      	mov	r3, r1
    208e:	70fb      	strb	r3, [r7, #3]
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    2090:	687a      	ldr	r2, [r7, #4]
    2092:	4b20      	ldr	r3, [pc, #128]	; (2114 <usart_serial_putchar+0x90>)
    2094:	429a      	cmp	r2, r3
    2096:	d10a      	bne.n	20ae <usart_serial_putchar+0x2a>
		while (usart_write(p_usart, c)!=0);
    2098:	bf00      	nop
    209a:	78fb      	ldrb	r3, [r7, #3]
    209c:	6878      	ldr	r0, [r7, #4]
    209e:	4619      	mov	r1, r3
    20a0:	4b1d      	ldr	r3, [pc, #116]	; (2118 <usart_serial_putchar+0x94>)
    20a2:	4798      	blx	r3
    20a4:	4603      	mov	r3, r0
    20a6:	2b00      	cmp	r3, #0
    20a8:	d1f7      	bne.n	209a <usart_serial_putchar+0x16>
		return 1;
    20aa:	2301      	movs	r3, #1
    20ac:	e02d      	b.n	210a <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    20ae:	687a      	ldr	r2, [r7, #4]
    20b0:	4b1a      	ldr	r3, [pc, #104]	; (211c <usart_serial_putchar+0x98>)
    20b2:	429a      	cmp	r2, r3
    20b4:	d10a      	bne.n	20cc <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
    20b6:	bf00      	nop
    20b8:	78fb      	ldrb	r3, [r7, #3]
    20ba:	6878      	ldr	r0, [r7, #4]
    20bc:	4619      	mov	r1, r3
    20be:	4b16      	ldr	r3, [pc, #88]	; (2118 <usart_serial_putchar+0x94>)
    20c0:	4798      	blx	r3
    20c2:	4603      	mov	r3, r0
    20c4:	2b00      	cmp	r3, #0
    20c6:	d1f7      	bne.n	20b8 <usart_serial_putchar+0x34>
		return 1;
    20c8:	2301      	movs	r3, #1
    20ca:	e01e      	b.n	210a <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    20cc:	687a      	ldr	r2, [r7, #4]
    20ce:	4b14      	ldr	r3, [pc, #80]	; (2120 <usart_serial_putchar+0x9c>)
    20d0:	429a      	cmp	r2, r3
    20d2:	d10a      	bne.n	20ea <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
    20d4:	bf00      	nop
    20d6:	78fb      	ldrb	r3, [r7, #3]
    20d8:	6878      	ldr	r0, [r7, #4]
    20da:	4619      	mov	r1, r3
    20dc:	4b0e      	ldr	r3, [pc, #56]	; (2118 <usart_serial_putchar+0x94>)
    20de:	4798      	blx	r3
    20e0:	4603      	mov	r3, r0
    20e2:	2b00      	cmp	r3, #0
    20e4:	d1f7      	bne.n	20d6 <usart_serial_putchar+0x52>
		return 1;
    20e6:	2301      	movs	r3, #1
    20e8:	e00f      	b.n	210a <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    20ea:	687a      	ldr	r2, [r7, #4]
    20ec:	4b0d      	ldr	r3, [pc, #52]	; (2124 <usart_serial_putchar+0xa0>)
    20ee:	429a      	cmp	r2, r3
    20f0:	d10a      	bne.n	2108 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
    20f2:	bf00      	nop
    20f4:	78fb      	ldrb	r3, [r7, #3]
    20f6:	6878      	ldr	r0, [r7, #4]
    20f8:	4619      	mov	r1, r3
    20fa:	4b07      	ldr	r3, [pc, #28]	; (2118 <usart_serial_putchar+0x94>)
    20fc:	4798      	blx	r3
    20fe:	4603      	mov	r3, r0
    2100:	2b00      	cmp	r3, #0
    2102:	d1f7      	bne.n	20f4 <usart_serial_putchar+0x70>
		return 1;
    2104:	2301      	movs	r3, #1
    2106:	e000      	b.n	210a <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    2108:	2300      	movs	r3, #0
}
    210a:	4618      	mov	r0, r3
    210c:	3708      	adds	r7, #8
    210e:	46bd      	mov	sp, r7
    2110:	bd80      	pop	{r7, pc}
    2112:	bf00      	nop
    2114:	40024000 	.word	0x40024000
    2118:	0000198d 	.word	0x0000198d
    211c:	40028000 	.word	0x40028000
    2120:	4002c000 	.word	0x4002c000
    2124:	40030000 	.word	0x40030000

00002128 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    2128:	b580      	push	{r7, lr}
    212a:	b084      	sub	sp, #16
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
    2130:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
    2132:	2300      	movs	r3, #0
    2134:	60fb      	str	r3, [r7, #12]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    2136:	687a      	ldr	r2, [r7, #4]
    2138:	4b24      	ldr	r3, [pc, #144]	; (21cc <usart_serial_getchar+0xa4>)
    213a:	429a      	cmp	r2, r3
    213c:	d10d      	bne.n	215a <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
    213e:	bf00      	nop
    2140:	f107 030c 	add.w	r3, r7, #12
    2144:	6878      	ldr	r0, [r7, #4]
    2146:	4619      	mov	r1, r3
    2148:	4b21      	ldr	r3, [pc, #132]	; (21d0 <usart_serial_getchar+0xa8>)
    214a:	4798      	blx	r3
    214c:	4603      	mov	r3, r0
    214e:	2b00      	cmp	r3, #0
    2150:	d1f6      	bne.n	2140 <usart_serial_getchar+0x18>
		*data = (uint8_t)(val & 0xFF);
    2152:	68fb      	ldr	r3, [r7, #12]
    2154:	b2da      	uxtb	r2, r3
    2156:	683b      	ldr	r3, [r7, #0]
    2158:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    215a:	687a      	ldr	r2, [r7, #4]
    215c:	4b1d      	ldr	r3, [pc, #116]	; (21d4 <usart_serial_getchar+0xac>)
    215e:	429a      	cmp	r2, r3
    2160:	d10d      	bne.n	217e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
    2162:	bf00      	nop
    2164:	f107 030c 	add.w	r3, r7, #12
    2168:	6878      	ldr	r0, [r7, #4]
    216a:	4619      	mov	r1, r3
    216c:	4b18      	ldr	r3, [pc, #96]	; (21d0 <usart_serial_getchar+0xa8>)
    216e:	4798      	blx	r3
    2170:	4603      	mov	r3, r0
    2172:	2b00      	cmp	r3, #0
    2174:	d1f6      	bne.n	2164 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
    2176:	68fb      	ldr	r3, [r7, #12]
    2178:	b2da      	uxtb	r2, r3
    217a:	683b      	ldr	r3, [r7, #0]
    217c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    217e:	687a      	ldr	r2, [r7, #4]
    2180:	4b15      	ldr	r3, [pc, #84]	; (21d8 <usart_serial_getchar+0xb0>)
    2182:	429a      	cmp	r2, r3
    2184:	d10d      	bne.n	21a2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
    2186:	bf00      	nop
    2188:	f107 030c 	add.w	r3, r7, #12
    218c:	6878      	ldr	r0, [r7, #4]
    218e:	4619      	mov	r1, r3
    2190:	4b0f      	ldr	r3, [pc, #60]	; (21d0 <usart_serial_getchar+0xa8>)
    2192:	4798      	blx	r3
    2194:	4603      	mov	r3, r0
    2196:	2b00      	cmp	r3, #0
    2198:	d1f6      	bne.n	2188 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
    219a:	68fb      	ldr	r3, [r7, #12]
    219c:	b2da      	uxtb	r2, r3
    219e:	683b      	ldr	r3, [r7, #0]
    21a0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    21a2:	687a      	ldr	r2, [r7, #4]
    21a4:	4b0d      	ldr	r3, [pc, #52]	; (21dc <usart_serial_getchar+0xb4>)
    21a6:	429a      	cmp	r2, r3
    21a8:	d10d      	bne.n	21c6 <usart_serial_getchar+0x9e>
		while (usart_read(p_usart, &val));
    21aa:	bf00      	nop
    21ac:	f107 030c 	add.w	r3, r7, #12
    21b0:	6878      	ldr	r0, [r7, #4]
    21b2:	4619      	mov	r1, r3
    21b4:	4b06      	ldr	r3, [pc, #24]	; (21d0 <usart_serial_getchar+0xa8>)
    21b6:	4798      	blx	r3
    21b8:	4603      	mov	r3, r0
    21ba:	2b00      	cmp	r3, #0
    21bc:	d1f6      	bne.n	21ac <usart_serial_getchar+0x84>
		*data = (uint8_t)(val & 0xFF);
    21be:	68fb      	ldr	r3, [r7, #12]
    21c0:	b2da      	uxtb	r2, r3
    21c2:	683b      	ldr	r3, [r7, #0]
    21c4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    21c6:	3710      	adds	r7, #16
    21c8:	46bd      	mov	sp, r7
    21ca:	bd80      	pop	{r7, pc}
    21cc:	40024000 	.word	0x40024000
    21d0:	000019f1 	.word	0x000019f1
    21d4:	40028000 	.word	0x40028000
    21d8:	4002c000 	.word	0x4002c000
    21dc:	40030000 	.word	0x40030000

000021e0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b082      	sub	sp, #8
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
    21e8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
    21ea:	4b0f      	ldr	r3, [pc, #60]	; (2228 <stdio_serial_init+0x48>)
    21ec:	687a      	ldr	r2, [r7, #4]
    21ee:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    21f0:	4b0e      	ldr	r3, [pc, #56]	; (222c <stdio_serial_init+0x4c>)
    21f2:	4a0f      	ldr	r2, [pc, #60]	; (2230 <stdio_serial_init+0x50>)
    21f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    21f6:	4b0f      	ldr	r3, [pc, #60]	; (2234 <stdio_serial_init+0x54>)
    21f8:	4a0f      	ldr	r2, [pc, #60]	; (2238 <stdio_serial_init+0x58>)
    21fa:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
    21fc:	6878      	ldr	r0, [r7, #4]
    21fe:	6839      	ldr	r1, [r7, #0]
    2200:	4b0e      	ldr	r3, [pc, #56]	; (223c <stdio_serial_init+0x5c>)
    2202:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2204:	4b0e      	ldr	r3, [pc, #56]	; (2240 <stdio_serial_init+0x60>)
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	689b      	ldr	r3, [r3, #8]
    220a:	4618      	mov	r0, r3
    220c:	2100      	movs	r1, #0
    220e:	4b0d      	ldr	r3, [pc, #52]	; (2244 <stdio_serial_init+0x64>)
    2210:	4798      	blx	r3
	setbuf(stdin, NULL);
    2212:	4b0b      	ldr	r3, [pc, #44]	; (2240 <stdio_serial_init+0x60>)
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	685b      	ldr	r3, [r3, #4]
    2218:	4618      	mov	r0, r3
    221a:	2100      	movs	r1, #0
    221c:	4b09      	ldr	r3, [pc, #36]	; (2244 <stdio_serial_init+0x64>)
    221e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
    2220:	3708      	adds	r7, #8
    2222:	46bd      	mov	sp, r7
    2224:	bd80      	pop	{r7, pc}
    2226:	bf00      	nop
    2228:	20000e14 	.word	0x20000e14
    222c:	20000e10 	.word	0x20000e10
    2230:	00002085 	.word	0x00002085
    2234:	20000e0c 	.word	0x20000e0c
    2238:	00002129 	.word	0x00002129
    223c:	00001f75 	.word	0x00001f75
    2240:	200004a0 	.word	0x200004a0
    2244:	00008351 	.word	0x00008351

00002248 <flash_write>:
struct regulator_s rudder_regulator;
struct regulator_s sheeting_regulator;
struct wind_sensor_s wind_sensor;

static void flash_write(uint32_t address, short* write_value)
{
    2248:	b590      	push	{r4, r7, lr}
    224a:	b085      	sub	sp, #20
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
    2250:	6039      	str	r1, [r7, #0]
	int return_value;
	
	return_value = flashcalw_memcpy((void *)address, write_value, 2, true);
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	4618      	mov	r0, r3
    2256:	6839      	ldr	r1, [r7, #0]
    2258:	2202      	movs	r2, #2
    225a:	2301      	movs	r3, #1
    225c:	4c0a      	ldr	r4, [pc, #40]	; (2288 <flash_write+0x40>)
    225e:	47a0      	blx	r4
    2260:	4603      	mov	r3, r0
    2262:	60fb      	str	r3, [r7, #12]
	
	if( return_value == flashcalw_is_lock_error)
    2264:	68fa      	ldr	r2, [r7, #12]
    2266:	4b09      	ldr	r3, [pc, #36]	; (228c <flash_write+0x44>)
    2268:	429a      	cmp	r2, r3
    226a:	d103      	bne.n	2274 <flash_write+0x2c>
		printf("ERROR: flashcalw_is_lock_error\r\n");
    226c:	4808      	ldr	r0, [pc, #32]	; (2290 <flash_write+0x48>)
    226e:	4b09      	ldr	r3, [pc, #36]	; (2294 <flash_write+0x4c>)
    2270:	4798      	blx	r3
    2272:	e006      	b.n	2282 <flash_write+0x3a>
	else if( return_value == flashcalw_is_programming_error)
    2274:	68fa      	ldr	r2, [r7, #12]
    2276:	4b08      	ldr	r3, [pc, #32]	; (2298 <flash_write+0x50>)
    2278:	429a      	cmp	r2, r3
    227a:	d102      	bne.n	2282 <flash_write+0x3a>
		printf("ERROR: flashcalw_is_programming_error\r\n");
    227c:	4807      	ldr	r0, [pc, #28]	; (229c <flash_write+0x54>)
    227e:	4b05      	ldr	r3, [pc, #20]	; (2294 <flash_write+0x4c>)
    2280:	4798      	blx	r3
}
    2282:	3714      	adds	r7, #20
    2284:	46bd      	mov	sp, r7
    2286:	bd90      	pop	{r4, r7, pc}
    2288:	00005ccd 	.word	0x00005ccd
    228c:	00005acd 	.word	0x00005acd
    2290:	00010394 	.word	0x00010394
    2294:	00008301 	.word	0x00008301
    2298:	00005af1 	.word	0x00005af1
    229c:	000103b8 	.word	0x000103b8

000022a0 <default_parameters>:

static void default_parameters(void)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b086      	sub	sp, #24
    22a4:	af00      	add	r7, sp, #0
	short r_P = 1;
    22a6:	2301      	movs	r3, #1
    22a8:	827b      	strh	r3, [r7, #18]
	short r_I = 0;
    22aa:	2300      	movs	r3, #0
    22ac:	823b      	strh	r3, [r7, #16]
	short r_D = 0;
    22ae:	2300      	movs	r3, #0
    22b0:	81fb      	strh	r3, [r7, #14]
	short r_setpoint = 50;
    22b2:	2332      	movs	r3, #50	; 0x32
    22b4:	81bb      	strh	r3, [r7, #12]
	
	short sensor_mean_value = 1;
    22b6:	2301      	movs	r3, #1
    22b8:	82fb      	strh	r3, [r7, #22]
	
	short s_P = 1;
    22ba:	2301      	movs	r3, #1
    22bc:	817b      	strh	r3, [r7, #10]
	short s_I = 0;
    22be:	2300      	movs	r3, #0
    22c0:	813b      	strh	r3, [r7, #8]
	short s_D = 0;
    22c2:	2300      	movs	r3, #0
    22c4:	80fb      	strh	r3, [r7, #6]
	short s_setpoint = 50;
    22c6:	2332      	movs	r3, #50	; 0x32
    22c8:	80bb      	strh	r3, [r7, #4]
	
	short minimum_wind_speed = 0;
    22ca:	2300      	movs	r3, #0
    22cc:	82bb      	strh	r3, [r7, #20]
	
	flash_write(RUDDER_REGULATOR_P_ADDRESS, &r_P);
    22ce:	f107 0312 	add.w	r3, r7, #18
    22d2:	4817      	ldr	r0, [pc, #92]	; (2330 <default_parameters+0x90>)
    22d4:	4619      	mov	r1, r3
    22d6:	4b17      	ldr	r3, [pc, #92]	; (2334 <default_parameters+0x94>)
    22d8:	4798      	blx	r3
	flash_write(RUDDER_REGULATOR_I_ADDRESS, &r_I);
    22da:	f107 0310 	add.w	r3, r7, #16
    22de:	4816      	ldr	r0, [pc, #88]	; (2338 <default_parameters+0x98>)
    22e0:	4619      	mov	r1, r3
    22e2:	4b14      	ldr	r3, [pc, #80]	; (2334 <default_parameters+0x94>)
    22e4:	4798      	blx	r3
	flash_write(RUDDER_REGULATOR_D_ADDRESS, &r_D);
    22e6:	f107 030e 	add.w	r3, r7, #14
    22ea:	4814      	ldr	r0, [pc, #80]	; (233c <default_parameters+0x9c>)
    22ec:	4619      	mov	r1, r3
    22ee:	4b11      	ldr	r3, [pc, #68]	; (2334 <default_parameters+0x94>)
    22f0:	4798      	blx	r3
	flash_write(RUDDER_REGULATOR_SETPOINT_ADDRESS, &r_setpoint);
    22f2:	f107 030c 	add.w	r3, r7, #12
    22f6:	4812      	ldr	r0, [pc, #72]	; (2340 <default_parameters+0xa0>)
    22f8:	4619      	mov	r1, r3
    22fa:	4b0e      	ldr	r3, [pc, #56]	; (2334 <default_parameters+0x94>)
    22fc:	4798      	blx	r3
		
	//flash_write(SENSOR_MEAN_VALUE_BUFFER, &sensor_mean_value);
	
	flash_write(SHEETING_REGULATOR_P_ADDRESS, &s_P);
    22fe:	f107 030a 	add.w	r3, r7, #10
    2302:	4810      	ldr	r0, [pc, #64]	; (2344 <default_parameters+0xa4>)
    2304:	4619      	mov	r1, r3
    2306:	4b0b      	ldr	r3, [pc, #44]	; (2334 <default_parameters+0x94>)
    2308:	4798      	blx	r3
	flash_write(SHEETING_REGULATOR_I_ADDRESS, &s_I);
    230a:	f107 0308 	add.w	r3, r7, #8
    230e:	480e      	ldr	r0, [pc, #56]	; (2348 <default_parameters+0xa8>)
    2310:	4619      	mov	r1, r3
    2312:	4b08      	ldr	r3, [pc, #32]	; (2334 <default_parameters+0x94>)
    2314:	4798      	blx	r3
	flash_write(SHEETING_REGULATOR_D_ADDRESS, &s_D);
    2316:	1dbb      	adds	r3, r7, #6
    2318:	480c      	ldr	r0, [pc, #48]	; (234c <default_parameters+0xac>)
    231a:	4619      	mov	r1, r3
    231c:	4b05      	ldr	r3, [pc, #20]	; (2334 <default_parameters+0x94>)
    231e:	4798      	blx	r3
	flash_write(SHEETING_REGULATOR_SETPOINT_ADDRESS, &s_setpoint);
    2320:	1d3b      	adds	r3, r7, #4
    2322:	480b      	ldr	r0, [pc, #44]	; (2350 <default_parameters+0xb0>)
    2324:	4619      	mov	r1, r3
    2326:	4b03      	ldr	r3, [pc, #12]	; (2334 <default_parameters+0x94>)
    2328:	4798      	blx	r3
}
    232a:	3718      	adds	r7, #24
    232c:	46bd      	mov	sp, r7
    232e:	bd80      	pop	{r7, pc}
    2330:	0003fe10 	.word	0x0003fe10
    2334:	00002249 	.word	0x00002249
    2338:	0003fe20 	.word	0x0003fe20
    233c:	0003fe30 	.word	0x0003fe30
    2340:	0003fe40 	.word	0x0003fe40
    2344:	0003fe60 	.word	0x0003fe60
    2348:	0003fe70 	.word	0x0003fe70
    234c:	0003fe80 	.word	0x0003fe80
    2350:	0003fe90 	.word	0x0003fe90

00002354 <console_read_command>:

void console_read_command(void)
{	
    2354:	b590      	push	{r4, r7, lr}
    2356:	b08b      	sub	sp, #44	; 0x2c
    2358:	af00      	add	r7, sp, #0
	usart_read(USART1, &receive_buffer[receive_buffer_i]);
    235a:	4b81      	ldr	r3, [pc, #516]	; (2560 <console_read_command+0x20c>)
    235c:	681a      	ldr	r2, [r3, #0]
    235e:	4b81      	ldr	r3, [pc, #516]	; (2564 <console_read_command+0x210>)
    2360:	4413      	add	r3, r2
    2362:	4881      	ldr	r0, [pc, #516]	; (2568 <console_read_command+0x214>)
    2364:	4619      	mov	r1, r3
    2366:	4b81      	ldr	r3, [pc, #516]	; (256c <console_read_command+0x218>)
    2368:	4798      	blx	r3
	
	char command[30];
	memset(command, 0, 30);
    236a:	1d3b      	adds	r3, r7, #4
    236c:	4618      	mov	r0, r3
    236e:	2100      	movs	r1, #0
    2370:	221e      	movs	r2, #30
    2372:	4b7f      	ldr	r3, [pc, #508]	; (2570 <console_read_command+0x21c>)
    2374:	4798      	blx	r3
	short val = 255;
    2376:	23ff      	movs	r3, #255	; 0xff
    2378:	807b      	strh	r3, [r7, #2]
	
	printf("%c", receive_buffer[receive_buffer_i] );
    237a:	4b79      	ldr	r3, [pc, #484]	; (2560 <console_read_command+0x20c>)
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	4a79      	ldr	r2, [pc, #484]	; (2564 <console_read_command+0x210>)
    2380:	5cd3      	ldrb	r3, [r2, r3]
    2382:	487c      	ldr	r0, [pc, #496]	; (2574 <console_read_command+0x220>)
    2384:	4619      	mov	r1, r3
    2386:	4b7c      	ldr	r3, [pc, #496]	; (2578 <console_read_command+0x224>)
    2388:	4798      	blx	r3
	
	// Newline character received
	if( receive_buffer[receive_buffer_i] == (char)10 )
    238a:	4b75      	ldr	r3, [pc, #468]	; (2560 <console_read_command+0x20c>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	4a75      	ldr	r2, [pc, #468]	; (2564 <console_read_command+0x210>)
    2390:	5cd3      	ldrb	r3, [r2, r3]
    2392:	2b0a      	cmp	r3, #10
    2394:	f040 82f2 	bne.w	297c <console_read_command+0x628>
	{
		// reset buffer counter
		receive_buffer_i = 0;
    2398:	4b71      	ldr	r3, [pc, #452]	; (2560 <console_read_command+0x20c>)
    239a:	2200      	movs	r2, #0
    239c:	601a      	str	r2, [r3, #0]
		
		sscanf(receive_buffer, "%s\n %hu", command, &val);
    239e:	1d3a      	adds	r2, r7, #4
    23a0:	1cbb      	adds	r3, r7, #2
    23a2:	4870      	ldr	r0, [pc, #448]	; (2564 <console_read_command+0x210>)
    23a4:	4975      	ldr	r1, [pc, #468]	; (257c <console_read_command+0x228>)
    23a6:	4c76      	ldr	r4, [pc, #472]	; (2580 <console_read_command+0x22c>)
    23a8:	47a0      	blx	r4
		
		for(int i = 0; command[i]; i++){
    23aa:	2300      	movs	r3, #0
    23ac:	627b      	str	r3, [r7, #36]	; 0x24
    23ae:	e01e      	b.n	23ee <console_read_command+0x9a>
			command[i] = toupper(command[i]);
    23b0:	1d3a      	adds	r2, r7, #4
    23b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23b4:	4413      	add	r3, r2
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    23bc:	4b71      	ldr	r3, [pc, #452]	; (2584 <console_read_command+0x230>)
    23be:	681a      	ldr	r2, [r3, #0]
    23c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    23c4:	3301      	adds	r3, #1
    23c6:	4413      	add	r3, r2
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	f003 0303 	and.w	r3, r3, #3
    23ce:	2b02      	cmp	r3, #2
    23d0:	d103      	bne.n	23da <console_read_command+0x86>
    23d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    23d6:	3b20      	subs	r3, #32
    23d8:	e001      	b.n	23de <console_read_command+0x8a>
    23da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    23de:	b2da      	uxtb	r2, r3
    23e0:	1d39      	adds	r1, r7, #4
    23e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23e4:	440b      	add	r3, r1
    23e6:	701a      	strb	r2, [r3, #0]
		// reset buffer counter
		receive_buffer_i = 0;
		
		sscanf(receive_buffer, "%s\n %hu", command, &val);
		
		for(int i = 0; command[i]; i++){
    23e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23ea:	3301      	adds	r3, #1
    23ec:	627b      	str	r3, [r7, #36]	; 0x24
    23ee:	1d3a      	adds	r2, r7, #4
    23f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23f2:	4413      	add	r3, r2
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d1da      	bne.n	23b0 <console_read_command+0x5c>
			command[i] = toupper(command[i]);
		}
		
		if( !strcmp(command, "P") )
    23fa:	1d3b      	adds	r3, r7, #4
    23fc:	4618      	mov	r0, r3
    23fe:	4962      	ldr	r1, [pc, #392]	; (2588 <console_read_command+0x234>)
    2400:	4b62      	ldr	r3, [pc, #392]	; (258c <console_read_command+0x238>)
    2402:	4798      	blx	r3
    2404:	4603      	mov	r3, r0
    2406:	2b00      	cmp	r3, #0
    2408:	d119      	bne.n	243e <console_read_command+0xea>
		{
			printf("Setting regulator P-parameter to %d\r\n", val);
    240a:	887b      	ldrh	r3, [r7, #2]
    240c:	b21b      	sxth	r3, r3
    240e:	4860      	ldr	r0, [pc, #384]	; (2590 <console_read_command+0x23c>)
    2410:	4619      	mov	r1, r3
    2412:	4b59      	ldr	r3, [pc, #356]	; (2578 <console_read_command+0x224>)
    2414:	4798      	blx	r3
			
			if( (val >= 0) && (val <= 100) )			
    2416:	887b      	ldrh	r3, [r7, #2]
    2418:	b21b      	sxth	r3, r3
    241a:	2b00      	cmp	r3, #0
    241c:	db0b      	blt.n	2436 <console_read_command+0xe2>
    241e:	887b      	ldrh	r3, [r7, #2]
    2420:	b21b      	sxth	r3, r3
    2422:	2b64      	cmp	r3, #100	; 0x64
    2424:	dc07      	bgt.n	2436 <console_read_command+0xe2>
				flashcalw_memcpy((void *)RUDDER_REGULATOR_P_ADDRESS, &val, 2, true);
    2426:	1cbb      	adds	r3, r7, #2
    2428:	485a      	ldr	r0, [pc, #360]	; (2594 <console_read_command+0x240>)
    242a:	4619      	mov	r1, r3
    242c:	2202      	movs	r2, #2
    242e:	2301      	movs	r3, #1
    2430:	4c59      	ldr	r4, [pc, #356]	; (2598 <console_read_command+0x244>)
    2432:	47a0      	blx	r4
    2434:	e2a7      	b.n	2986 <console_read_command+0x632>
			else
				printf("Value must be between 0 and 100");
    2436:	4859      	ldr	r0, [pc, #356]	; (259c <console_read_command+0x248>)
    2438:	4b4f      	ldr	r3, [pc, #316]	; (2578 <console_read_command+0x224>)
    243a:	4798      	blx	r3
    243c:	e2a3      	b.n	2986 <console_read_command+0x632>
		}
		
		else if( !strcmp(command, "I") )
    243e:	1d3b      	adds	r3, r7, #4
    2440:	4618      	mov	r0, r3
    2442:	4957      	ldr	r1, [pc, #348]	; (25a0 <console_read_command+0x24c>)
    2444:	4b51      	ldr	r3, [pc, #324]	; (258c <console_read_command+0x238>)
    2446:	4798      	blx	r3
    2448:	4603      	mov	r3, r0
    244a:	2b00      	cmp	r3, #0
    244c:	d119      	bne.n	2482 <console_read_command+0x12e>
		{
			printf("Setting regulator I-parameter to %d\r\n", val);
    244e:	887b      	ldrh	r3, [r7, #2]
    2450:	b21b      	sxth	r3, r3
    2452:	4854      	ldr	r0, [pc, #336]	; (25a4 <console_read_command+0x250>)
    2454:	4619      	mov	r1, r3
    2456:	4b48      	ldr	r3, [pc, #288]	; (2578 <console_read_command+0x224>)
    2458:	4798      	blx	r3
			
			if( (val >= 0) && (val <= 100) )	
    245a:	887b      	ldrh	r3, [r7, #2]
    245c:	b21b      	sxth	r3, r3
    245e:	2b00      	cmp	r3, #0
    2460:	db0b      	blt.n	247a <console_read_command+0x126>
    2462:	887b      	ldrh	r3, [r7, #2]
    2464:	b21b      	sxth	r3, r3
    2466:	2b64      	cmp	r3, #100	; 0x64
    2468:	dc07      	bgt.n	247a <console_read_command+0x126>
				flashcalw_memcpy((void *)RUDDER_REGULATOR_I_ADDRESS, &val, 2, true);
    246a:	1cbb      	adds	r3, r7, #2
    246c:	484e      	ldr	r0, [pc, #312]	; (25a8 <console_read_command+0x254>)
    246e:	4619      	mov	r1, r3
    2470:	2202      	movs	r2, #2
    2472:	2301      	movs	r3, #1
    2474:	4c48      	ldr	r4, [pc, #288]	; (2598 <console_read_command+0x244>)
    2476:	47a0      	blx	r4
    2478:	e285      	b.n	2986 <console_read_command+0x632>
			else
				printf("Value must be between 0 and 100");				
    247a:	4848      	ldr	r0, [pc, #288]	; (259c <console_read_command+0x248>)
    247c:	4b3e      	ldr	r3, [pc, #248]	; (2578 <console_read_command+0x224>)
    247e:	4798      	blx	r3
    2480:	e281      	b.n	2986 <console_read_command+0x632>
		}
		
		else if( !strcmp(command, "D") )
    2482:	1d3b      	adds	r3, r7, #4
    2484:	4618      	mov	r0, r3
    2486:	4949      	ldr	r1, [pc, #292]	; (25ac <console_read_command+0x258>)
    2488:	4b40      	ldr	r3, [pc, #256]	; (258c <console_read_command+0x238>)
    248a:	4798      	blx	r3
    248c:	4603      	mov	r3, r0
    248e:	2b00      	cmp	r3, #0
    2490:	d119      	bne.n	24c6 <console_read_command+0x172>
		{
			printf("Setting regulator D-parameter to %d\r\n", val);
    2492:	887b      	ldrh	r3, [r7, #2]
    2494:	b21b      	sxth	r3, r3
    2496:	4846      	ldr	r0, [pc, #280]	; (25b0 <console_read_command+0x25c>)
    2498:	4619      	mov	r1, r3
    249a:	4b37      	ldr	r3, [pc, #220]	; (2578 <console_read_command+0x224>)
    249c:	4798      	blx	r3
			
			if( (val >= 0) && (val <= 100) )	
    249e:	887b      	ldrh	r3, [r7, #2]
    24a0:	b21b      	sxth	r3, r3
    24a2:	2b00      	cmp	r3, #0
    24a4:	db0b      	blt.n	24be <console_read_command+0x16a>
    24a6:	887b      	ldrh	r3, [r7, #2]
    24a8:	b21b      	sxth	r3, r3
    24aa:	2b64      	cmp	r3, #100	; 0x64
    24ac:	dc07      	bgt.n	24be <console_read_command+0x16a>
				flashcalw_memcpy((void *)RUDDER_REGULATOR_D_ADDRESS, &val, 2, true);
    24ae:	1cbb      	adds	r3, r7, #2
    24b0:	4840      	ldr	r0, [pc, #256]	; (25b4 <console_read_command+0x260>)
    24b2:	4619      	mov	r1, r3
    24b4:	2202      	movs	r2, #2
    24b6:	2301      	movs	r3, #1
    24b8:	4c37      	ldr	r4, [pc, #220]	; (2598 <console_read_command+0x244>)
    24ba:	47a0      	blx	r4
    24bc:	e263      	b.n	2986 <console_read_command+0x632>
			else
				printf("Value must be between 0 and 100");				
    24be:	4837      	ldr	r0, [pc, #220]	; (259c <console_read_command+0x248>)
    24c0:	4b2d      	ldr	r3, [pc, #180]	; (2578 <console_read_command+0x224>)
    24c2:	4798      	blx	r3
    24c4:	e25f      	b.n	2986 <console_read_command+0x632>
		}
		
		else if( !strcmp(command, "DEFAULT") )
    24c6:	1d3b      	adds	r3, r7, #4
    24c8:	4618      	mov	r0, r3
    24ca:	493b      	ldr	r1, [pc, #236]	; (25b8 <console_read_command+0x264>)
    24cc:	4b2f      	ldr	r3, [pc, #188]	; (258c <console_read_command+0x238>)
    24ce:	4798      	blx	r3
    24d0:	4603      	mov	r3, r0
    24d2:	2b00      	cmp	r3, #0
    24d4:	f040 8086 	bne.w	25e4 <console_read_command+0x290>
		{
			printf("Setting Default parameters\r\n");
    24d8:	4838      	ldr	r0, [pc, #224]	; (25bc <console_read_command+0x268>)
    24da:	4b27      	ldr	r3, [pc, #156]	; (2578 <console_read_command+0x224>)
    24dc:	4798      	blx	r3
			
			default_parameters();		
    24de:	4b38      	ldr	r3, [pc, #224]	; (25c0 <console_read_command+0x26c>)
    24e0:	4798      	blx	r3
			
			printf("Rudder regulator:\r\n");
    24e2:	4838      	ldr	r0, [pc, #224]	; (25c4 <console_read_command+0x270>)
    24e4:	4b24      	ldr	r3, [pc, #144]	; (2578 <console_read_command+0x224>)
    24e6:	4798      	blx	r3
			printf("P: %d\r\n", *rudder_regulator.p);
    24e8:	4b37      	ldr	r3, [pc, #220]	; (25c8 <console_read_command+0x274>)
    24ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24ec:	881b      	ldrh	r3, [r3, #0]
    24ee:	4837      	ldr	r0, [pc, #220]	; (25cc <console_read_command+0x278>)
    24f0:	4619      	mov	r1, r3
    24f2:	4b21      	ldr	r3, [pc, #132]	; (2578 <console_read_command+0x224>)
    24f4:	4798      	blx	r3
			printf("I: %d\r\n", *rudder_regulator.i);
    24f6:	4b34      	ldr	r3, [pc, #208]	; (25c8 <console_read_command+0x274>)
    24f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24fa:	881b      	ldrh	r3, [r3, #0]
    24fc:	4834      	ldr	r0, [pc, #208]	; (25d0 <console_read_command+0x27c>)
    24fe:	4619      	mov	r1, r3
    2500:	4b1d      	ldr	r3, [pc, #116]	; (2578 <console_read_command+0x224>)
    2502:	4798      	blx	r3
			printf("D: %d\r\n", *rudder_regulator.d);
    2504:	4b30      	ldr	r3, [pc, #192]	; (25c8 <console_read_command+0x274>)
    2506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2508:	881b      	ldrh	r3, [r3, #0]
    250a:	4832      	ldr	r0, [pc, #200]	; (25d4 <console_read_command+0x280>)
    250c:	4619      	mov	r1, r3
    250e:	4b1a      	ldr	r3, [pc, #104]	; (2578 <console_read_command+0x224>)
    2510:	4798      	blx	r3
			printf("Setpoint: %d\r\n", *rudder_regulator.setpoint);
    2512:	4b2d      	ldr	r3, [pc, #180]	; (25c8 <console_read_command+0x274>)
    2514:	6a1b      	ldr	r3, [r3, #32]
    2516:	881b      	ldrh	r3, [r3, #0]
    2518:	482f      	ldr	r0, [pc, #188]	; (25d8 <console_read_command+0x284>)
    251a:	4619      	mov	r1, r3
    251c:	4b16      	ldr	r3, [pc, #88]	; (2578 <console_read_command+0x224>)
    251e:	4798      	blx	r3
									
			printf("Sheeting regulator:\r\n");
    2520:	482e      	ldr	r0, [pc, #184]	; (25dc <console_read_command+0x288>)
    2522:	4b15      	ldr	r3, [pc, #84]	; (2578 <console_read_command+0x224>)
    2524:	4798      	blx	r3
			printf("P: %d\r\n", *sheeting_regulator.p);
    2526:	4b2e      	ldr	r3, [pc, #184]	; (25e0 <console_read_command+0x28c>)
    2528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    252a:	881b      	ldrh	r3, [r3, #0]
    252c:	4827      	ldr	r0, [pc, #156]	; (25cc <console_read_command+0x278>)
    252e:	4619      	mov	r1, r3
    2530:	4b11      	ldr	r3, [pc, #68]	; (2578 <console_read_command+0x224>)
    2532:	4798      	blx	r3
			printf("I: %d\r\n", *sheeting_regulator.i);
    2534:	4b2a      	ldr	r3, [pc, #168]	; (25e0 <console_read_command+0x28c>)
    2536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2538:	881b      	ldrh	r3, [r3, #0]
    253a:	4825      	ldr	r0, [pc, #148]	; (25d0 <console_read_command+0x27c>)
    253c:	4619      	mov	r1, r3
    253e:	4b0e      	ldr	r3, [pc, #56]	; (2578 <console_read_command+0x224>)
    2540:	4798      	blx	r3
			printf("D: %d\r\n", *sheeting_regulator.d);
    2542:	4b27      	ldr	r3, [pc, #156]	; (25e0 <console_read_command+0x28c>)
    2544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2546:	881b      	ldrh	r3, [r3, #0]
    2548:	4822      	ldr	r0, [pc, #136]	; (25d4 <console_read_command+0x280>)
    254a:	4619      	mov	r1, r3
    254c:	4b0a      	ldr	r3, [pc, #40]	; (2578 <console_read_command+0x224>)
    254e:	4798      	blx	r3
			printf("Setpoint: %d\r\n", *sheeting_regulator.setpoint);
    2550:	4b23      	ldr	r3, [pc, #140]	; (25e0 <console_read_command+0x28c>)
    2552:	6a1b      	ldr	r3, [r3, #32]
    2554:	881b      	ldrh	r3, [r3, #0]
    2556:	4820      	ldr	r0, [pc, #128]	; (25d8 <console_read_command+0x284>)
    2558:	4619      	mov	r1, r3
    255a:	4b07      	ldr	r3, [pc, #28]	; (2578 <console_read_command+0x224>)
    255c:	4798      	blx	r3
    255e:	e212      	b.n	2986 <console_read_command+0x632>
    2560:	20000dbc 	.word	0x20000dbc
    2564:	20000e60 	.word	0x20000e60
    2568:	40028000 	.word	0x40028000
    256c:	000019f1 	.word	0x000019f1
    2570:	00008341 	.word	0x00008341
    2574:	000103e0 	.word	0x000103e0
    2578:	00008301 	.word	0x00008301
    257c:	000103e4 	.word	0x000103e4
    2580:	000084d1 	.word	0x000084d1
    2584:	20000498 	.word	0x20000498
    2588:	000103ec 	.word	0x000103ec
    258c:	00008603 	.word	0x00008603
    2590:	000103f0 	.word	0x000103f0
    2594:	0003fe10 	.word	0x0003fe10
    2598:	00005ccd 	.word	0x00005ccd
    259c:	00010418 	.word	0x00010418
    25a0:	00010438 	.word	0x00010438
    25a4:	0001043c 	.word	0x0001043c
    25a8:	0003fe20 	.word	0x0003fe20
    25ac:	00010464 	.word	0x00010464
    25b0:	00010468 	.word	0x00010468
    25b4:	0003fe30 	.word	0x0003fe30
    25b8:	00010490 	.word	0x00010490
    25bc:	00010498 	.word	0x00010498
    25c0:	000022a1 	.word	0x000022a1
    25c4:	000104b8 	.word	0x000104b8
    25c8:	20000f2c 	.word	0x20000f2c
    25cc:	000104cc 	.word	0x000104cc
    25d0:	000104d4 	.word	0x000104d4
    25d4:	000104dc 	.word	0x000104dc
    25d8:	000104e4 	.word	0x000104e4
    25dc:	000104f4 	.word	0x000104f4
    25e0:	20000e2c 	.word	0x20000e2c

		}
		
		else if( !strcmp(command, "STATUS") )
    25e4:	1d3b      	adds	r3, r7, #4
    25e6:	4618      	mov	r0, r3
    25e8:	497f      	ldr	r1, [pc, #508]	; (27e8 <console_read_command+0x494>)
    25ea:	4b80      	ldr	r3, [pc, #512]	; (27ec <console_read_command+0x498>)
    25ec:	4798      	blx	r3
    25ee:	4603      	mov	r3, r0
    25f0:	2b00      	cmp	r3, #0
    25f2:	d16a      	bne.n	26ca <console_read_command+0x376>
		{
			printf(">>Status for ATSAM4L Autopilot:\r\n");
    25f4:	487e      	ldr	r0, [pc, #504]	; (27f0 <console_read_command+0x49c>)
    25f6:	4b7f      	ldr	r3, [pc, #508]	; (27f4 <console_read_command+0x4a0>)
    25f8:	4798      	blx	r3
			printf("Wind sensor: %s\r\n", wind_sensor.name);
    25fa:	487f      	ldr	r0, [pc, #508]	; (27f8 <console_read_command+0x4a4>)
    25fc:	497f      	ldr	r1, [pc, #508]	; (27fc <console_read_command+0x4a8>)
    25fe:	4b7d      	ldr	r3, [pc, #500]	; (27f4 <console_read_command+0x4a0>)
    2600:	4798      	blx	r3
			printf("relative angle: %d\r\n", wind_sensor.angle);
    2602:	4b7e      	ldr	r3, [pc, #504]	; (27fc <console_read_command+0x4a8>)
    2604:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    2608:	487d      	ldr	r0, [pc, #500]	; (2800 <console_read_command+0x4ac>)
    260a:	4619      	mov	r1, r3
    260c:	4b79      	ldr	r3, [pc, #484]	; (27f4 <console_read_command+0x4a0>)
    260e:	4798      	blx	r3
			printf("relative speed[knots]: %d\r\n", wind_sensor.speed);
    2610:	4b7a      	ldr	r3, [pc, #488]	; (27fc <console_read_command+0x4a8>)
    2612:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
    2616:	487b      	ldr	r0, [pc, #492]	; (2804 <console_read_command+0x4b0>)
    2618:	4619      	mov	r1, r3
    261a:	4b76      	ldr	r3, [pc, #472]	; (27f4 <console_read_command+0x4a0>)
    261c:	4798      	blx	r3
			printf("--------------------");
    261e:	487a      	ldr	r0, [pc, #488]	; (2808 <console_read_command+0x4b4>)
    2620:	4b74      	ldr	r3, [pc, #464]	; (27f4 <console_read_command+0x4a0>)
    2622:	4798      	blx	r3
			printf("Regulator Data:\r\n");
    2624:	4879      	ldr	r0, [pc, #484]	; (280c <console_read_command+0x4b8>)
    2626:	4b73      	ldr	r3, [pc, #460]	; (27f4 <console_read_command+0x4a0>)
    2628:	4798      	blx	r3
			printf("P: %d\r\n", *rudder_regulator.p);
    262a:	4b79      	ldr	r3, [pc, #484]	; (2810 <console_read_command+0x4bc>)
    262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    262e:	881b      	ldrh	r3, [r3, #0]
    2630:	4878      	ldr	r0, [pc, #480]	; (2814 <console_read_command+0x4c0>)
    2632:	4619      	mov	r1, r3
    2634:	4b6f      	ldr	r3, [pc, #444]	; (27f4 <console_read_command+0x4a0>)
    2636:	4798      	blx	r3
			printf("I: %d\r\n", *rudder_regulator.i);
    2638:	4b75      	ldr	r3, [pc, #468]	; (2810 <console_read_command+0x4bc>)
    263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    263c:	881b      	ldrh	r3, [r3, #0]
    263e:	4876      	ldr	r0, [pc, #472]	; (2818 <console_read_command+0x4c4>)
    2640:	4619      	mov	r1, r3
    2642:	4b6c      	ldr	r3, [pc, #432]	; (27f4 <console_read_command+0x4a0>)
    2644:	4798      	blx	r3
			printf("D: %d\r\n", *rudder_regulator.d);
    2646:	4b72      	ldr	r3, [pc, #456]	; (2810 <console_read_command+0x4bc>)
    2648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    264a:	881b      	ldrh	r3, [r3, #0]
    264c:	4873      	ldr	r0, [pc, #460]	; (281c <console_read_command+0x4c8>)
    264e:	4619      	mov	r1, r3
    2650:	4b68      	ldr	r3, [pc, #416]	; (27f4 <console_read_command+0x4a0>)
    2652:	4798      	blx	r3
			printf("Setpoint: %d\r\n", *rudder_regulator.setpoint);
    2654:	4b6e      	ldr	r3, [pc, #440]	; (2810 <console_read_command+0x4bc>)
    2656:	6a1b      	ldr	r3, [r3, #32]
    2658:	881b      	ldrh	r3, [r3, #0]
    265a:	4871      	ldr	r0, [pc, #452]	; (2820 <console_read_command+0x4cc>)
    265c:	4619      	mov	r1, r3
    265e:	4b65      	ldr	r3, [pc, #404]	; (27f4 <console_read_command+0x4a0>)
    2660:	4798      	blx	r3
			printf("Output enable: %d\r\n", rudder_regulator.output_enable);
    2662:	4b6b      	ldr	r3, [pc, #428]	; (2810 <console_read_command+0x4bc>)
    2664:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    2668:	486e      	ldr	r0, [pc, #440]	; (2824 <console_read_command+0x4d0>)
    266a:	4619      	mov	r1, r3
    266c:	4b61      	ldr	r3, [pc, #388]	; (27f4 <console_read_command+0x4a0>)
    266e:	4798      	blx	r3
			printf("--------------------");
    2670:	4865      	ldr	r0, [pc, #404]	; (2808 <console_read_command+0x4b4>)
    2672:	4b60      	ldr	r3, [pc, #384]	; (27f4 <console_read_command+0x4a0>)
    2674:	4798      	blx	r3
			printf("Clock Data:\r\n");
    2676:	486c      	ldr	r0, [pc, #432]	; (2828 <console_read_command+0x4d4>)
    2678:	4b5e      	ldr	r3, [pc, #376]	; (27f4 <console_read_command+0x4a0>)
    267a:	4798      	blx	r3
			printf("CPU: %dHz\r\n", sysclk_get_cpu_hz() );
    267c:	4b6b      	ldr	r3, [pc, #428]	; (282c <console_read_command+0x4d8>)
    267e:	4798      	blx	r3
    2680:	4603      	mov	r3, r0
    2682:	486b      	ldr	r0, [pc, #428]	; (2830 <console_read_command+0x4dc>)
    2684:	4619      	mov	r1, r3
    2686:	4b5b      	ldr	r3, [pc, #364]	; (27f4 <console_read_command+0x4a0>)
    2688:	4798      	blx	r3
			printf("PBA: %dHz\r\n", sysclk_get_pba_hz() );
    268a:	4b6a      	ldr	r3, [pc, #424]	; (2834 <console_read_command+0x4e0>)
    268c:	4798      	blx	r3
    268e:	4603      	mov	r3, r0
    2690:	4869      	ldr	r0, [pc, #420]	; (2838 <console_read_command+0x4e4>)
    2692:	4619      	mov	r1, r3
    2694:	4b57      	ldr	r3, [pc, #348]	; (27f4 <console_read_command+0x4a0>)
    2696:	4798      	blx	r3
			printf("PBB: %dHz\r\n", sysclk_get_pbb_hz() );
    2698:	4b68      	ldr	r3, [pc, #416]	; (283c <console_read_command+0x4e8>)
    269a:	4798      	blx	r3
    269c:	4603      	mov	r3, r0
    269e:	4868      	ldr	r0, [pc, #416]	; (2840 <console_read_command+0x4ec>)
    26a0:	4619      	mov	r1, r3
    26a2:	4b54      	ldr	r3, [pc, #336]	; (27f4 <console_read_command+0x4a0>)
    26a4:	4798      	blx	r3
			printf("PBC: %dHz\r\n", sysclk_get_pbc_hz() );
    26a6:	4b67      	ldr	r3, [pc, #412]	; (2844 <console_read_command+0x4f0>)
    26a8:	4798      	blx	r3
    26aa:	4603      	mov	r3, r0
    26ac:	4866      	ldr	r0, [pc, #408]	; (2848 <console_read_command+0x4f4>)
    26ae:	4619      	mov	r1, r3
    26b0:	4b50      	ldr	r3, [pc, #320]	; (27f4 <console_read_command+0x4a0>)
    26b2:	4798      	blx	r3
			printf("PBD: %dHz\r\n", sysclk_get_pbd_hz() );
    26b4:	4b65      	ldr	r3, [pc, #404]	; (284c <console_read_command+0x4f8>)
    26b6:	4798      	blx	r3
    26b8:	4603      	mov	r3, r0
    26ba:	4865      	ldr	r0, [pc, #404]	; (2850 <console_read_command+0x4fc>)
    26bc:	4619      	mov	r1, r3
    26be:	4b4d      	ldr	r3, [pc, #308]	; (27f4 <console_read_command+0x4a0>)
    26c0:	4798      	blx	r3
			
			printf("--------------------");
    26c2:	4851      	ldr	r0, [pc, #324]	; (2808 <console_read_command+0x4b4>)
    26c4:	4b4b      	ldr	r3, [pc, #300]	; (27f4 <console_read_command+0x4a0>)
    26c6:	4798      	blx	r3
    26c8:	e15d      	b.n	2986 <console_read_command+0x632>
		}
		
		else if( !strcmp(command, "RUDDER_SETPOINT") )
    26ca:	1d3b      	adds	r3, r7, #4
    26cc:	4618      	mov	r0, r3
    26ce:	4961      	ldr	r1, [pc, #388]	; (2854 <console_read_command+0x500>)
    26d0:	4b46      	ldr	r3, [pc, #280]	; (27ec <console_read_command+0x498>)
    26d2:	4798      	blx	r3
    26d4:	4603      	mov	r3, r0
    26d6:	2b00      	cmp	r3, #0
    26d8:	d119      	bne.n	270e <console_read_command+0x3ba>
		{
			printf("Setting rudder regulator setpoint to %d\r\n", val);
    26da:	887b      	ldrh	r3, [r7, #2]
    26dc:	b21b      	sxth	r3, r3
    26de:	485e      	ldr	r0, [pc, #376]	; (2858 <console_read_command+0x504>)
    26e0:	4619      	mov	r1, r3
    26e2:	4b44      	ldr	r3, [pc, #272]	; (27f4 <console_read_command+0x4a0>)
    26e4:	4798      	blx	r3
			
			if( (val >= 0) && (val <= 100) )
    26e6:	887b      	ldrh	r3, [r7, #2]
    26e8:	b21b      	sxth	r3, r3
    26ea:	2b00      	cmp	r3, #0
    26ec:	db0b      	blt.n	2706 <console_read_command+0x3b2>
    26ee:	887b      	ldrh	r3, [r7, #2]
    26f0:	b21b      	sxth	r3, r3
    26f2:	2b64      	cmp	r3, #100	; 0x64
    26f4:	dc07      	bgt.n	2706 <console_read_command+0x3b2>
				flashcalw_memcpy((void *)RUDDER_REGULATOR_SETPOINT_ADDRESS, &val, 2, true);
    26f6:	1cbb      	adds	r3, r7, #2
    26f8:	4858      	ldr	r0, [pc, #352]	; (285c <console_read_command+0x508>)
    26fa:	4619      	mov	r1, r3
    26fc:	2202      	movs	r2, #2
    26fe:	2301      	movs	r3, #1
    2700:	4c57      	ldr	r4, [pc, #348]	; (2860 <console_read_command+0x50c>)
    2702:	47a0      	blx	r4
    2704:	e13f      	b.n	2986 <console_read_command+0x632>
			else
				printf("Value must be between 0 and 100");
    2706:	4857      	ldr	r0, [pc, #348]	; (2864 <console_read_command+0x510>)
    2708:	4b3a      	ldr	r3, [pc, #232]	; (27f4 <console_read_command+0x4a0>)
    270a:	4798      	blx	r3
    270c:	e13b      	b.n	2986 <console_read_command+0x632>
// 				printf("Value must be between 0 and 100");
// 		
// 		}
		
		// Set sheeting
		else if( !strcmp(command, "SHEET_SETPOINT") )
    270e:	1d3b      	adds	r3, r7, #4
    2710:	4618      	mov	r0, r3
    2712:	4955      	ldr	r1, [pc, #340]	; (2868 <console_read_command+0x514>)
    2714:	4b35      	ldr	r3, [pc, #212]	; (27ec <console_read_command+0x498>)
    2716:	4798      	blx	r3
    2718:	4603      	mov	r3, r0
    271a:	2b00      	cmp	r3, #0
    271c:	d119      	bne.n	2752 <console_read_command+0x3fe>
		{
			
			printf("Setting sheeting regulator setpoint to %d\r\n", val);
    271e:	887b      	ldrh	r3, [r7, #2]
    2720:	b21b      	sxth	r3, r3
    2722:	4852      	ldr	r0, [pc, #328]	; (286c <console_read_command+0x518>)
    2724:	4619      	mov	r1, r3
    2726:	4b33      	ldr	r3, [pc, #204]	; (27f4 <console_read_command+0x4a0>)
    2728:	4798      	blx	r3
						
			if( (val >= 0) && (val <= 100) )
    272a:	887b      	ldrh	r3, [r7, #2]
    272c:	b21b      	sxth	r3, r3
    272e:	2b00      	cmp	r3, #0
    2730:	db0b      	blt.n	274a <console_read_command+0x3f6>
    2732:	887b      	ldrh	r3, [r7, #2]
    2734:	b21b      	sxth	r3, r3
    2736:	2b64      	cmp	r3, #100	; 0x64
    2738:	dc07      	bgt.n	274a <console_read_command+0x3f6>
			flashcalw_memcpy((void *)RUDDER_REGULATOR_SETPOINT_ADDRESS, &val, 2, true);
    273a:	1cbb      	adds	r3, r7, #2
    273c:	4847      	ldr	r0, [pc, #284]	; (285c <console_read_command+0x508>)
    273e:	4619      	mov	r1, r3
    2740:	2202      	movs	r2, #2
    2742:	2301      	movs	r3, #1
    2744:	4c46      	ldr	r4, [pc, #280]	; (2860 <console_read_command+0x50c>)
    2746:	47a0      	blx	r4
    2748:	e11d      	b.n	2986 <console_read_command+0x632>
			else
			printf("Value must be between 0 and 100");
    274a:	4846      	ldr	r0, [pc, #280]	; (2864 <console_read_command+0x510>)
    274c:	4b29      	ldr	r3, [pc, #164]	; (27f4 <console_read_command+0x4a0>)
    274e:	4798      	blx	r3
    2750:	e119      	b.n	2986 <console_read_command+0x632>
			
		}
		
		// Clears oled display
		else if( !strcmp(command, "OLED_CLEAR") )
    2752:	1d3b      	adds	r3, r7, #4
    2754:	4618      	mov	r0, r3
    2756:	4946      	ldr	r1, [pc, #280]	; (2870 <console_read_command+0x51c>)
    2758:	4b24      	ldr	r3, [pc, #144]	; (27ec <console_read_command+0x498>)
    275a:	4798      	blx	r3
    275c:	4603      	mov	r3, r0
    275e:	2b00      	cmp	r3, #0
    2760:	d105      	bne.n	276e <console_read_command+0x41a>
		{
			printf("Clearing OLED display\r\n");
    2762:	4844      	ldr	r0, [pc, #272]	; (2874 <console_read_command+0x520>)
    2764:	4b23      	ldr	r3, [pc, #140]	; (27f4 <console_read_command+0x4a0>)
    2766:	4798      	blx	r3
			ssd1306_clear();
    2768:	4b43      	ldr	r3, [pc, #268]	; (2878 <console_read_command+0x524>)
    276a:	4798      	blx	r3
    276c:	e10b      	b.n	2986 <console_read_command+0x632>
		}
		
		// Turns regulator output on and off
		else if( !strcmp(command, "OUTPUT") )
    276e:	1d3b      	adds	r3, r7, #4
    2770:	4618      	mov	r0, r3
    2772:	4942      	ldr	r1, [pc, #264]	; (287c <console_read_command+0x528>)
    2774:	4b1d      	ldr	r3, [pc, #116]	; (27ec <console_read_command+0x498>)
    2776:	4798      	blx	r3
    2778:	4603      	mov	r3, r0
    277a:	2b00      	cmp	r3, #0
    277c:	d115      	bne.n	27aa <console_read_command+0x456>
		{
			if( (val == 0) || (val == 1) )
    277e:	887b      	ldrh	r3, [r7, #2]
    2780:	2b00      	cmp	r3, #0
    2782:	d003      	beq.n	278c <console_read_command+0x438>
    2784:	887b      	ldrh	r3, [r7, #2]
    2786:	b21b      	sxth	r3, r3
    2788:	2b01      	cmp	r3, #1
    278a:	d10a      	bne.n	27a2 <console_read_command+0x44e>
				rudder_regulator.output_enable = val;
    278c:	887b      	ldrh	r3, [r7, #2]
    278e:	b21b      	sxth	r3, r3
    2790:	2b00      	cmp	r3, #0
    2792:	bf0c      	ite	eq
    2794:	2300      	moveq	r3, #0
    2796:	2301      	movne	r3, #1
    2798:	b2da      	uxtb	r2, r3
    279a:	4b1d      	ldr	r3, [pc, #116]	; (2810 <console_read_command+0x4bc>)
    279c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    27a0:	e0f1      	b.n	2986 <console_read_command+0x632>
			else
				printf("Value must be either 0 or 1");
    27a2:	4837      	ldr	r0, [pc, #220]	; (2880 <console_read_command+0x52c>)
    27a4:	4b13      	ldr	r3, [pc, #76]	; (27f4 <console_read_command+0x4a0>)
    27a6:	4798      	blx	r3
    27a8:	e0ed      	b.n	2986 <console_read_command+0x632>
		}
		
		
		// Choose wind sensor
		else if( !strcmp(command, "SENSOR") )
    27aa:	1d3b      	adds	r3, r7, #4
    27ac:	4618      	mov	r0, r3
    27ae:	4935      	ldr	r1, [pc, #212]	; (2884 <console_read_command+0x530>)
    27b0:	4b0e      	ldr	r3, [pc, #56]	; (27ec <console_read_command+0x498>)
    27b2:	4798      	blx	r3
    27b4:	4603      	mov	r3, r0
    27b6:	2b00      	cmp	r3, #0
    27b8:	d16e      	bne.n	2898 <console_read_command+0x544>
		{
			if( val == 1)
    27ba:	887b      	ldrh	r3, [r7, #2]
    27bc:	b21b      	sxth	r3, r3
    27be:	2b01      	cmp	r3, #1
    27c0:	d106      	bne.n	27d0 <console_read_command+0x47c>
			{
				strcpy(wind_sensor.name, "CV7");
    27c2:	4b0e      	ldr	r3, [pc, #56]	; (27fc <console_read_command+0x4a8>)
    27c4:	4a30      	ldr	r2, [pc, #192]	; (2888 <console_read_command+0x534>)
    27c6:	601a      	str	r2, [r3, #0]
				printf("Setting CV7 wind sensor\r\n");
    27c8:	4830      	ldr	r0, [pc, #192]	; (288c <console_read_command+0x538>)
    27ca:	4b0a      	ldr	r3, [pc, #40]	; (27f4 <console_read_command+0x4a0>)
    27cc:	4798      	blx	r3
    27ce:	e0da      	b.n	2986 <console_read_command+0x632>
			}
			else if( val == 2)
    27d0:	887b      	ldrh	r3, [r7, #2]
    27d2:	b21b      	sxth	r3, r3
    27d4:	2b02      	cmp	r3, #2
    27d6:	f040 80d6 	bne.w	2986 <console_read_command+0x632>
			{
				strcpy(wind_sensor.name, "PWM");
    27da:	4b08      	ldr	r3, [pc, #32]	; (27fc <console_read_command+0x4a8>)
    27dc:	4a2c      	ldr	r2, [pc, #176]	; (2890 <console_read_command+0x53c>)
    27de:	601a      	str	r2, [r3, #0]
				printf("Setting PWM wind sensor\r\n");
    27e0:	482c      	ldr	r0, [pc, #176]	; (2894 <console_read_command+0x540>)
    27e2:	4b04      	ldr	r3, [pc, #16]	; (27f4 <console_read_command+0x4a0>)
    27e4:	4798      	blx	r3
		else
		{
			printf("Unknown command: %s, value: %d\r\n", command, val);
		}
		
		return;
    27e6:	e0ce      	b.n	2986 <console_read_command+0x632>
    27e8:	0001050c 	.word	0x0001050c
    27ec:	00008603 	.word	0x00008603
    27f0:	00010514 	.word	0x00010514
    27f4:	00008301 	.word	0x00008301
    27f8:	00010538 	.word	0x00010538
    27fc:	20000e80 	.word	0x20000e80
    2800:	0001054c 	.word	0x0001054c
    2804:	00010564 	.word	0x00010564
    2808:	00010580 	.word	0x00010580
    280c:	00010598 	.word	0x00010598
    2810:	20000f2c 	.word	0x20000f2c
    2814:	000104cc 	.word	0x000104cc
    2818:	000104d4 	.word	0x000104d4
    281c:	000104dc 	.word	0x000104dc
    2820:	000104e4 	.word	0x000104e4
    2824:	000105ac 	.word	0x000105ac
    2828:	000105c0 	.word	0x000105c0
    282c:	00001b59 	.word	0x00001b59
    2830:	000105d0 	.word	0x000105d0
    2834:	00001b6d 	.word	0x00001b6d
    2838:	000105dc 	.word	0x000105dc
    283c:	00001b81 	.word	0x00001b81
    2840:	000105e8 	.word	0x000105e8
    2844:	00001b95 	.word	0x00001b95
    2848:	000105f4 	.word	0x000105f4
    284c:	00001ba9 	.word	0x00001ba9
    2850:	00010600 	.word	0x00010600
    2854:	0001060c 	.word	0x0001060c
    2858:	0001061c 	.word	0x0001061c
    285c:	0003fe40 	.word	0x0003fe40
    2860:	00005ccd 	.word	0x00005ccd
    2864:	00010418 	.word	0x00010418
    2868:	00010648 	.word	0x00010648
    286c:	00010658 	.word	0x00010658
    2870:	00010684 	.word	0x00010684
    2874:	00010690 	.word	0x00010690
    2878:	00001f19 	.word	0x00001f19
    287c:	000106a8 	.word	0x000106a8
    2880:	000106b0 	.word	0x000106b0
    2884:	000106cc 	.word	0x000106cc
    2888:	00375643 	.word	0x00375643
    288c:	000106d4 	.word	0x000106d4
    2890:	004d5750 	.word	0x004d5750
    2894:	000106f0 	.word	0x000106f0
			}
			
		}
		
		// Fastcommand to read relative wind direction and speed
		else if( !strcmp(command, "WIND") )
    2898:	1d3b      	adds	r3, r7, #4
    289a:	4618      	mov	r0, r3
    289c:	493b      	ldr	r1, [pc, #236]	; (298c <console_read_command+0x638>)
    289e:	4b3c      	ldr	r3, [pc, #240]	; (2990 <console_read_command+0x63c>)
    28a0:	4798      	blx	r3
    28a2:	4603      	mov	r3, r0
    28a4:	2b00      	cmp	r3, #0
    28a6:	d10c      	bne.n	28c2 <console_read_command+0x56e>
		{
			printf("$IIMWV,%d,R,%d,N,A\r\n", wind_sensor.angle, wind_sensor.speed);	
    28a8:	4b3a      	ldr	r3, [pc, #232]	; (2994 <console_read_command+0x640>)
    28aa:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    28ae:	461a      	mov	r2, r3
    28b0:	4b38      	ldr	r3, [pc, #224]	; (2994 <console_read_command+0x640>)
    28b2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
    28b6:	4838      	ldr	r0, [pc, #224]	; (2998 <console_read_command+0x644>)
    28b8:	4611      	mov	r1, r2
    28ba:	461a      	mov	r2, r3
    28bc:	4b37      	ldr	r3, [pc, #220]	; (299c <console_read_command+0x648>)
    28be:	4798      	blx	r3
    28c0:	e061      	b.n	2986 <console_read_command+0x632>
		}
		
		// Choose wind sensor
		else if( !strcmp(command, "MINIMUMSPEED") )
    28c2:	1d3b      	adds	r3, r7, #4
    28c4:	4618      	mov	r0, r3
    28c6:	4936      	ldr	r1, [pc, #216]	; (29a0 <console_read_command+0x64c>)
    28c8:	4b31      	ldr	r3, [pc, #196]	; (2990 <console_read_command+0x63c>)
    28ca:	4798      	blx	r3
    28cc:	4603      	mov	r3, r0
    28ce:	2b00      	cmp	r3, #0
    28d0:	d119      	bne.n	2906 <console_read_command+0x5b2>
		{
			if( (val >= 0) && (val <= 100) )
    28d2:	887b      	ldrh	r3, [r7, #2]
    28d4:	b21b      	sxth	r3, r3
    28d6:	2b00      	cmp	r3, #0
    28d8:	db11      	blt.n	28fe <console_read_command+0x5aa>
    28da:	887b      	ldrh	r3, [r7, #2]
    28dc:	b21b      	sxth	r3, r3
    28de:	2b64      	cmp	r3, #100	; 0x64
    28e0:	dc0d      	bgt.n	28fe <console_read_command+0x5aa>
			{
				flashcalw_memcpy((void *)MINIMUM_WIND_SPEED_ADDRESS, &val, 2, true);
    28e2:	1cbb      	adds	r3, r7, #2
    28e4:	482f      	ldr	r0, [pc, #188]	; (29a4 <console_read_command+0x650>)
    28e6:	4619      	mov	r1, r3
    28e8:	2202      	movs	r2, #2
    28ea:	2301      	movs	r3, #1
    28ec:	4c2e      	ldr	r4, [pc, #184]	; (29a8 <console_read_command+0x654>)
    28ee:	47a0      	blx	r4
				printf("Setting minimum wind speed to %d\r\n", val);
    28f0:	887b      	ldrh	r3, [r7, #2]
    28f2:	b21b      	sxth	r3, r3
    28f4:	482d      	ldr	r0, [pc, #180]	; (29ac <console_read_command+0x658>)
    28f6:	4619      	mov	r1, r3
    28f8:	4b28      	ldr	r3, [pc, #160]	; (299c <console_read_command+0x648>)
    28fa:	4798      	blx	r3
    28fc:	e043      	b.n	2986 <console_read_command+0x632>
			}
			else
				printf("Value must be between 0 and 100");
    28fe:	482c      	ldr	r0, [pc, #176]	; (29b0 <console_read_command+0x65c>)
    2900:	4b26      	ldr	r3, [pc, #152]	; (299c <console_read_command+0x648>)
    2902:	4798      	blx	r3
    2904:	e03f      	b.n	2986 <console_read_command+0x632>
				
		}
		
		// Display select
		else if( !strcmp(command, "DS") )
    2906:	1d3b      	adds	r3, r7, #4
    2908:	4618      	mov	r0, r3
    290a:	492a      	ldr	r1, [pc, #168]	; (29b4 <console_read_command+0x660>)
    290c:	4b20      	ldr	r3, [pc, #128]	; (2990 <console_read_command+0x63c>)
    290e:	4798      	blx	r3
    2910:	4603      	mov	r3, r0
    2912:	2b00      	cmp	r3, #0
    2914:	d129      	bne.n	296a <console_read_command+0x616>
		{
			if( (val <= 3) && (val >= 1))
    2916:	887b      	ldrh	r3, [r7, #2]
    2918:	b21b      	sxth	r3, r3
    291a:	2b03      	cmp	r3, #3
    291c:	dc20      	bgt.n	2960 <console_read_command+0x60c>
    291e:	887b      	ldrh	r3, [r7, #2]
    2920:	b21b      	sxth	r3, r3
    2922:	2b00      	cmp	r3, #0
    2924:	dd1c      	ble.n	2960 <console_read_command+0x60c>
			{
				display_selection = val;
    2926:	887b      	ldrh	r3, [r7, #2]
    2928:	b2da      	uxtb	r2, r3
    292a:	4b23      	ldr	r3, [pc, #140]	; (29b8 <console_read_command+0x664>)
    292c:	701a      	strb	r2, [r3, #0]
				display_change = 1;
    292e:	4b23      	ldr	r3, [pc, #140]	; (29bc <console_read_command+0x668>)
    2930:	2201      	movs	r2, #1
    2932:	701a      	strb	r2, [r3, #0]
				
				switch (val)
    2934:	887b      	ldrh	r3, [r7, #2]
    2936:	b21b      	sxth	r3, r3
    2938:	2b02      	cmp	r3, #2
    293a:	d008      	beq.n	294e <console_read_command+0x5fa>
    293c:	2b03      	cmp	r3, #3
    293e:	d00a      	beq.n	2956 <console_read_command+0x602>
    2940:	2b01      	cmp	r3, #1
    2942:	d000      	beq.n	2946 <console_read_command+0x5f2>
					case 3:
						printf("Displaying Sensor data\r\n");
						break;
				}
						
			}
    2944:	e010      	b.n	2968 <console_read_command+0x614>
				display_change = 1;
				
				switch (val)
				{
					case 1:
						printf("Displaying Regulator data\r\n");
    2946:	481e      	ldr	r0, [pc, #120]	; (29c0 <console_read_command+0x66c>)
    2948:	4b14      	ldr	r3, [pc, #80]	; (299c <console_read_command+0x648>)
    294a:	4798      	blx	r3
						break;
    294c:	e007      	b.n	295e <console_read_command+0x60a>
					case 2:
						printf("Displaying Sensor history\r\n");
    294e:	481d      	ldr	r0, [pc, #116]	; (29c4 <console_read_command+0x670>)
    2950:	4b12      	ldr	r3, [pc, #72]	; (299c <console_read_command+0x648>)
    2952:	4798      	blx	r3
						break;
    2954:	e003      	b.n	295e <console_read_command+0x60a>
					case 3:
						printf("Displaying Sensor data\r\n");
    2956:	481c      	ldr	r0, [pc, #112]	; (29c8 <console_read_command+0x674>)
    2958:	4b10      	ldr	r3, [pc, #64]	; (299c <console_read_command+0x648>)
    295a:	4798      	blx	r3
						break;
    295c:	bf00      	nop
				}
						
			}
    295e:	e003      	b.n	2968 <console_read_command+0x614>
			else
				printf("Value must be between 1 and 3\r\n");
    2960:	481a      	ldr	r0, [pc, #104]	; (29cc <console_read_command+0x678>)
    2962:	4b0e      	ldr	r3, [pc, #56]	; (299c <console_read_command+0x648>)
    2964:	4798      	blx	r3
    2966:	e00e      	b.n	2986 <console_read_command+0x632>
    2968:	e00d      	b.n	2986 <console_read_command+0x632>
		}
		
		else
		{
			printf("Unknown command: %s, value: %d\r\n", command, val);
    296a:	887b      	ldrh	r3, [r7, #2]
    296c:	b21b      	sxth	r3, r3
    296e:	1d3a      	adds	r2, r7, #4
    2970:	4817      	ldr	r0, [pc, #92]	; (29d0 <console_read_command+0x67c>)
    2972:	4611      	mov	r1, r2
    2974:	461a      	mov	r2, r3
    2976:	4b09      	ldr	r3, [pc, #36]	; (299c <console_read_command+0x648>)
    2978:	4798      	blx	r3
		}
		
		return;
    297a:	e004      	b.n	2986 <console_read_command+0x632>
	}
		
	receive_buffer_i = receive_buffer_i + 1; // increase buffer index
    297c:	4b15      	ldr	r3, [pc, #84]	; (29d4 <console_read_command+0x680>)
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	1c5a      	adds	r2, r3, #1
    2982:	4b14      	ldr	r3, [pc, #80]	; (29d4 <console_read_command+0x680>)
    2984:	601a      	str	r2, [r3, #0]
}
    2986:	372c      	adds	r7, #44	; 0x2c
    2988:	46bd      	mov	sp, r7
    298a:	bd90      	pop	{r4, r7, pc}
    298c:	0001070c 	.word	0x0001070c
    2990:	00008603 	.word	0x00008603
    2994:	20000e80 	.word	0x20000e80
    2998:	00010714 	.word	0x00010714
    299c:	00008301 	.word	0x00008301
    29a0:	0001072c 	.word	0x0001072c
    29a4:	0003fea0 	.word	0x0003fea0
    29a8:	00005ccd 	.word	0x00005ccd
    29ac:	0001073c 	.word	0x0001073c
    29b0:	00010418 	.word	0x00010418
    29b4:	00010760 	.word	0x00010760
    29b8:	20000494 	.word	0x20000494
    29bc:	20000495 	.word	0x20000495
    29c0:	00010764 	.word	0x00010764
    29c4:	00010780 	.word	0x00010780
    29c8:	0001079c 	.word	0x0001079c
    29cc:	000107b8 	.word	0x000107b8
    29d0:	000107d8 	.word	0x000107d8
    29d4:	20000dbc 	.word	0x20000dbc

000029d8 <configure_console>:

void configure_console(void)
{
    29d8:	b590      	push	{r4, r7, lr}
    29da:	b085      	sub	sp, #20
    29dc:	af00      	add	r7, sp, #0

	const usart_serial_options_t usart_serial_options = {
    29de:	4b0c      	ldr	r3, [pc, #48]	; (2a10 <configure_console+0x38>)
    29e0:	463c      	mov	r4, r7
    29e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.charlength = CONSOLE_USART_CHAR_LENGTH,
		.paritytype = CONSOLE_USART_PARITY,
		.stopbits = CONSOLE_USART_STOP_BITS,
	};

	stdio_serial_init(CONSOLE_USART, &usart_serial_options);
    29e8:	463b      	mov	r3, r7
    29ea:	480a      	ldr	r0, [pc, #40]	; (2a14 <configure_console+0x3c>)
    29ec:	4619      	mov	r1, r3
    29ee:	4b0a      	ldr	r3, [pc, #40]	; (2a18 <configure_console+0x40>)
    29f0:	4798      	blx	r3
	
	usart_enable_interrupt(CONSOLE_USART, US_IER_RXRDY);
    29f2:	4808      	ldr	r0, [pc, #32]	; (2a14 <configure_console+0x3c>)
    29f4:	2101      	movs	r1, #1
    29f6:	4b09      	ldr	r3, [pc, #36]	; (2a1c <configure_console+0x44>)
    29f8:	4798      	blx	r3
	
	/* Configure Console interrupt*/
	NVIC_SetPriority(CONSOLE_USART_IRQn, 1);
    29fa:	2042      	movs	r0, #66	; 0x42
    29fc:	2101      	movs	r1, #1
    29fe:	4b08      	ldr	r3, [pc, #32]	; (2a20 <configure_console+0x48>)
    2a00:	4798      	blx	r3
	NVIC_EnableIRQ(CONSOLE_USART_IRQn);
    2a02:	2042      	movs	r0, #66	; 0x42
    2a04:	4b07      	ldr	r3, [pc, #28]	; (2a24 <configure_console+0x4c>)
    2a06:	4798      	blx	r3
}
    2a08:	3714      	adds	r7, #20
    2a0a:	46bd      	mov	sp, r7
    2a0c:	bd90      	pop	{r4, r7, pc}
    2a0e:	bf00      	nop
    2a10:	000107fc 	.word	0x000107fc
    2a14:	40028000 	.word	0x40028000
    2a18:	000021e1 	.word	0x000021e1
    2a1c:	000018e5 	.word	0x000018e5
    2a20:	00001a75 	.word	0x00001a75
    2a24:	00001a45 	.word	0x00001a45

00002a28 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
    2a28:	b480      	push	{r7}
    2a2a:	b089      	sub	sp, #36	; 0x24
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	6078      	str	r0, [r7, #4]
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	61fb      	str	r3, [r7, #28]
    2a34:	69fb      	ldr	r3, [r7, #28]
    2a36:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2a38:	69bb      	ldr	r3, [r7, #24]
    2a3a:	095a      	lsrs	r2, r3, #5
    2a3c:	69fb      	ldr	r3, [r7, #28]
    2a3e:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2a40:	697b      	ldr	r3, [r7, #20]
    2a42:	f003 031f 	and.w	r3, r3, #31
    2a46:	2101      	movs	r1, #1
    2a48:	fa01 f303 	lsl.w	r3, r1, r3
    2a4c:	613a      	str	r2, [r7, #16]
    2a4e:	60fb      	str	r3, [r7, #12]
    2a50:	693b      	ldr	r3, [r7, #16]
    2a52:	60bb      	str	r3, [r7, #8]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2a54:	68bb      	ldr	r3, [r7, #8]
    2a56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2a5a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2a5e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERS = mask;
    2a60:	68fa      	ldr	r2, [r7, #12]
    2a62:	605a      	str	r2, [r3, #4]
	arch_ioport_enable_pin(pin);
}
    2a64:	3724      	adds	r7, #36	; 0x24
    2a66:	46bd      	mov	sp, r7
    2a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
    2a70:	b480      	push	{r7}
    2a72:	b089      	sub	sp, #36	; 0x24
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	61fb      	str	r3, [r7, #28]
    2a7c:	69fb      	ldr	r3, [r7, #28]
    2a7e:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2a80:	69bb      	ldr	r3, [r7, #24]
    2a82:	095a      	lsrs	r2, r3, #5
    2a84:	69fb      	ldr	r3, [r7, #28]
    2a86:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2a88:	697b      	ldr	r3, [r7, #20]
    2a8a:	f003 031f 	and.w	r3, r3, #31
    2a8e:	2101      	movs	r1, #1
    2a90:	fa01 f303 	lsl.w	r3, r1, r3
    2a94:	613a      	str	r2, [r7, #16]
    2a96:	60fb      	str	r3, [r7, #12]
    2a98:	693b      	ldr	r3, [r7, #16]
    2a9a:	60bb      	str	r3, [r7, #8]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2a9c:	68bb      	ldr	r3, [r7, #8]
    2a9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2aa2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2aa6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2aa8:	68fa      	ldr	r2, [r7, #12]
    2aaa:	609a      	str	r2, [r3, #8]
	arch_ioport_disable_pin(pin);
}
    2aac:	3724      	adds	r7, #36	; 0x24
    2aae:	46bd      	mov	sp, r7
    2ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab4:	4770      	bx	lr
    2ab6:	bf00      	nop

00002ab8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    2ab8:	b480      	push	{r7}
    2aba:	b08d      	sub	sp, #52	; 0x34
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ac6:	683b      	ldr	r3, [r7, #0]
    2ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    2aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2acc:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ad0:	095a      	lsrs	r2, r3, #5
    2ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ad4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2ad6:	6a3b      	ldr	r3, [r7, #32]
    2ad8:	f003 031f 	and.w	r3, r3, #31
    2adc:	2101      	movs	r1, #1
    2ade:	fa01 f303 	lsl.w	r3, r1, r3
    2ae2:	61fa      	str	r2, [r7, #28]
    2ae4:	61bb      	str	r3, [r7, #24]
    2ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ae8:	617b      	str	r3, [r7, #20]
    2aea:	69fb      	ldr	r3, [r7, #28]
    2aec:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2aee:	693b      	ldr	r3, [r7, #16]
    2af0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2af4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2af8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    2afa:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    2afc:	697b      	ldr	r3, [r7, #20]
    2afe:	f003 0308 	and.w	r3, r3, #8
    2b02:	2b00      	cmp	r3, #0
    2b04:	d003      	beq.n	2b0e <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    2b06:	68fb      	ldr	r3, [r7, #12]
    2b08:	69ba      	ldr	r2, [r7, #24]
    2b0a:	675a      	str	r2, [r3, #116]	; 0x74
    2b0c:	e002      	b.n	2b14 <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    2b0e:	68fb      	ldr	r3, [r7, #12]
    2b10:	69ba      	ldr	r2, [r7, #24]
    2b12:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    2b14:	697b      	ldr	r3, [r7, #20]
    2b16:	f003 0310 	and.w	r3, r3, #16
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d004      	beq.n	2b28 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    2b1e:	68fb      	ldr	r3, [r7, #12]
    2b20:	69ba      	ldr	r2, [r7, #24]
    2b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2b26:	e003      	b.n	2b30 <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    2b28:	68fb      	ldr	r3, [r7, #12]
    2b2a:	69ba      	ldr	r2, [r7, #24]
    2b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    2b30:	697b      	ldr	r3, [r7, #20]
    2b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2b36:	2b00      	cmp	r3, #0
    2b38:	d004      	beq.n	2b44 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    2b3a:	68fb      	ldr	r3, [r7, #12]
    2b3c:	69ba      	ldr	r2, [r7, #24]
    2b3e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    2b42:	e003      	b.n	2b4c <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    2b44:	68fb      	ldr	r3, [r7, #12]
    2b46:	69ba      	ldr	r2, [r7, #24]
    2b48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    2b4c:	697b      	ldr	r3, [r7, #20]
    2b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b52:	2b00      	cmp	r3, #0
    2b54:	d004      	beq.n	2b60 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    2b56:	68fb      	ldr	r3, [r7, #12]
    2b58:	69ba      	ldr	r2, [r7, #24]
    2b5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2b5e:	e003      	b.n	2b68 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    2b60:	68fb      	ldr	r3, [r7, #12]
    2b62:	69ba      	ldr	r2, [r7, #24]
    2b64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    2b68:	697b      	ldr	r3, [r7, #20]
    2b6a:	f003 0301 	and.w	r3, r3, #1
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d003      	beq.n	2b7a <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	69ba      	ldr	r2, [r7, #24]
    2b76:	615a      	str	r2, [r3, #20]
    2b78:	e002      	b.n	2b80 <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    2b7a:	68fb      	ldr	r3, [r7, #12]
    2b7c:	69ba      	ldr	r2, [r7, #24]
    2b7e:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    2b80:	697b      	ldr	r3, [r7, #20]
    2b82:	f003 0302 	and.w	r3, r3, #2
    2b86:	2b00      	cmp	r3, #0
    2b88:	d003      	beq.n	2b92 <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    2b8a:	68fb      	ldr	r3, [r7, #12]
    2b8c:	69ba      	ldr	r2, [r7, #24]
    2b8e:	625a      	str	r2, [r3, #36]	; 0x24
    2b90:	e002      	b.n	2b98 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    2b92:	68fb      	ldr	r3, [r7, #12]
    2b94:	69ba      	ldr	r2, [r7, #24]
    2b96:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    2b98:	697b      	ldr	r3, [r7, #20]
    2b9a:	f003 0304 	and.w	r3, r3, #4
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d003      	beq.n	2baa <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    2ba2:	68fb      	ldr	r3, [r7, #12]
    2ba4:	69ba      	ldr	r2, [r7, #24]
    2ba6:	635a      	str	r2, [r3, #52]	; 0x34
    2ba8:	e002      	b.n	2bb0 <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    2baa:	68fb      	ldr	r3, [r7, #12]
    2bac:	69ba      	ldr	r2, [r7, #24]
    2bae:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_set_pin_mode(pin, mode);
}
    2bb0:	3734      	adds	r7, #52	; 0x34
    2bb2:	46bd      	mov	sp, r7
    2bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop

00002bbc <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    2bbc:	b480      	push	{r7}
    2bbe:	b095      	sub	sp, #84	; 0x54
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    2bc4:	460b      	mov	r3, r1
    2bc6:	70fb      	strb	r3, [r7, #3]
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	64fb      	str	r3, [r7, #76]	; 0x4c
    2bcc:	78fb      	ldrb	r3, [r7, #3]
    2bce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    2bd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    2bd6:	2b01      	cmp	r3, #1
    2bd8:	d12d      	bne.n	2c36 <ioport_set_pin_dir+0x7a>
    2bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2bdc:	647b      	str	r3, [r7, #68]	; 0x44
    2bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2be0:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2be4:	095b      	lsrs	r3, r3, #5
    2be6:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2bee:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2bf2:	025b      	lsls	r3, r3, #9
    2bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2bf6:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2bfa:	f002 021f 	and.w	r2, r2, #31
    2bfe:	2101      	movs	r1, #1
    2c00:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2c04:	645a      	str	r2, [r3, #68]	; 0x44
    2c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2c08:	637b      	str	r3, [r7, #52]	; 0x34
    2c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2c0c:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c10:	095b      	lsrs	r3, r3, #5
    2c12:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2c1a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2c1e:	025b      	lsls	r3, r3, #9
    2c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2c22:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c26:	f002 021f 	and.w	r2, r2, #31
    2c2a:	2101      	movs	r1, #1
    2c2c:	fa01 f202 	lsl.w	r2, r1, r2
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2c30:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    2c34:	e030      	b.n	2c98 <ioport_set_pin_dir+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
    2c36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d12c      	bne.n	2c98 <ioport_set_pin_dir+0xdc>
    2c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2c40:	627b      	str	r3, [r7, #36]	; 0x24
    2c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c44:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2c46:	6a3b      	ldr	r3, [r7, #32]
    2c48:	095b      	lsrs	r3, r3, #5
    2c4a:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2c4c:	69fb      	ldr	r3, [r7, #28]
    2c4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2c52:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2c56:	025b      	lsls	r3, r3, #9
    2c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2c5a:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2c5c:	69ba      	ldr	r2, [r7, #24]
    2c5e:	f002 021f 	and.w	r2, r2, #31
    2c62:	2101      	movs	r1, #1
    2c64:	fa01 f202 	lsl.w	r2, r1, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2c68:	649a      	str	r2, [r3, #72]	; 0x48
    2c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2c6c:	617b      	str	r3, [r7, #20]
    2c6e:	697b      	ldr	r3, [r7, #20]
    2c70:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2c72:	693b      	ldr	r3, [r7, #16]
    2c74:	095b      	lsrs	r3, r3, #5
    2c76:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2c7e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2c82:	025b      	lsls	r3, r3, #9
    2c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2c86:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2c88:	68ba      	ldr	r2, [r7, #8]
    2c8a:	f002 021f 	and.w	r2, r2, #31
    2c8e:	2101      	movs	r1, #1
    2c90:	fa01 f202 	lsl.w	r2, r1, r2
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2c94:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	arch_ioport_set_pin_dir(pin, dir);
}
    2c98:	3754      	adds	r7, #84	; 0x54
    2c9a:	46bd      	mov	sp, r7
    2c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca0:	4770      	bx	lr
    2ca2:	bf00      	nop

00002ca4 <set_pins>:
	ioport_set_pin_mode(pin, mode);\
	ioport_disable_pin(pin);\
} while (0)

void set_pins(int module)
{
    2ca4:	b580      	push	{r7, lr}
    2ca6:	b082      	sub	sp, #8
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
	switch (module)
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	3b01      	subs	r3, #1
    2cb0:	2b03      	cmp	r3, #3
    2cb2:	d865      	bhi.n	2d80 <set_pins+0xdc>
    2cb4:	a201      	add	r2, pc, #4	; (adr r2, 2cbc <set_pins+0x18>)
    2cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2cba:	bf00      	nop
    2cbc:	00002d63 	.word	0x00002d63
    2cc0:	00002ccd 	.word	0x00002ccd
    2cc4:	00002ceb 	.word	0x00002ceb
    2cc8:	00002d09 	.word	0x00002d09
	{
		case USART0_pins:
			ioport_set_pin_peripheral_mode(PIN_PB00B_USART0_RXD, MUX_PB00B_USART0_RXD);
    2ccc:	2020      	movs	r0, #32
    2cce:	2101      	movs	r1, #1
    2cd0:	4b2d      	ldr	r3, [pc, #180]	; (2d88 <set_pins+0xe4>)
    2cd2:	4798      	blx	r3
    2cd4:	2020      	movs	r0, #32
    2cd6:	4b2d      	ldr	r3, [pc, #180]	; (2d8c <set_pins+0xe8>)
    2cd8:	4798      	blx	r3
			ioport_set_pin_peripheral_mode(PIN_PB01B_USART0_TXD, MUX_PB01B_USART0_TXD);
    2cda:	2021      	movs	r0, #33	; 0x21
    2cdc:	2101      	movs	r1, #1
    2cde:	4b2a      	ldr	r3, [pc, #168]	; (2d88 <set_pins+0xe4>)
    2ce0:	4798      	blx	r3
    2ce2:	2021      	movs	r0, #33	; 0x21
    2ce4:	4b29      	ldr	r3, [pc, #164]	; (2d8c <set_pins+0xe8>)
    2ce6:	4798      	blx	r3
			break;
    2ce8:	e04a      	b.n	2d80 <set_pins+0xdc>
		
		case USART1_pins:
			ioport_set_pin_peripheral_mode(EXT1_PIN_UART_RX, EXT1_UART_RX_MUX);
    2cea:	2020      	movs	r0, #32
    2cec:	2101      	movs	r1, #1
    2cee:	4b26      	ldr	r3, [pc, #152]	; (2d88 <set_pins+0xe4>)
    2cf0:	4798      	blx	r3
    2cf2:	2020      	movs	r0, #32
    2cf4:	4b25      	ldr	r3, [pc, #148]	; (2d8c <set_pins+0xe8>)
    2cf6:	4798      	blx	r3
			ioport_set_pin_peripheral_mode(EXT1_PIN_UART_TX, EXT1_UART_TX_MUX);
    2cf8:	2021      	movs	r0, #33	; 0x21
    2cfa:	2101      	movs	r1, #1
    2cfc:	4b22      	ldr	r3, [pc, #136]	; (2d88 <set_pins+0xe4>)
    2cfe:	4798      	blx	r3
    2d00:	2021      	movs	r0, #33	; 0x21
    2d02:	4b22      	ldr	r3, [pc, #136]	; (2d8c <set_pins+0xe8>)
    2d04:	4798      	blx	r3
			break;
    2d06:	e03b      	b.n	2d80 <set_pins+0xdc>
		
		case USART2_SPI_pins:
			ioport_set_pin_peripheral_mode(PIN_PA20A_USART2_TXD, MUX_PA20A_USART2_TXD); // MOSI
    2d08:	2014      	movs	r0, #20
    2d0a:	2100      	movs	r1, #0
    2d0c:	4b1e      	ldr	r3, [pc, #120]	; (2d88 <set_pins+0xe4>)
    2d0e:	4798      	blx	r3
    2d10:	2014      	movs	r0, #20
    2d12:	4b1e      	ldr	r3, [pc, #120]	; (2d8c <set_pins+0xe8>)
    2d14:	4798      	blx	r3
			ioport_set_pin_peripheral_mode(PIN_PA19A_USART2_RXD, MUX_PA19A_USART2_RXD); // MISO
    2d16:	2013      	movs	r0, #19
    2d18:	2100      	movs	r1, #0
    2d1a:	4b1b      	ldr	r3, [pc, #108]	; (2d88 <set_pins+0xe4>)
    2d1c:	4798      	blx	r3
    2d1e:	2013      	movs	r0, #19
    2d20:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <set_pins+0xe8>)
    2d22:	4798      	blx	r3
			ioport_set_pin_peripheral_mode(PIN_PA18A_USART2_CLK, MUX_PA18A_USART2_CLK); // SCK
    2d24:	2012      	movs	r0, #18
    2d26:	2100      	movs	r1, #0
    2d28:	4b17      	ldr	r3, [pc, #92]	; (2d88 <set_pins+0xe4>)
    2d2a:	4798      	blx	r3
    2d2c:	2012      	movs	r0, #18
    2d2e:	4b17      	ldr	r3, [pc, #92]	; (2d8c <set_pins+0xe8>)
    2d30:	4798      	blx	r3
			ioport_set_pin_peripheral_mode(PIN_PA17A_USART2_RTS, MUX_PA17A_USART2_RTS); // SS
    2d32:	2011      	movs	r0, #17
    2d34:	2100      	movs	r1, #0
    2d36:	4b14      	ldr	r3, [pc, #80]	; (2d88 <set_pins+0xe4>)
    2d38:	4798      	blx	r3
    2d3a:	2011      	movs	r0, #17
    2d3c:	4b13      	ldr	r3, [pc, #76]	; (2d8c <set_pins+0xe8>)
    2d3e:	4798      	blx	r3
			
			ioport_set_pin_dir(PIN_PC15, IOPORT_DIR_OUTPUT); // Data/Command
    2d40:	204f      	movs	r0, #79	; 0x4f
    2d42:	2101      	movs	r1, #1
    2d44:	4b12      	ldr	r3, [pc, #72]	; (2d90 <set_pins+0xec>)
    2d46:	4798      	blx	r3
			ioport_set_pin_mode(PIN_PC15, IOPORT_MODE_PULLUP);
    2d48:	204f      	movs	r0, #79	; 0x4f
    2d4a:	2108      	movs	r1, #8
    2d4c:	4b0e      	ldr	r3, [pc, #56]	; (2d88 <set_pins+0xe4>)
    2d4e:	4798      	blx	r3
			ioport_set_pin_dir(PIN_PA10, IOPORT_DIR_OUTPUT); // Reset
    2d50:	200a      	movs	r0, #10
    2d52:	2101      	movs	r1, #1
    2d54:	4b0e      	ldr	r3, [pc, #56]	; (2d90 <set_pins+0xec>)
    2d56:	4798      	blx	r3
			ioport_set_pin_mode(PIN_PA10, IOPORT_MODE_PULLUP);
    2d58:	200a      	movs	r0, #10
    2d5a:	2108      	movs	r1, #8
    2d5c:	4b0a      	ldr	r3, [pc, #40]	; (2d88 <set_pins+0xe4>)
    2d5e:	4798      	blx	r3
			break;
    2d60:	e00e      	b.n	2d80 <set_pins+0xdc>
		
		case TC10_pins:
			ioport_set_pin_peripheral_mode(PIN_PC00D_TC1_A0, MUX_PC00D_TC1_A0);
    2d62:	2040      	movs	r0, #64	; 0x40
    2d64:	2103      	movs	r1, #3
    2d66:	4b08      	ldr	r3, [pc, #32]	; (2d88 <set_pins+0xe4>)
    2d68:	4798      	blx	r3
    2d6a:	2040      	movs	r0, #64	; 0x40
    2d6c:	4b07      	ldr	r3, [pc, #28]	; (2d8c <set_pins+0xe8>)
    2d6e:	4798      	blx	r3
			ioport_set_pin_peripheral_mode(PIN_PC01D_TC1_B0, MUX_PC01D_TC1_B0);
    2d70:	2041      	movs	r0, #65	; 0x41
    2d72:	2103      	movs	r1, #3
    2d74:	4b04      	ldr	r3, [pc, #16]	; (2d88 <set_pins+0xe4>)
    2d76:	4798      	blx	r3
    2d78:	2041      	movs	r0, #65	; 0x41
    2d7a:	4b04      	ldr	r3, [pc, #16]	; (2d8c <set_pins+0xe8>)
    2d7c:	4798      	blx	r3
			break;
    2d7e:	bf00      	nop
		
	}
			
}
    2d80:	3708      	adds	r7, #8
    2d82:	46bd      	mov	sp, r7
    2d84:	bd80      	pop	{r7, pc}
    2d86:	bf00      	nop
    2d88:	00002ab9 	.word	0x00002ab9
    2d8c:	00002a71 	.word	0x00002a71
    2d90:	00002bbd 	.word	0x00002bbd

00002d94 <reset_pins>:

void reset_pins(int module)
{
    2d94:	b580      	push	{r7, lr}
    2d96:	b082      	sub	sp, #8
    2d98:	af00      	add	r7, sp, #0
    2d9a:	6078      	str	r0, [r7, #4]
	switch (module)
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	3b01      	subs	r3, #1
    2da0:	2b03      	cmp	r3, #3
    2da2:	d82d      	bhi.n	2e00 <reset_pins+0x6c>
    2da4:	a201      	add	r2, pc, #4	; (adr r2, 2dac <reset_pins+0x18>)
    2da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2daa:	bf00      	nop
    2dac:	00002df3 	.word	0x00002df3
    2db0:	00002dbd 	.word	0x00002dbd
    2db4:	00002dcb 	.word	0x00002dcb
    2db8:	00002dd9 	.word	0x00002dd9
	{
		case USART0_pins:
			ioport_enable_pin(PIN_PB00B_USART0_RXD);
    2dbc:	2020      	movs	r0, #32
    2dbe:	4b12      	ldr	r3, [pc, #72]	; (2e08 <reset_pins+0x74>)
    2dc0:	4798      	blx	r3
			ioport_enable_pin(PIN_PB01B_USART0_TXD);
    2dc2:	2021      	movs	r0, #33	; 0x21
    2dc4:	4b10      	ldr	r3, [pc, #64]	; (2e08 <reset_pins+0x74>)
    2dc6:	4798      	blx	r3
			break;
    2dc8:	e01a      	b.n	2e00 <reset_pins+0x6c>
		
		case USART1_pins:
			ioport_enable_pin(EXT1_PIN_UART_RX);
    2dca:	2020      	movs	r0, #32
    2dcc:	4b0e      	ldr	r3, [pc, #56]	; (2e08 <reset_pins+0x74>)
    2dce:	4798      	blx	r3
			ioport_enable_pin(EXT1_PIN_UART_TX);
    2dd0:	2021      	movs	r0, #33	; 0x21
    2dd2:	4b0d      	ldr	r3, [pc, #52]	; (2e08 <reset_pins+0x74>)
    2dd4:	4798      	blx	r3
			break;
    2dd6:	e013      	b.n	2e00 <reset_pins+0x6c>
		
		case USART2_SPI_pins:
			ioport_enable_pin(PIN_PA20A_USART2_TXD); // MOSI
    2dd8:	2014      	movs	r0, #20
    2dda:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <reset_pins+0x74>)
    2ddc:	4798      	blx	r3
			ioport_enable_pin(PIN_PA19A_USART2_RXD); // MISO
    2dde:	2013      	movs	r0, #19
    2de0:	4b09      	ldr	r3, [pc, #36]	; (2e08 <reset_pins+0x74>)
    2de2:	4798      	blx	r3
			ioport_enable_pin(PIN_PA18A_USART2_CLK); // SCK
    2de4:	2012      	movs	r0, #18
    2de6:	4b08      	ldr	r3, [pc, #32]	; (2e08 <reset_pins+0x74>)
    2de8:	4798      	blx	r3
			ioport_enable_pin(PIN_PA17A_USART2_RTS); // SS
    2dea:	2011      	movs	r0, #17
    2dec:	4b06      	ldr	r3, [pc, #24]	; (2e08 <reset_pins+0x74>)
    2dee:	4798      	blx	r3
			
			break;
    2df0:	e006      	b.n	2e00 <reset_pins+0x6c>
		
		case TC10_pins:
			ioport_enable_pin(PIN_PC00D_TC1_A0);
    2df2:	2040      	movs	r0, #64	; 0x40
    2df4:	4b04      	ldr	r3, [pc, #16]	; (2e08 <reset_pins+0x74>)
    2df6:	4798      	blx	r3
			ioport_enable_pin(PIN_PC01D_TC1_B0);
    2df8:	2041      	movs	r0, #65	; 0x41
    2dfa:	4b03      	ldr	r3, [pc, #12]	; (2e08 <reset_pins+0x74>)
    2dfc:	4798      	blx	r3
			break;
    2dfe:	bf00      	nop
		
	}
    2e00:	3708      	adds	r7, #8
    2e02:	46bd      	mov	sp, r7
    2e04:	bd80      	pop	{r7, pc}
    2e06:	bf00      	nop
    2e08:	00002a29 	.word	0x00002a29

00002e0c <init_PWM_counter_wales_wind_sensor>:
struct wind_sensor_s wind_sensor;
struct regulator_s rudder_regulator;

// PWM wind sensor
void init_PWM_counter_wales_wind_sensor(void)
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	af00      	add	r7, sp, #0
	// Enable peripheral clock (if it isn't already enabled)
	sysclk_enable_peripheral_clock(PWM_WIND_SENSOR_TIMER);
    2e10:	4808      	ldr	r0, [pc, #32]	; (2e34 <init_PWM_counter_wales_wind_sensor+0x28>)
    2e12:	4b09      	ldr	r3, [pc, #36]	; (2e38 <init_PWM_counter_wales_wind_sensor+0x2c>)
    2e14:	4798      	blx	r3
	
	tc_init(PWM_WIND_SENSOR_TIMER, PWM_WIND_SENSOR_CHANNEL,
    2e16:	4807      	ldr	r0, [pc, #28]	; (2e34 <init_PWM_counter_wales_wind_sensor+0x28>)
    2e18:	2102      	movs	r1, #2
    2e1a:	4a08      	ldr	r2, [pc, #32]	; (2e3c <init_PWM_counter_wales_wind_sensor+0x30>)
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <init_PWM_counter_wales_wind_sensor+0x34>)
    2e1e:	4798      	blx	r3
	| TC_CMR_LDRB_FALLING /* RB Loading: falling edge of TIOA */
	| TC_CMR_ABETRG /* External Trigger: TIOA */
	| TC_CMR_ETRGEDG_FALLING /* External Trigger Edge: Falling edge */
	);

	tc_enable_interrupt(PWM_WIND_SENSOR_TIMER, PWM_WIND_SENSOR_CHANNEL, TC_IER_LDRBS);
    2e20:	4804      	ldr	r0, [pc, #16]	; (2e34 <init_PWM_counter_wales_wind_sensor+0x28>)
    2e22:	2102      	movs	r1, #2
    2e24:	2240      	movs	r2, #64	; 0x40
    2e26:	4b07      	ldr	r3, [pc, #28]	; (2e44 <init_PWM_counter_wales_wind_sensor+0x38>)
    2e28:	4798      	blx	r3
	tc_start(PWM_WIND_SENSOR_TIMER, PWM_WIND_SENSOR_CHANNEL);
    2e2a:	4802      	ldr	r0, [pc, #8]	; (2e34 <init_PWM_counter_wales_wind_sensor+0x28>)
    2e2c:	2102      	movs	r1, #2
    2e2e:	4b06      	ldr	r3, [pc, #24]	; (2e48 <init_PWM_counter_wales_wind_sensor+0x3c>)
    2e30:	4798      	blx	r3
}
    2e32:	bd80      	pop	{r7, pc}
    2e34:	40010000 	.word	0x40010000
    2e38:	00004899 	.word	0x00004899
    2e3c:	00090602 	.word	0x00090602
    2e40:	00001471 	.word	0x00001471
    2e44:	00001579 	.word	0x00001579
    2e48:	000014a9 	.word	0x000014a9

00002e4c <deinit_PWM_counter_wales_wind_sensor>:

// turn counter off
void deinit_PWM_counter_wales_wind_sensor(void)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	af00      	add	r7, sp, #0
	tc_stop(PWM_WIND_SENSOR_TIMER, PWM_WIND_SENSOR_CHANNEL);
    2e50:	4802      	ldr	r0, [pc, #8]	; (2e5c <deinit_PWM_counter_wales_wind_sensor+0x10>)
    2e52:	2102      	movs	r1, #2
    2e54:	4b02      	ldr	r3, [pc, #8]	; (2e60 <deinit_PWM_counter_wales_wind_sensor+0x14>)
    2e56:	4798      	blx	r3
}
    2e58:	bd80      	pop	{r7, pc}
    2e5a:	bf00      	nop
    2e5c:	40010000 	.word	0x40010000
    2e60:	000014c9 	.word	0x000014c9

00002e64 <init_PWM_output_rudder_regulator>:

// PWM output to motor controller for rudder
void init_PWM_output_rudder_regulator(void)
{
    2e64:	b580      	push	{r7, lr}
    2e66:	af00      	add	r7, sp, #0
	set_pins(TC10_pins);
    2e68:	2001      	movs	r0, #1
    2e6a:	4b05      	ldr	r3, [pc, #20]	; (2e80 <init_PWM_output_rudder_regulator+0x1c>)
    2e6c:	4798      	blx	r3
	
	// Enable peripheral clock (if it isn't already enabled)
	sysclk_enable_peripheral_clock(RUDDER_ACTUATOR_TIMER);
    2e6e:	4805      	ldr	r0, [pc, #20]	; (2e84 <init_PWM_output_rudder_regulator+0x20>)
    2e70:	4b05      	ldr	r3, [pc, #20]	; (2e88 <init_PWM_output_rudder_regulator+0x24>)
    2e72:	4798      	blx	r3
	
	// Init actuator PWM
	tc_init(RUDDER_ACTUATOR_TIMER, RUDDER_ACTUATOR_CHANNEL,
    2e74:	4803      	ldr	r0, [pc, #12]	; (2e84 <init_PWM_output_rudder_regulator+0x20>)
    2e76:	2100      	movs	r1, #0
    2e78:	4a04      	ldr	r2, [pc, #16]	; (2e8c <init_PWM_output_rudder_regulator+0x28>)
    2e7a:	4b05      	ldr	r3, [pc, #20]	; (2e90 <init_PWM_output_rudder_regulator+0x2c>)
    2e7c:	4798      	blx	r3
	TC_PWM_TIMER_SELECTION				// Busclock divided by 0,2,8,32,128...
	| TC_CMR_WAVE						// Waveform mode
	| TC_CMR_ACPA_CLEAR					// RA compare effect on TIOA
	| TC_CMR_ACPC_SET					// RC compare effekt on TIOA
	| TC_CMR_WAVEFORM_WAVSEL_UP_AUTO);	// Count up and RC compare trigger
}
    2e7e:	bd80      	pop	{r7, pc}
    2e80:	00002ca5 	.word	0x00002ca5
    2e84:	40014000 	.word	0x40014000
    2e88:	00004899 	.word	0x00004899
    2e8c:	0006c003 	.word	0x0006c003
    2e90:	00001471 	.word	0x00001471

00002e94 <init_PWM_output_sheeting_regulator>:

// PWM output to motor controller for sheeting
void init_PWM_output_sheeting_regulator(void)
{
    2e94:	b480      	push	{r7}
    2e96:	af00      	add	r7, sp, #0
	
}
    2e98:	46bd      	mov	sp, r7
    2e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e9e:	4770      	bx	lr

00002ea0 <update_pwm_output_rudder_regulator>:

// Update PWM output by calculating new values for counter registers.
void update_pwm_output_rudder_regulator(int output_value)
{
    2ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ea2:	b083      	sub	sp, #12
    2ea4:	af00      	add	r7, sp, #0
    2ea6:	6078      	str	r0, [r7, #4]
	
	if(rudder_regulator.output_enable && (wind_sensor.speed >= *wind_sensor.minimum_speed) )
    2ea8:	4b3f      	ldr	r3, [pc, #252]	; (2fa8 <update_pwm_output_rudder_regulator+0x108>)
    2eaa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d06a      	beq.n	2f88 <update_pwm_output_rudder_regulator+0xe8>
    2eb2:	4b3e      	ldr	r3, [pc, #248]	; (2fac <update_pwm_output_rudder_regulator+0x10c>)
    2eb4:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	; 0xa6
    2eb8:	4b3c      	ldr	r3, [pc, #240]	; (2fac <update_pwm_output_rudder_regulator+0x10c>)
    2eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    2ebe:	881b      	ldrh	r3, [r3, #0]
    2ec0:	429a      	cmp	r2, r3
    2ec2:	d361      	bcc.n	2f88 <update_pwm_output_rudder_regulator+0xe8>
	{
		// Set positive width
		tc_write_ra(TC1, RUDDER_ACTUATOR_CHANNEL,
		((sysclk_get_peripheral_bus_hz(TC1) / divisors[TC_PWM_TIMER_SELECTION])) *
    2ec4:	483a      	ldr	r0, [pc, #232]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2ec6:	4b3b      	ldr	r3, [pc, #236]	; (2fb4 <update_pwm_output_rudder_regulator+0x114>)
    2ec8:	4798      	blx	r3
    2eca:	4602      	mov	r2, r0
    2ecc:	2320      	movs	r3, #32
    2ece:	fbb2 f2f3 	udiv	r2, r2, r3
    2ed2:	4b39      	ldr	r3, [pc, #228]	; (2fb8 <update_pwm_output_rudder_regulator+0x118>)
    2ed4:	4610      	mov	r0, r2
    2ed6:	4798      	blx	r3
    2ed8:	4604      	mov	r4, r0
    2eda:	460d      	mov	r5, r1
		(( (RUDDER_ACTUATOR_PWM_MAX_POSITIVE_WIDTH - RUDDER_ACTUATOR_PWM_MIN_POSITIVE_WIDTH) * ((float)output_value / 100)) + RUDDER_ACTUATOR_PWM_MIN_POSITIVE_WIDTH));
    2edc:	4b37      	ldr	r3, [pc, #220]	; (2fbc <update_pwm_output_rudder_regulator+0x11c>)
    2ede:	6878      	ldr	r0, [r7, #4]
    2ee0:	4798      	blx	r3
    2ee2:	4602      	mov	r2, r0
    2ee4:	4b36      	ldr	r3, [pc, #216]	; (2fc0 <update_pwm_output_rudder_regulator+0x120>)
    2ee6:	4610      	mov	r0, r2
    2ee8:	4936      	ldr	r1, [pc, #216]	; (2fc4 <update_pwm_output_rudder_regulator+0x124>)
    2eea:	4798      	blx	r3
    2eec:	4603      	mov	r3, r0
    2eee:	461a      	mov	r2, r3
    2ef0:	4b35      	ldr	r3, [pc, #212]	; (2fc8 <update_pwm_output_rudder_regulator+0x128>)
    2ef2:	4610      	mov	r0, r2
    2ef4:	4798      	blx	r3
    2ef6:	4602      	mov	r2, r0
    2ef8:	460b      	mov	r3, r1
    2efa:	4e34      	ldr	r6, [pc, #208]	; (2fcc <update_pwm_output_rudder_regulator+0x12c>)
    2efc:	4610      	mov	r0, r2
    2efe:	4619      	mov	r1, r3
    2f00:	a325      	add	r3, pc, #148	; (adr r3, 2f98 <update_pwm_output_rudder_regulator+0xf8>)
    2f02:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f06:	47b0      	blx	r6
    2f08:	4602      	mov	r2, r0
    2f0a:	460b      	mov	r3, r1
    2f0c:	4e30      	ldr	r6, [pc, #192]	; (2fd0 <update_pwm_output_rudder_regulator+0x130>)
    2f0e:	4610      	mov	r0, r2
    2f10:	4619      	mov	r1, r3
    2f12:	a323      	add	r3, pc, #140	; (adr r3, 2fa0 <update_pwm_output_rudder_regulator+0x100>)
    2f14:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f18:	47b0      	blx	r6
    2f1a:	4602      	mov	r2, r0
    2f1c:	460b      	mov	r3, r1
	
	if(rudder_regulator.output_enable && (wind_sensor.speed >= *wind_sensor.minimum_speed) )
	{
		// Set positive width
		tc_write_ra(TC1, RUDDER_ACTUATOR_CHANNEL,
		((sysclk_get_peripheral_bus_hz(TC1) / divisors[TC_PWM_TIMER_SELECTION])) *
    2f1e:	4e2b      	ldr	r6, [pc, #172]	; (2fcc <update_pwm_output_rudder_regulator+0x12c>)
    2f20:	4620      	mov	r0, r4
    2f22:	4629      	mov	r1, r5
    2f24:	47b0      	blx	r6
    2f26:	4602      	mov	r2, r0
    2f28:	460b      	mov	r3, r1
{
	
	if(rudder_regulator.output_enable && (wind_sensor.speed >= *wind_sensor.minimum_speed) )
	{
		// Set positive width
		tc_write_ra(TC1, RUDDER_ACTUATOR_CHANNEL,
    2f2a:	4c2a      	ldr	r4, [pc, #168]	; (2fd4 <update_pwm_output_rudder_regulator+0x134>)
    2f2c:	4610      	mov	r0, r2
    2f2e:	4619      	mov	r1, r3
    2f30:	47a0      	blx	r4
    2f32:	4603      	mov	r3, r0
    2f34:	481e      	ldr	r0, [pc, #120]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2f36:	2100      	movs	r1, #0
    2f38:	461a      	mov	r2, r3
    2f3a:	4b27      	ldr	r3, [pc, #156]	; (2fd8 <update_pwm_output_rudder_regulator+0x138>)
    2f3c:	4798      	blx	r3
		((sysclk_get_peripheral_bus_hz(TC1) / divisors[TC_PWM_TIMER_SELECTION])) *
		(( (RUDDER_ACTUATOR_PWM_MAX_POSITIVE_WIDTH - RUDDER_ACTUATOR_PWM_MIN_POSITIVE_WIDTH) * ((float)output_value / 100)) + RUDDER_ACTUATOR_PWM_MIN_POSITIVE_WIDTH));
		
		// Set frequency
		PWM_C_register_value = (sysclk_get_peripheral_bus_hz(TC1) / divisors[ TC_CAPTURE_TIMER_SELECTION] / (RUDDER_ACTUATOR_PWM_FREQUENCY));
    2f3e:	481c      	ldr	r0, [pc, #112]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2f40:	4b1c      	ldr	r3, [pc, #112]	; (2fb4 <update_pwm_output_rudder_regulator+0x114>)
    2f42:	4798      	blx	r3
    2f44:	4602      	mov	r2, r0
    2f46:	2308      	movs	r3, #8
    2f48:	fbb2 f3f3 	udiv	r3, r2, r3
    2f4c:	085a      	lsrs	r2, r3, #1
    2f4e:	4b23      	ldr	r3, [pc, #140]	; (2fdc <update_pwm_output_rudder_regulator+0x13c>)
    2f50:	fba3 1302 	umull	r1, r3, r3, r2
    2f54:	095b      	lsrs	r3, r3, #5
    2f56:	461a      	mov	r2, r3
    2f58:	4b21      	ldr	r3, [pc, #132]	; (2fe0 <update_pwm_output_rudder_regulator+0x140>)
    2f5a:	601a      	str	r2, [r3, #0]
		tc_write_rc(TC1, RUDDER_ACTUATOR_CHANNEL, PWM_C_register_value);
    2f5c:	4b20      	ldr	r3, [pc, #128]	; (2fe0 <update_pwm_output_rudder_regulator+0x140>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	4813      	ldr	r0, [pc, #76]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2f62:	2100      	movs	r1, #0
    2f64:	461a      	mov	r2, r3
    2f66:	4b1f      	ldr	r3, [pc, #124]	; (2fe4 <update_pwm_output_rudder_regulator+0x144>)
    2f68:	4798      	blx	r3
			
		// Start timer if it isn't already running
		if( (tc_get_status(TC1, RUDDER_ACTUATOR_CHANNEL) & TC_SR_CLKSTA) != TC_SR_CLKSTA)
    2f6a:	4811      	ldr	r0, [pc, #68]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2f6c:	2100      	movs	r1, #0
    2f6e:	4b1e      	ldr	r3, [pc, #120]	; (2fe8 <update_pwm_output_rudder_regulator+0x148>)
    2f70:	4798      	blx	r3
    2f72:	4603      	mov	r3, r0
    2f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d104      	bne.n	2f86 <update_pwm_output_rudder_regulator+0xe6>
		{
			tc_start(TC1, RUDDER_ACTUATOR_CHANNEL);
    2f7c:	480c      	ldr	r0, [pc, #48]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2f7e:	2100      	movs	r1, #0
    2f80:	4b1a      	ldr	r3, [pc, #104]	; (2fec <update_pwm_output_rudder_regulator+0x14c>)
    2f82:	4798      	blx	r3
		// Set frequency
		PWM_C_register_value = (sysclk_get_peripheral_bus_hz(TC1) / divisors[ TC_CAPTURE_TIMER_SELECTION] / (RUDDER_ACTUATOR_PWM_FREQUENCY));
		tc_write_rc(TC1, RUDDER_ACTUATOR_CHANNEL, PWM_C_register_value);
			
		// Start timer if it isn't already running
		if( (tc_get_status(TC1, RUDDER_ACTUATOR_CHANNEL) & TC_SR_CLKSTA) != TC_SR_CLKSTA)
    2f84:	e004      	b.n	2f90 <update_pwm_output_rudder_regulator+0xf0>
    2f86:	e003      	b.n	2f90 <update_pwm_output_rudder_regulator+0xf0>
		{
			tc_start(TC1, RUDDER_ACTUATOR_CHANNEL);
		}
	}
	else
		tc_stop(TC1, RUDDER_ACTUATOR_CHANNEL);
    2f88:	4809      	ldr	r0, [pc, #36]	; (2fb0 <update_pwm_output_rudder_regulator+0x110>)
    2f8a:	2100      	movs	r1, #0
    2f8c:	4b18      	ldr	r3, [pc, #96]	; (2ff0 <update_pwm_output_rudder_regulator+0x150>)
    2f8e:	4798      	blx	r3
	
}
    2f90:	370c      	adds	r7, #12
    2f92:	46bd      	mov	sp, r7
    2f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f96:	bf00      	nop
    2f98:	487fcb92 	.word	0x487fcb92
    2f9c:	3f4d7dbf 	.word	0x3f4d7dbf
    2fa0:	01a36e2f 	.word	0x01a36e2f
    2fa4:	3f5205bc 	.word	0x3f5205bc
    2fa8:	20000f2c 	.word	0x20000f2c
    2fac:	20000e80 	.word	0x20000e80
    2fb0:	40014000 	.word	0x40014000
    2fb4:	0000462d 	.word	0x0000462d
    2fb8:	000072c5 	.word	0x000072c5
    2fbc:	00007989 	.word	0x00007989
    2fc0:	00007b99 	.word	0x00007b99
    2fc4:	42c80000 	.word	0x42c80000
    2fc8:	00007309 	.word	0x00007309
    2fcc:	000073b1 	.word	0x000073b1
    2fd0:	0000704d 	.word	0x0000704d
    2fd4:	000077d5 	.word	0x000077d5
    2fd8:	00001531 	.word	0x00001531
    2fdc:	ea0ea0eb 	.word	0xea0ea0eb
    2fe0:	20000dc0 	.word	0x20000dc0
    2fe4:	00001555 	.word	0x00001555
    2fe8:	000015a1 	.word	0x000015a1
    2fec:	000014a9 	.word	0x000014a9
    2ff0:	000014c9 	.word	0x000014c9
    2ff4:	f3af 8000 	nop.w

00002ff8 <init_rudder_regulator>:
struct regulator_s rudder_regulator;
struct regulator_s sheeting_regulator;

// Initiate rudder regulator and load data from flash memory
void init_rudder_regulator(void)
{
    2ff8:	b580      	push	{r7, lr}
    2ffa:	af00      	add	r7, sp, #0
	init_PWM_output_rudder_regulator();
    2ffc:	4b07      	ldr	r3, [pc, #28]	; (301c <init_rudder_regulator+0x24>)
    2ffe:	4798      	blx	r3
		
	rudder_regulator.p = RUDDER_REGULATOR_P_ADDRESS;
    3000:	4b07      	ldr	r3, [pc, #28]	; (3020 <init_rudder_regulator+0x28>)
    3002:	4a08      	ldr	r2, [pc, #32]	; (3024 <init_rudder_regulator+0x2c>)
    3004:	629a      	str	r2, [r3, #40]	; 0x28
	rudder_regulator.i = RUDDER_REGULATOR_I_ADDRESS;
    3006:	4b06      	ldr	r3, [pc, #24]	; (3020 <init_rudder_regulator+0x28>)
    3008:	4a07      	ldr	r2, [pc, #28]	; (3028 <init_rudder_regulator+0x30>)
    300a:	62da      	str	r2, [r3, #44]	; 0x2c
	rudder_regulator.d = RUDDER_REGULATOR_D_ADDRESS;
    300c:	4b04      	ldr	r3, [pc, #16]	; (3020 <init_rudder_regulator+0x28>)
    300e:	4a07      	ldr	r2, [pc, #28]	; (302c <init_rudder_regulator+0x34>)
    3010:	631a      	str	r2, [r3, #48]	; 0x30
	rudder_regulator.setpoint = RUDDER_REGULATOR_SETPOINT_ADDRESS;
    3012:	4b03      	ldr	r3, [pc, #12]	; (3020 <init_rudder_regulator+0x28>)
    3014:	4a06      	ldr	r2, [pc, #24]	; (3030 <init_rudder_regulator+0x38>)
    3016:	621a      	str	r2, [r3, #32]
}
    3018:	bd80      	pop	{r7, pc}
    301a:	bf00      	nop
    301c:	00002e65 	.word	0x00002e65
    3020:	20000f2c 	.word	0x20000f2c
    3024:	0003fe10 	.word	0x0003fe10
    3028:	0003fe20 	.word	0x0003fe20
    302c:	0003fe30 	.word	0x0003fe30
    3030:	0003fe40 	.word	0x0003fe40

00003034 <update_rudder_regulator>:

// Update rudder regulator and set new output value
void update_rudder_regulator(uint8_t PV)
{
    3034:	b480      	push	{r7}
    3036:	b083      	sub	sp, #12
    3038:	af00      	add	r7, sp, #0
    303a:	4603      	mov	r3, r0
    303c:	71fb      	strb	r3, [r7, #7]
	// Processvalue is equal to sensor dutycycle in %
	rudder_regulator.process_value = PV;
    303e:	79fb      	ldrb	r3, [r7, #7]
    3040:	b29a      	uxth	r2, r3
    3042:	4b10      	ldr	r3, [pc, #64]	; (3084 <update_rudder_regulator+0x50>)
    3044:	83da      	strh	r2, [r3, #30]
	
	// Regulator output in % 
	rudder_regulator.output = min( max( ( (rudder_regulator.process_value) - *rudder_regulator.setpoint) + 50, 0), 100);
    3046:	4b0f      	ldr	r3, [pc, #60]	; (3084 <update_rudder_regulator+0x50>)
    3048:	8bdb      	ldrh	r3, [r3, #30]
    304a:	461a      	mov	r2, r3
    304c:	4b0d      	ldr	r3, [pc, #52]	; (3084 <update_rudder_regulator+0x50>)
    304e:	6a1b      	ldr	r3, [r3, #32]
    3050:	881b      	ldrh	r3, [r3, #0]
    3052:	1ad3      	subs	r3, r2, r3
    3054:	3332      	adds	r3, #50	; 0x32
    3056:	2b63      	cmp	r3, #99	; 0x63
    3058:	dc0b      	bgt.n	3072 <update_rudder_regulator+0x3e>
    305a:	4b0a      	ldr	r3, [pc, #40]	; (3084 <update_rudder_regulator+0x50>)
    305c:	8bdb      	ldrh	r3, [r3, #30]
    305e:	461a      	mov	r2, r3
    3060:	4b08      	ldr	r3, [pc, #32]	; (3084 <update_rudder_regulator+0x50>)
    3062:	6a1b      	ldr	r3, [r3, #32]
    3064:	881b      	ldrh	r3, [r3, #0]
    3066:	1ad3      	subs	r3, r2, r3
    3068:	3332      	adds	r3, #50	; 0x32
    306a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    306e:	b29b      	uxth	r3, r3
    3070:	e000      	b.n	3074 <update_rudder_regulator+0x40>
    3072:	2364      	movs	r3, #100	; 0x64
    3074:	4a03      	ldr	r2, [pc, #12]	; (3084 <update_rudder_regulator+0x50>)
    3076:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3078:	370c      	adds	r7, #12
    307a:	46bd      	mov	sp, r7
    307c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3080:	4770      	bx	lr
    3082:	bf00      	nop
    3084:	20000f2c 	.word	0x20000f2c

00003088 <init_sheeting_regulator>:

// Initiate rudder regulator and load data from flash memory
void init_sheeting_regulator(void)
{
    3088:	b580      	push	{r7, lr}
    308a:	af00      	add	r7, sp, #0
	init_PWM_output_sheeting_regulator();
    308c:	4b07      	ldr	r3, [pc, #28]	; (30ac <init_sheeting_regulator+0x24>)
    308e:	4798      	blx	r3
	
	sheeting_regulator.p = SHEETING_REGULATOR_P_ADDRESS;
    3090:	4b07      	ldr	r3, [pc, #28]	; (30b0 <init_sheeting_regulator+0x28>)
    3092:	4a08      	ldr	r2, [pc, #32]	; (30b4 <init_sheeting_regulator+0x2c>)
    3094:	629a      	str	r2, [r3, #40]	; 0x28
	sheeting_regulator.i = SHEETING_REGULATOR_I_ADDRESS;
    3096:	4b06      	ldr	r3, [pc, #24]	; (30b0 <init_sheeting_regulator+0x28>)
    3098:	4a07      	ldr	r2, [pc, #28]	; (30b8 <init_sheeting_regulator+0x30>)
    309a:	62da      	str	r2, [r3, #44]	; 0x2c
	sheeting_regulator.d = SHEETING_REGULATOR_D_ADDRESS;
    309c:	4b04      	ldr	r3, [pc, #16]	; (30b0 <init_sheeting_regulator+0x28>)
    309e:	4a07      	ldr	r2, [pc, #28]	; (30bc <init_sheeting_regulator+0x34>)
    30a0:	631a      	str	r2, [r3, #48]	; 0x30
	sheeting_regulator.setpoint = SHEETING_REGULATOR_SETPOINT_ADDRESS;
    30a2:	4b03      	ldr	r3, [pc, #12]	; (30b0 <init_sheeting_regulator+0x28>)
    30a4:	4a06      	ldr	r2, [pc, #24]	; (30c0 <init_sheeting_regulator+0x38>)
    30a6:	621a      	str	r2, [r3, #32]
}
    30a8:	bd80      	pop	{r7, pc}
    30aa:	bf00      	nop
    30ac:	00002e95 	.word	0x00002e95
    30b0:	20000e2c 	.word	0x20000e2c
    30b4:	0003fe60 	.word	0x0003fe60
    30b8:	0003fe70 	.word	0x0003fe70
    30bc:	0003fe80 	.word	0x0003fe80
    30c0:	0003fe90 	.word	0x0003fe90

000030c4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    30c4:	b480      	push	{r7}
    30c6:	b083      	sub	sp, #12
    30c8:	af00      	add	r7, sp, #0
    30ca:	4603      	mov	r3, r0
    30cc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    30ce:	4b08      	ldr	r3, [pc, #32]	; (30f0 <NVIC_EnableIRQ+0x2c>)
    30d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
    30d4:	0952      	lsrs	r2, r2, #5
    30d6:	79f9      	ldrb	r1, [r7, #7]
    30d8:	f001 011f 	and.w	r1, r1, #31
    30dc:	2001      	movs	r0, #1
    30de:	fa00 f101 	lsl.w	r1, r0, r1
    30e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    30e6:	370c      	adds	r7, #12
    30e8:	46bd      	mov	sp, r7
    30ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    30ee:	4770      	bx	lr
    30f0:	e000e100 	.word	0xe000e100

000030f4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    30f4:	b480      	push	{r7}
    30f6:	b083      	sub	sp, #12
    30f8:	af00      	add	r7, sp, #0
    30fa:	4603      	mov	r3, r0
    30fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    30fe:	4b09      	ldr	r3, [pc, #36]	; (3124 <NVIC_DisableIRQ+0x30>)
    3100:	f997 2007 	ldrsb.w	r2, [r7, #7]
    3104:	0952      	lsrs	r2, r2, #5
    3106:	79f9      	ldrb	r1, [r7, #7]
    3108:	f001 011f 	and.w	r1, r1, #31
    310c:	2001      	movs	r0, #1
    310e:	fa00 f101 	lsl.w	r1, r0, r1
    3112:	3220      	adds	r2, #32
    3114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    3118:	370c      	adds	r7, #12
    311a:	46bd      	mov	sp, r7
    311c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3120:	4770      	bx	lr
    3122:	bf00      	nop
    3124:	e000e100 	.word	0xe000e100

00003128 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3128:	b480      	push	{r7}
    312a:	b083      	sub	sp, #12
    312c:	af00      	add	r7, sp, #0
    312e:	4603      	mov	r3, r0
    3130:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3132:	4b09      	ldr	r3, [pc, #36]	; (3158 <NVIC_ClearPendingIRQ+0x30>)
    3134:	f997 2007 	ldrsb.w	r2, [r7, #7]
    3138:	0952      	lsrs	r2, r2, #5
    313a:	79f9      	ldrb	r1, [r7, #7]
    313c:	f001 011f 	and.w	r1, r1, #31
    3140:	2001      	movs	r0, #1
    3142:	fa00 f101 	lsl.w	r1, r0, r1
    3146:	3260      	adds	r2, #96	; 0x60
    3148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    314c:	370c      	adds	r7, #12
    314e:	46bd      	mov	sp, r7
    3150:	f85d 7b04 	ldr.w	r7, [sp], #4
    3154:	4770      	bx	lr
    3156:	bf00      	nop
    3158:	e000e100 	.word	0xe000e100

0000315c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    315c:	b480      	push	{r7}
    315e:	b083      	sub	sp, #12
    3160:	af00      	add	r7, sp, #0
    3162:	4603      	mov	r3, r0
    3164:	6039      	str	r1, [r7, #0]
    3166:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    3168:	f997 3007 	ldrsb.w	r3, [r7, #7]
    316c:	2b00      	cmp	r3, #0
    316e:	da0b      	bge.n	3188 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    3170:	490d      	ldr	r1, [pc, #52]	; (31a8 <NVIC_SetPriority+0x4c>)
    3172:	79fb      	ldrb	r3, [r7, #7]
    3174:	f003 030f 	and.w	r3, r3, #15
    3178:	3b04      	subs	r3, #4
    317a:	683a      	ldr	r2, [r7, #0]
    317c:	b2d2      	uxtb	r2, r2
    317e:	0112      	lsls	r2, r2, #4
    3180:	b2d2      	uxtb	r2, r2
    3182:	440b      	add	r3, r1
    3184:	761a      	strb	r2, [r3, #24]
    3186:	e009      	b.n	319c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    3188:	4908      	ldr	r1, [pc, #32]	; (31ac <NVIC_SetPriority+0x50>)
    318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    318e:	683a      	ldr	r2, [r7, #0]
    3190:	b2d2      	uxtb	r2, r2
    3192:	0112      	lsls	r2, r2, #4
    3194:	b2d2      	uxtb	r2, r2
    3196:	440b      	add	r3, r1
    3198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    319c:	370c      	adds	r7, #12
    319e:	46bd      	mov	sp, r7
    31a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    31a4:	4770      	bx	lr
    31a6:	bf00      	nop
    31a8:	e000ed00 	.word	0xe000ed00
    31ac:	e000e100 	.word	0xe000e100

000031b0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b088      	sub	sp, #32
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    31ba:	683b      	ldr	r3, [r7, #0]
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
    31c0:	683b      	ldr	r3, [r7, #0]
    31c2:	685b      	ldr	r3, [r3, #4]
    31c4:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
    31c6:	683b      	ldr	r3, [r7, #0]
    31c8:	689b      	ldr	r3, [r3, #8]
    31ca:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
    31cc:	683b      	ldr	r3, [r7, #0]
    31ce:	7b1b      	ldrb	r3, [r3, #12]
    31d0:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    31d2:	2300      	movs	r3, #0
    31d4:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    31d6:	687a      	ldr	r2, [r7, #4]
    31d8:	4b30      	ldr	r3, [pc, #192]	; (329c <usart_serial_init+0xec>)
    31da:	429a      	cmp	r2, r3
    31dc:	d113      	bne.n	3206 <usart_serial_init+0x56>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    31de:	6878      	ldr	r0, [r7, #4]
    31e0:	4b2f      	ldr	r3, [pc, #188]	; (32a0 <usart_serial_init+0xf0>)
    31e2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    31e4:	6878      	ldr	r0, [r7, #4]
    31e6:	4b2f      	ldr	r3, [pc, #188]	; (32a4 <usart_serial_init+0xf4>)
    31e8:	4798      	blx	r3
    31ea:	4603      	mov	r3, r0
    31ec:	f107 0208 	add.w	r2, r7, #8
    31f0:	6878      	ldr	r0, [r7, #4]
    31f2:	4611      	mov	r1, r2
    31f4:	461a      	mov	r2, r3
    31f6:	4b2c      	ldr	r3, [pc, #176]	; (32a8 <usart_serial_init+0xf8>)
    31f8:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    31fa:	6878      	ldr	r0, [r7, #4]
    31fc:	4b2b      	ldr	r3, [pc, #172]	; (32ac <usart_serial_init+0xfc>)
    31fe:	4798      	blx	r3
		usart_enable_rx(p_usart);
    3200:	6878      	ldr	r0, [r7, #4]
    3202:	4b2b      	ldr	r3, [pc, #172]	; (32b0 <usart_serial_init+0x100>)
    3204:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    3206:	687a      	ldr	r2, [r7, #4]
    3208:	4b2a      	ldr	r3, [pc, #168]	; (32b4 <usart_serial_init+0x104>)
    320a:	429a      	cmp	r2, r3
    320c:	d113      	bne.n	3236 <usart_serial_init+0x86>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    320e:	6878      	ldr	r0, [r7, #4]
    3210:	4b23      	ldr	r3, [pc, #140]	; (32a0 <usart_serial_init+0xf0>)
    3212:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    3214:	6878      	ldr	r0, [r7, #4]
    3216:	4b23      	ldr	r3, [pc, #140]	; (32a4 <usart_serial_init+0xf4>)
    3218:	4798      	blx	r3
    321a:	4603      	mov	r3, r0
    321c:	f107 0208 	add.w	r2, r7, #8
    3220:	6878      	ldr	r0, [r7, #4]
    3222:	4611      	mov	r1, r2
    3224:	461a      	mov	r2, r3
    3226:	4b20      	ldr	r3, [pc, #128]	; (32a8 <usart_serial_init+0xf8>)
    3228:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    322a:	6878      	ldr	r0, [r7, #4]
    322c:	4b1f      	ldr	r3, [pc, #124]	; (32ac <usart_serial_init+0xfc>)
    322e:	4798      	blx	r3
		usart_enable_rx(p_usart);
    3230:	6878      	ldr	r0, [r7, #4]
    3232:	4b1f      	ldr	r3, [pc, #124]	; (32b0 <usart_serial_init+0x100>)
    3234:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    3236:	687a      	ldr	r2, [r7, #4]
    3238:	4b1f      	ldr	r3, [pc, #124]	; (32b8 <usart_serial_init+0x108>)
    323a:	429a      	cmp	r2, r3
    323c:	d113      	bne.n	3266 <usart_serial_init+0xb6>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    323e:	6878      	ldr	r0, [r7, #4]
    3240:	4b17      	ldr	r3, [pc, #92]	; (32a0 <usart_serial_init+0xf0>)
    3242:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    3244:	6878      	ldr	r0, [r7, #4]
    3246:	4b17      	ldr	r3, [pc, #92]	; (32a4 <usart_serial_init+0xf4>)
    3248:	4798      	blx	r3
    324a:	4603      	mov	r3, r0
    324c:	f107 0208 	add.w	r2, r7, #8
    3250:	6878      	ldr	r0, [r7, #4]
    3252:	4611      	mov	r1, r2
    3254:	461a      	mov	r2, r3
    3256:	4b14      	ldr	r3, [pc, #80]	; (32a8 <usart_serial_init+0xf8>)
    3258:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    325a:	6878      	ldr	r0, [r7, #4]
    325c:	4b13      	ldr	r3, [pc, #76]	; (32ac <usart_serial_init+0xfc>)
    325e:	4798      	blx	r3
		usart_enable_rx(p_usart);
    3260:	6878      	ldr	r0, [r7, #4]
    3262:	4b13      	ldr	r3, [pc, #76]	; (32b0 <usart_serial_init+0x100>)
    3264:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    3266:	687a      	ldr	r2, [r7, #4]
    3268:	4b14      	ldr	r3, [pc, #80]	; (32bc <usart_serial_init+0x10c>)
    326a:	429a      	cmp	r2, r3
    326c:	d113      	bne.n	3296 <usart_serial_init+0xe6>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    326e:	6878      	ldr	r0, [r7, #4]
    3270:	4b0b      	ldr	r3, [pc, #44]	; (32a0 <usart_serial_init+0xf0>)
    3272:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    3274:	6878      	ldr	r0, [r7, #4]
    3276:	4b0b      	ldr	r3, [pc, #44]	; (32a4 <usart_serial_init+0xf4>)
    3278:	4798      	blx	r3
    327a:	4603      	mov	r3, r0
    327c:	f107 0208 	add.w	r2, r7, #8
    3280:	6878      	ldr	r0, [r7, #4]
    3282:	4611      	mov	r1, r2
    3284:	461a      	mov	r2, r3
    3286:	4b08      	ldr	r3, [pc, #32]	; (32a8 <usart_serial_init+0xf8>)
    3288:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    328a:	6878      	ldr	r0, [r7, #4]
    328c:	4b07      	ldr	r3, [pc, #28]	; (32ac <usart_serial_init+0xfc>)
    328e:	4798      	blx	r3
		usart_enable_rx(p_usart);
    3290:	6878      	ldr	r0, [r7, #4]
    3292:	4b07      	ldr	r3, [pc, #28]	; (32b0 <usart_serial_init+0x100>)
    3294:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
    3296:	3720      	adds	r7, #32
    3298:	46bd      	mov	sp, r7
    329a:	bd80      	pop	{r7, pc}
    329c:	40024000 	.word	0x40024000
    32a0:	00004899 	.word	0x00004899
    32a4:	0000462d 	.word	0x0000462d
    32a8:	000016f1 	.word	0x000016f1
    32ac:	00001885 	.word	0x00001885
    32b0:	000018b5 	.word	0x000018b5
    32b4:	40028000 	.word	0x40028000
    32b8:	4002c000 	.word	0x4002c000
    32bc:	40030000 	.word	0x40030000

000032c0 <configure_CV7_uart>:

char receive_buffer_cv7[60];
uint32_t receive_buffer_cv7_i = 0;

void configure_CV7_uart(void)
{	
    32c0:	b590      	push	{r4, r7, lr}
    32c2:	b085      	sub	sp, #20
    32c4:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = {
    32c6:	4b08      	ldr	r3, [pc, #32]	; (32e8 <configure_CV7_uart+0x28>)
    32c8:	463c      	mov	r4, r7
    32ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    32cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.charlength = CV7_USART_CHAR_LENGTH,
		.paritytype = CV7_USART_PARITY,
		.stopbits = CV7_USART_STOP_BITS,
	};

	usart_serial_init(CV7_USART, &usart_serial_options);
    32d0:	463b      	mov	r3, r7
    32d2:	4806      	ldr	r0, [pc, #24]	; (32ec <configure_CV7_uart+0x2c>)
    32d4:	4619      	mov	r1, r3
    32d6:	4b06      	ldr	r3, [pc, #24]	; (32f0 <configure_CV7_uart+0x30>)
    32d8:	4798      	blx	r3
	
	usart_enable_interrupt(CV7_USART, US_IER_RXRDY);
    32da:	4804      	ldr	r0, [pc, #16]	; (32ec <configure_CV7_uart+0x2c>)
    32dc:	2101      	movs	r1, #1
    32de:	4b05      	ldr	r3, [pc, #20]	; (32f4 <configure_CV7_uart+0x34>)
    32e0:	4798      	blx	r3
}
    32e2:	3714      	adds	r7, #20
    32e4:	46bd      	mov	sp, r7
    32e6:	bd90      	pop	{r4, r7, pc}
    32e8:	0001080c 	.word	0x0001080c
    32ec:	40024000 	.word	0x40024000
    32f0:	000031b1 	.word	0x000031b1
    32f4:	000018e5 	.word	0x000018e5

000032f8 <init_CV7_wind_sensor>:

void init_CV7_wind_sensor(void)
{
    32f8:	b580      	push	{r7, lr}
    32fa:	af00      	add	r7, sp, #0
	set_pins(CV7_USART_pins);
    32fc:	2002      	movs	r0, #2
    32fe:	4b07      	ldr	r3, [pc, #28]	; (331c <init_CV7_wind_sensor+0x24>)
    3300:	4798      	blx	r3
	
	strcpy(wind_sensor.name, "CV7");
    3302:	4b07      	ldr	r3, [pc, #28]	; (3320 <init_CV7_wind_sensor+0x28>)
    3304:	4a07      	ldr	r2, [pc, #28]	; (3324 <init_CV7_wind_sensor+0x2c>)
    3306:	601a      	str	r2, [r3, #0]
	
	configure_CV7_uart();
    3308:	4b07      	ldr	r3, [pc, #28]	; (3328 <init_CV7_wind_sensor+0x30>)
    330a:	4798      	blx	r3
	
	NVIC_EnableIRQ(CV7_USART_IRQn);
    330c:	2041      	movs	r0, #65	; 0x41
    330e:	4b07      	ldr	r3, [pc, #28]	; (332c <init_CV7_wind_sensor+0x34>)
    3310:	4798      	blx	r3
	
	wind_sensor.minimum_speed = MINIMUM_WIND_SPEED_ADDRESS;
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <init_CV7_wind_sensor+0x28>)
    3314:	4a06      	ldr	r2, [pc, #24]	; (3330 <init_CV7_wind_sensor+0x38>)
    3316:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
    331a:	bd80      	pop	{r7, pc}
    331c:	00002ca5 	.word	0x00002ca5
    3320:	20000e80 	.word	0x20000e80
    3324:	00375643 	.word	0x00375643
    3328:	000032c1 	.word	0x000032c1
    332c:	000030c5 	.word	0x000030c5
    3330:	0003fea0 	.word	0x0003fea0

00003334 <deinit_CV7_wind_sensor>:

void deinit_CV7_wind_sensor(void)
{
    3334:	b580      	push	{r7, lr}
    3336:	af00      	add	r7, sp, #0
	reset_pins(CV7_USART);
    3338:	4803      	ldr	r0, [pc, #12]	; (3348 <deinit_CV7_wind_sensor+0x14>)
    333a:	4b04      	ldr	r3, [pc, #16]	; (334c <deinit_CV7_wind_sensor+0x18>)
    333c:	4798      	blx	r3
	
	NVIC_DisableIRQ(CV7_USART_IRQn);
    333e:	2041      	movs	r0, #65	; 0x41
    3340:	4b03      	ldr	r3, [pc, #12]	; (3350 <deinit_CV7_wind_sensor+0x1c>)
    3342:	4798      	blx	r3
}
    3344:	bd80      	pop	{r7, pc}
    3346:	bf00      	nop
    3348:	40024000 	.word	0x40024000
    334c:	00002d95 	.word	0x00002d95
    3350:	000030f5 	.word	0x000030f5

00003354 <init_wales_wind_sensor>:

void init_wales_wind_sensor(void)
{
    3354:	b580      	push	{r7, lr}
    3356:	af00      	add	r7, sp, #0
	init_PWM_counter_wales_wind_sensor();
    3358:	4b09      	ldr	r3, [pc, #36]	; (3380 <init_wales_wind_sensor+0x2c>)
    335a:	4798      	blx	r3
	
	strcpy(wind_sensor.name, "PWM");
    335c:	4b09      	ldr	r3, [pc, #36]	; (3384 <init_wales_wind_sensor+0x30>)
    335e:	4a0a      	ldr	r2, [pc, #40]	; (3388 <init_wales_wind_sensor+0x34>)
    3360:	601a      	str	r2, [r3, #0]
	
	NVIC_DisableIRQ(PWM_WIND_SENSOR_IRQn);
    3362:	2039      	movs	r0, #57	; 0x39
    3364:	4b09      	ldr	r3, [pc, #36]	; (338c <init_wales_wind_sensor+0x38>)
    3366:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM_WIND_SENSOR_IRQn);
    3368:	2039      	movs	r0, #57	; 0x39
    336a:	4b09      	ldr	r3, [pc, #36]	; (3390 <init_wales_wind_sensor+0x3c>)
    336c:	4798      	blx	r3
	
	NVIC_SetPriority(PWM_WIND_SENSOR_IRQn, PWM_WIND_SENSOR_PRIORITY);
    336e:	2039      	movs	r0, #57	; 0x39
    3370:	2104      	movs	r1, #4
    3372:	4b08      	ldr	r3, [pc, #32]	; (3394 <init_wales_wind_sensor+0x40>)
    3374:	4798      	blx	r3
	
	NVIC_EnableIRQ(PWM_WIND_SENSOR_IRQn);
    3376:	2039      	movs	r0, #57	; 0x39
    3378:	4b07      	ldr	r3, [pc, #28]	; (3398 <init_wales_wind_sensor+0x44>)
    337a:	4798      	blx	r3
}
    337c:	bd80      	pop	{r7, pc}
    337e:	bf00      	nop
    3380:	00002e0d 	.word	0x00002e0d
    3384:	20000e80 	.word	0x20000e80
    3388:	004d5750 	.word	0x004d5750
    338c:	000030f5 	.word	0x000030f5
    3390:	00003129 	.word	0x00003129
    3394:	0000315d 	.word	0x0000315d
    3398:	000030c5 	.word	0x000030c5

0000339c <deinit_wales_wind_sensor>:

void deinit_wales_wind_sensor(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0
	deinit_PWM_counter_wales_wind_sensor();	
    33a0:	4b02      	ldr	r3, [pc, #8]	; (33ac <deinit_wales_wind_sensor+0x10>)
    33a2:	4798      	blx	r3
		
	NVIC_DisableIRQ(PWM_WIND_SENSOR_IRQn);
    33a4:	2039      	movs	r0, #57	; 0x39
    33a6:	4b02      	ldr	r3, [pc, #8]	; (33b0 <deinit_wales_wind_sensor+0x14>)
    33a8:	4798      	blx	r3
}
    33aa:	bd80      	pop	{r7, pc}
    33ac:	00002e4d 	.word	0x00002e4d
    33b0:	000030f5 	.word	0x000030f5

000033b4 <update_wind_sensor>:

void update_wind_sensor(void)
{
    33b4:	b480      	push	{r7}
    33b6:	af00      	add	r7, sp, #0
	wind_sensor.minimum_speed = MINIMUM_WIND_SPEED_ADDRESS;
    33b8:	4b03      	ldr	r3, [pc, #12]	; (33c8 <update_wind_sensor+0x14>)
    33ba:	4a04      	ldr	r2, [pc, #16]	; (33cc <update_wind_sensor+0x18>)
    33bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
    33c0:	46bd      	mov	sp, r7
    33c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33c6:	4770      	bx	lr
    33c8:	20000e80 	.word	0x20000e80
    33cc:	0003fea0 	.word	0x0003fea0

000033d0 <CV7_interrupt_handler>:

void CV7_interrupt_handler()
{
    33d0:	b590      	push	{r4, r7, lr}
    33d2:	b09b      	sub	sp, #108	; 0x6c
    33d4:	af04      	add	r7, sp, #16
	
	usart_read(CV7, &receive_buffer_cv7[receive_buffer_cv7_i]);
    33d6:	4b3b      	ldr	r3, [pc, #236]	; (34c4 <CV7_interrupt_handler+0xf4>)
    33d8:	681a      	ldr	r2, [r3, #0]
    33da:	4b3b      	ldr	r3, [pc, #236]	; (34c8 <CV7_interrupt_handler+0xf8>)
    33dc:	4413      	add	r3, r2
    33de:	483b      	ldr	r0, [pc, #236]	; (34cc <CV7_interrupt_handler+0xfc>)
    33e0:	4619      	mov	r1, r3
    33e2:	4b3b      	ldr	r3, [pc, #236]	; (34d0 <CV7_interrupt_handler+0x100>)
    33e4:	4798      	blx	r3
	
	short val = 255;
    33e6:	23ff      	movs	r3, #255	; 0xff
    33e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	
	// Newline character received
	if( receive_buffer_cv7[receive_buffer_cv7_i] == (char)10 )
    33ec:	4b35      	ldr	r3, [pc, #212]	; (34c4 <CV7_interrupt_handler+0xf4>)
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	4a35      	ldr	r2, [pc, #212]	; (34c8 <CV7_interrupt_handler+0xf8>)
    33f2:	5cd3      	ldrb	r3, [r2, r3]
    33f4:	2b0a      	cmp	r3, #10
    33f6:	d151      	bne.n	349c <CV7_interrupt_handler+0xcc>
	{
		char command[60], message[20];
		
		memset(command, 0, 60);
    33f8:	463b      	mov	r3, r7
    33fa:	4618      	mov	r0, r3
    33fc:	2100      	movs	r1, #0
    33fe:	223c      	movs	r2, #60	; 0x3c
    3400:	4b34      	ldr	r3, [pc, #208]	; (34d4 <CV7_interrupt_handler+0x104>)
    3402:	4798      	blx	r3
		memset(message, 0, 20);
    3404:	f107 0340 	add.w	r3, r7, #64	; 0x40
    3408:	4618      	mov	r0, r3
    340a:	2100      	movs	r1, #0
    340c:	2214      	movs	r2, #20
    340e:	4b31      	ldr	r3, [pc, #196]	; (34d4 <CV7_interrupt_handler+0x104>)
    3410:	4798      	blx	r3
		
		// reset buffer counter
		receive_buffer_cv7_i = 0;
    3412:	4b2c      	ldr	r3, [pc, #176]	; (34c4 <CV7_interrupt_handler+0xf4>)
    3414:	2200      	movs	r2, #0
    3416:	601a      	str	r2, [r3, #0]
		
 		sscanf(receive_buffer_cv7, "$%[^,],%s,", message, command);
    3418:	f107 0240 	add.w	r2, r7, #64	; 0x40
    341c:	463b      	mov	r3, r7
    341e:	482a      	ldr	r0, [pc, #168]	; (34c8 <CV7_interrupt_handler+0xf8>)
    3420:	492d      	ldr	r1, [pc, #180]	; (34d8 <CV7_interrupt_handler+0x108>)
    3422:	4c2e      	ldr	r4, [pc, #184]	; (34dc <CV7_interrupt_handler+0x10c>)
    3424:	47a0      	blx	r4

		if( !strcmp(message, "IIMWV") )
    3426:	f107 0340 	add.w	r3, r7, #64	; 0x40
    342a:	4618      	mov	r0, r3
    342c:	492c      	ldr	r1, [pc, #176]	; (34e0 <CV7_interrupt_handler+0x110>)
    342e:	4b2d      	ldr	r3, [pc, #180]	; (34e4 <CV7_interrupt_handler+0x114>)
    3430:	4798      	blx	r3
    3432:	4603      	mov	r3, r0
    3434:	2b00      	cmp	r3, #0
    3436:	d12f      	bne.n	3498 <CV7_interrupt_handler+0xc8>
		{		
			char relative; // for future use
			
			sscanf(command, "%d,%c,%d,%c", &wind_sensor.angle, &relative, &wind_sensor.speed, &wind_sensor.unit, &wind_sensor.status);
    3438:	463a      	mov	r2, r7
    343a:	f107 033f 	add.w	r3, r7, #63	; 0x3f
    343e:	492a      	ldr	r1, [pc, #168]	; (34e8 <CV7_interrupt_handler+0x118>)
    3440:	9100      	str	r1, [sp, #0]
    3442:	492a      	ldr	r1, [pc, #168]	; (34ec <CV7_interrupt_handler+0x11c>)
    3444:	9101      	str	r1, [sp, #4]
    3446:	492a      	ldr	r1, [pc, #168]	; (34f0 <CV7_interrupt_handler+0x120>)
    3448:	9102      	str	r1, [sp, #8]
    344a:	4610      	mov	r0, r2
    344c:	4929      	ldr	r1, [pc, #164]	; (34f4 <CV7_interrupt_handler+0x124>)
    344e:	4a2a      	ldr	r2, [pc, #168]	; (34f8 <CV7_interrupt_handler+0x128>)
    3450:	4c22      	ldr	r4, [pc, #136]	; (34dc <CV7_interrupt_handler+0x10c>)
    3452:	47a0      	blx	r4
			
			// for future use
			switch (relative) 
    3454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    3458:	2b52      	cmp	r3, #82	; 0x52
    345a:	d002      	beq.n	3462 <CV7_interrupt_handler+0x92>
    345c:	2b54      	cmp	r3, #84	; 0x54
    345e:	d005      	beq.n	346c <CV7_interrupt_handler+0x9c>
    3460:	e009      	b.n	3476 <CV7_interrupt_handler+0xa6>
			{
				case 'R': // is relative wind
					wind_sensor.relative_wind = true;
    3462:	4b26      	ldr	r3, [pc, #152]	; (34fc <CV7_interrupt_handler+0x12c>)
    3464:	2201      	movs	r2, #1
    3466:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
					break;
    346a:	e004      	b.n	3476 <CV7_interrupt_handler+0xa6>
				case 'T': // is true wind
					wind_sensor.relative_wind = false;
    346c:	4b23      	ldr	r3, [pc, #140]	; (34fc <CV7_interrupt_handler+0x12c>)
    346e:	2200      	movs	r2, #0
    3470:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
					break;
    3474:	bf00      	nop
			}
					
			
			wind_sensor.output[ANGLE_BUFFER_SIZE - 1] = wind_sensor.angle * 100/360;
    3476:	4b21      	ldr	r3, [pc, #132]	; (34fc <CV7_interrupt_handler+0x12c>)
    3478:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    347c:	2264      	movs	r2, #100	; 0x64
    347e:	fb02 f303 	mul.w	r3, r2, r3
    3482:	4a1f      	ldr	r2, [pc, #124]	; (3500 <CV7_interrupt_handler+0x130>)
    3484:	fb82 1203 	smull	r1, r2, r2, r3
    3488:	441a      	add	r2, r3
    348a:	1212      	asrs	r2, r2, #8
    348c:	17db      	asrs	r3, r3, #31
    348e:	1ad3      	subs	r3, r2, r3
    3490:	b2da      	uxtb	r2, r3
    3492:	4b1a      	ldr	r3, [pc, #104]	; (34fc <CV7_interrupt_handler+0x12c>)
    3494:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		}
		
		return;
    3498:	bf00      	nop
    349a:	e00f      	b.n	34bc <CV7_interrupt_handler+0xec>
	}
	
	if( receive_buffer_cv7_i < 60)
    349c:	4b09      	ldr	r3, [pc, #36]	; (34c4 <CV7_interrupt_handler+0xf4>)
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	2b3b      	cmp	r3, #59	; 0x3b
    34a2:	d805      	bhi.n	34b0 <CV7_interrupt_handler+0xe0>
		receive_buffer_cv7_i = receive_buffer_cv7_i + 1;
    34a4:	4b07      	ldr	r3, [pc, #28]	; (34c4 <CV7_interrupt_handler+0xf4>)
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	1c5a      	adds	r2, r3, #1
    34aa:	4b06      	ldr	r3, [pc, #24]	; (34c4 <CV7_interrupt_handler+0xf4>)
    34ac:	601a      	str	r2, [r3, #0]
    34ae:	e005      	b.n	34bc <CV7_interrupt_handler+0xec>
	else
	{
		printf("Buffer is full\r\n");
    34b0:	4814      	ldr	r0, [pc, #80]	; (3504 <CV7_interrupt_handler+0x134>)
    34b2:	4b15      	ldr	r3, [pc, #84]	; (3508 <CV7_interrupt_handler+0x138>)
    34b4:	4798      	blx	r3
		receive_buffer_cv7_i = 0;	
    34b6:	4b03      	ldr	r3, [pc, #12]	; (34c4 <CV7_interrupt_handler+0xf4>)
    34b8:	2200      	movs	r2, #0
    34ba:	601a      	str	r2, [r3, #0]
	}
	
    34bc:	375c      	adds	r7, #92	; 0x5c
    34be:	46bd      	mov	sp, r7
    34c0:	bd90      	pop	{r4, r7, pc}
    34c2:	bf00      	nop
    34c4:	20000dc4 	.word	0x20000dc4
    34c8:	20000f6c 	.word	0x20000f6c
    34cc:	40024000 	.word	0x40024000
    34d0:	000019f1 	.word	0x000019f1
    34d4:	00008341 	.word	0x00008341
    34d8:	0001081c 	.word	0x0001081c
    34dc:	000084d1 	.word	0x000084d1
    34e0:	00010828 	.word	0x00010828
    34e4:	00008603 	.word	0x00008603
    34e8:	20000f26 	.word	0x20000f26
    34ec:	20000f23 	.word	0x20000f23
    34f0:	20000f24 	.word	0x20000f24
    34f4:	00010830 	.word	0x00010830
    34f8:	20000f20 	.word	0x20000f20
    34fc:	20000e80 	.word	0x20000e80
    3500:	b60b60b7 	.word	0xb60b60b7
    3504:	0001083c 	.word	0x0001083c
    3508:	00008301 	.word	0x00008301

0000350c <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
    350c:	b480      	push	{r7}
    350e:	b083      	sub	sp, #12
    3510:	af00      	add	r7, sp, #0
    3512:	4603      	mov	r3, r0
    3514:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    3516:	79fb      	ldrb	r3, [r7, #7]
    3518:	2b06      	cmp	r3, #6
    351a:	d821      	bhi.n	3560 <osc_get_rate+0x54>
    351c:	a201      	add	r2, pc, #4	; (adr r2, 3524 <osc_get_rate+0x18>)
    351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3522:	bf00      	nop
    3524:	00003541 	.word	0x00003541
    3528:	00003545 	.word	0x00003545
    352c:	0000354b 	.word	0x0000354b
    3530:	00003551 	.word	0x00003551
    3534:	00003555 	.word	0x00003555
    3538:	00003559 	.word	0x00003559
    353c:	0000355d 	.word	0x0000355d
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
    3540:	4b0b      	ldr	r3, [pc, #44]	; (3570 <osc_get_rate+0x64>)
    3542:	e00e      	b.n	3562 <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
    3544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3548:	e00b      	b.n	3562 <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    354e:	e008      	b.n	3562 <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    3550:	4b08      	ldr	r3, [pc, #32]	; (3574 <osc_get_rate+0x68>)
    3552:	e006      	b.n	3562 <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
    3554:	4b08      	ldr	r3, [pc, #32]	; (3578 <osc_get_rate+0x6c>)
    3556:	e004      	b.n	3562 <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
    3558:	4b08      	ldr	r3, [pc, #32]	; (357c <osc_get_rate+0x70>)
    355a:	e002      	b.n	3562 <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    355c:	4b08      	ldr	r3, [pc, #32]	; (3580 <osc_get_rate+0x74>)
    355e:	e000      	b.n	3562 <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
    3560:	2300      	movs	r3, #0
	}
}
    3562:	4618      	mov	r0, r3
    3564:	370c      	adds	r7, #12
    3566:	46bd      	mov	sp, r7
    3568:	f85d 7b04 	ldr.w	r7, [sp], #4
    356c:	4770      	bx	lr
    356e:	bf00      	nop
    3570:	00b71b00 	.word	0x00b71b00
    3574:	04c4b400 	.word	0x04c4b400
    3578:	003d0900 	.word	0x003d0900
    357c:	000f4240 	.word	0x000f4240
    3580:	0001c138 	.word	0x0001c138

00003584 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    3584:	b580      	push	{r7, lr}
    3586:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
    3588:	2000      	movs	r0, #0
    358a:	4b03      	ldr	r3, [pc, #12]	; (3598 <sysclk_get_main_hz+0x14>)
    358c:	4798      	blx	r3
    358e:	4603      	mov	r3, r0
    3590:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    3592:	4618      	mov	r0, r3
    3594:	bd80      	pop	{r7, pc}
    3596:	bf00      	nop
    3598:	0000350d 	.word	0x0000350d

0000359c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    359c:	b580      	push	{r7, lr}
    359e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    35a0:	4b02      	ldr	r3, [pc, #8]	; (35ac <sysclk_get_cpu_hz+0x10>)
    35a2:	4798      	blx	r3
    35a4:	4603      	mov	r3, r0
}
    35a6:	4618      	mov	r0, r3
    35a8:	bd80      	pop	{r7, pc}
    35aa:	bf00      	nop
    35ac:	00003585 	.word	0x00003585

000035b0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    35b0:	b5b0      	push	{r4, r5, r7, lr}
    35b2:	b08e      	sub	sp, #56	; 0x38
    35b4:	af00      	add	r7, sp, #0
    35b6:	4603      	mov	r3, r0
    35b8:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    35ba:	2311      	movs	r3, #17
    35bc:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    35be:	f107 030c 	add.w	r3, r7, #12
    35c2:	4839      	ldr	r0, [pc, #228]	; (36a8 <ssd1306_write_command+0xf8>)
    35c4:	4619      	mov	r1, r3
    35c6:	4b39      	ldr	r3, [pc, #228]	; (36ac <ssd1306_write_command+0xfc>)
    35c8:	4798      	blx	r3
    35ca:	234f      	movs	r3, #79	; 0x4f
    35cc:	637b      	str	r3, [r7, #52]	; 0x34
    35ce:	2300      	movs	r3, #0
    35d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    35d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    35d8:	2b00      	cmp	r3, #0
    35da:	d016      	beq.n	360a <ssd1306_write_command+0x5a>
    35dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35de:	62fb      	str	r3, [r7, #44]	; 0x2c
    35e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35e2:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    35e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35e6:	095b      	lsrs	r3, r3, #5
    35e8:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    35ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    35f0:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    35f4:	025b      	lsls	r3, r3, #9
    35f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35f8:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    35fa:	6a3a      	ldr	r2, [r7, #32]
    35fc:	f002 021f 	and.w	r2, r2, #31
    3600:	2101      	movs	r1, #1
    3602:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3606:	655a      	str	r2, [r3, #84]	; 0x54
    3608:	e015      	b.n	3636 <ssd1306_write_command+0x86>
    360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    360c:	61fb      	str	r3, [r7, #28]
    360e:	69fb      	ldr	r3, [r7, #28]
    3610:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    3612:	69bb      	ldr	r3, [r7, #24]
    3614:	095b      	lsrs	r3, r3, #5
    3616:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    3618:	697b      	ldr	r3, [r7, #20]
    361a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    361e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3622:	025b      	lsls	r3, r3, #9
    3624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3626:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    3628:	693a      	ldr	r2, [r7, #16]
    362a:	f002 021f 	and.w	r2, r2, #31
    362e:	2101      	movs	r1, #1
    3630:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    3634:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
    3636:	79fb      	ldrb	r3, [r7, #7]
    3638:	481b      	ldr	r0, [pc, #108]	; (36a8 <ssd1306_write_command+0xf8>)
    363a:	4619      	mov	r1, r3
    363c:	4b1c      	ldr	r3, [pc, #112]	; (36b0 <ssd1306_write_command+0x100>)
    363e:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
    3640:	4b1c      	ldr	r3, [pc, #112]	; (36b4 <ssd1306_write_command+0x104>)
    3642:	4798      	blx	r3
    3644:	4603      	mov	r3, r0
    3646:	4618      	mov	r0, r3
    3648:	f04f 0100 	mov.w	r1, #0
    364c:	4602      	mov	r2, r0
    364e:	460b      	mov	r3, r1
    3650:	009d      	lsls	r5, r3, #2
    3652:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    3656:	0094      	lsls	r4, r2, #2
    3658:	4622      	mov	r2, r4
    365a:	462b      	mov	r3, r5
    365c:	1880      	adds	r0, r0, r2
    365e:	eb41 0103 	adc.w	r1, r1, r3
    3662:	a30f      	add	r3, pc, #60	; (adr r3, 36a0 <ssd1306_write_command+0xf0>)
    3664:	e9d3 2300 	ldrd	r2, r3, [r3]
    3668:	1812      	adds	r2, r2, r0
    366a:	eb43 0301 	adc.w	r3, r3, r1
    366e:	4c12      	ldr	r4, [pc, #72]	; (36b8 <ssd1306_write_command+0x108>)
    3670:	4610      	mov	r0, r2
    3672:	4619      	mov	r1, r3
    3674:	4a11      	ldr	r2, [pc, #68]	; (36bc <ssd1306_write_command+0x10c>)
    3676:	f04f 0300 	mov.w	r3, #0
    367a:	47a0      	blx	r4
    367c:	4602      	mov	r2, r0
    367e:	460b      	mov	r3, r1
    3680:	4613      	mov	r3, r2
    3682:	4618      	mov	r0, r3
    3684:	4b0e      	ldr	r3, [pc, #56]	; (36c0 <ssd1306_write_command+0x110>)
    3686:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    3688:	f107 030c 	add.w	r3, r7, #12
    368c:	4806      	ldr	r0, [pc, #24]	; (36a8 <ssd1306_write_command+0xf8>)
    368e:	4619      	mov	r1, r3
    3690:	4b0c      	ldr	r3, [pc, #48]	; (36c4 <ssd1306_write_command+0x114>)
    3692:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    3694:	3738      	adds	r7, #56	; 0x38
    3696:	46bd      	mov	sp, r7
    3698:	bdb0      	pop	{r4, r5, r7, pc}
    369a:	bf00      	nop
    369c:	f3af 8000 	nop.w
    36a0:	00d59f7f 	.word	0x00d59f7f
    36a4:	00000000 	.word	0x00000000
    36a8:	4002c000 	.word	0x4002c000
    36ac:	00000a69 	.word	0x00000a69
    36b0:	00000a49 	.word	0x00000a49
    36b4:	0000359d 	.word	0x0000359d
    36b8:	00007cd1 	.word	0x00007cd1
    36bc:	00d59f80 	.word	0x00d59f80
    36c0:	20000001 	.word	0x20000001
    36c4:	00000a85 	.word	0x00000a85

000036c8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
    36c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    36cc:	b099      	sub	sp, #100	; 0x64
    36ce:	af00      	add	r7, sp, #0
    36d0:	4603      	mov	r3, r0
    36d2:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    36d4:	2311      	movs	r3, #17
    36d6:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    36d8:	f107 030c 	add.w	r3, r7, #12
    36dc:	4866      	ldr	r0, [pc, #408]	; (3878 <ssd1306_write_data+0x1b0>)
    36de:	4619      	mov	r1, r3
    36e0:	4b66      	ldr	r3, [pc, #408]	; (387c <ssd1306_write_data+0x1b4>)
    36e2:	4798      	blx	r3
    36e4:	234f      	movs	r3, #79	; 0x4f
    36e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    36e8:	2301      	movs	r3, #1
    36ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    36ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    36f2:	2b00      	cmp	r3, #0
    36f4:	d016      	beq.n	3724 <ssd1306_write_data+0x5c>
    36f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    36f8:	657b      	str	r3, [r7, #84]	; 0x54
    36fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36fc:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    36fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3700:	095b      	lsrs	r3, r3, #5
    3702:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    3704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3706:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    370a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    370e:	025b      	lsls	r3, r3, #9
    3710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    3712:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    3714:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3716:	f002 021f 	and.w	r2, r2, #31
    371a:	2101      	movs	r1, #1
    371c:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3720:	655a      	str	r2, [r3, #84]	; 0x54
    3722:	e015      	b.n	3750 <ssd1306_write_data+0x88>
    3724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3726:	647b      	str	r3, [r7, #68]	; 0x44
    3728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    372a:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    372c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    372e:	095b      	lsrs	r3, r3, #5
    3730:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    3732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3734:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3738:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    373c:	025b      	lsls	r3, r3, #9
    373e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    3740:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    3742:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3744:	f002 021f 	and.w	r2, r2, #31
    3748:	2101      	movs	r1, #1
    374a:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    374e:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    3750:	4b4b      	ldr	r3, [pc, #300]	; (3880 <ssd1306_write_data+0x1b8>)
    3752:	4798      	blx	r3
    3754:	4603      	mov	r3, r0
    3756:	4618      	mov	r0, r3
    3758:	f04f 0100 	mov.w	r1, #0
    375c:	4602      	mov	r2, r0
    375e:	460b      	mov	r3, r1
    3760:	ea4f 0983 	mov.w	r9, r3, lsl #2
    3764:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    3768:	ea4f 0882 	mov.w	r8, r2, lsl #2
    376c:	4642      	mov	r2, r8
    376e:	464b      	mov	r3, r9
    3770:	1880      	adds	r0, r0, r2
    3772:	eb41 0103 	adc.w	r1, r1, r3
    3776:	a33e      	add	r3, pc, #248	; (adr r3, 3870 <ssd1306_write_data+0x1a8>)
    3778:	e9d3 2300 	ldrd	r2, r3, [r3]
    377c:	1812      	adds	r2, r2, r0
    377e:	eb43 0301 	adc.w	r3, r3, r1
    3782:	4e40      	ldr	r6, [pc, #256]	; (3884 <ssd1306_write_data+0x1bc>)
    3784:	4610      	mov	r0, r2
    3786:	4619      	mov	r1, r3
    3788:	4a3f      	ldr	r2, [pc, #252]	; (3888 <ssd1306_write_data+0x1c0>)
    378a:	f04f 0300 	mov.w	r3, #0
    378e:	47b0      	blx	r6
    3790:	4602      	mov	r2, r0
    3792:	460b      	mov	r3, r1
    3794:	4613      	mov	r3, r2
    3796:	4618      	mov	r0, r3
    3798:	4b3c      	ldr	r3, [pc, #240]	; (388c <ssd1306_write_data+0x1c4>)
    379a:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
    379c:	79fb      	ldrb	r3, [r7, #7]
    379e:	4836      	ldr	r0, [pc, #216]	; (3878 <ssd1306_write_data+0x1b0>)
    37a0:	4619      	mov	r1, r3
    37a2:	4b3b      	ldr	r3, [pc, #236]	; (3890 <ssd1306_write_data+0x1c8>)
    37a4:	4798      	blx	r3
    37a6:	234f      	movs	r3, #79	; 0x4f
    37a8:	637b      	str	r3, [r7, #52]	; 0x34
    37aa:	2301      	movs	r3, #1
    37ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    37b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    37b4:	2b00      	cmp	r3, #0
    37b6:	d016      	beq.n	37e6 <ssd1306_write_data+0x11e>
    37b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    37bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37be:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    37c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37c2:	095b      	lsrs	r3, r3, #5
    37c4:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    37c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    37cc:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    37d0:	025b      	lsls	r3, r3, #9
    37d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    37d4:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    37d6:	6a3a      	ldr	r2, [r7, #32]
    37d8:	f002 021f 	and.w	r2, r2, #31
    37dc:	2101      	movs	r1, #1
    37de:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    37e2:	655a      	str	r2, [r3, #84]	; 0x54
    37e4:	e015      	b.n	3812 <ssd1306_write_data+0x14a>
    37e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37e8:	61fb      	str	r3, [r7, #28]
    37ea:	69fb      	ldr	r3, [r7, #28]
    37ec:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    37ee:	69bb      	ldr	r3, [r7, #24]
    37f0:	095b      	lsrs	r3, r3, #5
    37f2:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    37f4:	697b      	ldr	r3, [r7, #20]
    37f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    37fa:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    37fe:	025b      	lsls	r3, r3, #9
    3800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3802:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    3804:	693a      	ldr	r2, [r7, #16]
    3806:	f002 021f 	and.w	r2, r2, #31
    380a:	2101      	movs	r1, #1
    380c:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    3810:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
    3812:	4b1b      	ldr	r3, [pc, #108]	; (3880 <ssd1306_write_data+0x1b8>)
    3814:	4798      	blx	r3
    3816:	4603      	mov	r3, r0
    3818:	4618      	mov	r0, r3
    381a:	f04f 0100 	mov.w	r1, #0
    381e:	4602      	mov	r2, r0
    3820:	460b      	mov	r3, r1
    3822:	009d      	lsls	r5, r3, #2
    3824:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    3828:	0094      	lsls	r4, r2, #2
    382a:	4622      	mov	r2, r4
    382c:	462b      	mov	r3, r5
    382e:	1880      	adds	r0, r0, r2
    3830:	eb41 0103 	adc.w	r1, r1, r3
    3834:	a30e      	add	r3, pc, #56	; (adr r3, 3870 <ssd1306_write_data+0x1a8>)
    3836:	e9d3 2300 	ldrd	r2, r3, [r3]
    383a:	1812      	adds	r2, r2, r0
    383c:	eb43 0301 	adc.w	r3, r3, r1
    3840:	4c10      	ldr	r4, [pc, #64]	; (3884 <ssd1306_write_data+0x1bc>)
    3842:	4610      	mov	r0, r2
    3844:	4619      	mov	r1, r3
    3846:	4a10      	ldr	r2, [pc, #64]	; (3888 <ssd1306_write_data+0x1c0>)
    3848:	f04f 0300 	mov.w	r3, #0
    384c:	47a0      	blx	r4
    384e:	4602      	mov	r2, r0
    3850:	460b      	mov	r3, r1
    3852:	4613      	mov	r3, r2
    3854:	4618      	mov	r0, r3
    3856:	4b0d      	ldr	r3, [pc, #52]	; (388c <ssd1306_write_data+0x1c4>)
    3858:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    385a:	f107 030c 	add.w	r3, r7, #12
    385e:	4806      	ldr	r0, [pc, #24]	; (3878 <ssd1306_write_data+0x1b0>)
    3860:	4619      	mov	r1, r3
    3862:	4b0c      	ldr	r3, [pc, #48]	; (3894 <ssd1306_write_data+0x1cc>)
    3864:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    3866:	3764      	adds	r7, #100	; 0x64
    3868:	46bd      	mov	sp, r7
    386a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    386e:	bf00      	nop
    3870:	00d59f7f 	.word	0x00d59f7f
    3874:	00000000 	.word	0x00000000
    3878:	4002c000 	.word	0x4002c000
    387c:	00000a69 	.word	0x00000a69
    3880:	0000359d 	.word	0x0000359d
    3884:	00007cd1 	.word	0x00007cd1
    3888:	00d59f80 	.word	0x00d59f80
    388c:	20000001 	.word	0x20000001
    3890:	00000a49 	.word	0x00000a49
    3894:	00000a85 	.word	0x00000a85

00003898 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
    3898:	b580      	push	{r7, lr}
    389a:	b082      	sub	sp, #8
    389c:	af00      	add	r7, sp, #0
    389e:	4603      	mov	r3, r0
    38a0:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    38a2:	79fb      	ldrb	r3, [r7, #7]
    38a4:	f003 030f 	and.w	r3, r3, #15
    38a8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    38aa:	79fb      	ldrb	r3, [r7, #7]
    38ac:	f003 0307 	and.w	r3, r3, #7
    38b0:	b2db      	uxtb	r3, r3
    38b2:	f063 034f 	orn	r3, r3, #79	; 0x4f
    38b6:	b2db      	uxtb	r3, r3
    38b8:	b2db      	uxtb	r3, r3
    38ba:	4618      	mov	r0, r3
    38bc:	4b02      	ldr	r3, [pc, #8]	; (38c8 <ssd1306_set_page_address+0x30>)
    38be:	4798      	blx	r3
}
    38c0:	3708      	adds	r7, #8
    38c2:	46bd      	mov	sp, r7
    38c4:	bd80      	pop	{r7, pc}
    38c6:	bf00      	nop
    38c8:	000035b1 	.word	0x000035b1

000038cc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
    38cc:	b580      	push	{r7, lr}
    38ce:	b082      	sub	sp, #8
    38d0:	af00      	add	r7, sp, #0
    38d2:	4603      	mov	r3, r0
    38d4:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
    38d6:	79fb      	ldrb	r3, [r7, #7]
    38d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    38dc:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    38de:	79fb      	ldrb	r3, [r7, #7]
    38e0:	091b      	lsrs	r3, r3, #4
    38e2:	b2db      	uxtb	r3, r3
    38e4:	f043 0310 	orr.w	r3, r3, #16
    38e8:	b2db      	uxtb	r3, r3
    38ea:	4618      	mov	r0, r3
    38ec:	4b05      	ldr	r3, [pc, #20]	; (3904 <ssd1306_set_column_address+0x38>)
    38ee:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    38f0:	79fb      	ldrb	r3, [r7, #7]
    38f2:	f003 030f 	and.w	r3, r3, #15
    38f6:	b2db      	uxtb	r3, r3
    38f8:	4618      	mov	r0, r3
    38fa:	4b02      	ldr	r3, [pc, #8]	; (3904 <ssd1306_set_column_address+0x38>)
    38fc:	4798      	blx	r3
}
    38fe:	3708      	adds	r7, #8
    3900:	46bd      	mov	sp, r7
    3902:	bd80      	pop	{r7, pc}
    3904:	000035b1 	.word	0x000035b1

00003908 <ssd1306_custom_init>:

struct regulator_s rudder_regulator;
struct wind_sensor_s wind_sensor;

void ssd1306_custom_init(void)
{
    3908:	b580      	push	{r7, lr}
    390a:	af00      	add	r7, sp, #0
	set_pins(USART2_SPI_pins);
    390c:	2004      	movs	r0, #4
    390e:	4b01      	ldr	r3, [pc, #4]	; (3914 <ssd1306_custom_init+0xc>)
    3910:	4798      	blx	r3
}
    3912:	bd80      	pop	{r7, pc}
    3914:	00002ca5 	.word	0x00002ca5

00003918 <display_pid_regulator_data>:

void display_pid_regulator_data(void)
{
    3918:	b5b0      	push	{r4, r5, r7, lr}
    391a:	b08c      	sub	sp, #48	; 0x30
    391c:	af02      	add	r7, sp, #8
	char buffer[40];
	
	sprintf(buffer, "Regulator Parameters");
    391e:	463a      	mov	r2, r7
    3920:	4b26      	ldr	r3, [pc, #152]	; (39bc <display_pid_regulator_data+0xa4>)
    3922:	4614      	mov	r4, r2
    3924:	461d      	mov	r5, r3
    3926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    392a:	e895 0003 	ldmia.w	r5, {r0, r1}
    392e:	6020      	str	r0, [r4, #0]
    3930:	3404      	adds	r4, #4
    3932:	7021      	strb	r1, [r4, #0]
	ssd1306_set_column_address(0);
    3934:	2000      	movs	r0, #0
    3936:	4b22      	ldr	r3, [pc, #136]	; (39c0 <display_pid_regulator_data+0xa8>)
    3938:	4798      	blx	r3
	ssd1306_set_page_address(0);	// row
    393a:	2000      	movs	r0, #0
    393c:	4b21      	ldr	r3, [pc, #132]	; (39c4 <display_pid_regulator_data+0xac>)
    393e:	4798      	blx	r3
	ssd1306_write_text( buffer );
    3940:	463b      	mov	r3, r7
    3942:	4618      	mov	r0, r3
    3944:	4b20      	ldr	r3, [pc, #128]	; (39c8 <display_pid_regulator_data+0xb0>)
    3946:	4798      	blx	r3

	sprintf(buffer, "PV: %d%%, Output: %d%%, SP: %d%%", rudder_regulator.process_value, rudder_regulator.output, *rudder_regulator.setpoint);
    3948:	4b20      	ldr	r3, [pc, #128]	; (39cc <display_pid_regulator_data+0xb4>)
    394a:	8bdb      	ldrh	r3, [r3, #30]
    394c:	461a      	mov	r2, r3
    394e:	4b1f      	ldr	r3, [pc, #124]	; (39cc <display_pid_regulator_data+0xb4>)
    3950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3952:	491e      	ldr	r1, [pc, #120]	; (39cc <display_pid_regulator_data+0xb4>)
    3954:	6a09      	ldr	r1, [r1, #32]
    3956:	8809      	ldrh	r1, [r1, #0]
    3958:	4608      	mov	r0, r1
    395a:	4639      	mov	r1, r7
    395c:	9000      	str	r0, [sp, #0]
    395e:	4608      	mov	r0, r1
    3960:	491b      	ldr	r1, [pc, #108]	; (39d0 <display_pid_regulator_data+0xb8>)
    3962:	4c1c      	ldr	r4, [pc, #112]	; (39d4 <display_pid_regulator_data+0xbc>)
    3964:	47a0      	blx	r4
	ssd1306_set_column_address(0);
    3966:	2000      	movs	r0, #0
    3968:	4b15      	ldr	r3, [pc, #84]	; (39c0 <display_pid_regulator_data+0xa8>)
    396a:	4798      	blx	r3
	ssd1306_set_page_address(2);	// row
    396c:	2002      	movs	r0, #2
    396e:	4b15      	ldr	r3, [pc, #84]	; (39c4 <display_pid_regulator_data+0xac>)
    3970:	4798      	blx	r3
	ssd1306_write_text( buffer );
    3972:	463b      	mov	r3, r7
    3974:	4618      	mov	r0, r3
    3976:	4b14      	ldr	r3, [pc, #80]	; (39c8 <display_pid_regulator_data+0xb0>)
    3978:	4798      	blx	r3
	
	sprintf(buffer, "P=%d, I=%d, D=%d", *rudder_regulator.p, *rudder_regulator.i, *rudder_regulator.d);
    397a:	4b14      	ldr	r3, [pc, #80]	; (39cc <display_pid_regulator_data+0xb4>)
    397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    397e:	881b      	ldrh	r3, [r3, #0]
    3980:	461a      	mov	r2, r3
    3982:	4b12      	ldr	r3, [pc, #72]	; (39cc <display_pid_regulator_data+0xb4>)
    3984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3986:	881b      	ldrh	r3, [r3, #0]
    3988:	4910      	ldr	r1, [pc, #64]	; (39cc <display_pid_regulator_data+0xb4>)
    398a:	6b09      	ldr	r1, [r1, #48]	; 0x30
    398c:	8809      	ldrh	r1, [r1, #0]
    398e:	4608      	mov	r0, r1
    3990:	4639      	mov	r1, r7
    3992:	9000      	str	r0, [sp, #0]
    3994:	4608      	mov	r0, r1
    3996:	4910      	ldr	r1, [pc, #64]	; (39d8 <display_pid_regulator_data+0xc0>)
    3998:	4c0e      	ldr	r4, [pc, #56]	; (39d4 <display_pid_regulator_data+0xbc>)
    399a:	47a0      	blx	r4
	ssd1306_set_column_address(0);
    399c:	2000      	movs	r0, #0
    399e:	4b08      	ldr	r3, [pc, #32]	; (39c0 <display_pid_regulator_data+0xa8>)
    39a0:	4798      	blx	r3
	ssd1306_set_page_address(3);	// row
    39a2:	2003      	movs	r0, #3
    39a4:	4b07      	ldr	r3, [pc, #28]	; (39c4 <display_pid_regulator_data+0xac>)
    39a6:	4798      	blx	r3
	ssd1306_write_text( buffer );
    39a8:	463b      	mov	r3, r7
    39aa:	4618      	mov	r0, r3
    39ac:	4b06      	ldr	r3, [pc, #24]	; (39c8 <display_pid_regulator_data+0xb0>)
    39ae:	4798      	blx	r3
	ssd1306_clear_char(13);
    39b0:	200d      	movs	r0, #13
    39b2:	4b0a      	ldr	r3, [pc, #40]	; (39dc <display_pid_regulator_data+0xc4>)
    39b4:	4798      	blx	r3

}
    39b6:	3728      	adds	r7, #40	; 0x28
    39b8:	46bd      	mov	sp, r7
    39ba:	bdb0      	pop	{r4, r5, r7, pc}
    39bc:	00010850 	.word	0x00010850
    39c0:	000038cd 	.word	0x000038cd
    39c4:	00003899 	.word	0x00003899
    39c8:	00000885 	.word	0x00000885
    39cc:	20000f2c 	.word	0x20000f2c
    39d0:	00010868 	.word	0x00010868
    39d4:	00008489 	.word	0x00008489
    39d8:	0001088c 	.word	0x0001088c
    39dc:	00003ab5 	.word	0x00003ab5

000039e0 <display_wind_sensor_data>:

void display_wind_sensor_data(void)
{
    39e0:	b590      	push	{r4, r7, lr}
    39e2:	b08b      	sub	sp, #44	; 0x2c
    39e4:	af00      	add	r7, sp, #0
	char buffer[40];
	
	ssd1306_set_column_address(0);
    39e6:	2000      	movs	r0, #0
    39e8:	4b28      	ldr	r3, [pc, #160]	; (3a8c <display_wind_sensor_data+0xac>)
    39ea:	4798      	blx	r3
	ssd1306_set_page_address(1);
    39ec:	2001      	movs	r0, #1
    39ee:	4b28      	ldr	r3, [pc, #160]	; (3a90 <display_wind_sensor_data+0xb0>)
    39f0:	4798      	blx	r3
	sprintf(buffer, "Wind: %4d", wind_sensor.angle);
    39f2:	4b28      	ldr	r3, [pc, #160]	; (3a94 <display_wind_sensor_data+0xb4>)
    39f4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    39f8:	463a      	mov	r2, r7
    39fa:	4610      	mov	r0, r2
    39fc:	4926      	ldr	r1, [pc, #152]	; (3a98 <display_wind_sensor_data+0xb8>)
    39fe:	461a      	mov	r2, r3
    3a00:	4b26      	ldr	r3, [pc, #152]	; (3a9c <display_wind_sensor_data+0xbc>)
    3a02:	4798      	blx	r3
	ssd1306_write_text( buffer );
    3a04:	463b      	mov	r3, r7
    3a06:	4618      	mov	r0, r3
    3a08:	4b25      	ldr	r3, [pc, #148]	; (3aa0 <display_wind_sensor_data+0xc0>)
    3a0a:	4798      	blx	r3
	ssd1306_write_data(0x06); // degree symbol
    3a0c:	2006      	movs	r0, #6
    3a0e:	4b25      	ldr	r3, [pc, #148]	; (3aa4 <display_wind_sensor_data+0xc4>)
    3a10:	4798      	blx	r3
	ssd1306_write_data(0x06); // ...
    3a12:	2006      	movs	r0, #6
    3a14:	4b23      	ldr	r3, [pc, #140]	; (3aa4 <display_wind_sensor_data+0xc4>)
    3a16:	4798      	blx	r3
	sprintf(buffer, " %3d %c", wind_sensor.speed, wind_sensor.unit);
    3a18:	4b1e      	ldr	r3, [pc, #120]	; (3a94 <display_wind_sensor_data+0xb4>)
    3a1a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
    3a1e:	461a      	mov	r2, r3
    3a20:	4b1c      	ldr	r3, [pc, #112]	; (3a94 <display_wind_sensor_data+0xb4>)
    3a22:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
    3a26:	4639      	mov	r1, r7
    3a28:	4608      	mov	r0, r1
    3a2a:	491f      	ldr	r1, [pc, #124]	; (3aa8 <display_wind_sensor_data+0xc8>)
    3a2c:	4c1b      	ldr	r4, [pc, #108]	; (3a9c <display_wind_sensor_data+0xbc>)
    3a2e:	47a0      	blx	r4
	ssd1306_write_text( buffer );
    3a30:	463b      	mov	r3, r7
    3a32:	4618      	mov	r0, r3
    3a34:	4b1a      	ldr	r3, [pc, #104]	; (3aa0 <display_wind_sensor_data+0xc0>)
    3a36:	4798      	blx	r3
	
	sprintf(buffer, "Output: %3d%%", wind_sensor.output[ANGLE_BUFFER_SIZE - 1]);
    3a38:	4b16      	ldr	r3, [pc, #88]	; (3a94 <display_wind_sensor_data+0xb4>)
    3a3a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    3a3e:	463a      	mov	r2, r7
    3a40:	4610      	mov	r0, r2
    3a42:	491a      	ldr	r1, [pc, #104]	; (3aac <display_wind_sensor_data+0xcc>)
    3a44:	461a      	mov	r2, r3
    3a46:	4b15      	ldr	r3, [pc, #84]	; (3a9c <display_wind_sensor_data+0xbc>)
    3a48:	4798      	blx	r3
	ssd1306_set_column_address(0);
    3a4a:	2000      	movs	r0, #0
    3a4c:	4b0f      	ldr	r3, [pc, #60]	; (3a8c <display_wind_sensor_data+0xac>)
    3a4e:	4798      	blx	r3
	ssd1306_set_page_address(2);
    3a50:	2002      	movs	r0, #2
    3a52:	4b0f      	ldr	r3, [pc, #60]	; (3a90 <display_wind_sensor_data+0xb0>)
    3a54:	4798      	blx	r3
	ssd1306_write_text( buffer );
    3a56:	463b      	mov	r3, r7
    3a58:	4618      	mov	r0, r3
    3a5a:	4b11      	ldr	r3, [pc, #68]	; (3aa0 <display_wind_sensor_data+0xc0>)
    3a5c:	4798      	blx	r3
	
	sprintf(buffer, "Status: %c", wind_sensor.status);
    3a5e:	4b0d      	ldr	r3, [pc, #52]	; (3a94 <display_wind_sensor_data+0xb4>)
    3a60:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
    3a64:	463a      	mov	r2, r7
    3a66:	4610      	mov	r0, r2
    3a68:	4911      	ldr	r1, [pc, #68]	; (3ab0 <display_wind_sensor_data+0xd0>)
    3a6a:	461a      	mov	r2, r3
    3a6c:	4b0b      	ldr	r3, [pc, #44]	; (3a9c <display_wind_sensor_data+0xbc>)
    3a6e:	4798      	blx	r3
	ssd1306_set_column_address(0);
    3a70:	2000      	movs	r0, #0
    3a72:	4b06      	ldr	r3, [pc, #24]	; (3a8c <display_wind_sensor_data+0xac>)
    3a74:	4798      	blx	r3
	ssd1306_set_page_address(3);
    3a76:	2003      	movs	r0, #3
    3a78:	4b05      	ldr	r3, [pc, #20]	; (3a90 <display_wind_sensor_data+0xb0>)
    3a7a:	4798      	blx	r3
	ssd1306_write_text( buffer );
    3a7c:	463b      	mov	r3, r7
    3a7e:	4618      	mov	r0, r3
    3a80:	4b07      	ldr	r3, [pc, #28]	; (3aa0 <display_wind_sensor_data+0xc0>)
    3a82:	4798      	blx	r3
}
    3a84:	372c      	adds	r7, #44	; 0x2c
    3a86:	46bd      	mov	sp, r7
    3a88:	bd90      	pop	{r4, r7, pc}
    3a8a:	bf00      	nop
    3a8c:	000038cd 	.word	0x000038cd
    3a90:	00003899 	.word	0x00003899
    3a94:	20000e80 	.word	0x20000e80
    3a98:	000108a0 	.word	0x000108a0
    3a9c:	00008489 	.word	0x00008489
    3aa0:	00000885 	.word	0x00000885
    3aa4:	000036c9 	.word	0x000036c9
    3aa8:	000108ac 	.word	0x000108ac
    3aac:	000108b4 	.word	0x000108b4
    3ab0:	000108c4 	.word	0x000108c4

00003ab4 <ssd1306_clear_char>:


void ssd1306_clear_char(int num)
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	b084      	sub	sp, #16
    3ab8:	af00      	add	r7, sp, #0
    3aba:	6078      	str	r0, [r7, #4]
	for(int a = 0; a < num; a++)
    3abc:	2300      	movs	r3, #0
    3abe:	60fb      	str	r3, [r7, #12]
    3ac0:	e005      	b.n	3ace <ssd1306_clear_char+0x1a>
		ssd1306_write_data(0x00);
    3ac2:	2000      	movs	r0, #0
    3ac4:	4b05      	ldr	r3, [pc, #20]	; (3adc <ssd1306_clear_char+0x28>)
    3ac6:	4798      	blx	r3
}


void ssd1306_clear_char(int num)
{
	for(int a = 0; a < num; a++)
    3ac8:	68fb      	ldr	r3, [r7, #12]
    3aca:	3301      	adds	r3, #1
    3acc:	60fb      	str	r3, [r7, #12]
    3ace:	68fa      	ldr	r2, [r7, #12]
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	429a      	cmp	r2, r3
    3ad4:	dbf5      	blt.n	3ac2 <ssd1306_clear_char+0xe>
		ssd1306_write_data(0x00);
}
    3ad6:	3710      	adds	r7, #16
    3ad8:	46bd      	mov	sp, r7
    3ada:	bd80      	pop	{r7, pc}
    3adc:	000036c9 	.word	0x000036c9

00003ae0 <ssd1306_draw_graph>:

void ssd1306_draw_graph(uint8_t col, uint8_t page, uint8_t width, uint8_t height, uint8_t *tab)
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b084      	sub	sp, #16
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	71f8      	strb	r0, [r7, #7]
    3ae8:	71b9      	strb	r1, [r7, #6]
    3aea:	717a      	strb	r2, [r7, #5]
    3aec:	713b      	strb	r3, [r7, #4]
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
    3aee:	79fb      	ldrb	r3, [r7, #7]
    3af0:	73bb      	strb	r3, [r7, #14]
    3af2:	e05d      	b.n	3bb0 <ssd1306_draw_graph+0xd0>
		for (page_start = page; page_start <= height; ++page_start) {
    3af4:	79bb      	ldrb	r3, [r7, #6]
    3af6:	73fb      	strb	r3, [r7, #15]
    3af8:	e053      	b.n	3ba2 <ssd1306_draw_graph+0xc2>
			ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(page_start));
    3afa:	7bfb      	ldrb	r3, [r7, #15]
    3afc:	f003 0307 	and.w	r3, r3, #7
    3b00:	b2db      	uxtb	r3, r3
    3b02:	f063 034f 	orn	r3, r3, #79	; 0x4f
    3b06:	b2db      	uxtb	r3, r3
    3b08:	b2db      	uxtb	r3, r3
    3b0a:	4618      	mov	r0, r3
    3b0c:	4b2c      	ldr	r3, [pc, #176]	; (3bc0 <ssd1306_draw_graph+0xe0>)
    3b0e:	4798      	blx	r3
			ssd1306_set_column_address(i);
    3b10:	7bbb      	ldrb	r3, [r7, #14]
    3b12:	4618      	mov	r0, r3
    3b14:	4b2b      	ldr	r3, [pc, #172]	; (3bc4 <ssd1306_draw_graph+0xe4>)
    3b16:	4798      	blx	r3
			j = tab[i] / 7;
    3b18:	7bbb      	ldrb	r3, [r7, #14]
    3b1a:	69ba      	ldr	r2, [r7, #24]
    3b1c:	4413      	add	r3, r2
    3b1e:	781a      	ldrb	r2, [r3, #0]
    3b20:	4b29      	ldr	r3, [pc, #164]	; (3bc8 <ssd1306_draw_graph+0xe8>)
    3b22:	fba3 1302 	umull	r1, r3, r3, r2
    3b26:	1ad2      	subs	r2, r2, r3
    3b28:	0852      	lsrs	r2, r2, #1
    3b2a:	4413      	add	r3, r2
    3b2c:	089b      	lsrs	r3, r3, #2
    3b2e:	737b      	strb	r3, [r7, #13]
			scale = 8 * (height - page_start + 1);
    3b30:	793a      	ldrb	r2, [r7, #4]
    3b32:	7bfb      	ldrb	r3, [r7, #15]
    3b34:	1ad3      	subs	r3, r2, r3
    3b36:	3301      	adds	r3, #1
    3b38:	b2db      	uxtb	r3, r3
    3b3a:	00db      	lsls	r3, r3, #3
    3b3c:	72bb      	strb	r3, [r7, #10]
			if (j > scale)
    3b3e:	7b7a      	ldrb	r2, [r7, #13]
    3b40:	7abb      	ldrb	r3, [r7, #10]
    3b42:	429a      	cmp	r2, r3
    3b44:	d902      	bls.n	3b4c <ssd1306_draw_graph+0x6c>
			j = 8;
    3b46:	2308      	movs	r3, #8
    3b48:	737b      	strb	r3, [r7, #13]
    3b4a:	e005      	b.n	3b58 <ssd1306_draw_graph+0x78>
			else
			j -= (scale - 8);
    3b4c:	7b7a      	ldrb	r2, [r7, #13]
    3b4e:	7abb      	ldrb	r3, [r7, #10]
    3b50:	1ad3      	subs	r3, r2, r3
    3b52:	b2db      	uxtb	r3, r3
    3b54:	3308      	adds	r3, #8
    3b56:	737b      	strb	r3, [r7, #13]

			for (k = 0, s = j; j > 0; --j)
    3b58:	2300      	movs	r3, #0
    3b5a:	733b      	strb	r3, [r7, #12]
    3b5c:	7b7b      	ldrb	r3, [r7, #13]
    3b5e:	72fb      	strb	r3, [r7, #11]
    3b60:	e007      	b.n	3b72 <ssd1306_draw_graph+0x92>
			k = (k << 1) + 1;
    3b62:	7b3b      	ldrb	r3, [r7, #12]
    3b64:	005b      	lsls	r3, r3, #1
    3b66:	b2db      	uxtb	r3, r3
    3b68:	3301      	adds	r3, #1
    3b6a:	733b      	strb	r3, [r7, #12]
			if (j > scale)
			j = 8;
			else
			j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
    3b6c:	7b7b      	ldrb	r3, [r7, #13]
    3b6e:	3b01      	subs	r3, #1
    3b70:	737b      	strb	r3, [r7, #13]
    3b72:	7b7b      	ldrb	r3, [r7, #13]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d1f4      	bne.n	3b62 <ssd1306_draw_graph+0x82>
			k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
    3b78:	7afb      	ldrb	r3, [r7, #11]
    3b7a:	f1c3 0308 	rsb	r3, r3, #8
    3b7e:	72fb      	strb	r3, [r7, #11]
    3b80:	e005      	b.n	3b8e <ssd1306_draw_graph+0xae>
			k <<= 1;
    3b82:	7b3b      	ldrb	r3, [r7, #12]
    3b84:	005b      	lsls	r3, r3, #1
    3b86:	733b      	strb	r3, [r7, #12]
			else
			j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
			k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
    3b88:	7afb      	ldrb	r3, [r7, #11]
    3b8a:	3b01      	subs	r3, #1
    3b8c:	72fb      	strb	r3, [r7, #11]
    3b8e:	7afb      	ldrb	r3, [r7, #11]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d1f6      	bne.n	3b82 <ssd1306_draw_graph+0xa2>
			k <<= 1;
			ssd1306_write_data(k);
    3b94:	7b3b      	ldrb	r3, [r7, #12]
    3b96:	4618      	mov	r0, r3
    3b98:	4b0c      	ldr	r3, [pc, #48]	; (3bcc <ssd1306_draw_graph+0xec>)
    3b9a:	4798      	blx	r3
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
		for (page_start = page; page_start <= height; ++page_start) {
    3b9c:	7bfb      	ldrb	r3, [r7, #15]
    3b9e:	3301      	adds	r3, #1
    3ba0:	73fb      	strb	r3, [r7, #15]
    3ba2:	7bfa      	ldrb	r2, [r7, #15]
    3ba4:	793b      	ldrb	r3, [r7, #4]
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d9a7      	bls.n	3afa <ssd1306_draw_graph+0x1a>
{
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
    3baa:	7bbb      	ldrb	r3, [r7, #14]
    3bac:	3301      	adds	r3, #1
    3bae:	73bb      	strb	r3, [r7, #14]
    3bb0:	7bba      	ldrb	r2, [r7, #14]
    3bb2:	797b      	ldrb	r3, [r7, #5]
    3bb4:	429a      	cmp	r2, r3
    3bb6:	d39d      	bcc.n	3af4 <ssd1306_draw_graph+0x14>
			for (s = 8 - s; s > 0; --s)
			k <<= 1;
			ssd1306_write_data(k);
		}
	}
}
    3bb8:	3710      	adds	r7, #16
    3bba:	46bd      	mov	sp, r7
    3bbc:	bd80      	pop	{r7, pc}
    3bbe:	bf00      	nop
    3bc0:	000035b1 	.word	0x000035b1
    3bc4:	000038cd 	.word	0x000038cd
    3bc8:	24924925 	.word	0x24924925
    3bcc:	000036c9 	.word	0x000036c9

00003bd0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    3bd0:	b480      	push	{r7}
    3bd2:	b083      	sub	sp, #12
    3bd4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3bd6:	f3ef 8310 	mrs	r3, PRIMASK
    3bda:	603b      	str	r3, [r7, #0]
  return(result);
    3bdc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    3bde:	2b00      	cmp	r3, #0
    3be0:	bf14      	ite	ne
    3be2:	2300      	movne	r3, #0
    3be4:	2301      	moveq	r3, #1
    3be6:	b2db      	uxtb	r3, r3
    3be8:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3bea:	b672      	cpsid	i
    3bec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3bf0:	4b04      	ldr	r3, [pc, #16]	; (3c04 <cpu_irq_save+0x34>)
    3bf2:	2200      	movs	r2, #0
    3bf4:	701a      	strb	r2, [r3, #0]
	return flags;
    3bf6:	687b      	ldr	r3, [r7, #4]
}
    3bf8:	4618      	mov	r0, r3
    3bfa:	370c      	adds	r7, #12
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr
    3c04:	2000048c 	.word	0x2000048c

00003c08 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    3c08:	b480      	push	{r7}
    3c0a:	b083      	sub	sp, #12
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
	return (flags);
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	2b00      	cmp	r3, #0
    3c14:	bf0c      	ite	eq
    3c16:	2300      	moveq	r3, #0
    3c18:	2301      	movne	r3, #1
    3c1a:	b2db      	uxtb	r3, r3
}
    3c1c:	4618      	mov	r0, r3
    3c1e:	370c      	adds	r7, #12
    3c20:	46bd      	mov	sp, r7
    3c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c26:	4770      	bx	lr

00003c28 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3c28:	b580      	push	{r7, lr}
    3c2a:	b082      	sub	sp, #8
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3c30:	6878      	ldr	r0, [r7, #4]
    3c32:	4b07      	ldr	r3, [pc, #28]	; (3c50 <cpu_irq_restore+0x28>)
    3c34:	4798      	blx	r3
    3c36:	4603      	mov	r3, r0
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d005      	beq.n	3c48 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    3c3c:	4b05      	ldr	r3, [pc, #20]	; (3c54 <cpu_irq_restore+0x2c>)
    3c3e:	2201      	movs	r2, #1
    3c40:	701a      	strb	r2, [r3, #0]
    3c42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3c46:	b662      	cpsie	i
}
    3c48:	3708      	adds	r7, #8
    3c4a:	46bd      	mov	sp, r7
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	bf00      	nop
    3c50:	00003c09 	.word	0x00003c09
    3c54:	2000048c 	.word	0x2000048c

00003c58 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b082      	sub	sp, #8
    3c5c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    3c5e:	4b07      	ldr	r3, [pc, #28]	; (3c7c <osc_priv_enable_osc0+0x24>)
    3c60:	4798      	blx	r3
    3c62:	6078      	str	r0, [r7, #4]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    3c64:	4b06      	ldr	r3, [pc, #24]	; (3c80 <osc_priv_enable_osc0+0x28>)
    3c66:	4a07      	ldr	r2, [pc, #28]	; (3c84 <osc_priv_enable_osc0+0x2c>)
    3c68:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    3c6a:	4b05      	ldr	r3, [pc, #20]	; (3c80 <osc_priv_enable_osc0+0x28>)
    3c6c:	4a06      	ldr	r2, [pc, #24]	; (3c88 <osc_priv_enable_osc0+0x30>)
    3c6e:	621a      	str	r2, [r3, #32]
# if BOARD_OSC0_IS_XTAL == true
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
    3c70:	6878      	ldr	r0, [r7, #4]
    3c72:	4b06      	ldr	r3, [pc, #24]	; (3c8c <osc_priv_enable_osc0+0x34>)
    3c74:	4798      	blx	r3
}
    3c76:	3708      	adds	r7, #8
    3c78:	46bd      	mov	sp, r7
    3c7a:	bd80      	pop	{r7, pc}
    3c7c:	00003bd1 	.word	0x00003bd1
    3c80:	400e0800 	.word	0x400e0800
    3c84:	aa000020 	.word	0xaa000020
    3c88:	00010307 	.word	0x00010307
    3c8c:	00003c29 	.word	0x00003c29

00003c90 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b082      	sub	sp, #8
    3c94:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    3c96:	4b07      	ldr	r3, [pc, #28]	; (3cb4 <osc_priv_enable_osc32+0x24>)
    3c98:	4798      	blx	r3
    3c9a:	6078      	str	r0, [r7, #4]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    3c9c:	4b06      	ldr	r3, [pc, #24]	; (3cb8 <osc_priv_enable_osc32+0x28>)
    3c9e:	4a07      	ldr	r2, [pc, #28]	; (3cbc <osc_priv_enable_osc32+0x2c>)
    3ca0:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    3ca2:	4b05      	ldr	r3, [pc, #20]	; (3cb8 <osc_priv_enable_osc32+0x28>)
    3ca4:	4a06      	ldr	r2, [pc, #24]	; (3cc0 <osc_priv_enable_osc32+0x30>)
    3ca6:	621a      	str	r2, [r3, #32]
			| BOARD_OSC32_SELCURR
			| OSC32_MODE_VALUE
			| BSCIF_OSCCTRL32_EN1K
			| BSCIF_OSCCTRL32_EN32K
			| BSCIF_OSCCTRL32_OSC32EN;
	cpu_irq_restore(flags);
    3ca8:	6878      	ldr	r0, [r7, #4]
    3caa:	4b06      	ldr	r3, [pc, #24]	; (3cc4 <osc_priv_enable_osc32+0x34>)
    3cac:	4798      	blx	r3
}
    3cae:	3708      	adds	r7, #8
    3cb0:	46bd      	mov	sp, r7
    3cb2:	bd80      	pop	{r7, pc}
    3cb4:	00003bd1 	.word	0x00003bd1
    3cb8:	400f0400 	.word	0x400f0400
    3cbc:	aa000020 	.word	0xaa000020
    3cc0:	0005a10d 	.word	0x0005a10d
    3cc4:	00003c29 	.word	0x00003c29

00003cc8 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc32k(void)
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b082      	sub	sp, #8
    3ccc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    3cce:	4b0a      	ldr	r3, [pc, #40]	; (3cf8 <osc_priv_enable_rc32k+0x30>)
    3cd0:	4798      	blx	r3
    3cd2:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC32KCR;
    3cd4:	4b09      	ldr	r3, [pc, #36]	; (3cfc <osc_priv_enable_rc32k+0x34>)
    3cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3cd8:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    3cda:	4b08      	ldr	r3, [pc, #32]	; (3cfc <osc_priv_enable_rc32k+0x34>)
    3cdc:	4a08      	ldr	r2, [pc, #32]	; (3d00 <osc_priv_enable_rc32k+0x38>)
    3cde:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC32KCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC32KCR = temp | BSCIF_RC32KCR_EN32K | BSCIF_RC32KCR_EN;
    3ce0:	4b06      	ldr	r3, [pc, #24]	; (3cfc <osc_priv_enable_rc32k+0x34>)
    3ce2:	683a      	ldr	r2, [r7, #0]
    3ce4:	f042 0205 	orr.w	r2, r2, #5
    3ce8:	625a      	str	r2, [r3, #36]	; 0x24
	cpu_irq_restore(flags);
    3cea:	6878      	ldr	r0, [r7, #4]
    3cec:	4b05      	ldr	r3, [pc, #20]	; (3d04 <osc_priv_enable_rc32k+0x3c>)
    3cee:	4798      	blx	r3
}
    3cf0:	3708      	adds	r7, #8
    3cf2:	46bd      	mov	sp, r7
    3cf4:	bd80      	pop	{r7, pc}
    3cf6:	bf00      	nop
    3cf8:	00003bd1 	.word	0x00003bd1
    3cfc:	400f0400 	.word	0x400f0400
    3d00:	aa000024 	.word	0xaa000024
    3d04:	00003c29 	.word	0x00003c29

00003d08 <osc_priv_enable_rc1m>:
	BSCIF->BSCIF_RC32KCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc1m(void)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b082      	sub	sp, #8
    3d0c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    3d0e:	4b0a      	ldr	r3, [pc, #40]	; (3d38 <osc_priv_enable_rc1m+0x30>)
    3d10:	4798      	blx	r3
    3d12:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC1MCR;
    3d14:	4b09      	ldr	r3, [pc, #36]	; (3d3c <osc_priv_enable_rc1m+0x34>)
    3d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3d18:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    3d1a:	4b08      	ldr	r3, [pc, #32]	; (3d3c <osc_priv_enable_rc1m+0x34>)
    3d1c:	4a08      	ldr	r2, [pc, #32]	; (3d40 <osc_priv_enable_rc1m+0x38>)
    3d1e:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC1MCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC1MCR = temp | BSCIF_RC1MCR_CLKOE;
    3d20:	4b06      	ldr	r3, [pc, #24]	; (3d3c <osc_priv_enable_rc1m+0x34>)
    3d22:	683a      	ldr	r2, [r7, #0]
    3d24:	f042 0201 	orr.w	r2, r2, #1
    3d28:	659a      	str	r2, [r3, #88]	; 0x58
	cpu_irq_restore(flags);
    3d2a:	6878      	ldr	r0, [r7, #4]
    3d2c:	4b05      	ldr	r3, [pc, #20]	; (3d44 <osc_priv_enable_rc1m+0x3c>)
    3d2e:	4798      	blx	r3
}
    3d30:	3708      	adds	r7, #8
    3d32:	46bd      	mov	sp, r7
    3d34:	bd80      	pop	{r7, pc}
    3d36:	bf00      	nop
    3d38:	00003bd1 	.word	0x00003bd1
    3d3c:	400f0400 	.word	0x400f0400
    3d40:	aa000058 	.word	0xaa000058
    3d44:	00003c29 	.word	0x00003c29

00003d48 <osc_priv_enable_rc80m>:
	BSCIF->BSCIF_RC1MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc80m(void)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	b082      	sub	sp, #8
    3d4c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    3d4e:	4b0a      	ldr	r3, [pc, #40]	; (3d78 <osc_priv_enable_rc80m+0x30>)
    3d50:	4798      	blx	r3
    3d52:	6078      	str	r0, [r7, #4]
	temp = SCIF->SCIF_RC80MCR;
    3d54:	4b09      	ldr	r3, [pc, #36]	; (3d7c <osc_priv_enable_rc80m+0x34>)
    3d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3d58:	603b      	str	r3, [r7, #0]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    3d5a:	4b08      	ldr	r3, [pc, #32]	; (3d7c <osc_priv_enable_rc80m+0x34>)
    3d5c:	4a08      	ldr	r2, [pc, #32]	; (3d80 <osc_priv_enable_rc80m+0x38>)
    3d5e:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RC80MCR - (uint32_t)SCIF);
	SCIF->SCIF_RC80MCR = temp | SCIF_RC80MCR_EN;
    3d60:	4b06      	ldr	r3, [pc, #24]	; (3d7c <osc_priv_enable_rc80m+0x34>)
    3d62:	683a      	ldr	r2, [r7, #0]
    3d64:	f042 0201 	orr.w	r2, r2, #1
    3d68:	651a      	str	r2, [r3, #80]	; 0x50
	cpu_irq_restore(flags);
    3d6a:	6878      	ldr	r0, [r7, #4]
    3d6c:	4b05      	ldr	r3, [pc, #20]	; (3d84 <osc_priv_enable_rc80m+0x3c>)
    3d6e:	4798      	blx	r3
}
    3d70:	3708      	adds	r7, #8
    3d72:	46bd      	mov	sp, r7
    3d74:	bd80      	pop	{r7, pc}
    3d76:	bf00      	nop
    3d78:	00003bd1 	.word	0x00003bd1
    3d7c:	400e0800 	.word	0x400e0800
    3d80:	aa000050 	.word	0xaa000050
    3d84:	00003c29 	.word	0x00003c29

00003d88 <osc_priv_enable_rcfast>:
	SCIF->SCIF_RC80MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rcfast(void)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    3d8e:	4b0c      	ldr	r3, [pc, #48]	; (3dc0 <osc_priv_enable_rcfast+0x38>)
    3d90:	4798      	blx	r3
    3d92:	6078      	str	r0, [r7, #4]
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
    3d94:	4b0b      	ldr	r3, [pc, #44]	; (3dc4 <osc_priv_enable_rcfast+0x3c>)
    3d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d98:	603b      	str	r3, [r7, #0]
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3da0:	603b      	str	r3, [r7, #0]

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    3da2:	4b08      	ldr	r3, [pc, #32]	; (3dc4 <osc_priv_enable_rcfast+0x3c>)
    3da4:	4a08      	ldr	r2, [pc, #32]	; (3dc8 <osc_priv_enable_rcfast+0x40>)
    3da6:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    3da8:	4b06      	ldr	r3, [pc, #24]	; (3dc4 <osc_priv_enable_rcfast+0x3c>)
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
    3daa:	683a      	ldr	r2, [r7, #0]
    3dac:	f042 0201 	orr.w	r2, r2, #1
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    3db0:	649a      	str	r2, [r3, #72]	; 0x48
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
	cpu_irq_restore(flags);
    3db2:	6878      	ldr	r0, [r7, #4]
    3db4:	4b05      	ldr	r3, [pc, #20]	; (3dcc <osc_priv_enable_rcfast+0x44>)
    3db6:	4798      	blx	r3
}
    3db8:	3708      	adds	r7, #8
    3dba:	46bd      	mov	sp, r7
    3dbc:	bd80      	pop	{r7, pc}
    3dbe:	bf00      	nop
    3dc0:	00003bd1 	.word	0x00003bd1
    3dc4:	400e0800 	.word	0x400e0800
    3dc8:	aa000048 	.word	0xaa000048
    3dcc:	00003c29 	.word	0x00003c29

00003dd0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    3dd0:	b480      	push	{r7}
    3dd2:	b083      	sub	sp, #12
    3dd4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3dd6:	f3ef 8310 	mrs	r3, PRIMASK
    3dda:	603b      	str	r3, [r7, #0]
  return(result);
    3ddc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    3dde:	2b00      	cmp	r3, #0
    3de0:	bf14      	ite	ne
    3de2:	2300      	movne	r3, #0
    3de4:	2301      	moveq	r3, #1
    3de6:	b2db      	uxtb	r3, r3
    3de8:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3dea:	b672      	cpsid	i
    3dec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3df0:	4b04      	ldr	r3, [pc, #16]	; (3e04 <cpu_irq_save+0x34>)
    3df2:	2200      	movs	r2, #0
    3df4:	701a      	strb	r2, [r3, #0]
	return flags;
    3df6:	687b      	ldr	r3, [r7, #4]
}
    3df8:	4618      	mov	r0, r3
    3dfa:	370c      	adds	r7, #12
    3dfc:	46bd      	mov	sp, r7
    3dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e02:	4770      	bx	lr
    3e04:	2000048c 	.word	0x2000048c

00003e08 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    3e08:	b480      	push	{r7}
    3e0a:	b083      	sub	sp, #12
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
	return (flags);
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	2b00      	cmp	r3, #0
    3e14:	bf0c      	ite	eq
    3e16:	2300      	moveq	r3, #0
    3e18:	2301      	movne	r3, #1
    3e1a:	b2db      	uxtb	r3, r3
}
    3e1c:	4618      	mov	r0, r3
    3e1e:	370c      	adds	r7, #12
    3e20:	46bd      	mov	sp, r7
    3e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e26:	4770      	bx	lr

00003e28 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b082      	sub	sp, #8
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3e30:	6878      	ldr	r0, [r7, #4]
    3e32:	4b07      	ldr	r3, [pc, #28]	; (3e50 <cpu_irq_restore+0x28>)
    3e34:	4798      	blx	r3
    3e36:	4603      	mov	r3, r0
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d005      	beq.n	3e48 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    3e3c:	4b05      	ldr	r3, [pc, #20]	; (3e54 <cpu_irq_restore+0x2c>)
    3e3e:	2201      	movs	r2, #1
    3e40:	701a      	strb	r2, [r3, #0]
    3e42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3e46:	b662      	cpsie	i
}
    3e48:	3708      	adds	r7, #8
    3e4a:	46bd      	mov	sp, r7
    3e4c:	bd80      	pop	{r7, pc}
    3e4e:	bf00      	nop
    3e50:	00003e09 	.word	0x00003e09
    3e54:	2000048c 	.word	0x2000048c

00003e58 <pll_enable>:
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, uint32_t pll_id)
{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b084      	sub	sp, #16
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
    3e60:	6039      	str	r1, [r7, #0]
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
    3e62:	4b0e      	ldr	r3, [pc, #56]	; (3e9c <pll_enable+0x44>)
    3e64:	4798      	blx	r3
    3e66:	60f8      	str	r0, [r7, #12]
	SCIF_UNLOCK_PLL_REG(pll_id);
    3e68:	4b0d      	ldr	r3, [pc, #52]	; (3ea0 <pll_enable+0x48>)
    3e6a:	683a      	ldr	r2, [r7, #0]
    3e6c:	3209      	adds	r2, #9
    3e6e:	0092      	lsls	r2, r2, #2
    3e70:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
    3e74:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    3e78:	619a      	str	r2, [r3, #24]
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl | SCIF_PLL_PLLEN;
    3e7a:	4909      	ldr	r1, [pc, #36]	; (3ea0 <pll_enable+0x48>)
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	f043 0201 	orr.w	r2, r3, #1
    3e84:	683b      	ldr	r3, [r7, #0]
    3e86:	3308      	adds	r3, #8
    3e88:	009b      	lsls	r3, r3, #2
    3e8a:	440b      	add	r3, r1
    3e8c:	605a      	str	r2, [r3, #4]
	cpu_irq_restore(flags);
    3e8e:	68f8      	ldr	r0, [r7, #12]
    3e90:	4b04      	ldr	r3, [pc, #16]	; (3ea4 <pll_enable+0x4c>)
    3e92:	4798      	blx	r3
}
    3e94:	3710      	adds	r7, #16
    3e96:	46bd      	mov	sp, r7
    3e98:	bd80      	pop	{r7, pc}
    3e9a:	bf00      	nop
    3e9c:	00003dd1 	.word	0x00003dd1
    3ea0:	400e0800 	.word	0x400e0800
    3ea4:	00003e29 	.word	0x00003e29

00003ea8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    3ea8:	b480      	push	{r7}
    3eaa:	b083      	sub	sp, #12
    3eac:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3eae:	f3ef 8310 	mrs	r3, PRIMASK
    3eb2:	603b      	str	r3, [r7, #0]
  return(result);
    3eb4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	bf14      	ite	ne
    3eba:	2300      	movne	r3, #0
    3ebc:	2301      	moveq	r3, #1
    3ebe:	b2db      	uxtb	r3, r3
    3ec0:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3ec2:	b672      	cpsid	i
    3ec4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3ec8:	4b04      	ldr	r3, [pc, #16]	; (3edc <cpu_irq_save+0x34>)
    3eca:	2200      	movs	r2, #0
    3ecc:	701a      	strb	r2, [r3, #0]
	return flags;
    3ece:	687b      	ldr	r3, [r7, #4]
}
    3ed0:	4618      	mov	r0, r3
    3ed2:	370c      	adds	r7, #12
    3ed4:	46bd      	mov	sp, r7
    3ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eda:	4770      	bx	lr
    3edc:	2000048c 	.word	0x2000048c

00003ee0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    3ee0:	b480      	push	{r7}
    3ee2:	b083      	sub	sp, #12
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
	return (flags);
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	2b00      	cmp	r3, #0
    3eec:	bf0c      	ite	eq
    3eee:	2300      	moveq	r3, #0
    3ef0:	2301      	movne	r3, #1
    3ef2:	b2db      	uxtb	r3, r3
}
    3ef4:	4618      	mov	r0, r3
    3ef6:	370c      	adds	r7, #12
    3ef8:	46bd      	mov	sp, r7
    3efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efe:	4770      	bx	lr

00003f00 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b082      	sub	sp, #8
    3f04:	af00      	add	r7, sp, #0
    3f06:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3f08:	6878      	ldr	r0, [r7, #4]
    3f0a:	4b07      	ldr	r3, [pc, #28]	; (3f28 <cpu_irq_restore+0x28>)
    3f0c:	4798      	blx	r3
    3f0e:	4603      	mov	r3, r0
    3f10:	2b00      	cmp	r3, #0
    3f12:	d005      	beq.n	3f20 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    3f14:	4b05      	ldr	r3, [pc, #20]	; (3f2c <cpu_irq_restore+0x2c>)
    3f16:	2201      	movs	r2, #1
    3f18:	701a      	strb	r2, [r3, #0]
    3f1a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3f1e:	b662      	cpsie	i
}
    3f20:	3708      	adds	r7, #8
    3f22:	46bd      	mov	sp, r7
    3f24:	bd80      	pop	{r7, pc}
    3f26:	bf00      	nop
    3f28:	00003ee1 	.word	0x00003ee1
    3f2c:	2000048c 	.word	0x2000048c

00003f30 <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b082      	sub	sp, #8
    3f34:	af00      	add	r7, sp, #0
    3f36:	4603      	mov	r3, r0
    3f38:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    3f3a:	79fb      	ldrb	r3, [r7, #7]
    3f3c:	2b06      	cmp	r3, #6
    3f3e:	d823      	bhi.n	3f88 <osc_enable+0x58>
    3f40:	a201      	add	r2, pc, #4	; (adr r2, 3f48 <osc_enable+0x18>)
    3f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f46:	bf00      	nop
    3f48:	00003f65 	.word	0x00003f65
    3f4c:	00003f6b 	.word	0x00003f6b
    3f50:	00003f71 	.word	0x00003f71
    3f54:	00003f77 	.word	0x00003f77
    3f58:	00003f7d 	.word	0x00003f7d
    3f5c:	00003f83 	.word	0x00003f83
    3f60:	00003f89 	.word	0x00003f89
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    3f64:	4b0a      	ldr	r3, [pc, #40]	; (3f90 <osc_enable+0x60>)
    3f66:	4798      	blx	r3
		break;
    3f68:	e00f      	b.n	3f8a <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    3f6a:	4b0a      	ldr	r3, [pc, #40]	; (3f94 <osc_enable+0x64>)
    3f6c:	4798      	blx	r3
		break;
    3f6e:	e00c      	b.n	3f8a <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    3f70:	4b09      	ldr	r3, [pc, #36]	; (3f98 <osc_enable+0x68>)
    3f72:	4798      	blx	r3
		break;
    3f74:	e009      	b.n	3f8a <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    3f76:	4b09      	ldr	r3, [pc, #36]	; (3f9c <osc_enable+0x6c>)
    3f78:	4798      	blx	r3
		break;
    3f7a:	e006      	b.n	3f8a <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    3f7c:	4b08      	ldr	r3, [pc, #32]	; (3fa0 <osc_enable+0x70>)
    3f7e:	4798      	blx	r3
		break;
    3f80:	e003      	b.n	3f8a <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    3f82:	4b08      	ldr	r3, [pc, #32]	; (3fa4 <osc_enable+0x74>)
    3f84:	4798      	blx	r3
		break;
    3f86:	e000      	b.n	3f8a <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    3f88:	bf00      	nop
	}
}
    3f8a:	3708      	adds	r7, #8
    3f8c:	46bd      	mov	sp, r7
    3f8e:	bd80      	pop	{r7, pc}
    3f90:	00003c59 	.word	0x00003c59
    3f94:	00003c91 	.word	0x00003c91
    3f98:	00003cc9 	.word	0x00003cc9
    3f9c:	00003d49 	.word	0x00003d49
    3fa0:	00003d89 	.word	0x00003d89
    3fa4:	00003d09 	.word	0x00003d09

00003fa8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    3fa8:	b480      	push	{r7}
    3faa:	b083      	sub	sp, #12
    3fac:	af00      	add	r7, sp, #0
    3fae:	4603      	mov	r3, r0
    3fb0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    3fb2:	79fb      	ldrb	r3, [r7, #7]
    3fb4:	2b06      	cmp	r3, #6
    3fb6:	d84f      	bhi.n	4058 <osc_is_ready+0xb0>
    3fb8:	a201      	add	r2, pc, #4	; (adr r2, 3fc0 <osc_is_ready+0x18>)
    3fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3fbe:	bf00      	nop
    3fc0:	00003fdd 	.word	0x00003fdd
    3fc4:	00003ff1 	.word	0x00003ff1
    3fc8:	00004005 	.word	0x00004005
    3fcc:	00004019 	.word	0x00004019
    3fd0:	0000402d 	.word	0x0000402d
    3fd4:	00004041 	.word	0x00004041
    3fd8:	00004055 	.word	0x00004055
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    3fdc:	4b22      	ldr	r3, [pc, #136]	; (4068 <osc_is_ready+0xc0>)
    3fde:	695b      	ldr	r3, [r3, #20]
    3fe0:	f003 0301 	and.w	r3, r3, #1
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	bf0c      	ite	eq
    3fe8:	2300      	moveq	r3, #0
    3fea:	2301      	movne	r3, #1
    3fec:	b2db      	uxtb	r3, r3
    3fee:	e034      	b.n	405a <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    3ff0:	4b1e      	ldr	r3, [pc, #120]	; (406c <osc_is_ready+0xc4>)
    3ff2:	695b      	ldr	r3, [r3, #20]
    3ff4:	f003 0301 	and.w	r3, r3, #1
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	bf0c      	ite	eq
    3ffc:	2300      	moveq	r3, #0
    3ffe:	2301      	movne	r3, #1
    4000:	b2db      	uxtb	r3, r3
    4002:	e02a      	b.n	405a <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    4004:	4b19      	ldr	r3, [pc, #100]	; (406c <osc_is_ready+0xc4>)
    4006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4008:	f003 0301 	and.w	r3, r3, #1
    400c:	2b00      	cmp	r3, #0
    400e:	bf0c      	ite	eq
    4010:	2300      	moveq	r3, #0
    4012:	2301      	movne	r3, #1
    4014:	b2db      	uxtb	r3, r3
    4016:	e020      	b.n	405a <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    4018:	4b13      	ldr	r3, [pc, #76]	; (4068 <osc_is_ready+0xc0>)
    401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    401c:	f003 0301 	and.w	r3, r3, #1
    4020:	2b00      	cmp	r3, #0
    4022:	bf0c      	ite	eq
    4024:	2300      	moveq	r3, #0
    4026:	2301      	movne	r3, #1
    4028:	b2db      	uxtb	r3, r3
    402a:	e016      	b.n	405a <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    402c:	4b0e      	ldr	r3, [pc, #56]	; (4068 <osc_is_ready+0xc0>)
    402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4030:	f003 0301 	and.w	r3, r3, #1
    4034:	2b00      	cmp	r3, #0
    4036:	bf0c      	ite	eq
    4038:	2300      	moveq	r3, #0
    403a:	2301      	movne	r3, #1
    403c:	b2db      	uxtb	r3, r3
    403e:	e00c      	b.n	405a <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    4040:	4b0a      	ldr	r3, [pc, #40]	; (406c <osc_is_ready+0xc4>)
    4042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4044:	f003 0301 	and.w	r3, r3, #1
    4048:	2b00      	cmp	r3, #0
    404a:	bf0c      	ite	eq
    404c:	2300      	moveq	r3, #0
    404e:	2301      	movne	r3, #1
    4050:	b2db      	uxtb	r3, r3
    4052:	e002      	b.n	405a <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    4054:	2301      	movs	r3, #1
    4056:	e000      	b.n	405a <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    4058:	2300      	movs	r3, #0
	}
}
    405a:	4618      	mov	r0, r3
    405c:	370c      	adds	r7, #12
    405e:	46bd      	mov	sp, r7
    4060:	f85d 7b04 	ldr.w	r7, [sp], #4
    4064:	4770      	bx	lr
    4066:	bf00      	nop
    4068:	400e0800 	.word	0x400e0800
    406c:	400f0400 	.word	0x400f0400

00004070 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
    4070:	b480      	push	{r7}
    4072:	b083      	sub	sp, #12
    4074:	af00      	add	r7, sp, #0
    4076:	4603      	mov	r3, r0
    4078:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    407a:	79fb      	ldrb	r3, [r7, #7]
    407c:	2b06      	cmp	r3, #6
    407e:	d821      	bhi.n	40c4 <osc_get_rate+0x54>
    4080:	a201      	add	r2, pc, #4	; (adr r2, 4088 <osc_get_rate+0x18>)
    4082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4086:	bf00      	nop
    4088:	000040a5 	.word	0x000040a5
    408c:	000040a9 	.word	0x000040a9
    4090:	000040af 	.word	0x000040af
    4094:	000040b5 	.word	0x000040b5
    4098:	000040b9 	.word	0x000040b9
    409c:	000040bd 	.word	0x000040bd
    40a0:	000040c1 	.word	0x000040c1
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
    40a4:	4b0b      	ldr	r3, [pc, #44]	; (40d4 <osc_get_rate+0x64>)
    40a6:	e00e      	b.n	40c6 <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
    40a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    40ac:	e00b      	b.n	40c6 <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    40ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    40b2:	e008      	b.n	40c6 <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    40b4:	4b08      	ldr	r3, [pc, #32]	; (40d8 <osc_get_rate+0x68>)
    40b6:	e006      	b.n	40c6 <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
    40b8:	4b08      	ldr	r3, [pc, #32]	; (40dc <osc_get_rate+0x6c>)
    40ba:	e004      	b.n	40c6 <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
    40bc:	4b08      	ldr	r3, [pc, #32]	; (40e0 <osc_get_rate+0x70>)
    40be:	e002      	b.n	40c6 <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    40c0:	4b08      	ldr	r3, [pc, #32]	; (40e4 <osc_get_rate+0x74>)
    40c2:	e000      	b.n	40c6 <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
    40c4:	2300      	movs	r3, #0
	}
}
    40c6:	4618      	mov	r0, r3
    40c8:	370c      	adds	r7, #12
    40ca:	46bd      	mov	sp, r7
    40cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d0:	4770      	bx	lr
    40d2:	bf00      	nop
    40d4:	00b71b00 	.word	0x00b71b00
    40d8:	04c4b400 	.word	0x04c4b400
    40dc:	003d0900 	.word	0x003d0900
    40e0:	000f4240 	.word	0x000f4240
    40e4:	0001c138 	.word	0x0001c138

000040e8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    40e8:	b580      	push	{r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
    40ee:	4603      	mov	r3, r0
    40f0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    40f2:	bf00      	nop
    40f4:	79fb      	ldrb	r3, [r7, #7]
    40f6:	4618      	mov	r0, r3
    40f8:	4b05      	ldr	r3, [pc, #20]	; (4110 <osc_wait_ready+0x28>)
    40fa:	4798      	blx	r3
    40fc:	4603      	mov	r3, r0
    40fe:	f083 0301 	eor.w	r3, r3, #1
    4102:	b2db      	uxtb	r3, r3
    4104:	2b00      	cmp	r3, #0
    4106:	d1f5      	bne.n	40f4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    4108:	3708      	adds	r7, #8
    410a:	46bd      	mov	sp, r7
    410c:	bd80      	pop	{r7, pc}
    410e:	bf00      	nop
    4110:	00003fa9 	.word	0x00003fa9

00004114 <pll_config_set_option>:
	* CONFIG_PLL ## pll_id ## _MUL)                 \
	/ CONFIG_PLL ## pll_id ## _DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		uint32_t option)
{
    4114:	b480      	push	{r7}
    4116:	b083      	sub	sp, #12
    4118:	af00      	add	r7, sp, #0
    411a:	6078      	str	r0, [r7, #4]
    411c:	6039      	str	r1, [r7, #0]
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (SCIF_PLL_PLLOPT_Pos + option);
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	681a      	ldr	r2, [r3, #0]
    4122:	683b      	ldr	r3, [r7, #0]
    4124:	3303      	adds	r3, #3
    4126:	2101      	movs	r1, #1
    4128:	fa01 f303 	lsl.w	r3, r1, r3
    412c:	431a      	orrs	r2, r3
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	601a      	str	r2, [r3, #0]
}
    4132:	370c      	adds	r7, #12
    4134:	46bd      	mov	sp, r7
    4136:	f85d 7b04 	ldr.w	r7, [sp], #4
    413a:	4770      	bx	lr

0000413c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_HIGH and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, uint32_t divide, uint32_t mul)
{
    413c:	b580      	push	{r7, lr}
    413e:	b086      	sub	sp, #24
    4140:	af00      	add	r7, sp, #0
    4142:	60f8      	str	r0, [r7, #12]
    4144:	607a      	str	r2, [r7, #4]
    4146:	603b      	str	r3, [r7, #0]
    4148:	460b      	mov	r3, r1
    414a:	72fb      	strb	r3, [r7, #11]

	Assert(src < PLL_NR_SOURCES);
	Assert(divide != 0);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
    414c:	7afb      	ldrb	r3, [r7, #11]
    414e:	4618      	mov	r0, r3
    4150:	4b1d      	ldr	r3, [pc, #116]	; (41c8 <pll_config_init+0x8c>)
    4152:	4798      	blx	r3
    4154:	4603      	mov	r3, r0
    4156:	683a      	ldr	r2, [r7, #0]
    4158:	fb02 f303 	mul.w	r3, r2, r3
    415c:	617b      	str	r3, [r7, #20]
	vco_hz /= divide;
    415e:	697a      	ldr	r2, [r7, #20]
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	fbb2 f3f3 	udiv	r3, r2, r3
    4166:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
    4168:	68fb      	ldr	r3, [r7, #12]
    416a:	2200      	movs	r2, #0
    416c:	601a      	str	r2, [r3, #0]

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
    416e:	697a      	ldr	r2, [r7, #20]
    4170:	4b16      	ldr	r3, [pc, #88]	; (41cc <pll_config_init+0x90>)
    4172:	429a      	cmp	r2, r3
    4174:	d80c      	bhi.n	4190 <pll_config_init+0x54>
    4176:	683b      	ldr	r3, [r7, #0]
    4178:	2b08      	cmp	r3, #8
    417a:	d809      	bhi.n	4190 <pll_config_init+0x54>
		mul *= 2;
    417c:	683b      	ldr	r3, [r7, #0]
    417e:	005b      	lsls	r3, r3, #1
    4180:	603b      	str	r3, [r7, #0]
		vco_hz *= 2;
    4182:	697b      	ldr	r3, [r7, #20]
    4184:	005b      	lsls	r3, r3, #1
    4186:	617b      	str	r3, [r7, #20]
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
    4188:	68f8      	ldr	r0, [r7, #12]
    418a:	2101      	movs	r1, #1
    418c:	4b10      	ldr	r3, [pc, #64]	; (41d0 <pll_config_init+0x94>)
    418e:	4798      	blx	r3
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz >= PLL_VCO_LOW_THRESHOLD) {
    4190:	697a      	ldr	r2, [r7, #20]
    4192:	4b10      	ldr	r3, [pc, #64]	; (41d4 <pll_config_init+0x98>)
    4194:	429a      	cmp	r2, r3
    4196:	d903      	bls.n	41a0 <pll_config_init+0x64>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_HIGH);
    4198:	68f8      	ldr	r0, [r7, #12]
    419a:	2100      	movs	r1, #0
    419c:	4b0c      	ldr	r3, [pc, #48]	; (41d0 <pll_config_init+0x94>)
    419e:	4798      	blx	r3
	}

	Assert(mul > MUL_MIN && mul <= MUL_MAX);
	Assert(divide > DIV_MIN && divide <= DIV_MAX);

	cfg->ctrl |= ((mul - 1) << SCIF_PLL_PLLMUL_Pos)
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	681a      	ldr	r2, [r3, #0]
    41a4:	683b      	ldr	r3, [r7, #0]
    41a6:	3b01      	subs	r3, #1
    41a8:	0419      	lsls	r1, r3, #16
			| (divide << SCIF_PLL_PLLDIV_Pos)
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	021b      	lsls	r3, r3, #8
    41ae:	4319      	orrs	r1, r3
			| (PLL_MAX_STARTUP_CYCLES << SCIF_PLL_PLLCOUNT_Pos)
			| (src << SCIF_PLL_PLLOSC_Pos);
    41b0:	7afb      	ldrb	r3, [r7, #11]
    41b2:	005b      	lsls	r3, r3, #1
    41b4:	430b      	orrs	r3, r1
	}

	Assert(mul > MUL_MIN && mul <= MUL_MAX);
	Assert(divide > DIV_MIN && divide <= DIV_MAX);

	cfg->ctrl |= ((mul - 1) << SCIF_PLL_PLLMUL_Pos)
    41b6:	4313      	orrs	r3, r2
    41b8:	f043 527c 	orr.w	r2, r3, #1056964608	; 0x3f000000
    41bc:	68fb      	ldr	r3, [r7, #12]
    41be:	601a      	str	r2, [r3, #0]
			| (divide << SCIF_PLL_PLLDIV_Pos)
			| (PLL_MAX_STARTUP_CYCLES << SCIF_PLL_PLLCOUNT_Pos)
			| (src << SCIF_PLL_PLLOSC_Pos);
}
    41c0:	3718      	adds	r7, #24
    41c2:	46bd      	mov	sp, r7
    41c4:	bd80      	pop	{r7, pc}
    41c6:	bf00      	nop
    41c8:	00004071 	.word	0x00004071
    41cc:	04c4b3ff 	.word	0x04c4b3ff
    41d0:	00004115 	.word	0x00004115
    41d4:	0a21fe7f 	.word	0x0a21fe7f

000041d8 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, uint32_t pll_id);
extern void pll_enable(const struct pll_config *cfg, uint32_t pll_id);
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
    41d8:	b480      	push	{r7}
    41da:	b083      	sub	sp, #12
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    41e0:	4b09      	ldr	r3, [pc, #36]	; (4208 <pll_is_locked+0x30>)
    41e2:	695a      	ldr	r2, [r3, #20]
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	3306      	adds	r3, #6
    41e8:	2101      	movs	r1, #1
    41ea:	fa01 f303 	lsl.w	r3, r1, r3
    41ee:	4013      	ands	r3, r2
    41f0:	2b00      	cmp	r3, #0
    41f2:	bf0c      	ite	eq
    41f4:	2300      	moveq	r3, #0
    41f6:	2301      	movne	r3, #1
    41f8:	b2db      	uxtb	r3, r3
}
    41fa:	4618      	mov	r0, r3
    41fc:	370c      	adds	r7, #12
    41fe:	46bd      	mov	sp, r7
    4200:	f85d 7b04 	ldr.w	r7, [sp], #4
    4204:	4770      	bx	lr
    4206:	bf00      	nop
    4208:	400e0800 	.word	0x400e0800

0000420c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
    420c:	b580      	push	{r7, lr}
    420e:	b082      	sub	sp, #8
    4210:	af00      	add	r7, sp, #0
    4212:	4603      	mov	r3, r0
    4214:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    4216:	79fb      	ldrb	r3, [r7, #7]
    4218:	2b00      	cmp	r3, #0
    421a:	d000      	beq.n	421e <pll_enable_source+0x12>
			SCIF_GCCTRL_CEN;
		break;
#endif
	default:
		Assert(false);
		break;
    421c:	e010      	b.n	4240 <pll_enable_source+0x34>

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
    421e:	2000      	movs	r0, #0
    4220:	4b09      	ldr	r3, [pc, #36]	; (4248 <pll_enable_source+0x3c>)
    4222:	4798      	blx	r3
    4224:	4603      	mov	r3, r0
    4226:	f083 0301 	eor.w	r3, r3, #1
    422a:	b2db      	uxtb	r3, r3
    422c:	2b00      	cmp	r3, #0
    422e:	d006      	beq.n	423e <pll_enable_source+0x32>
			osc_enable(OSC_ID_OSC0);
    4230:	2000      	movs	r0, #0
    4232:	4b06      	ldr	r3, [pc, #24]	; (424c <pll_enable_source+0x40>)
    4234:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC0);
    4236:	2000      	movs	r0, #0
    4238:	4b05      	ldr	r3, [pc, #20]	; (4250 <pll_enable_source+0x44>)
    423a:	4798      	blx	r3
		}
		break;
    423c:	e7ff      	b.n	423e <pll_enable_source+0x32>
    423e:	bf00      	nop
#endif
	default:
		Assert(false);
		break;
	}
}
    4240:	3708      	adds	r7, #8
    4242:	46bd      	mov	sp, r7
    4244:	bd80      	pop	{r7, pc}
    4246:	bf00      	nop
    4248:	00003fa9 	.word	0x00003fa9
    424c:	00003f31 	.word	0x00003f31
    4250:	000040e9 	.word	0x000040e9

00004254 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(uint32_t pll_id)
{
    4254:	b590      	push	{r4, r7, lr}
    4256:	b085      	sub	sp, #20
    4258:	af00      	add	r7, sp, #0
    425a:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    425c:	6878      	ldr	r0, [r7, #4]
    425e:	4b14      	ldr	r3, [pc, #80]	; (42b0 <pll_enable_config_defaults+0x5c>)
    4260:	4798      	blx	r3
    4262:	4603      	mov	r3, r0
    4264:	2b00      	cmp	r3, #0
    4266:	d11f      	bne.n	42a8 <pll_enable_config_defaults+0x54>
		return; // Pll already running
	}

	switch (pll_id) {
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	2b00      	cmp	r3, #0
    426c:	d000      	beq.n	4270 <pll_enable_config_defaults+0x1c>
		break;

#endif
	default:
		Assert(false);
		break;
    426e:	e00b      	b.n	4288 <pll_enable_config_defaults+0x34>
	}

	switch (pll_id) {
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
    4270:	2000      	movs	r0, #0
    4272:	4b10      	ldr	r3, [pc, #64]	; (42b4 <pll_enable_config_defaults+0x60>)
    4274:	4798      	blx	r3
		pll_config_init(&pllcfg,
    4276:	f107 030c 	add.w	r3, r7, #12
    427a:	4618      	mov	r0, r3
    427c:	2100      	movs	r1, #0
    427e:	2201      	movs	r2, #1
    4280:	2304      	movs	r3, #4
    4282:	4c0d      	ldr	r4, [pc, #52]	; (42b8 <pll_enable_config_defaults+0x64>)
    4284:	47a0      	blx	r4
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
    4286:	bf00      	nop
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
    4288:	f107 030c 	add.w	r3, r7, #12
    428c:	4618      	mov	r0, r3
    428e:	6879      	ldr	r1, [r7, #4]
    4290:	4b0a      	ldr	r3, [pc, #40]	; (42bc <pll_enable_config_defaults+0x68>)
    4292:	4798      	blx	r3
	while (!pll_is_locked(pll_id));
    4294:	bf00      	nop
    4296:	6878      	ldr	r0, [r7, #4]
    4298:	4b05      	ldr	r3, [pc, #20]	; (42b0 <pll_enable_config_defaults+0x5c>)
    429a:	4798      	blx	r3
    429c:	4603      	mov	r3, r0
    429e:	f083 0301 	eor.w	r3, r3, #1
    42a2:	b2db      	uxtb	r3, r3
    42a4:	2b00      	cmp	r3, #0
    42a6:	d1f6      	bne.n	4296 <pll_enable_config_defaults+0x42>
}
    42a8:	3714      	adds	r7, #20
    42aa:	46bd      	mov	sp, r7
    42ac:	bd90      	pop	{r4, r7, pc}
    42ae:	bf00      	nop
    42b0:	000041d9 	.word	0x000041d9
    42b4:	0000420d 	.word	0x0000420d
    42b8:	0000413d 	.word	0x0000413d
    42bc:	00003e59 	.word	0x00003e59

000042c0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
    42c4:	2000      	movs	r0, #0
    42c6:	4b03      	ldr	r3, [pc, #12]	; (42d4 <sysclk_get_main_hz+0x14>)
    42c8:	4798      	blx	r3
    42ca:	4603      	mov	r3, r0
    42cc:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    42ce:	4618      	mov	r0, r3
    42d0:	bd80      	pop	{r7, pc}
    42d2:	bf00      	nop
    42d4:	00004071 	.word	0x00004071

000042d8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    42d8:	b580      	push	{r7, lr}
    42da:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    42dc:	4b02      	ldr	r3, [pc, #8]	; (42e8 <sysclk_get_cpu_hz+0x10>)
    42de:	4798      	blx	r3
    42e0:	4603      	mov	r3, r0
}
    42e2:	4618      	mov	r0, r3
    42e4:	bd80      	pop	{r7, pc}
    42e6:	bf00      	nop
    42e8:	000042c1 	.word	0x000042c1

000042ec <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
    42ec:	b580      	push	{r7, lr}
    42ee:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
    42f0:	4b02      	ldr	r3, [pc, #8]	; (42fc <sysclk_get_pba_hz+0x10>)
    42f2:	4798      	blx	r3
    42f4:	4603      	mov	r3, r0
}
    42f6:	4618      	mov	r0, r3
    42f8:	bd80      	pop	{r7, pc}
    42fa:	bf00      	nop
    42fc:	000042c1 	.word	0x000042c1

00004300 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
    4300:	b580      	push	{r7, lr}
    4302:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
    4304:	4b02      	ldr	r3, [pc, #8]	; (4310 <sysclk_get_pbb_hz+0x10>)
    4306:	4798      	blx	r3
    4308:	4603      	mov	r3, r0
}
    430a:	4618      	mov	r0, r3
    430c:	bd80      	pop	{r7, pc}
    430e:	bf00      	nop
    4310:	000042c1 	.word	0x000042c1

00004314 <sysclk_get_pbc_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus C clock
 *
 * \return Frequency of the Peripheral Bus C clock, in Hz.
 */
static inline uint32_t sysclk_get_pbc_hz(void)
{
    4314:	b580      	push	{r7, lr}
    4316:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBC_DIV;
    4318:	4b02      	ldr	r3, [pc, #8]	; (4324 <sysclk_get_pbc_hz+0x10>)
    431a:	4798      	blx	r3
    431c:	4603      	mov	r3, r0
}
    431e:	4618      	mov	r0, r3
    4320:	bd80      	pop	{r7, pc}
    4322:	bf00      	nop
    4324:	000042c1 	.word	0x000042c1

00004328 <sysclk_get_pbd_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus D clock
 *
 * \return Frequency of the Peripheral Bus D clock, in Hz.
 */
static inline uint32_t sysclk_get_pbd_hz(void)
{
    4328:	b580      	push	{r7, lr}
    432a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBD_DIV;
    432c:	4b02      	ldr	r3, [pc, #8]	; (4338 <sysclk_get_pbd_hz+0x10>)
    432e:	4798      	blx	r3
    4330:	4603      	mov	r3, r0
}
    4332:	4618      	mov	r0, r3
    4334:	bd80      	pop	{r7, pc}
    4336:	bf00      	nop
    4338:	000042c1 	.word	0x000042c1

0000433c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
    433c:	b580      	push	{r7, lr}
    433e:	b082      	sub	sp, #8
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    4344:	2001      	movs	r0, #1
    4346:	6879      	ldr	r1, [r7, #4]
    4348:	4b02      	ldr	r3, [pc, #8]	; (4354 <sysclk_enable_hsb_module+0x18>)
    434a:	4798      	blx	r3
}
    434c:	3708      	adds	r7, #8
    434e:	46bd      	mov	sp, r7
    4350:	bd80      	pop	{r7, pc}
    4352:	bf00      	nop
    4354:	00004451 	.word	0x00004451

00004358 <sysclk_disable_hsb_module>:
/**
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
    4358:	b580      	push	{r7, lr}
    435a:	b082      	sub	sp, #8
    435c:	af00      	add	r7, sp, #0
    435e:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    4360:	2001      	movs	r0, #1
    4362:	6879      	ldr	r1, [r7, #4]
    4364:	4b02      	ldr	r3, [pc, #8]	; (4370 <sysclk_disable_hsb_module+0x18>)
    4366:	4798      	blx	r3
}
    4368:	3708      	adds	r7, #8
    436a:	46bd      	mov	sp, r7
    436c:	bd80      	pop	{r7, pc}
    436e:	bf00      	nop
    4370:	000044b5 	.word	0x000044b5

00004374 <sysclk_enable_pbc_module>:
/**
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
    4374:	b580      	push	{r7, lr}
    4376:	b082      	sub	sp, #8
    4378:	af00      	add	r7, sp, #0
    437a:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    437c:	2004      	movs	r0, #4
    437e:	6879      	ldr	r1, [r7, #4]
    4380:	4b02      	ldr	r3, [pc, #8]	; (438c <sysclk_enable_pbc_module+0x18>)
    4382:	4798      	blx	r3
}
    4384:	3708      	adds	r7, #8
    4386:	46bd      	mov	sp, r7
    4388:	bd80      	pop	{r7, pc}
    438a:	bf00      	nop
    438c:	00004451 	.word	0x00004451

00004390 <sysclk_disable_pbc_module>:
/**
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
    4390:	b580      	push	{r7, lr}
    4392:	b082      	sub	sp, #8
    4394:	af00      	add	r7, sp, #0
    4396:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    4398:	2004      	movs	r0, #4
    439a:	6879      	ldr	r1, [r7, #4]
    439c:	4b02      	ldr	r3, [pc, #8]	; (43a8 <sysclk_disable_pbc_module+0x18>)
    439e:	4798      	blx	r3
}
    43a0:	3708      	adds	r7, #8
    43a2:	46bd      	mov	sp, r7
    43a4:	bd80      	pop	{r7, pc}
    43a6:	bf00      	nop
    43a8:	000044b5 	.word	0x000044b5

000043ac <sysclk_enable_pbd_module>:
/**
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b082      	sub	sp, #8
    43b0:	af00      	add	r7, sp, #0
    43b2:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    43b4:	2005      	movs	r0, #5
    43b6:	6879      	ldr	r1, [r7, #4]
    43b8:	4b02      	ldr	r3, [pc, #8]	; (43c4 <sysclk_enable_pbd_module+0x18>)
    43ba:	4798      	blx	r3
}
    43bc:	3708      	adds	r7, #8
    43be:	46bd      	mov	sp, r7
    43c0:	bd80      	pop	{r7, pc}
    43c2:	bf00      	nop
    43c4:	00004451 	.word	0x00004451

000043c8 <sysclk_disable_pbd_module>:
/**
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
    43c8:	b580      	push	{r7, lr}
    43ca:	b082      	sub	sp, #8
    43cc:	af00      	add	r7, sp, #0
    43ce:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    43d0:	2005      	movs	r0, #5
    43d2:	6879      	ldr	r1, [r7, #4]
    43d4:	4b02      	ldr	r3, [pc, #8]	; (43e0 <sysclk_disable_pbd_module+0x18>)
    43d6:	4798      	blx	r3
}
    43d8:	3708      	adds	r7, #8
    43da:	46bd      	mov	sp, r7
    43dc:	bd80      	pop	{r7, pc}
    43de:	bf00      	nop
    43e0:	000044b5 	.word	0x000044b5

000043e4 <sysclk_enable_pba_divmask>:
/**
 * \brief Enable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
    43e4:	b480      	push	{r7}
    43e6:	b085      	sub	sp, #20
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    43ec:	4b08      	ldr	r3, [pc, #32]	; (4410 <sysclk_enable_pba_divmask+0x2c>)
    43ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    43f0:	60fb      	str	r3, [r7, #12]
	temp_mask |= mask;
    43f2:	68fa      	ldr	r2, [r7, #12]
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	4313      	orrs	r3, r2
    43f8:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    43fa:	4b05      	ldr	r3, [pc, #20]	; (4410 <sysclk_enable_pba_divmask+0x2c>)
    43fc:	4a05      	ldr	r2, [pc, #20]	; (4414 <sysclk_enable_pba_divmask+0x30>)
    43fe:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    4400:	4b03      	ldr	r3, [pc, #12]	; (4410 <sysclk_enable_pba_divmask+0x2c>)
    4402:	68fa      	ldr	r2, [r7, #12]
    4404:	641a      	str	r2, [r3, #64]	; 0x40
}
    4406:	3714      	adds	r7, #20
    4408:	46bd      	mov	sp, r7
    440a:	f85d 7b04 	ldr.w	r7, [sp], #4
    440e:	4770      	bx	lr
    4410:	400e0000 	.word	0x400e0000
    4414:	aa000040 	.word	0xaa000040

00004418 <sysclk_disable_pba_divmask>:
/**
 * \brief Disable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
    4418:	b480      	push	{r7}
    441a:	b085      	sub	sp, #20
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    4420:	4b09      	ldr	r3, [pc, #36]	; (4448 <sysclk_disable_pba_divmask+0x30>)
    4422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4424:	60fb      	str	r3, [r7, #12]
	temp_mask &= ~mask;
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	43db      	mvns	r3, r3
    442a:	68fa      	ldr	r2, [r7, #12]
    442c:	4013      	ands	r3, r2
    442e:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    4430:	4b05      	ldr	r3, [pc, #20]	; (4448 <sysclk_disable_pba_divmask+0x30>)
    4432:	4a06      	ldr	r2, [pc, #24]	; (444c <sysclk_disable_pba_divmask+0x34>)
    4434:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <sysclk_disable_pba_divmask+0x30>)
    4438:	68fa      	ldr	r2, [r7, #12]
    443a:	641a      	str	r2, [r3, #64]	; 0x40
}
    443c:	3714      	adds	r7, #20
    443e:	46bd      	mov	sp, r7
    4440:	f85d 7b04 	ldr.w	r7, [sp], #4
    4444:	4770      	bx	lr
    4446:	bf00      	nop
    4448:	400e0000 	.word	0x400e0000
    444c:	aa000040 	.word	0xaa000040

00004450 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    4450:	b580      	push	{r7, lr}
    4452:	b084      	sub	sp, #16
    4454:	af00      	add	r7, sp, #0
    4456:	6078      	str	r0, [r7, #4]
    4458:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    445a:	4b12      	ldr	r3, [pc, #72]	; (44a4 <sysclk_priv_enable_module+0x54>)
    445c:	4798      	blx	r3
    445e:	60f8      	str	r0, [r7, #12]

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	009a      	lsls	r2, r3, #2
    4464:	4b10      	ldr	r3, [pc, #64]	; (44a8 <sysclk_priv_enable_module+0x58>)
    4466:	4413      	add	r3, r2
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	60bb      	str	r3, [r7, #8]
	mask |= 1U << module_index;
    446c:	683b      	ldr	r3, [r7, #0]
    446e:	2201      	movs	r2, #1
    4470:	fa02 f303 	lsl.w	r3, r2, r3
    4474:	68ba      	ldr	r2, [r7, #8]
    4476:	4313      	orrs	r3, r2
    4478:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    447a:	4b0c      	ldr	r3, [pc, #48]	; (44ac <sysclk_priv_enable_module+0x5c>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    447c:	687a      	ldr	r2, [r7, #4]
    447e:	3208      	adds	r2, #8
    4480:	0092      	lsls	r2, r2, #2
    4482:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    4486:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    448a:	659a      	str	r2, [r3, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	009a      	lsls	r2, r3, #2
    4490:	4b05      	ldr	r3, [pc, #20]	; (44a8 <sysclk_priv_enable_module+0x58>)
    4492:	4413      	add	r3, r2
    4494:	68ba      	ldr	r2, [r7, #8]
    4496:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    4498:	68f8      	ldr	r0, [r7, #12]
    449a:	4b05      	ldr	r3, [pc, #20]	; (44b0 <sysclk_priv_enable_module+0x60>)
    449c:	4798      	blx	r3
}
    449e:	3710      	adds	r7, #16
    44a0:	46bd      	mov	sp, r7
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00003ea9 	.word	0x00003ea9
    44a8:	400e0020 	.word	0x400e0020
    44ac:	400e0000 	.word	0x400e0000
    44b0:	00003f01 	.word	0x00003f01

000044b4 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    44b4:	b580      	push	{r7, lr}
    44b6:	b084      	sub	sp, #16
    44b8:	af00      	add	r7, sp, #0
    44ba:	6078      	str	r0, [r7, #4]
    44bc:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    44be:	4b13      	ldr	r3, [pc, #76]	; (450c <sysclk_priv_disable_module+0x58>)
    44c0:	4798      	blx	r3
    44c2:	60f8      	str	r0, [r7, #12]

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	009a      	lsls	r2, r3, #2
    44c8:	4b11      	ldr	r3, [pc, #68]	; (4510 <sysclk_priv_disable_module+0x5c>)
    44ca:	4413      	add	r3, r2
    44cc:	681b      	ldr	r3, [r3, #0]
    44ce:	60bb      	str	r3, [r7, #8]
	mask &= ~(1U << module_index);
    44d0:	683b      	ldr	r3, [r7, #0]
    44d2:	2201      	movs	r2, #1
    44d4:	fa02 f303 	lsl.w	r3, r2, r3
    44d8:	43db      	mvns	r3, r3
    44da:	68ba      	ldr	r2, [r7, #8]
    44dc:	4013      	ands	r3, r2
    44de:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    44e0:	4b0c      	ldr	r3, [pc, #48]	; (4514 <sysclk_priv_disable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    44e2:	687a      	ldr	r2, [r7, #4]
    44e4:	3208      	adds	r2, #8
    44e6:	0092      	lsls	r2, r2, #2
    44e8:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    44ec:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    44f0:	659a      	str	r2, [r3, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	009a      	lsls	r2, r3, #2
    44f6:	4b06      	ldr	r3, [pc, #24]	; (4510 <sysclk_priv_disable_module+0x5c>)
    44f8:	4413      	add	r3, r2
    44fa:	68ba      	ldr	r2, [r7, #8]
    44fc:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    44fe:	68f8      	ldr	r0, [r7, #12]
    4500:	4b05      	ldr	r3, [pc, #20]	; (4518 <sysclk_priv_disable_module+0x64>)
    4502:	4798      	blx	r3
}
    4504:	3710      	adds	r7, #16
    4506:	46bd      	mov	sp, r7
    4508:	bd80      	pop	{r7, pc}
    450a:	bf00      	nop
    450c:	00003ea9 	.word	0x00003ea9
    4510:	400e0020 	.word	0x400e0020
    4514:	400e0000 	.word	0x400e0000
    4518:	00003f01 	.word	0x00003f01

0000451c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    451c:	b580      	push	{r7, lr}
    451e:	b084      	sub	sp, #16
    4520:	af00      	add	r7, sp, #0
    4522:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    4524:	4b09      	ldr	r3, [pc, #36]	; (454c <sysclk_enable_pba_module+0x30>)
    4526:	4798      	blx	r3
    4528:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    452a:	4b09      	ldr	r3, [pc, #36]	; (4550 <sysclk_enable_pba_module+0x34>)
    452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    452e:	2b00      	cmp	r3, #0
    4530:	d102      	bne.n	4538 <sysclk_enable_pba_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBA_BRIDGE);
    4532:	2005      	movs	r0, #5
    4534:	4b07      	ldr	r3, [pc, #28]	; (4554 <sysclk_enable_pba_module+0x38>)
    4536:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    4538:	68f8      	ldr	r0, [r7, #12]
    453a:	4b07      	ldr	r3, [pc, #28]	; (4558 <sysclk_enable_pba_module+0x3c>)
    453c:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    453e:	2002      	movs	r0, #2
    4540:	6879      	ldr	r1, [r7, #4]
    4542:	4b06      	ldr	r3, [pc, #24]	; (455c <sysclk_enable_pba_module+0x40>)
    4544:	4798      	blx	r3
}
    4546:	3710      	adds	r7, #16
    4548:	46bd      	mov	sp, r7
    454a:	bd80      	pop	{r7, pc}
    454c:	00003ea9 	.word	0x00003ea9
    4550:	400e0000 	.word	0x400e0000
    4554:	0000433d 	.word	0x0000433d
    4558:	00003f01 	.word	0x00003f01
    455c:	00004451 	.word	0x00004451

00004560 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    4560:	b580      	push	{r7, lr}
    4562:	b084      	sub	sp, #16
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    4568:	2002      	movs	r0, #2
    456a:	6879      	ldr	r1, [r7, #4]
    456c:	4b08      	ldr	r3, [pc, #32]	; (4590 <sysclk_disable_pba_module+0x30>)
    456e:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    4570:	4b08      	ldr	r3, [pc, #32]	; (4594 <sysclk_disable_pba_module+0x34>)
    4572:	4798      	blx	r3
    4574:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    4576:	4b08      	ldr	r3, [pc, #32]	; (4598 <sysclk_disable_pba_module+0x38>)
    4578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    457a:	2b00      	cmp	r3, #0
    457c:	d102      	bne.n	4584 <sysclk_disable_pba_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
    457e:	2005      	movs	r0, #5
    4580:	4b06      	ldr	r3, [pc, #24]	; (459c <sysclk_disable_pba_module+0x3c>)
    4582:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    4584:	68f8      	ldr	r0, [r7, #12]
    4586:	4b06      	ldr	r3, [pc, #24]	; (45a0 <sysclk_disable_pba_module+0x40>)
    4588:	4798      	blx	r3
}
    458a:	3710      	adds	r7, #16
    458c:	46bd      	mov	sp, r7
    458e:	bd80      	pop	{r7, pc}
    4590:	000044b5 	.word	0x000044b5
    4594:	00003ea9 	.word	0x00003ea9
    4598:	400e0000 	.word	0x400e0000
    459c:	00004359 	.word	0x00004359
    45a0:	00003f01 	.word	0x00003f01

000045a4 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b084      	sub	sp, #16
    45a8:	af00      	add	r7, sp, #0
    45aa:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    45ac:	4b09      	ldr	r3, [pc, #36]	; (45d4 <sysclk_enable_pbb_module+0x30>)
    45ae:	4798      	blx	r3
    45b0:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    45b2:	4b09      	ldr	r3, [pc, #36]	; (45d8 <sysclk_enable_pbb_module+0x34>)
    45b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45b6:	2b00      	cmp	r3, #0
    45b8:	d102      	bne.n	45c0 <sysclk_enable_pbb_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
    45ba:	2006      	movs	r0, #6
    45bc:	4b07      	ldr	r3, [pc, #28]	; (45dc <sysclk_enable_pbb_module+0x38>)
    45be:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    45c0:	68f8      	ldr	r0, [r7, #12]
    45c2:	4b07      	ldr	r3, [pc, #28]	; (45e0 <sysclk_enable_pbb_module+0x3c>)
    45c4:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    45c6:	2003      	movs	r0, #3
    45c8:	6879      	ldr	r1, [r7, #4]
    45ca:	4b06      	ldr	r3, [pc, #24]	; (45e4 <sysclk_enable_pbb_module+0x40>)
    45cc:	4798      	blx	r3
}
    45ce:	3710      	adds	r7, #16
    45d0:	46bd      	mov	sp, r7
    45d2:	bd80      	pop	{r7, pc}
    45d4:	00003ea9 	.word	0x00003ea9
    45d8:	400e0000 	.word	0x400e0000
    45dc:	0000433d 	.word	0x0000433d
    45e0:	00003f01 	.word	0x00003f01
    45e4:	00004451 	.word	0x00004451

000045e8 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    45e8:	b580      	push	{r7, lr}
    45ea:	b084      	sub	sp, #16
    45ec:	af00      	add	r7, sp, #0
    45ee:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    45f0:	2003      	movs	r0, #3
    45f2:	6879      	ldr	r1, [r7, #4]
    45f4:	4b08      	ldr	r3, [pc, #32]	; (4618 <sysclk_disable_pbb_module+0x30>)
    45f6:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    45f8:	4b08      	ldr	r3, [pc, #32]	; (461c <sysclk_disable_pbb_module+0x34>)
    45fa:	4798      	blx	r3
    45fc:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    45fe:	4b08      	ldr	r3, [pc, #32]	; (4620 <sysclk_disable_pbb_module+0x38>)
    4600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4602:	2b00      	cmp	r3, #0
    4604:	d102      	bne.n	460c <sysclk_disable_pbb_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
    4606:	2006      	movs	r0, #6
    4608:	4b06      	ldr	r3, [pc, #24]	; (4624 <sysclk_disable_pbb_module+0x3c>)
    460a:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    460c:	68f8      	ldr	r0, [r7, #12]
    460e:	4b06      	ldr	r3, [pc, #24]	; (4628 <sysclk_disable_pbb_module+0x40>)
    4610:	4798      	blx	r3
}
    4612:	3710      	adds	r7, #16
    4614:	46bd      	mov	sp, r7
    4616:	bd80      	pop	{r7, pc}
    4618:	000044b5 	.word	0x000044b5
    461c:	00003ea9 	.word	0x00003ea9
    4620:	400e0000 	.word	0x400e0000
    4624:	00004359 	.word	0x00004359
    4628:	00003f01 	.word	0x00003f01

0000462c <sysclk_get_peripheral_bus_hz>:
 * \param module Pointer to the module's base address.
 *
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
    462c:	b580      	push	{r7, lr}
    462e:	b082      	sub	sp, #8
    4630:	af00      	add	r7, sp, #0
    4632:	6078      	str	r0, [r7, #4]
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    4634:	687b      	ldr	r3, [r7, #4]
    4636:	4a6c      	ldr	r2, [pc, #432]	; (47e8 <sysclk_get_peripheral_bus_hz+0x1bc>)
    4638:	4293      	cmp	r3, r2
    463a:	f000 80c0 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    463e:	4a6a      	ldr	r2, [pc, #424]	; (47e8 <sysclk_get_peripheral_bus_hz+0x1bc>)
    4640:	4293      	cmp	r3, r2
    4642:	d863      	bhi.n	470c <sysclk_get_peripheral_bus_hz+0xe0>
    4644:	4a69      	ldr	r2, [pc, #420]	; (47ec <sysclk_get_peripheral_bus_hz+0x1c0>)
    4646:	4293      	cmp	r3, r2
    4648:	f000 80b9 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    464c:	4a67      	ldr	r2, [pc, #412]	; (47ec <sysclk_get_peripheral_bus_hz+0x1c0>)
    464e:	4293      	cmp	r3, r2
    4650:	d830      	bhi.n	46b4 <sysclk_get_peripheral_bus_hz+0x88>
    4652:	4a67      	ldr	r2, [pc, #412]	; (47f0 <sysclk_get_peripheral_bus_hz+0x1c4>)
    4654:	4293      	cmp	r3, r2
    4656:	f000 80b2 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    465a:	4a65      	ldr	r2, [pc, #404]	; (47f0 <sysclk_get_peripheral_bus_hz+0x1c4>)
    465c:	4293      	cmp	r3, r2
    465e:	d814      	bhi.n	468a <sysclk_get_peripheral_bus_hz+0x5e>
    4660:	4a64      	ldr	r2, [pc, #400]	; (47f4 <sysclk_get_peripheral_bus_hz+0x1c8>)
    4662:	4293      	cmp	r3, r2
    4664:	f000 80ab 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    4668:	4a62      	ldr	r2, [pc, #392]	; (47f4 <sysclk_get_peripheral_bus_hz+0x1c8>)
    466a:	4293      	cmp	r3, r2
    466c:	d804      	bhi.n	4678 <sysclk_get_peripheral_bus_hz+0x4c>
    466e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    4672:	f000 80a4 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    4676:	e0b2      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    4678:	4a5f      	ldr	r2, [pc, #380]	; (47f8 <sysclk_get_peripheral_bus_hz+0x1cc>)
    467a:	4293      	cmp	r3, r2
    467c:	f000 809f 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    4680:	4a5e      	ldr	r2, [pc, #376]	; (47fc <sysclk_get_peripheral_bus_hz+0x1d0>)
    4682:	4293      	cmp	r3, r2
    4684:	f000 809b 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    4688:	e0a9      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    468a:	4a5d      	ldr	r2, [pc, #372]	; (4800 <sysclk_get_peripheral_bus_hz+0x1d4>)
    468c:	4293      	cmp	r3, r2
    468e:	f000 8096 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    4692:	4a5b      	ldr	r2, [pc, #364]	; (4800 <sysclk_get_peripheral_bus_hz+0x1d4>)
    4694:	4293      	cmp	r3, r2
    4696:	d804      	bhi.n	46a2 <sysclk_get_peripheral_bus_hz+0x76>
    4698:	4a5a      	ldr	r2, [pc, #360]	; (4804 <sysclk_get_peripheral_bus_hz+0x1d8>)
    469a:	4293      	cmp	r3, r2
    469c:	f000 808f 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    46a0:	e09d      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    46a2:	4a59      	ldr	r2, [pc, #356]	; (4808 <sysclk_get_peripheral_bus_hz+0x1dc>)
    46a4:	4293      	cmp	r3, r2
    46a6:	f000 808a 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    46aa:	4a58      	ldr	r2, [pc, #352]	; (480c <sysclk_get_peripheral_bus_hz+0x1e0>)
    46ac:	4293      	cmp	r3, r2
    46ae:	f000 8086 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    46b2:	e094      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    46b4:	4a56      	ldr	r2, [pc, #344]	; (4810 <sysclk_get_peripheral_bus_hz+0x1e4>)
    46b6:	4293      	cmp	r3, r2
    46b8:	f000 8081 	beq.w	47be <sysclk_get_peripheral_bus_hz+0x192>
    46bc:	4a54      	ldr	r2, [pc, #336]	; (4810 <sysclk_get_peripheral_bus_hz+0x1e4>)
    46be:	4293      	cmp	r3, r2
    46c0:	d810      	bhi.n	46e4 <sysclk_get_peripheral_bus_hz+0xb8>
    46c2:	4a54      	ldr	r2, [pc, #336]	; (4814 <sysclk_get_peripheral_bus_hz+0x1e8>)
    46c4:	4293      	cmp	r3, r2
    46c6:	d07a      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46c8:	4a52      	ldr	r2, [pc, #328]	; (4814 <sysclk_get_peripheral_bus_hz+0x1e8>)
    46ca:	4293      	cmp	r3, r2
    46cc:	d803      	bhi.n	46d6 <sysclk_get_peripheral_bus_hz+0xaa>
    46ce:	4a52      	ldr	r2, [pc, #328]	; (4818 <sysclk_get_peripheral_bus_hz+0x1ec>)
    46d0:	4293      	cmp	r3, r2
    46d2:	d074      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46d4:	e083      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    46d6:	4a51      	ldr	r2, [pc, #324]	; (481c <sysclk_get_peripheral_bus_hz+0x1f0>)
    46d8:	4293      	cmp	r3, r2
    46da:	d070      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46dc:	4a50      	ldr	r2, [pc, #320]	; (4820 <sysclk_get_peripheral_bus_hz+0x1f4>)
    46de:	4293      	cmp	r3, r2
    46e0:	d06d      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46e2:	e07c      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    46e4:	4a4f      	ldr	r2, [pc, #316]	; (4824 <sysclk_get_peripheral_bus_hz+0x1f8>)
    46e6:	4293      	cmp	r3, r2
    46e8:	d069      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46ea:	4a4e      	ldr	r2, [pc, #312]	; (4824 <sysclk_get_peripheral_bus_hz+0x1f8>)
    46ec:	4293      	cmp	r3, r2
    46ee:	d806      	bhi.n	46fe <sysclk_get_peripheral_bus_hz+0xd2>
    46f0:	4a4d      	ldr	r2, [pc, #308]	; (4828 <sysclk_get_peripheral_bus_hz+0x1fc>)
    46f2:	4293      	cmp	r3, r2
    46f4:	d063      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46f6:	4a4d      	ldr	r2, [pc, #308]	; (482c <sysclk_get_peripheral_bus_hz+0x200>)
    46f8:	4293      	cmp	r3, r2
    46fa:	d060      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    46fc:	e06f      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    46fe:	4a4c      	ldr	r2, [pc, #304]	; (4830 <sysclk_get_peripheral_bus_hz+0x204>)
    4700:	4293      	cmp	r3, r2
    4702:	d05c      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    4704:	4a4b      	ldr	r2, [pc, #300]	; (4834 <sysclk_get_peripheral_bus_hz+0x208>)
    4706:	4293      	cmp	r3, r2
    4708:	d059      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    470a:	e068      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    470c:	4a4a      	ldr	r2, [pc, #296]	; (4838 <sysclk_get_peripheral_bus_hz+0x20c>)
    470e:	4293      	cmp	r3, r2
    4710:	d05d      	beq.n	47ce <sysclk_get_peripheral_bus_hz+0x1a2>
    4712:	4a49      	ldr	r2, [pc, #292]	; (4838 <sysclk_get_peripheral_bus_hz+0x20c>)
    4714:	4293      	cmp	r3, r2
    4716:	d827      	bhi.n	4768 <sysclk_get_peripheral_bus_hz+0x13c>
    4718:	4a48      	ldr	r2, [pc, #288]	; (483c <sysclk_get_peripheral_bus_hz+0x210>)
    471a:	4293      	cmp	r3, r2
    471c:	d053      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    471e:	4a47      	ldr	r2, [pc, #284]	; (483c <sysclk_get_peripheral_bus_hz+0x210>)
    4720:	4293      	cmp	r3, r2
    4722:	d810      	bhi.n	4746 <sysclk_get_peripheral_bus_hz+0x11a>
    4724:	4a46      	ldr	r2, [pc, #280]	; (4840 <sysclk_get_peripheral_bus_hz+0x214>)
    4726:	4293      	cmp	r3, r2
    4728:	d049      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    472a:	4a45      	ldr	r2, [pc, #276]	; (4840 <sysclk_get_peripheral_bus_hz+0x214>)
    472c:	4293      	cmp	r3, r2
    472e:	d803      	bhi.n	4738 <sysclk_get_peripheral_bus_hz+0x10c>
    4730:	4a44      	ldr	r2, [pc, #272]	; (4844 <sysclk_get_peripheral_bus_hz+0x218>)
    4732:	4293      	cmp	r3, r2
    4734:	d043      	beq.n	47be <sysclk_get_peripheral_bus_hz+0x192>
    4736:	e052      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    4738:	4a43      	ldr	r2, [pc, #268]	; (4848 <sysclk_get_peripheral_bus_hz+0x21c>)
    473a:	4293      	cmp	r3, r2
    473c:	d043      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    473e:	4a43      	ldr	r2, [pc, #268]	; (484c <sysclk_get_peripheral_bus_hz+0x220>)
    4740:	4293      	cmp	r3, r2
    4742:	d040      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    4744:	e04b      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    4746:	4a42      	ldr	r2, [pc, #264]	; (4850 <sysclk_get_peripheral_bus_hz+0x224>)
    4748:	4293      	cmp	r3, r2
    474a:	d03c      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    474c:	4a40      	ldr	r2, [pc, #256]	; (4850 <sysclk_get_peripheral_bus_hz+0x224>)
    474e:	4293      	cmp	r3, r2
    4750:	d803      	bhi.n	475a <sysclk_get_peripheral_bus_hz+0x12e>
    4752:	4a40      	ldr	r2, [pc, #256]	; (4854 <sysclk_get_peripheral_bus_hz+0x228>)
    4754:	4293      	cmp	r3, r2
    4756:	d036      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    4758:	e041      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    475a:	4a3f      	ldr	r2, [pc, #252]	; (4858 <sysclk_get_peripheral_bus_hz+0x22c>)
    475c:	4293      	cmp	r3, r2
    475e:	d032      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    4760:	4a3e      	ldr	r2, [pc, #248]	; (485c <sysclk_get_peripheral_bus_hz+0x230>)
    4762:	4293      	cmp	r3, r2
    4764:	d02f      	beq.n	47c6 <sysclk_get_peripheral_bus_hz+0x19a>
    4766:	e03a      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    4768:	4a3d      	ldr	r2, [pc, #244]	; (4860 <sysclk_get_peripheral_bus_hz+0x234>)
    476a:	4293      	cmp	r3, r2
    476c:	d033      	beq.n	47d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    476e:	4a3c      	ldr	r2, [pc, #240]	; (4860 <sysclk_get_peripheral_bus_hz+0x234>)
    4770:	4293      	cmp	r3, r2
    4772:	d810      	bhi.n	4796 <sysclk_get_peripheral_bus_hz+0x16a>
    4774:	4a3b      	ldr	r2, [pc, #236]	; (4864 <sysclk_get_peripheral_bus_hz+0x238>)
    4776:	4293      	cmp	r3, r2
    4778:	d029      	beq.n	47ce <sysclk_get_peripheral_bus_hz+0x1a2>
    477a:	4a3a      	ldr	r2, [pc, #232]	; (4864 <sysclk_get_peripheral_bus_hz+0x238>)
    477c:	4293      	cmp	r3, r2
    477e:	d803      	bhi.n	4788 <sysclk_get_peripheral_bus_hz+0x15c>
    4780:	4a39      	ldr	r2, [pc, #228]	; (4868 <sysclk_get_peripheral_bus_hz+0x23c>)
    4782:	4293      	cmp	r3, r2
    4784:	d023      	beq.n	47ce <sysclk_get_peripheral_bus_hz+0x1a2>
    4786:	e02a      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    4788:	4a38      	ldr	r2, [pc, #224]	; (486c <sysclk_get_peripheral_bus_hz+0x240>)
    478a:	4293      	cmp	r3, r2
    478c:	d01f      	beq.n	47ce <sysclk_get_peripheral_bus_hz+0x1a2>
    478e:	4a38      	ldr	r2, [pc, #224]	; (4870 <sysclk_get_peripheral_bus_hz+0x244>)
    4790:	4293      	cmp	r3, r2
    4792:	d01c      	beq.n	47ce <sysclk_get_peripheral_bus_hz+0x1a2>
    4794:	e023      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    4796:	4a37      	ldr	r2, [pc, #220]	; (4874 <sysclk_get_peripheral_bus_hz+0x248>)
    4798:	4293      	cmp	r3, r2
    479a:	d01c      	beq.n	47d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    479c:	4a35      	ldr	r2, [pc, #212]	; (4874 <sysclk_get_peripheral_bus_hz+0x248>)
    479e:	4293      	cmp	r3, r2
    47a0:	d806      	bhi.n	47b0 <sysclk_get_peripheral_bus_hz+0x184>
    47a2:	4a35      	ldr	r2, [pc, #212]	; (4878 <sysclk_get_peripheral_bus_hz+0x24c>)
    47a4:	4293      	cmp	r3, r2
    47a6:	d016      	beq.n	47d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    47a8:	4a34      	ldr	r2, [pc, #208]	; (487c <sysclk_get_peripheral_bus_hz+0x250>)
    47aa:	4293      	cmp	r3, r2
    47ac:	d013      	beq.n	47d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    47ae:	e016      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
    47b0:	4a33      	ldr	r2, [pc, #204]	; (4880 <sysclk_get_peripheral_bus_hz+0x254>)
    47b2:	4293      	cmp	r3, r2
    47b4:	d00f      	beq.n	47d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    47b6:	4a33      	ldr	r2, [pc, #204]	; (4884 <sysclk_get_peripheral_bus_hz+0x258>)
    47b8:	4293      	cmp	r3, r2
    47ba:	d00c      	beq.n	47d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    47bc:	e00f      	b.n	47de <sysclk_get_peripheral_bus_hz+0x1b2>
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
    47be:	4b32      	ldr	r3, [pc, #200]	; (4888 <sysclk_get_peripheral_bus_hz+0x25c>)
    47c0:	4798      	blx	r3
    47c2:	4603      	mov	r3, r0
    47c4:	e00c      	b.n	47e0 <sysclk_get_peripheral_bus_hz+0x1b4>
	case HMATRIX_ADDR:
	case PDCA_ADDR:
	case CRCCU_ADDR:
	case USBC_ADDR:
	case PEVC_ADDR:
		return sysclk_get_pbb_hz();
    47c6:	4b31      	ldr	r3, [pc, #196]	; (488c <sysclk_get_peripheral_bus_hz+0x260>)
    47c8:	4798      	blx	r3
    47ca:	4603      	mov	r3, r0
    47cc:	e008      	b.n	47e0 <sysclk_get_peripheral_bus_hz+0x1b4>
	case PM_ADDR:
	case CHIPID_ADDR:
	case SCIF_ADDR:
	case FREQM_ADDR:
	case GPIO_ADDR:
		return sysclk_get_pbc_hz();
    47ce:	4b30      	ldr	r3, [pc, #192]	; (4890 <sysclk_get_peripheral_bus_hz+0x264>)
    47d0:	4798      	blx	r3
    47d2:	4603      	mov	r3, r0
    47d4:	e004      	b.n	47e0 <sysclk_get_peripheral_bus_hz+0x1b4>
	case BSCIF_ADDR:
	case AST_ADDR:
	case WDT_ADDR:
	case EIC_ADDR:
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();
    47d6:	4b2f      	ldr	r3, [pc, #188]	; (4894 <sysclk_get_peripheral_bus_hz+0x268>)
    47d8:	4798      	blx	r3
    47da:	4603      	mov	r3, r0
    47dc:	e000      	b.n	47e0 <sysclk_get_peripheral_bus_hz+0x1b4>

	default:
		Assert(false);
		return 0;
    47de:	2300      	movs	r3, #0
	}
}
    47e0:	4618      	mov	r0, r3
    47e2:	3708      	adds	r7, #8
    47e4:	46bd      	mov	sp, r7
    47e6:	bd80      	pop	{r7, pc}
    47e8:	40078000 	.word	0x40078000
    47ec:	40028000 	.word	0x40028000
    47f0:	40018000 	.word	0x40018000
    47f4:	40008000 	.word	0x40008000
    47f8:	40010000 	.word	0x40010000
    47fc:	40014000 	.word	0x40014000
    4800:	4001c000 	.word	0x4001c000
    4804:	40018400 	.word	0x40018400
    4808:	4001c400 	.word	0x4001c400
    480c:	40024000 	.word	0x40024000
    4810:	40040000 	.word	0x40040000
    4814:	40030000 	.word	0x40030000
    4818:	4002c000 	.word	0x4002c000
    481c:	40038000 	.word	0x40038000
    4820:	4003c000 	.word	0x4003c000
    4824:	40068000 	.word	0x40068000
    4828:	40060000 	.word	0x40060000
    482c:	40064000 	.word	0x40064000
    4830:	4006c000 	.word	0x4006c000
    4834:	40070000 	.word	0x40070000
    4838:	400e0000 	.word	0x400e0000
    483c:	400a1000 	.word	0x400a1000
    4840:	40080000 	.word	0x40080000
    4844:	4007c000 	.word	0x4007c000
    4848:	400a0000 	.word	0x400a0000
    484c:	400a0400 	.word	0x400a0400
    4850:	400a4000 	.word	0x400a4000
    4854:	400a2000 	.word	0x400a2000
    4858:	400a5000 	.word	0x400a5000
    485c:	400a6000 	.word	0x400a6000
    4860:	400f0000 	.word	0x400f0000
    4864:	400e0800 	.word	0x400e0800
    4868:	400e0400 	.word	0x400e0400
    486c:	400e0c00 	.word	0x400e0c00
    4870:	400e1000 	.word	0x400e1000
    4874:	400f0c00 	.word	0x400f0c00
    4878:	400f0400 	.word	0x400f0400
    487c:	400f0800 	.word	0x400f0800
    4880:	400f1000 	.word	0x400f1000
    4884:	400f1400 	.word	0x400f1400
    4888:	000042ed 	.word	0x000042ed
    488c:	00004301 	.word	0x00004301
    4890:	00004315 	.word	0x00004315
    4894:	00004329 	.word	0x00004329

00004898 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    4898:	b580      	push	{r7, lr}
    489a:	b082      	sub	sp, #8
    489c:	af00      	add	r7, sp, #0
    489e:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	4aa9      	ldr	r2, [pc, #676]	; (4b48 <sysclk_enable_peripheral_clock+0x2b0>)
    48a4:	4293      	cmp	r3, r2
    48a6:	f000 8146 	beq.w	4b36 <sysclk_enable_peripheral_clock+0x29e>
    48aa:	4aa7      	ldr	r2, [pc, #668]	; (4b48 <sysclk_enable_peripheral_clock+0x2b0>)
    48ac:	4293      	cmp	r3, r2
    48ae:	d86c      	bhi.n	498a <sysclk_enable_peripheral_clock+0xf2>
    48b0:	4aa6      	ldr	r2, [pc, #664]	; (4b4c <sysclk_enable_peripheral_clock+0x2b4>)
    48b2:	4293      	cmp	r3, r2
    48b4:	f000 810a 	beq.w	4acc <sysclk_enable_peripheral_clock+0x234>
    48b8:	4aa4      	ldr	r2, [pc, #656]	; (4b4c <sysclk_enable_peripheral_clock+0x2b4>)
    48ba:	4293      	cmp	r3, r2
    48bc:	d830      	bhi.n	4920 <sysclk_enable_peripheral_clock+0x88>
    48be:	4aa4      	ldr	r2, [pc, #656]	; (4b50 <sysclk_enable_peripheral_clock+0x2b8>)
    48c0:	4293      	cmp	r3, r2
    48c2:	f000 80ec 	beq.w	4a9e <sysclk_enable_peripheral_clock+0x206>
    48c6:	4aa2      	ldr	r2, [pc, #648]	; (4b50 <sysclk_enable_peripheral_clock+0x2b8>)
    48c8:	4293      	cmp	r3, r2
    48ca:	d814      	bhi.n	48f6 <sysclk_enable_peripheral_clock+0x5e>
    48cc:	4aa1      	ldr	r2, [pc, #644]	; (4b54 <sysclk_enable_peripheral_clock+0x2bc>)
    48ce:	4293      	cmp	r3, r2
    48d0:	f000 80d3 	beq.w	4a7a <sysclk_enable_peripheral_clock+0x1e2>
    48d4:	4a9f      	ldr	r2, [pc, #636]	; (4b54 <sysclk_enable_peripheral_clock+0x2bc>)
    48d6:	4293      	cmp	r3, r2
    48d8:	d804      	bhi.n	48e4 <sysclk_enable_peripheral_clock+0x4c>
    48da:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    48de:	f000 80c8 	beq.w	4a72 <sysclk_enable_peripheral_clock+0x1da>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    48e2:	e1e4      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    48e4:	4a9c      	ldr	r2, [pc, #624]	; (4b58 <sysclk_enable_peripheral_clock+0x2c0>)
    48e6:	4293      	cmp	r3, r2
    48e8:	f000 80cb 	beq.w	4a82 <sysclk_enable_peripheral_clock+0x1ea>
    48ec:	4a9b      	ldr	r2, [pc, #620]	; (4b5c <sysclk_enable_peripheral_clock+0x2c4>)
    48ee:	4293      	cmp	r3, r2
    48f0:	f000 80ce 	beq.w	4a90 <sysclk_enable_peripheral_clock+0x1f8>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    48f4:	e1db      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    48f6:	4a9a      	ldr	r2, [pc, #616]	; (4b60 <sysclk_enable_peripheral_clock+0x2c8>)
    48f8:	4293      	cmp	r3, r2
    48fa:	f000 80d8 	beq.w	4aae <sysclk_enable_peripheral_clock+0x216>
    48fe:	4a98      	ldr	r2, [pc, #608]	; (4b60 <sysclk_enable_peripheral_clock+0x2c8>)
    4900:	4293      	cmp	r3, r2
    4902:	d804      	bhi.n	490e <sysclk_enable_peripheral_clock+0x76>
    4904:	4a97      	ldr	r2, [pc, #604]	; (4b64 <sysclk_enable_peripheral_clock+0x2cc>)
    4906:	4293      	cmp	r3, r2
    4908:	f000 80cd 	beq.w	4aa6 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    490c:	e1cf      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    490e:	4a96      	ldr	r2, [pc, #600]	; (4b68 <sysclk_enable_peripheral_clock+0x2d0>)
    4910:	4293      	cmp	r3, r2
    4912:	f000 80d0 	beq.w	4ab6 <sysclk_enable_peripheral_clock+0x21e>
    4916:	4a95      	ldr	r2, [pc, #596]	; (4b6c <sysclk_enable_peripheral_clock+0x2d4>)
    4918:	4293      	cmp	r3, r2
    491a:	f000 80d0 	beq.w	4abe <sysclk_enable_peripheral_clock+0x226>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    491e:	e1c6      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4920:	4a93      	ldr	r2, [pc, #588]	; (4b70 <sysclk_enable_peripheral_clock+0x2d8>)
    4922:	4293      	cmp	r3, r2
    4924:	f000 80ef 	beq.w	4b06 <sysclk_enable_peripheral_clock+0x26e>
    4928:	4a91      	ldr	r2, [pc, #580]	; (4b70 <sysclk_enable_peripheral_clock+0x2d8>)
    492a:	4293      	cmp	r3, r2
    492c:	d814      	bhi.n	4958 <sysclk_enable_peripheral_clock+0xc0>
    492e:	4a91      	ldr	r2, [pc, #580]	; (4b74 <sysclk_enable_peripheral_clock+0x2dc>)
    4930:	4293      	cmp	r3, r2
    4932:	f000 80d9 	beq.w	4ae8 <sysclk_enable_peripheral_clock+0x250>
    4936:	4a8f      	ldr	r2, [pc, #572]	; (4b74 <sysclk_enable_peripheral_clock+0x2dc>)
    4938:	4293      	cmp	r3, r2
    493a:	d804      	bhi.n	4946 <sysclk_enable_peripheral_clock+0xae>
    493c:	4a8e      	ldr	r2, [pc, #568]	; (4b78 <sysclk_enable_peripheral_clock+0x2e0>)
    493e:	4293      	cmp	r3, r2
    4940:	f000 80cb 	beq.w	4ada <sysclk_enable_peripheral_clock+0x242>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4944:	e1b3      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4946:	4a8d      	ldr	r2, [pc, #564]	; (4b7c <sysclk_enable_peripheral_clock+0x2e4>)
    4948:	4293      	cmp	r3, r2
    494a:	f000 80d4 	beq.w	4af6 <sysclk_enable_peripheral_clock+0x25e>
    494e:	4a8c      	ldr	r2, [pc, #560]	; (4b80 <sysclk_enable_peripheral_clock+0x2e8>)
    4950:	4293      	cmp	r3, r2
    4952:	f000 80d4 	beq.w	4afe <sysclk_enable_peripheral_clock+0x266>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4956:	e1aa      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4958:	4a8a      	ldr	r2, [pc, #552]	; (4b84 <sysclk_enable_peripheral_clock+0x2ec>)
    495a:	4293      	cmp	r3, r2
    495c:	f000 80df 	beq.w	4b1e <sysclk_enable_peripheral_clock+0x286>
    4960:	4a88      	ldr	r2, [pc, #544]	; (4b84 <sysclk_enable_peripheral_clock+0x2ec>)
    4962:	4293      	cmp	r3, r2
    4964:	d808      	bhi.n	4978 <sysclk_enable_peripheral_clock+0xe0>
    4966:	4a88      	ldr	r2, [pc, #544]	; (4b88 <sysclk_enable_peripheral_clock+0x2f0>)
    4968:	4293      	cmp	r3, r2
    496a:	f000 80d0 	beq.w	4b0e <sysclk_enable_peripheral_clock+0x276>
    496e:	4a87      	ldr	r2, [pc, #540]	; (4b8c <sysclk_enable_peripheral_clock+0x2f4>)
    4970:	4293      	cmp	r3, r2
    4972:	f000 80d0 	beq.w	4b16 <sysclk_enable_peripheral_clock+0x27e>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4976:	e19a      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4978:	4a85      	ldr	r2, [pc, #532]	; (4b90 <sysclk_enable_peripheral_clock+0x2f8>)
    497a:	4293      	cmp	r3, r2
    497c:	f000 80d3 	beq.w	4b26 <sysclk_enable_peripheral_clock+0x28e>
    4980:	4a84      	ldr	r2, [pc, #528]	; (4b94 <sysclk_enable_peripheral_clock+0x2fc>)
    4982:	4293      	cmp	r3, r2
    4984:	f000 80d3 	beq.w	4b2e <sysclk_enable_peripheral_clock+0x296>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4988:	e191      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    498a:	4a83      	ldr	r2, [pc, #524]	; (4b98 <sysclk_enable_peripheral_clock+0x300>)
    498c:	4293      	cmp	r3, r2
    498e:	f000 8162 	beq.w	4c56 <sysclk_enable_peripheral_clock+0x3be>
    4992:	4a81      	ldr	r2, [pc, #516]	; (4b98 <sysclk_enable_peripheral_clock+0x300>)
    4994:	4293      	cmp	r3, r2
    4996:	d833      	bhi.n	4a00 <sysclk_enable_peripheral_clock+0x168>
    4998:	4a80      	ldr	r2, [pc, #512]	; (4b9c <sysclk_enable_peripheral_clock+0x304>)
    499a:	4293      	cmp	r3, r2
    499c:	f000 813e 	beq.w	4c1c <sysclk_enable_peripheral_clock+0x384>
    49a0:	4a7e      	ldr	r2, [pc, #504]	; (4b9c <sysclk_enable_peripheral_clock+0x304>)
    49a2:	4293      	cmp	r3, r2
    49a4:	d814      	bhi.n	49d0 <sysclk_enable_peripheral_clock+0x138>
    49a6:	4a7e      	ldr	r2, [pc, #504]	; (4ba0 <sysclk_enable_peripheral_clock+0x308>)
    49a8:	4293      	cmp	r3, r2
    49aa:	f000 8125 	beq.w	4bf8 <sysclk_enable_peripheral_clock+0x360>
    49ae:	4a7c      	ldr	r2, [pc, #496]	; (4ba0 <sysclk_enable_peripheral_clock+0x308>)
    49b0:	4293      	cmp	r3, r2
    49b2:	d804      	bhi.n	49be <sysclk_enable_peripheral_clock+0x126>
    49b4:	4a7b      	ldr	r2, [pc, #492]	; (4ba4 <sysclk_enable_peripheral_clock+0x30c>)
    49b6:	4293      	cmp	r3, r2
    49b8:	f000 80c1 	beq.w	4b3e <sysclk_enable_peripheral_clock+0x2a6>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    49bc:	e177      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    49be:	4a7a      	ldr	r2, [pc, #488]	; (4ba8 <sysclk_enable_peripheral_clock+0x310>)
    49c0:	4293      	cmp	r3, r2
    49c2:	f000 811d 	beq.w	4c00 <sysclk_enable_peripheral_clock+0x368>
    49c6:	4a79      	ldr	r2, [pc, #484]	; (4bac <sysclk_enable_peripheral_clock+0x314>)
    49c8:	4293      	cmp	r3, r2
    49ca:	f000 8120 	beq.w	4c0e <sysclk_enable_peripheral_clock+0x376>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    49ce:	e16e      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    49d0:	4a77      	ldr	r2, [pc, #476]	; (4bb0 <sysclk_enable_peripheral_clock+0x318>)
    49d2:	4293      	cmp	r3, r2
    49d4:	f000 8134 	beq.w	4c40 <sysclk_enable_peripheral_clock+0x3a8>
    49d8:	4a75      	ldr	r2, [pc, #468]	; (4bb0 <sysclk_enable_peripheral_clock+0x318>)
    49da:	4293      	cmp	r3, r2
    49dc:	d808      	bhi.n	49f0 <sysclk_enable_peripheral_clock+0x158>
    49de:	4a75      	ldr	r2, [pc, #468]	; (4bb4 <sysclk_enable_peripheral_clock+0x31c>)
    49e0:	4293      	cmp	r3, r2
    49e2:	f000 811f 	beq.w	4c24 <sysclk_enable_peripheral_clock+0x38c>
    49e6:	4a74      	ldr	r2, [pc, #464]	; (4bb8 <sysclk_enable_peripheral_clock+0x320>)
    49e8:	4293      	cmp	r3, r2
    49ea:	f000 8122 	beq.w	4c32 <sysclk_enable_peripheral_clock+0x39a>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    49ee:	e15e      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    49f0:	4a72      	ldr	r2, [pc, #456]	; (4bbc <sysclk_enable_peripheral_clock+0x324>)
    49f2:	4293      	cmp	r3, r2
    49f4:	f000 812b 	beq.w	4c4e <sysclk_enable_peripheral_clock+0x3b6>
    49f8:	4a71      	ldr	r2, [pc, #452]	; (4bc0 <sysclk_enable_peripheral_clock+0x328>)
    49fa:	4293      	cmp	r3, r2
    49fc:	d035      	beq.n	4a6a <sysclk_enable_peripheral_clock+0x1d2>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    49fe:	e156      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4a00:	4a70      	ldr	r2, [pc, #448]	; (4bc4 <sysclk_enable_peripheral_clock+0x32c>)
    4a02:	4293      	cmp	r3, r2
    4a04:	f000 813b 	beq.w	4c7e <sysclk_enable_peripheral_clock+0x3e6>
    4a08:	4a6e      	ldr	r2, [pc, #440]	; (4bc4 <sysclk_enable_peripheral_clock+0x32c>)
    4a0a:	4293      	cmp	r3, r2
    4a0c:	d814      	bhi.n	4a38 <sysclk_enable_peripheral_clock+0x1a0>
    4a0e:	4a6e      	ldr	r2, [pc, #440]	; (4bc8 <sysclk_enable_peripheral_clock+0x330>)
    4a10:	4293      	cmp	r3, r2
    4a12:	f000 8128 	beq.w	4c66 <sysclk_enable_peripheral_clock+0x3ce>
    4a16:	4a6c      	ldr	r2, [pc, #432]	; (4bc8 <sysclk_enable_peripheral_clock+0x330>)
    4a18:	4293      	cmp	r3, r2
    4a1a:	d804      	bhi.n	4a26 <sysclk_enable_peripheral_clock+0x18e>
    4a1c:	4a6b      	ldr	r2, [pc, #428]	; (4bcc <sysclk_enable_peripheral_clock+0x334>)
    4a1e:	4293      	cmp	r3, r2
    4a20:	f000 811d 	beq.w	4c5e <sysclk_enable_peripheral_clock+0x3c6>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4a24:	e143      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4a26:	4a6a      	ldr	r2, [pc, #424]	; (4bd0 <sysclk_enable_peripheral_clock+0x338>)
    4a28:	4293      	cmp	r3, r2
    4a2a:	f000 8120 	beq.w	4c6e <sysclk_enable_peripheral_clock+0x3d6>
    4a2e:	4a69      	ldr	r2, [pc, #420]	; (4bd4 <sysclk_enable_peripheral_clock+0x33c>)
    4a30:	4293      	cmp	r3, r2
    4a32:	f000 8120 	beq.w	4c76 <sysclk_enable_peripheral_clock+0x3de>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4a36:	e13a      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4a38:	4a67      	ldr	r2, [pc, #412]	; (4bd8 <sysclk_enable_peripheral_clock+0x340>)
    4a3a:	4293      	cmp	r3, r2
    4a3c:	f000 812b 	beq.w	4c96 <sysclk_enable_peripheral_clock+0x3fe>
    4a40:	4a65      	ldr	r2, [pc, #404]	; (4bd8 <sysclk_enable_peripheral_clock+0x340>)
    4a42:	4293      	cmp	r3, r2
    4a44:	d808      	bhi.n	4a58 <sysclk_enable_peripheral_clock+0x1c0>
    4a46:	4a65      	ldr	r2, [pc, #404]	; (4bdc <sysclk_enable_peripheral_clock+0x344>)
    4a48:	4293      	cmp	r3, r2
    4a4a:	f000 811c 	beq.w	4c86 <sysclk_enable_peripheral_clock+0x3ee>
    4a4e:	4a64      	ldr	r2, [pc, #400]	; (4be0 <sysclk_enable_peripheral_clock+0x348>)
    4a50:	4293      	cmp	r3, r2
    4a52:	f000 811c 	beq.w	4c8e <sysclk_enable_peripheral_clock+0x3f6>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4a56:	e12a      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4a58:	4a62      	ldr	r2, [pc, #392]	; (4be4 <sysclk_enable_peripheral_clock+0x34c>)
    4a5a:	4293      	cmp	r3, r2
    4a5c:	f000 811f 	beq.w	4c9e <sysclk_enable_peripheral_clock+0x406>
    4a60:	4a61      	ldr	r2, [pc, #388]	; (4be8 <sysclk_enable_peripheral_clock+0x350>)
    4a62:	4293      	cmp	r3, r2
    4a64:	f000 811f 	beq.w	4ca6 <sysclk_enable_peripheral_clock+0x40e>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4a68:	e121      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
{
	switch ((uintptr_t)module) {

	#if !SAM4LS
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
    4a6a:	2009      	movs	r0, #9
    4a6c:	4b5f      	ldr	r3, [pc, #380]	; (4bec <sysclk_enable_peripheral_clock+0x354>)
    4a6e:	4798      	blx	r3
		break;
    4a70:	e11d      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
	#endif

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    4a72:	2000      	movs	r0, #0
    4a74:	4b5e      	ldr	r3, [pc, #376]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4a76:	4798      	blx	r3
		break;
    4a78:	e119      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    4a7a:	2001      	movs	r0, #1
    4a7c:	4b5c      	ldr	r3, [pc, #368]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4a7e:	4798      	blx	r3
		break;
    4a80:	e115      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    4a82:	2002      	movs	r0, #2
    4a84:	4b5a      	ldr	r3, [pc, #360]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4a86:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    4a88:	2055      	movs	r0, #85	; 0x55
    4a8a:	4b5a      	ldr	r3, [pc, #360]	; (4bf4 <sysclk_enable_peripheral_clock+0x35c>)
    4a8c:	4798      	blx	r3
			| PBA_DIVMASK_TIMER_CLOCK3
			| PBA_DIVMASK_TIMER_CLOCK4
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;
    4a8e:	e10e      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    4a90:	2003      	movs	r0, #3
    4a92:	4b57      	ldr	r3, [pc, #348]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4a94:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    4a96:	2055      	movs	r0, #85	; 0x55
    4a98:	4b56      	ldr	r3, [pc, #344]	; (4bf4 <sysclk_enable_peripheral_clock+0x35c>)
    4a9a:	4798      	blx	r3
			| PBA_DIVMASK_TIMER_CLOCK3
			| PBA_DIVMASK_TIMER_CLOCK4
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;
    4a9c:	e107      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    4a9e:	2004      	movs	r0, #4
    4aa0:	4b53      	ldr	r3, [pc, #332]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4aa2:	4798      	blx	r3
		break;
    4aa4:	e103      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    4aa6:	2005      	movs	r0, #5
    4aa8:	4b51      	ldr	r3, [pc, #324]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4aaa:	4798      	blx	r3
		break;
    4aac:	e0ff      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    4aae:	2006      	movs	r0, #6
    4ab0:	4b4f      	ldr	r3, [pc, #316]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4ab2:	4798      	blx	r3
		break;
    4ab4:	e0fb      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    4ab6:	2007      	movs	r0, #7
    4ab8:	4b4d      	ldr	r3, [pc, #308]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4aba:	4798      	blx	r3
		break;
    4abc:	e0f7      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    4abe:	2008      	movs	r0, #8
    4ac0:	4b4b      	ldr	r3, [pc, #300]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4ac2:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    4ac4:	2004      	movs	r0, #4
    4ac6:	4b4b      	ldr	r3, [pc, #300]	; (4bf4 <sysclk_enable_peripheral_clock+0x35c>)
    4ac8:	4798      	blx	r3
		break;
    4aca:	e0f0      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    4acc:	2009      	movs	r0, #9
    4ace:	4b48      	ldr	r3, [pc, #288]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4ad0:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    4ad2:	2004      	movs	r0, #4
    4ad4:	4b47      	ldr	r3, [pc, #284]	; (4bf4 <sysclk_enable_peripheral_clock+0x35c>)
    4ad6:	4798      	blx	r3
		break;
    4ad8:	e0e9      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    4ada:	200a      	movs	r0, #10
    4adc:	4b44      	ldr	r3, [pc, #272]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4ade:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    4ae0:	2004      	movs	r0, #4
    4ae2:	4b44      	ldr	r3, [pc, #272]	; (4bf4 <sysclk_enable_peripheral_clock+0x35c>)
    4ae4:	4798      	blx	r3
		break;
    4ae6:	e0e2      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    4ae8:	200b      	movs	r0, #11
    4aea:	4b41      	ldr	r3, [pc, #260]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4aec:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    4aee:	2004      	movs	r0, #4
    4af0:	4b40      	ldr	r3, [pc, #256]	; (4bf4 <sysclk_enable_peripheral_clock+0x35c>)
    4af2:	4798      	blx	r3
		break;
    4af4:	e0db      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    4af6:	200c      	movs	r0, #12
    4af8:	4b3d      	ldr	r3, [pc, #244]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4afa:	4798      	blx	r3
		break;
    4afc:	e0d7      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    4afe:	200d      	movs	r0, #13
    4b00:	4b3b      	ldr	r3, [pc, #236]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b02:	4798      	blx	r3
		break;
    4b04:	e0d3      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    4b06:	200e      	movs	r0, #14
    4b08:	4b39      	ldr	r3, [pc, #228]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b0a:	4798      	blx	r3
		break;
    4b0c:	e0cf      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    4b0e:	200f      	movs	r0, #15
    4b10:	4b37      	ldr	r3, [pc, #220]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b12:	4798      	blx	r3
		break;
    4b14:	e0cb      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    4b16:	2010      	movs	r0, #16
    4b18:	4b35      	ldr	r3, [pc, #212]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b1a:	4798      	blx	r3
		break;
    4b1c:	e0c7      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    4b1e:	2011      	movs	r0, #17
    4b20:	4b33      	ldr	r3, [pc, #204]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b22:	4798      	blx	r3
		break;
    4b24:	e0c3      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    4b26:	2012      	movs	r0, #18
    4b28:	4b31      	ldr	r3, [pc, #196]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b2a:	4798      	blx	r3
		break;
    4b2c:	e0bf      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    4b2e:	2013      	movs	r0, #19
    4b30:	4b2f      	ldr	r3, [pc, #188]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b32:	4798      	blx	r3
		break;
    4b34:	e0bb      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    4b36:	2015      	movs	r0, #21
    4b38:	4b2d      	ldr	r3, [pc, #180]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b3a:	4798      	blx	r3
		break;
    4b3c:	e0b7      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    4b3e:	2016      	movs	r0, #22
    4b40:	4b2b      	ldr	r3, [pc, #172]	; (4bf0 <sysclk_enable_peripheral_clock+0x358>)
    4b42:	4798      	blx	r3
		break;
    4b44:	e0b3      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
    4b46:	bf00      	nop
    4b48:	40078000 	.word	0x40078000
    4b4c:	40028000 	.word	0x40028000
    4b50:	40018000 	.word	0x40018000
    4b54:	40008000 	.word	0x40008000
    4b58:	40010000 	.word	0x40010000
    4b5c:	40014000 	.word	0x40014000
    4b60:	4001c000 	.word	0x4001c000
    4b64:	40018400 	.word	0x40018400
    4b68:	4001c400 	.word	0x4001c400
    4b6c:	40024000 	.word	0x40024000
    4b70:	40040000 	.word	0x40040000
    4b74:	40030000 	.word	0x40030000
    4b78:	4002c000 	.word	0x4002c000
    4b7c:	40038000 	.word	0x40038000
    4b80:	4003c000 	.word	0x4003c000
    4b84:	40068000 	.word	0x40068000
    4b88:	40060000 	.word	0x40060000
    4b8c:	40064000 	.word	0x40064000
    4b90:	4006c000 	.word	0x4006c000
    4b94:	40070000 	.word	0x40070000
    4b98:	400e0000 	.word	0x400e0000
    4b9c:	400a1000 	.word	0x400a1000
    4ba0:	40080000 	.word	0x40080000
    4ba4:	4007c000 	.word	0x4007c000
    4ba8:	400a0000 	.word	0x400a0000
    4bac:	400a0400 	.word	0x400a0400
    4bb0:	400a5000 	.word	0x400a5000
    4bb4:	400a2000 	.word	0x400a2000
    4bb8:	400a4000 	.word	0x400a4000
    4bbc:	400a6000 	.word	0x400a6000
    4bc0:	400b0000 	.word	0x400b0000
    4bc4:	400f0000 	.word	0x400f0000
    4bc8:	400e0800 	.word	0x400e0800
    4bcc:	400e0400 	.word	0x400e0400
    4bd0:	400e0c00 	.word	0x400e0c00
    4bd4:	400e1000 	.word	0x400e1000
    4bd8:	400f0c00 	.word	0x400f0c00
    4bdc:	400f0400 	.word	0x400f0400
    4be0:	400f0800 	.word	0x400f0800
    4be4:	400f1000 	.word	0x400f1000
    4be8:	400f1400 	.word	0x400f1400
    4bec:	0000433d 	.word	0x0000433d
    4bf0:	0000451d 	.word	0x0000451d
    4bf4:	000043e5 	.word	0x000043e5

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    4bf8:	2017      	movs	r0, #23
    4bfa:	4b2e      	ldr	r3, [pc, #184]	; (4cb4 <sysclk_enable_peripheral_clock+0x41c>)
    4bfc:	4798      	blx	r3
		break;
    4bfe:	e056      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>
	#endif

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
    4c00:	2001      	movs	r0, #1
    4c02:	4b2d      	ldr	r3, [pc, #180]	; (4cb8 <sysclk_enable_peripheral_clock+0x420>)
    4c04:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    4c06:	2000      	movs	r0, #0
    4c08:	4b2c      	ldr	r3, [pc, #176]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c0a:	4798      	blx	r3
		break;
    4c0c:	e04f      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
    4c0e:	2002      	movs	r0, #2
    4c10:	4b29      	ldr	r3, [pc, #164]	; (4cb8 <sysclk_enable_peripheral_clock+0x420>)
    4c12:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    4c14:	2001      	movs	r0, #1
    4c16:	4b29      	ldr	r3, [pc, #164]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c18:	4798      	blx	r3
		break;
    4c1a:	e048      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    4c1c:	2002      	movs	r0, #2
    4c1e:	4b27      	ldr	r3, [pc, #156]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c20:	4798      	blx	r3
		break;
    4c22:	e044      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
    4c24:	2000      	movs	r0, #0
    4c26:	4b24      	ldr	r3, [pc, #144]	; (4cb8 <sysclk_enable_peripheral_clock+0x420>)
    4c28:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    4c2a:	2003      	movs	r0, #3
    4c2c:	4b23      	ldr	r3, [pc, #140]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c2e:	4798      	blx	r3
		break;
    4c30:	e03d      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
    4c32:	2004      	movs	r0, #4
    4c34:	4b20      	ldr	r3, [pc, #128]	; (4cb8 <sysclk_enable_peripheral_clock+0x420>)
    4c36:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    4c38:	2004      	movs	r0, #4
    4c3a:	4b20      	ldr	r3, [pc, #128]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c3c:	4798      	blx	r3
		break;
    4c3e:	e036      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
    4c40:	2003      	movs	r0, #3
    4c42:	4b1d      	ldr	r3, [pc, #116]	; (4cb8 <sysclk_enable_peripheral_clock+0x420>)
    4c44:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    4c46:	2005      	movs	r0, #5
    4c48:	4b1c      	ldr	r3, [pc, #112]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c4a:	4798      	blx	r3
		break;
    4c4c:	e02f      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    4c4e:	2006      	movs	r0, #6
    4c50:	4b1a      	ldr	r3, [pc, #104]	; (4cbc <sysclk_enable_peripheral_clock+0x424>)
    4c52:	4798      	blx	r3
		break;
    4c54:	e02b      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case PM_ADDR:
		sysclk_enable_pbc_module(SYSCLK_PM);
    4c56:	2000      	movs	r0, #0
    4c58:	4b19      	ldr	r3, [pc, #100]	; (4cc0 <sysclk_enable_peripheral_clock+0x428>)
    4c5a:	4798      	blx	r3
		break;
    4c5c:	e027      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case CHIPID_ADDR:
		sysclk_enable_pbc_module(SYSCLK_CHIPID);
    4c5e:	2001      	movs	r0, #1
    4c60:	4b17      	ldr	r3, [pc, #92]	; (4cc0 <sysclk_enable_peripheral_clock+0x428>)
    4c62:	4798      	blx	r3
		break;
    4c64:	e023      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case SCIF_ADDR:
		sysclk_enable_pbc_module(SYSCLK_SCIF);
    4c66:	2002      	movs	r0, #2
    4c68:	4b15      	ldr	r3, [pc, #84]	; (4cc0 <sysclk_enable_peripheral_clock+0x428>)
    4c6a:	4798      	blx	r3
		break;
    4c6c:	e01f      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case FREQM_ADDR:
		sysclk_enable_pbc_module(SYSCLK_FREQM);
    4c6e:	2003      	movs	r0, #3
    4c70:	4b13      	ldr	r3, [pc, #76]	; (4cc0 <sysclk_enable_peripheral_clock+0x428>)
    4c72:	4798      	blx	r3
		break;
    4c74:	e01b      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case GPIO_ADDR:
		sysclk_enable_pbc_module(SYSCLK_GPIO);
    4c76:	2004      	movs	r0, #4
    4c78:	4b11      	ldr	r3, [pc, #68]	; (4cc0 <sysclk_enable_peripheral_clock+0x428>)
    4c7a:	4798      	blx	r3
		break;
    4c7c:	e017      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case BPM_ADDR:
		sysclk_enable_pbd_module(SYSCLK_BPM);
    4c7e:	2000      	movs	r0, #0
    4c80:	4b10      	ldr	r3, [pc, #64]	; (4cc4 <sysclk_enable_peripheral_clock+0x42c>)
    4c82:	4798      	blx	r3
		break;
    4c84:	e013      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case BSCIF_ADDR:
		sysclk_enable_pbd_module(SYSCLK_BSCIF);
    4c86:	2001      	movs	r0, #1
    4c88:	4b0e      	ldr	r3, [pc, #56]	; (4cc4 <sysclk_enable_peripheral_clock+0x42c>)
    4c8a:	4798      	blx	r3
		break;
    4c8c:	e00f      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case AST_ADDR:
		sysclk_enable_pbd_module(SYSCLK_AST);
    4c8e:	2002      	movs	r0, #2
    4c90:	4b0c      	ldr	r3, [pc, #48]	; (4cc4 <sysclk_enable_peripheral_clock+0x42c>)
    4c92:	4798      	blx	r3
		break;
    4c94:	e00b      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case WDT_ADDR:
		sysclk_enable_pbd_module(SYSCLK_WDT);
    4c96:	2003      	movs	r0, #3
    4c98:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <sysclk_enable_peripheral_clock+0x42c>)
    4c9a:	4798      	blx	r3
		break;
    4c9c:	e007      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case EIC_ADDR:
		sysclk_enable_pbd_module(SYSCLK_EIC);
    4c9e:	2004      	movs	r0, #4
    4ca0:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <sysclk_enable_peripheral_clock+0x42c>)
    4ca2:	4798      	blx	r3
		break;
    4ca4:	e003      	b.n	4cae <sysclk_enable_peripheral_clock+0x416>

	case PICOUART_ADDR:
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
    4ca6:	2005      	movs	r0, #5
    4ca8:	4b06      	ldr	r3, [pc, #24]	; (4cc4 <sysclk_enable_peripheral_clock+0x42c>)
    4caa:	4798      	blx	r3
		break;
    4cac:	bf00      	nop

	default:
		Assert(false);
		return;
	}
}
    4cae:	3708      	adds	r7, #8
    4cb0:	46bd      	mov	sp, r7
    4cb2:	bd80      	pop	{r7, pc}
    4cb4:	0000451d 	.word	0x0000451d
    4cb8:	0000433d 	.word	0x0000433d
    4cbc:	000045a5 	.word	0x000045a5
    4cc0:	00004375 	.word	0x00004375
    4cc4:	000043ad 	.word	0x000043ad

00004cc8 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	b082      	sub	sp, #8
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	4aa7      	ldr	r2, [pc, #668]	; (4f70 <sysclk_disable_peripheral_clock+0x2a8>)
    4cd4:	4293      	cmp	r3, r2
    4cd6:	f000 8134 	beq.w	4f42 <sysclk_disable_peripheral_clock+0x27a>
    4cda:	4aa5      	ldr	r2, [pc, #660]	; (4f70 <sysclk_disable_peripheral_clock+0x2a8>)
    4cdc:	4293      	cmp	r3, r2
    4cde:	d86c      	bhi.n	4dba <sysclk_disable_peripheral_clock+0xf2>
    4ce0:	4aa4      	ldr	r2, [pc, #656]	; (4f74 <sysclk_disable_peripheral_clock+0x2ac>)
    4ce2:	4293      	cmp	r3, r2
    4ce4:	f000 8101 	beq.w	4eea <sysclk_disable_peripheral_clock+0x222>
    4ce8:	4aa2      	ldr	r2, [pc, #648]	; (4f74 <sysclk_disable_peripheral_clock+0x2ac>)
    4cea:	4293      	cmp	r3, r2
    4cec:	d830      	bhi.n	4d50 <sysclk_disable_peripheral_clock+0x88>
    4cee:	4aa2      	ldr	r2, [pc, #648]	; (4f78 <sysclk_disable_peripheral_clock+0x2b0>)
    4cf0:	4293      	cmp	r3, r2
    4cf2:	f000 80e6 	beq.w	4ec2 <sysclk_disable_peripheral_clock+0x1fa>
    4cf6:	4aa0      	ldr	r2, [pc, #640]	; (4f78 <sysclk_disable_peripheral_clock+0x2b0>)
    4cf8:	4293      	cmp	r3, r2
    4cfa:	d814      	bhi.n	4d26 <sysclk_disable_peripheral_clock+0x5e>
    4cfc:	4a9f      	ldr	r2, [pc, #636]	; (4f7c <sysclk_disable_peripheral_clock+0x2b4>)
    4cfe:	4293      	cmp	r3, r2
    4d00:	f000 80d3 	beq.w	4eaa <sysclk_disable_peripheral_clock+0x1e2>
    4d04:	4a9d      	ldr	r2, [pc, #628]	; (4f7c <sysclk_disable_peripheral_clock+0x2b4>)
    4d06:	4293      	cmp	r3, r2
    4d08:	d804      	bhi.n	4d14 <sysclk_disable_peripheral_clock+0x4c>
    4d0a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    4d0e:	f000 80c8 	beq.w	4ea2 <sysclk_disable_peripheral_clock+0x1da>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4d12:	e1d7      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4d14:	4a9a      	ldr	r2, [pc, #616]	; (4f80 <sysclk_disable_peripheral_clock+0x2b8>)
    4d16:	4293      	cmp	r3, r2
    4d18:	f000 80cb 	beq.w	4eb2 <sysclk_disable_peripheral_clock+0x1ea>
    4d1c:	4a99      	ldr	r2, [pc, #612]	; (4f84 <sysclk_disable_peripheral_clock+0x2bc>)
    4d1e:	4293      	cmp	r3, r2
    4d20:	f000 80cb 	beq.w	4eba <sysclk_disable_peripheral_clock+0x1f2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4d24:	e1ce      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4d26:	4a98      	ldr	r2, [pc, #608]	; (4f88 <sysclk_disable_peripheral_clock+0x2c0>)
    4d28:	4293      	cmp	r3, r2
    4d2a:	f000 80d2 	beq.w	4ed2 <sysclk_disable_peripheral_clock+0x20a>
    4d2e:	4a96      	ldr	r2, [pc, #600]	; (4f88 <sysclk_disable_peripheral_clock+0x2c0>)
    4d30:	4293      	cmp	r3, r2
    4d32:	d804      	bhi.n	4d3e <sysclk_disable_peripheral_clock+0x76>
    4d34:	4a95      	ldr	r2, [pc, #596]	; (4f8c <sysclk_disable_peripheral_clock+0x2c4>)
    4d36:	4293      	cmp	r3, r2
    4d38:	f000 80c7 	beq.w	4eca <sysclk_disable_peripheral_clock+0x202>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4d3c:	e1c2      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4d3e:	4a94      	ldr	r2, [pc, #592]	; (4f90 <sysclk_disable_peripheral_clock+0x2c8>)
    4d40:	4293      	cmp	r3, r2
    4d42:	f000 80ca 	beq.w	4eda <sysclk_disable_peripheral_clock+0x212>
    4d46:	4a93      	ldr	r2, [pc, #588]	; (4f94 <sysclk_disable_peripheral_clock+0x2cc>)
    4d48:	4293      	cmp	r3, r2
    4d4a:	f000 80ca 	beq.w	4ee2 <sysclk_disable_peripheral_clock+0x21a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4d4e:	e1b9      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4d50:	4a91      	ldr	r2, [pc, #580]	; (4f98 <sysclk_disable_peripheral_clock+0x2d0>)
    4d52:	4293      	cmp	r3, r2
    4d54:	f000 80dd 	beq.w	4f12 <sysclk_disable_peripheral_clock+0x24a>
    4d58:	4a8f      	ldr	r2, [pc, #572]	; (4f98 <sysclk_disable_peripheral_clock+0x2d0>)
    4d5a:	4293      	cmp	r3, r2
    4d5c:	d814      	bhi.n	4d88 <sysclk_disable_peripheral_clock+0xc0>
    4d5e:	4a8f      	ldr	r2, [pc, #572]	; (4f9c <sysclk_disable_peripheral_clock+0x2d4>)
    4d60:	4293      	cmp	r3, r2
    4d62:	f000 80ca 	beq.w	4efa <sysclk_disable_peripheral_clock+0x232>
    4d66:	4a8d      	ldr	r2, [pc, #564]	; (4f9c <sysclk_disable_peripheral_clock+0x2d4>)
    4d68:	4293      	cmp	r3, r2
    4d6a:	d804      	bhi.n	4d76 <sysclk_disable_peripheral_clock+0xae>
    4d6c:	4a8c      	ldr	r2, [pc, #560]	; (4fa0 <sysclk_disable_peripheral_clock+0x2d8>)
    4d6e:	4293      	cmp	r3, r2
    4d70:	f000 80bf 	beq.w	4ef2 <sysclk_disable_peripheral_clock+0x22a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4d74:	e1a6      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4d76:	4a8b      	ldr	r2, [pc, #556]	; (4fa4 <sysclk_disable_peripheral_clock+0x2dc>)
    4d78:	4293      	cmp	r3, r2
    4d7a:	f000 80c2 	beq.w	4f02 <sysclk_disable_peripheral_clock+0x23a>
    4d7e:	4a8a      	ldr	r2, [pc, #552]	; (4fa8 <sysclk_disable_peripheral_clock+0x2e0>)
    4d80:	4293      	cmp	r3, r2
    4d82:	f000 80c2 	beq.w	4f0a <sysclk_disable_peripheral_clock+0x242>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4d86:	e19d      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4d88:	4a88      	ldr	r2, [pc, #544]	; (4fac <sysclk_disable_peripheral_clock+0x2e4>)
    4d8a:	4293      	cmp	r3, r2
    4d8c:	f000 80cd 	beq.w	4f2a <sysclk_disable_peripheral_clock+0x262>
    4d90:	4a86      	ldr	r2, [pc, #536]	; (4fac <sysclk_disable_peripheral_clock+0x2e4>)
    4d92:	4293      	cmp	r3, r2
    4d94:	d808      	bhi.n	4da8 <sysclk_disable_peripheral_clock+0xe0>
    4d96:	4a86      	ldr	r2, [pc, #536]	; (4fb0 <sysclk_disable_peripheral_clock+0x2e8>)
    4d98:	4293      	cmp	r3, r2
    4d9a:	f000 80be 	beq.w	4f1a <sysclk_disable_peripheral_clock+0x252>
    4d9e:	4a85      	ldr	r2, [pc, #532]	; (4fb4 <sysclk_disable_peripheral_clock+0x2ec>)
    4da0:	4293      	cmp	r3, r2
    4da2:	f000 80be 	beq.w	4f22 <sysclk_disable_peripheral_clock+0x25a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4da6:	e18d      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4da8:	4a83      	ldr	r2, [pc, #524]	; (4fb8 <sysclk_disable_peripheral_clock+0x2f0>)
    4daa:	4293      	cmp	r3, r2
    4dac:	f000 80c1 	beq.w	4f32 <sysclk_disable_peripheral_clock+0x26a>
    4db0:	4a82      	ldr	r2, [pc, #520]	; (4fbc <sysclk_disable_peripheral_clock+0x2f4>)
    4db2:	4293      	cmp	r3, r2
    4db4:	f000 80c1 	beq.w	4f3a <sysclk_disable_peripheral_clock+0x272>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4db8:	e184      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4dba:	4a81      	ldr	r2, [pc, #516]	; (4fc0 <sysclk_disable_peripheral_clock+0x2f8>)
    4dbc:	4293      	cmp	r3, r2
    4dbe:	f000 814c 	beq.w	505a <sysclk_disable_peripheral_clock+0x392>
    4dc2:	4a7f      	ldr	r2, [pc, #508]	; (4fc0 <sysclk_disable_peripheral_clock+0x2f8>)
    4dc4:	4293      	cmp	r3, r2
    4dc6:	d833      	bhi.n	4e30 <sysclk_disable_peripheral_clock+0x168>
    4dc8:	4a7e      	ldr	r2, [pc, #504]	; (4fc4 <sysclk_disable_peripheral_clock+0x2fc>)
    4dca:	4293      	cmp	r3, r2
    4dcc:	f000 8128 	beq.w	5020 <sysclk_disable_peripheral_clock+0x358>
    4dd0:	4a7c      	ldr	r2, [pc, #496]	; (4fc4 <sysclk_disable_peripheral_clock+0x2fc>)
    4dd2:	4293      	cmp	r3, r2
    4dd4:	d814      	bhi.n	4e00 <sysclk_disable_peripheral_clock+0x138>
    4dd6:	4a7c      	ldr	r2, [pc, #496]	; (4fc8 <sysclk_disable_peripheral_clock+0x300>)
    4dd8:	4293      	cmp	r3, r2
    4dda:	f000 80ba 	beq.w	4f52 <sysclk_disable_peripheral_clock+0x28a>
    4dde:	4a7a      	ldr	r2, [pc, #488]	; (4fc8 <sysclk_disable_peripheral_clock+0x300>)
    4de0:	4293      	cmp	r3, r2
    4de2:	d804      	bhi.n	4dee <sysclk_disable_peripheral_clock+0x126>
    4de4:	4a79      	ldr	r2, [pc, #484]	; (4fcc <sysclk_disable_peripheral_clock+0x304>)
    4de6:	4293      	cmp	r3, r2
    4de8:	f000 80af 	beq.w	4f4a <sysclk_disable_peripheral_clock+0x282>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4dec:	e16a      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4dee:	4a78      	ldr	r2, [pc, #480]	; (4fd0 <sysclk_disable_peripheral_clock+0x308>)
    4df0:	4293      	cmp	r3, r2
    4df2:	f000 80b2 	beq.w	4f5a <sysclk_disable_peripheral_clock+0x292>
    4df6:	4a77      	ldr	r2, [pc, #476]	; (4fd4 <sysclk_disable_peripheral_clock+0x30c>)
    4df8:	4293      	cmp	r3, r2
    4dfa:	f000 80b2 	beq.w	4f62 <sysclk_disable_peripheral_clock+0x29a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4dfe:	e161      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4e00:	4a75      	ldr	r2, [pc, #468]	; (4fd8 <sysclk_disable_peripheral_clock+0x310>)
    4e02:	4293      	cmp	r3, r2
    4e04:	f000 811e 	beq.w	5044 <sysclk_disable_peripheral_clock+0x37c>
    4e08:	4a73      	ldr	r2, [pc, #460]	; (4fd8 <sysclk_disable_peripheral_clock+0x310>)
    4e0a:	4293      	cmp	r3, r2
    4e0c:	d808      	bhi.n	4e20 <sysclk_disable_peripheral_clock+0x158>
    4e0e:	4a73      	ldr	r2, [pc, #460]	; (4fdc <sysclk_disable_peripheral_clock+0x314>)
    4e10:	4293      	cmp	r3, r2
    4e12:	f000 8109 	beq.w	5028 <sysclk_disable_peripheral_clock+0x360>
    4e16:	4a72      	ldr	r2, [pc, #456]	; (4fe0 <sysclk_disable_peripheral_clock+0x318>)
    4e18:	4293      	cmp	r3, r2
    4e1a:	f000 810c 	beq.w	5036 <sysclk_disable_peripheral_clock+0x36e>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4e1e:	e151      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4e20:	4a70      	ldr	r2, [pc, #448]	; (4fe4 <sysclk_disable_peripheral_clock+0x31c>)
    4e22:	4293      	cmp	r3, r2
    4e24:	f000 8115 	beq.w	5052 <sysclk_disable_peripheral_clock+0x38a>
    4e28:	4a6f      	ldr	r2, [pc, #444]	; (4fe8 <sysclk_disable_peripheral_clock+0x320>)
    4e2a:	4293      	cmp	r3, r2
    4e2c:	d035      	beq.n	4e9a <sysclk_disable_peripheral_clock+0x1d2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4e2e:	e149      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4e30:	4a6e      	ldr	r2, [pc, #440]	; (4fec <sysclk_disable_peripheral_clock+0x324>)
    4e32:	4293      	cmp	r3, r2
    4e34:	f000 8125 	beq.w	5082 <sysclk_disable_peripheral_clock+0x3ba>
    4e38:	4a6c      	ldr	r2, [pc, #432]	; (4fec <sysclk_disable_peripheral_clock+0x324>)
    4e3a:	4293      	cmp	r3, r2
    4e3c:	d814      	bhi.n	4e68 <sysclk_disable_peripheral_clock+0x1a0>
    4e3e:	4a6c      	ldr	r2, [pc, #432]	; (4ff0 <sysclk_disable_peripheral_clock+0x328>)
    4e40:	4293      	cmp	r3, r2
    4e42:	f000 8112 	beq.w	506a <sysclk_disable_peripheral_clock+0x3a2>
    4e46:	4a6a      	ldr	r2, [pc, #424]	; (4ff0 <sysclk_disable_peripheral_clock+0x328>)
    4e48:	4293      	cmp	r3, r2
    4e4a:	d804      	bhi.n	4e56 <sysclk_disable_peripheral_clock+0x18e>
    4e4c:	4a69      	ldr	r2, [pc, #420]	; (4ff4 <sysclk_disable_peripheral_clock+0x32c>)
    4e4e:	4293      	cmp	r3, r2
    4e50:	f000 8107 	beq.w	5062 <sysclk_disable_peripheral_clock+0x39a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4e54:	e136      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4e56:	4a68      	ldr	r2, [pc, #416]	; (4ff8 <sysclk_disable_peripheral_clock+0x330>)
    4e58:	4293      	cmp	r3, r2
    4e5a:	f000 810a 	beq.w	5072 <sysclk_disable_peripheral_clock+0x3aa>
    4e5e:	4a67      	ldr	r2, [pc, #412]	; (4ffc <sysclk_disable_peripheral_clock+0x334>)
    4e60:	4293      	cmp	r3, r2
    4e62:	f000 810a 	beq.w	507a <sysclk_disable_peripheral_clock+0x3b2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4e66:	e12d      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4e68:	4a65      	ldr	r2, [pc, #404]	; (5000 <sysclk_disable_peripheral_clock+0x338>)
    4e6a:	4293      	cmp	r3, r2
    4e6c:	f000 8115 	beq.w	509a <sysclk_disable_peripheral_clock+0x3d2>
    4e70:	4a63      	ldr	r2, [pc, #396]	; (5000 <sysclk_disable_peripheral_clock+0x338>)
    4e72:	4293      	cmp	r3, r2
    4e74:	d808      	bhi.n	4e88 <sysclk_disable_peripheral_clock+0x1c0>
    4e76:	4a63      	ldr	r2, [pc, #396]	; (5004 <sysclk_disable_peripheral_clock+0x33c>)
    4e78:	4293      	cmp	r3, r2
    4e7a:	f000 8106 	beq.w	508a <sysclk_disable_peripheral_clock+0x3c2>
    4e7e:	4a62      	ldr	r2, [pc, #392]	; (5008 <sysclk_disable_peripheral_clock+0x340>)
    4e80:	4293      	cmp	r3, r2
    4e82:	f000 8106 	beq.w	5092 <sysclk_disable_peripheral_clock+0x3ca>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4e86:	e11d      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    4e88:	4a60      	ldr	r2, [pc, #384]	; (500c <sysclk_disable_peripheral_clock+0x344>)
    4e8a:	4293      	cmp	r3, r2
    4e8c:	f000 8109 	beq.w	50a2 <sysclk_disable_peripheral_clock+0x3da>
    4e90:	4a5f      	ldr	r2, [pc, #380]	; (5010 <sysclk_disable_peripheral_clock+0x348>)
    4e92:	4293      	cmp	r3, r2
    4e94:	f000 8109 	beq.w	50aa <sysclk_disable_peripheral_clock+0x3e2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    4e98:	e114      	b.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
{
	switch ((uintptr_t)module) {

	#if !SAM4LS
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
    4e9a:	2009      	movs	r0, #9
    4e9c:	4b5d      	ldr	r3, [pc, #372]	; (5014 <sysclk_disable_peripheral_clock+0x34c>)
    4e9e:	4798      	blx	r3
		break;
    4ea0:	e107      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>
	#endif

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    4ea2:	2000      	movs	r0, #0
    4ea4:	4b5c      	ldr	r3, [pc, #368]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ea6:	4798      	blx	r3
		break;
    4ea8:	e103      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    4eaa:	2001      	movs	r0, #1
    4eac:	4b5a      	ldr	r3, [pc, #360]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4eae:	4798      	blx	r3
		break;
    4eb0:	e0ff      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    4eb2:	2002      	movs	r0, #2
    4eb4:	4b58      	ldr	r3, [pc, #352]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4eb6:	4798      	blx	r3
		break;
    4eb8:	e0fb      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    4eba:	2003      	movs	r0, #3
    4ebc:	4b56      	ldr	r3, [pc, #344]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ebe:	4798      	blx	r3
		break;
    4ec0:	e0f7      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    4ec2:	2004      	movs	r0, #4
    4ec4:	4b54      	ldr	r3, [pc, #336]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ec6:	4798      	blx	r3
		break;
    4ec8:	e0f3      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    4eca:	2005      	movs	r0, #5
    4ecc:	4b52      	ldr	r3, [pc, #328]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ece:	4798      	blx	r3
		break;
    4ed0:	e0ef      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    4ed2:	2006      	movs	r0, #6
    4ed4:	4b50      	ldr	r3, [pc, #320]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ed6:	4798      	blx	r3
		break;
    4ed8:	e0eb      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    4eda:	2007      	movs	r0, #7
    4edc:	4b4e      	ldr	r3, [pc, #312]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ede:	4798      	blx	r3
		break;
    4ee0:	e0e7      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    4ee2:	2008      	movs	r0, #8
    4ee4:	4b4c      	ldr	r3, [pc, #304]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ee6:	4798      	blx	r3
		break;
    4ee8:	e0e3      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    4eea:	2009      	movs	r0, #9
    4eec:	4b4a      	ldr	r3, [pc, #296]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4eee:	4798      	blx	r3
		break;
    4ef0:	e0df      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    4ef2:	200a      	movs	r0, #10
    4ef4:	4b48      	ldr	r3, [pc, #288]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4ef6:	4798      	blx	r3
		break;
    4ef8:	e0db      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    4efa:	200b      	movs	r0, #11
    4efc:	4b46      	ldr	r3, [pc, #280]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4efe:	4798      	blx	r3
		break;
    4f00:	e0d7      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    4f02:	200c      	movs	r0, #12
    4f04:	4b44      	ldr	r3, [pc, #272]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f06:	4798      	blx	r3
		break;
    4f08:	e0d3      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    4f0a:	200d      	movs	r0, #13
    4f0c:	4b42      	ldr	r3, [pc, #264]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f0e:	4798      	blx	r3
		break;
    4f10:	e0cf      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    4f12:	200e      	movs	r0, #14
    4f14:	4b40      	ldr	r3, [pc, #256]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f16:	4798      	blx	r3
		break;
    4f18:	e0cb      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    4f1a:	200f      	movs	r0, #15
    4f1c:	4b3e      	ldr	r3, [pc, #248]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f1e:	4798      	blx	r3
		break;
    4f20:	e0c7      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    4f22:	2010      	movs	r0, #16
    4f24:	4b3c      	ldr	r3, [pc, #240]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f26:	4798      	blx	r3
		break;
    4f28:	e0c3      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    4f2a:	2011      	movs	r0, #17
    4f2c:	4b3a      	ldr	r3, [pc, #232]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f2e:	4798      	blx	r3
		break;
    4f30:	e0bf      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    4f32:	2012      	movs	r0, #18
    4f34:	4b38      	ldr	r3, [pc, #224]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f36:	4798      	blx	r3
		break;
    4f38:	e0bb      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    4f3a:	2013      	movs	r0, #19
    4f3c:	4b36      	ldr	r3, [pc, #216]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f3e:	4798      	blx	r3
		break;
    4f40:	e0b7      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    4f42:	2015      	movs	r0, #21
    4f44:	4b34      	ldr	r3, [pc, #208]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f46:	4798      	blx	r3
		break;
    4f48:	e0b3      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    4f4a:	2016      	movs	r0, #22
    4f4c:	4b32      	ldr	r3, [pc, #200]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f4e:	4798      	blx	r3
		break;
    4f50:	e0af      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    4f52:	2017      	movs	r0, #23
    4f54:	4b30      	ldr	r3, [pc, #192]	; (5018 <sysclk_disable_peripheral_clock+0x350>)
    4f56:	4798      	blx	r3
		break;
    4f58:	e0ab      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>
	#endif

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    4f5a:	2000      	movs	r0, #0
    4f5c:	4b2f      	ldr	r3, [pc, #188]	; (501c <sysclk_disable_peripheral_clock+0x354>)
    4f5e:	4798      	blx	r3
		break;
    4f60:	e0a7      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
    4f62:	2002      	movs	r0, #2
    4f64:	4b2b      	ldr	r3, [pc, #172]	; (5014 <sysclk_disable_peripheral_clock+0x34c>)
    4f66:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    4f68:	2001      	movs	r0, #1
    4f6a:	4b2c      	ldr	r3, [pc, #176]	; (501c <sysclk_disable_peripheral_clock+0x354>)
    4f6c:	4798      	blx	r3
		break;
    4f6e:	e0a0      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>
    4f70:	40078000 	.word	0x40078000
    4f74:	40028000 	.word	0x40028000
    4f78:	40018000 	.word	0x40018000
    4f7c:	40008000 	.word	0x40008000
    4f80:	40010000 	.word	0x40010000
    4f84:	40014000 	.word	0x40014000
    4f88:	4001c000 	.word	0x4001c000
    4f8c:	40018400 	.word	0x40018400
    4f90:	4001c400 	.word	0x4001c400
    4f94:	40024000 	.word	0x40024000
    4f98:	40040000 	.word	0x40040000
    4f9c:	40030000 	.word	0x40030000
    4fa0:	4002c000 	.word	0x4002c000
    4fa4:	40038000 	.word	0x40038000
    4fa8:	4003c000 	.word	0x4003c000
    4fac:	40068000 	.word	0x40068000
    4fb0:	40060000 	.word	0x40060000
    4fb4:	40064000 	.word	0x40064000
    4fb8:	4006c000 	.word	0x4006c000
    4fbc:	40070000 	.word	0x40070000
    4fc0:	400e0000 	.word	0x400e0000
    4fc4:	400a1000 	.word	0x400a1000
    4fc8:	40080000 	.word	0x40080000
    4fcc:	4007c000 	.word	0x4007c000
    4fd0:	400a0000 	.word	0x400a0000
    4fd4:	400a0400 	.word	0x400a0400
    4fd8:	400a5000 	.word	0x400a5000
    4fdc:	400a2000 	.word	0x400a2000
    4fe0:	400a4000 	.word	0x400a4000
    4fe4:	400a6000 	.word	0x400a6000
    4fe8:	400b0000 	.word	0x400b0000
    4fec:	400f0000 	.word	0x400f0000
    4ff0:	400e0800 	.word	0x400e0800
    4ff4:	400e0400 	.word	0x400e0400
    4ff8:	400e0c00 	.word	0x400e0c00
    4ffc:	400e1000 	.word	0x400e1000
    5000:	400f0c00 	.word	0x400f0c00
    5004:	400f0400 	.word	0x400f0400
    5008:	400f0800 	.word	0x400f0800
    500c:	400f1000 	.word	0x400f1000
    5010:	400f1400 	.word	0x400f1400
    5014:	00004359 	.word	0x00004359
    5018:	00004561 	.word	0x00004561
    501c:	000045e9 	.word	0x000045e9

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    5020:	2002      	movs	r0, #2
    5022:	4b2a      	ldr	r3, [pc, #168]	; (50cc <sysclk_disable_peripheral_clock+0x404>)
    5024:	4798      	blx	r3
		break;
    5026:	e044      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
    5028:	2000      	movs	r0, #0
    502a:	4b29      	ldr	r3, [pc, #164]	; (50d0 <sysclk_disable_peripheral_clock+0x408>)
    502c:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    502e:	2003      	movs	r0, #3
    5030:	4b26      	ldr	r3, [pc, #152]	; (50cc <sysclk_disable_peripheral_clock+0x404>)
    5032:	4798      	blx	r3
		break;
    5034:	e03d      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
    5036:	2004      	movs	r0, #4
    5038:	4b25      	ldr	r3, [pc, #148]	; (50d0 <sysclk_disable_peripheral_clock+0x408>)
    503a:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    503c:	2004      	movs	r0, #4
    503e:	4b23      	ldr	r3, [pc, #140]	; (50cc <sysclk_disable_peripheral_clock+0x404>)
    5040:	4798      	blx	r3
		break;
    5042:	e036      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
    5044:	2003      	movs	r0, #3
    5046:	4b22      	ldr	r3, [pc, #136]	; (50d0 <sysclk_disable_peripheral_clock+0x408>)
    5048:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    504a:	2005      	movs	r0, #5
    504c:	4b1f      	ldr	r3, [pc, #124]	; (50cc <sysclk_disable_peripheral_clock+0x404>)
    504e:	4798      	blx	r3
		break;
    5050:	e02f      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    5052:	2006      	movs	r0, #6
    5054:	4b1d      	ldr	r3, [pc, #116]	; (50cc <sysclk_disable_peripheral_clock+0x404>)
    5056:	4798      	blx	r3
		break;
    5058:	e02b      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case PM_ADDR:
		sysclk_disable_pbc_module(SYSCLK_PM);
    505a:	2000      	movs	r0, #0
    505c:	4b1d      	ldr	r3, [pc, #116]	; (50d4 <sysclk_disable_peripheral_clock+0x40c>)
    505e:	4798      	blx	r3
		break;
    5060:	e027      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case CHIPID_ADDR:
		sysclk_disable_pbc_module(SYSCLK_CHIPID);
    5062:	2001      	movs	r0, #1
    5064:	4b1b      	ldr	r3, [pc, #108]	; (50d4 <sysclk_disable_peripheral_clock+0x40c>)
    5066:	4798      	blx	r3
		break;
    5068:	e023      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case SCIF_ADDR:
		sysclk_disable_pbc_module(SYSCLK_SCIF);
    506a:	2002      	movs	r0, #2
    506c:	4b19      	ldr	r3, [pc, #100]	; (50d4 <sysclk_disable_peripheral_clock+0x40c>)
    506e:	4798      	blx	r3
		break;
    5070:	e01f      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case FREQM_ADDR:
		sysclk_disable_pbc_module(SYSCLK_FREQM);
    5072:	2003      	movs	r0, #3
    5074:	4b17      	ldr	r3, [pc, #92]	; (50d4 <sysclk_disable_peripheral_clock+0x40c>)
    5076:	4798      	blx	r3
		break;
    5078:	e01b      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case GPIO_ADDR:
		sysclk_disable_pbc_module(SYSCLK_GPIO);
    507a:	2004      	movs	r0, #4
    507c:	4b15      	ldr	r3, [pc, #84]	; (50d4 <sysclk_disable_peripheral_clock+0x40c>)
    507e:	4798      	blx	r3
		break;
    5080:	e017      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case BPM_ADDR:
		sysclk_disable_pbd_module(SYSCLK_BPM);
    5082:	2000      	movs	r0, #0
    5084:	4b14      	ldr	r3, [pc, #80]	; (50d8 <sysclk_disable_peripheral_clock+0x410>)
    5086:	4798      	blx	r3
		break;
    5088:	e013      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case BSCIF_ADDR:
		sysclk_disable_pbd_module(SYSCLK_BSCIF);
    508a:	2001      	movs	r0, #1
    508c:	4b12      	ldr	r3, [pc, #72]	; (50d8 <sysclk_disable_peripheral_clock+0x410>)
    508e:	4798      	blx	r3
		break;
    5090:	e00f      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case AST_ADDR:
		sysclk_disable_pbd_module(SYSCLK_AST);
    5092:	2002      	movs	r0, #2
    5094:	4b10      	ldr	r3, [pc, #64]	; (50d8 <sysclk_disable_peripheral_clock+0x410>)
    5096:	4798      	blx	r3
		break;
    5098:	e00b      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case WDT_ADDR:
		sysclk_disable_pbd_module(SYSCLK_WDT);
    509a:	2003      	movs	r0, #3
    509c:	4b0e      	ldr	r3, [pc, #56]	; (50d8 <sysclk_disable_peripheral_clock+0x410>)
    509e:	4798      	blx	r3
		break;
    50a0:	e007      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case EIC_ADDR:
		sysclk_disable_pbd_module(SYSCLK_EIC);
    50a2:	2004      	movs	r0, #4
    50a4:	4b0c      	ldr	r3, [pc, #48]	; (50d8 <sysclk_disable_peripheral_clock+0x410>)
    50a6:	4798      	blx	r3
		break;
    50a8:	e003      	b.n	50b2 <sysclk_disable_peripheral_clock+0x3ea>

	case PICOUART_ADDR:
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
    50aa:	2005      	movs	r0, #5
    50ac:	4b0a      	ldr	r3, [pc, #40]	; (50d8 <sysclk_disable_peripheral_clock+0x410>)
    50ae:	4798      	blx	r3
		break;
    50b0:	bf00      	nop
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    50b2:	4b0a      	ldr	r3, [pc, #40]	; (50dc <sysclk_disable_peripheral_clock+0x414>)
    50b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50b6:	f003 030b 	and.w	r3, r3, #11
    50ba:	2b00      	cmp	r3, #0
    50bc:	d102      	bne.n	50c4 <sysclk_disable_peripheral_clock+0x3fc>
		sysclk_disable_pba_divmask(PBA_DIVMASK_Msk);
    50be:	207f      	movs	r0, #127	; 0x7f
    50c0:	4b07      	ldr	r3, [pc, #28]	; (50e0 <sysclk_disable_peripheral_clock+0x418>)
    50c2:	4798      	blx	r3
	}
}
    50c4:	3708      	adds	r7, #8
    50c6:	46bd      	mov	sp, r7
    50c8:	bd80      	pop	{r7, pc}
    50ca:	bf00      	nop
    50cc:	000045e9 	.word	0x000045e9
    50d0:	00004359 	.word	0x00004359
    50d4:	00004391 	.word	0x00004391
    50d8:	000043c9 	.word	0x000043c9
    50dc:	400e0000 	.word	0x400e0000
    50e0:	00004419 	.word	0x00004419

000050e4 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint32_t src)
{
    50e4:	b580      	push	{r7, lr}
    50e6:	b084      	sub	sp, #16
    50e8:	af00      	add	r7, sp, #0
    50ea:	6078      	str	r0, [r7, #4]
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
    50ec:	4b07      	ldr	r3, [pc, #28]	; (510c <sysclk_set_source+0x28>)
    50ee:	4798      	blx	r3
    50f0:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    50f2:	4b07      	ldr	r3, [pc, #28]	; (5110 <sysclk_set_source+0x2c>)
    50f4:	f04f 422a 	mov.w	r2, #2852126720	; 0xaa000000
    50f8:	659a      	str	r2, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    50fa:	4b05      	ldr	r3, [pc, #20]	; (5110 <sysclk_set_source+0x2c>)
    50fc:	687a      	ldr	r2, [r7, #4]
    50fe:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
    5100:	68f8      	ldr	r0, [r7, #12]
    5102:	4b04      	ldr	r3, [pc, #16]	; (5114 <sysclk_set_source+0x30>)
    5104:	4798      	blx	r3
}
    5106:	3710      	adds	r7, #16
    5108:	46bd      	mov	sp, r7
    510a:	bd80      	pop	{r7, pc}
    510c:	00003ea9 	.word	0x00003ea9
    5110:	400e0000 	.word	0x400e0000
    5114:	00003f01 	.word	0x00003f01

00005118 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    5118:	b580      	push	{r7, lr}
    511a:	b086      	sub	sp, #24
    511c:	af00      	add	r7, sp, #0
	uint32_t ps_value = 0;
    511e:	2300      	movs	r3, #0
    5120:	617b      	str	r3, [r7, #20]
	bool is_fwu_enabled = false;
    5122:	2300      	movs	r3, #0
    5124:	74fb      	strb	r3, [r7, #19]

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    5126:	482b      	ldr	r0, [pc, #172]	; (51d4 <sysclk_init+0xbc>)
    5128:	4b2b      	ldr	r3, [pc, #172]	; (51d8 <sysclk_init+0xc0>)
    512a:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    512c:	4b29      	ldr	r3, [pc, #164]	; (51d4 <sysclk_init+0xbc>)
    512e:	2201      	movs	r2, #1
    5130:	609a      	str	r2, [r3, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    5132:	bf00      	nop
    5134:	4b27      	ldr	r3, [pc, #156]	; (51d4 <sysclk_init+0xbc>)
    5136:	68db      	ldr	r3, [r3, #12]
    5138:	f003 0301 	and.w	r3, r3, #1
    513c:	2b00      	cmp	r3, #0
    513e:	d0f9      	beq.n	5134 <sysclk_init+0x1c>
	/* Automatically select best power scaling mode */
#ifdef CONFIG_FLASH_READ_MODE_HIGH_SPEED_ENABLE
	ps_value = BPM_PS_2;
	is_fwu_enabled = false;
#else
	if (sysclk_get_cpu_hz() <= FLASH_FREQ_PS1_FWS_1_MAX_FREQ) {
    5140:	4b26      	ldr	r3, [pc, #152]	; (51dc <sysclk_init+0xc4>)
    5142:	4798      	blx	r3
    5144:	4602      	mov	r2, r0
    5146:	4b26      	ldr	r3, [pc, #152]	; (51e0 <sysclk_init+0xc8>)
    5148:	429a      	cmp	r2, r3
    514a:	d80d      	bhi.n	5168 <sysclk_init+0x50>
		ps_value = BPM_PS_1;
    514c:	2301      	movs	r3, #1
    514e:	617b      	str	r3, [r7, #20]
		if (sysclk_get_cpu_hz() > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) {
    5150:	4b22      	ldr	r3, [pc, #136]	; (51dc <sysclk_init+0xc4>)
    5152:	4798      	blx	r3
    5154:	4602      	mov	r2, r0
    5156:	4b23      	ldr	r3, [pc, #140]	; (51e4 <sysclk_init+0xcc>)
    5158:	429a      	cmp	r2, r3
    515a:	d907      	bls.n	516c <sysclk_init+0x54>
			bpm_enable_fast_wakeup(BPM);
    515c:	4822      	ldr	r0, [pc, #136]	; (51e8 <sysclk_init+0xd0>)
    515e:	4b23      	ldr	r3, [pc, #140]	; (51ec <sysclk_init+0xd4>)
    5160:	4798      	blx	r3
			is_fwu_enabled = true;
    5162:	2301      	movs	r3, #1
    5164:	74fb      	strb	r3, [r7, #19]
    5166:	e001      	b.n	516c <sysclk_init+0x54>
		}
	} else {
		ps_value = BPM_PS_0;
    5168:	2300      	movs	r3, #0
    516a:	617b      	str	r3, [r7, #20]
		sysclk_set_source(SYSCLK_SRC_DFLL);
	}
#endif
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		pll_enable_config_defaults(0);
    516c:	2000      	movs	r0, #0
    516e:	4b20      	ldr	r3, [pc, #128]	; (51f0 <sysclk_init+0xd8>)
    5170:	4798      	blx	r3
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    5172:	4b1a      	ldr	r3, [pc, #104]	; (51dc <sysclk_init+0xc4>)
    5174:	4798      	blx	r3
    5176:	4602      	mov	r2, r0
    5178:	7cfb      	ldrb	r3, [r7, #19]
    517a:	4610      	mov	r0, r2
    517c:	6979      	ldr	r1, [r7, #20]
    517e:	461a      	mov	r2, r3
    5180:	4b1c      	ldr	r3, [pc, #112]	; (51f4 <sysclk_init+0xdc>)
    5182:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_PLL0);
    5184:	2002      	movs	r0, #2
    5186:	4b1c      	ldr	r3, [pc, #112]	; (51f8 <sysclk_init+0xe0>)
    5188:	4798      	blx	r3
    518a:	4b17      	ldr	r3, [pc, #92]	; (51e8 <sysclk_init+0xd0>)
    518c:	60bb      	str	r3, [r7, #8]
    518e:	697b      	ldr	r3, [r7, #20]
    5190:	607b      	str	r3, [r7, #4]
    5192:	2301      	movs	r3, #1
    5194:	603b      	str	r3, [r7, #0]
 * \return true if no error.
 */
__always_inline static
bool bpm_configure_power_scaling(Bpm *bpm, uint32_t ps_value, uint32_t no_halt)
{
	if (!no_halt) {
    5196:	683b      	ldr	r3, [r7, #0]
    5198:	2b00      	cmp	r3, #0
    519a:	d104      	bne.n	51a6 <sysclk_init+0x8e>
		bpm_power_scaling_cpu(bpm, ps_value);
    519c:	68b8      	ldr	r0, [r7, #8]
    519e:	6879      	ldr	r1, [r7, #4]
    51a0:	4b16      	ldr	r3, [pc, #88]	; (51fc <sysclk_init+0xe4>)
    51a2:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    51a4:	e004      	b.n	51b0 <sysclk_init+0x98>
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    51a6:	68b8      	ldr	r0, [r7, #8]
    51a8:	6879      	ldr	r1, [r7, #4]
    51aa:	4a15      	ldr	r2, [pc, #84]	; (5200 <sysclk_init+0xe8>)
    51ac:	4b15      	ldr	r3, [pc, #84]	; (5204 <sysclk_init+0xec>)
    51ae:	4798      	blx	r3
    51b0:	bf00      	nop
    51b2:	480d      	ldr	r0, [pc, #52]	; (51e8 <sysclk_init+0xd0>)
    51b4:	4b14      	ldr	r3, [pc, #80]	; (5208 <sysclk_init+0xf0>)
    51b6:	4798      	blx	r3
    51b8:	4603      	mov	r3, r0
    51ba:	f003 0301 	and.w	r3, r3, #1
    51be:	2b00      	cmp	r3, #0
    51c0:	d0f7      	beq.n	51b2 <sysclk_init+0x9a>

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
    51c2:	4b12      	ldr	r3, [pc, #72]	; (520c <sysclk_init+0xf4>)
    51c4:	4798      	blx	r3
    51c6:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDMASK - (uint32_t)PM);
	PM->PM_PBDMASK = SYSCLK_INIT_MINIMAL_PBDMASK | CONFIG_SYSCLK_INIT_PBDMASK;
#endif

	cpu_irq_restore(flags);
    51c8:	68f8      	ldr	r0, [r7, #12]
    51ca:	4b11      	ldr	r3, [pc, #68]	; (5210 <sysclk_init+0xf8>)
    51cc:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    51ce:	3718      	adds	r7, #24
    51d0:	46bd      	mov	sp, r7
    51d2:	bd80      	pop	{r7, pc}
    51d4:	400a0400 	.word	0x400a0400
    51d8:	00004899 	.word	0x00004899
    51dc:	000042d9 	.word	0x000042d9
    51e0:	00b71b00 	.word	0x00b71b00
    51e4:	007a1200 	.word	0x007a1200
    51e8:	400f0000 	.word	0x400f0000
    51ec:	000057f5 	.word	0x000057f5
    51f0:	00004255 	.word	0x00004255
    51f4:	000059b9 	.word	0x000059b9
    51f8:	000050e5 	.word	0x000050e5
    51fc:	0000579d 	.word	0x0000579d
    5200:	0003a980 	.word	0x0003a980
    5204:	000056f9 	.word	0x000056f9
    5208:	00005825 	.word	0x00005825
    520c:	00003ea9 	.word	0x00003ea9
    5210:	00003f01 	.word	0x00003f01

00005214 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
    5214:	b580      	push	{r7, lr}
    5216:	af00      	add	r7, sp, #0
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    5218:	4801      	ldr	r0, [pc, #4]	; (5220 <ioport_init+0xc>)
    521a:	4b02      	ldr	r3, [pc, #8]	; (5224 <ioport_init+0x10>)
    521c:	4798      	blx	r3
	arch_ioport_init();
}
    521e:	bd80      	pop	{r7, pc}
    5220:	400e1000 	.word	0x400e1000
    5224:	00004899 	.word	0x00004899

00005228 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
    5228:	b480      	push	{r7}
    522a:	b089      	sub	sp, #36	; 0x24
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	61fb      	str	r3, [r7, #28]
    5234:	69fb      	ldr	r3, [r7, #28]
    5236:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    5238:	69bb      	ldr	r3, [r7, #24]
    523a:	095a      	lsrs	r2, r3, #5
    523c:	69fb      	ldr	r3, [r7, #28]
    523e:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    5240:	697b      	ldr	r3, [r7, #20]
    5242:	f003 031f 	and.w	r3, r3, #31
    5246:	2101      	movs	r1, #1
    5248:	fa01 f303 	lsl.w	r3, r1, r3
    524c:	613a      	str	r2, [r7, #16]
    524e:	60fb      	str	r3, [r7, #12]
    5250:	693b      	ldr	r3, [r7, #16]
    5252:	60bb      	str	r3, [r7, #8]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    5254:	68bb      	ldr	r3, [r7, #8]
    5256:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    525a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    525e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    5260:	68fa      	ldr	r2, [r7, #12]
    5262:	609a      	str	r2, [r3, #8]
	arch_ioport_disable_pin(pin);
}
    5264:	3724      	adds	r7, #36	; 0x24
    5266:	46bd      	mov	sp, r7
    5268:	f85d 7b04 	ldr.w	r7, [sp], #4
    526c:	4770      	bx	lr
    526e:	bf00      	nop

00005270 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    5270:	b480      	push	{r7}
    5272:	b08d      	sub	sp, #52	; 0x34
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
    5278:	6039      	str	r1, [r7, #0]
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	62fb      	str	r3, [r7, #44]	; 0x2c
    527e:	683b      	ldr	r3, [r7, #0]
    5280:	62bb      	str	r3, [r7, #40]	; 0x28
    5282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5284:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    5286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5288:	095a      	lsrs	r2, r3, #5
    528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    528c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    528e:	6a3b      	ldr	r3, [r7, #32]
    5290:	f003 031f 	and.w	r3, r3, #31
    5294:	2101      	movs	r1, #1
    5296:	fa01 f303 	lsl.w	r3, r1, r3
    529a:	61fa      	str	r2, [r7, #28]
    529c:	61bb      	str	r3, [r7, #24]
    529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52a0:	617b      	str	r3, [r7, #20]
    52a2:	69fb      	ldr	r3, [r7, #28]
    52a4:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    52a6:	693b      	ldr	r3, [r7, #16]
    52a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    52ac:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    52b0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    52b2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    52b4:	697b      	ldr	r3, [r7, #20]
    52b6:	f003 0308 	and.w	r3, r3, #8
    52ba:	2b00      	cmp	r3, #0
    52bc:	d003      	beq.n	52c6 <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    52be:	68fb      	ldr	r3, [r7, #12]
    52c0:	69ba      	ldr	r2, [r7, #24]
    52c2:	675a      	str	r2, [r3, #116]	; 0x74
    52c4:	e002      	b.n	52cc <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    52c6:	68fb      	ldr	r3, [r7, #12]
    52c8:	69ba      	ldr	r2, [r7, #24]
    52ca:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    52cc:	697b      	ldr	r3, [r7, #20]
    52ce:	f003 0310 	and.w	r3, r3, #16
    52d2:	2b00      	cmp	r3, #0
    52d4:	d004      	beq.n	52e0 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    52d6:	68fb      	ldr	r3, [r7, #12]
    52d8:	69ba      	ldr	r2, [r7, #24]
    52da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    52de:	e003      	b.n	52e8 <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    52e0:	68fb      	ldr	r3, [r7, #12]
    52e2:	69ba      	ldr	r2, [r7, #24]
    52e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    52e8:	697b      	ldr	r3, [r7, #20]
    52ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
    52ee:	2b00      	cmp	r3, #0
    52f0:	d004      	beq.n	52fc <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    52f2:	68fb      	ldr	r3, [r7, #12]
    52f4:	69ba      	ldr	r2, [r7, #24]
    52f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    52fa:	e003      	b.n	5304 <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    52fc:	68fb      	ldr	r3, [r7, #12]
    52fe:	69ba      	ldr	r2, [r7, #24]
    5300:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    5304:	697b      	ldr	r3, [r7, #20]
    5306:	f003 0380 	and.w	r3, r3, #128	; 0x80
    530a:	2b00      	cmp	r3, #0
    530c:	d004      	beq.n	5318 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    530e:	68fb      	ldr	r3, [r7, #12]
    5310:	69ba      	ldr	r2, [r7, #24]
    5312:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5316:	e003      	b.n	5320 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    5318:	68fb      	ldr	r3, [r7, #12]
    531a:	69ba      	ldr	r2, [r7, #24]
    531c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    5320:	697b      	ldr	r3, [r7, #20]
    5322:	f003 0301 	and.w	r3, r3, #1
    5326:	2b00      	cmp	r3, #0
    5328:	d003      	beq.n	5332 <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    532a:	68fb      	ldr	r3, [r7, #12]
    532c:	69ba      	ldr	r2, [r7, #24]
    532e:	615a      	str	r2, [r3, #20]
    5330:	e002      	b.n	5338 <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    5332:	68fb      	ldr	r3, [r7, #12]
    5334:	69ba      	ldr	r2, [r7, #24]
    5336:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    5338:	697b      	ldr	r3, [r7, #20]
    533a:	f003 0302 	and.w	r3, r3, #2
    533e:	2b00      	cmp	r3, #0
    5340:	d003      	beq.n	534a <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    5342:	68fb      	ldr	r3, [r7, #12]
    5344:	69ba      	ldr	r2, [r7, #24]
    5346:	625a      	str	r2, [r3, #36]	; 0x24
    5348:	e002      	b.n	5350 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    534a:	68fb      	ldr	r3, [r7, #12]
    534c:	69ba      	ldr	r2, [r7, #24]
    534e:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    5350:	697b      	ldr	r3, [r7, #20]
    5352:	f003 0304 	and.w	r3, r3, #4
    5356:	2b00      	cmp	r3, #0
    5358:	d003      	beq.n	5362 <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    535a:	68fb      	ldr	r3, [r7, #12]
    535c:	69ba      	ldr	r2, [r7, #24]
    535e:	635a      	str	r2, [r3, #52]	; 0x34
    5360:	e002      	b.n	5368 <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    5362:	68fb      	ldr	r3, [r7, #12]
    5364:	69ba      	ldr	r2, [r7, #24]
    5366:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_set_pin_mode(pin, mode);
}
    5368:	3734      	adds	r7, #52	; 0x34
    536a:	46bd      	mov	sp, r7
    536c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5370:	4770      	bx	lr
    5372:	bf00      	nop

00005374 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    5374:	b480      	push	{r7}
    5376:	b095      	sub	sp, #84	; 0x54
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
    537c:	460b      	mov	r3, r1
    537e:	70fb      	strb	r3, [r7, #3]
    5380:	687b      	ldr	r3, [r7, #4]
    5382:	64fb      	str	r3, [r7, #76]	; 0x4c
    5384:	78fb      	ldrb	r3, [r7, #3]
    5386:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    538a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    538e:	2b01      	cmp	r3, #1
    5390:	d12d      	bne.n	53ee <ioport_set_pin_dir+0x7a>
    5392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5394:	647b      	str	r3, [r7, #68]	; 0x44
    5396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5398:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    539c:	095b      	lsrs	r3, r3, #5
    539e:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    53a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    53a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    53a6:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    53aa:	025b      	lsls	r3, r3, #9
    53ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    53ae:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    53b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    53b2:	f002 021f 	and.w	r2, r2, #31
    53b6:	2101      	movs	r1, #1
    53b8:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    53bc:	645a      	str	r2, [r3, #68]	; 0x44
    53be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53c0:	637b      	str	r3, [r7, #52]	; 0x34
    53c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53c4:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    53c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    53c8:	095b      	lsrs	r3, r3, #5
    53ca:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    53cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    53ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    53d2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    53d6:	025b      	lsls	r3, r3, #9
    53d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    53da:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    53dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    53de:	f002 021f 	and.w	r2, r2, #31
    53e2:	2101      	movs	r1, #1
    53e4:	fa01 f202 	lsl.w	r2, r1, r2
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    53e8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    53ec:	e030      	b.n	5450 <ioport_set_pin_dir+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
    53ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    53f2:	2b00      	cmp	r3, #0
    53f4:	d12c      	bne.n	5450 <ioport_set_pin_dir+0xdc>
    53f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53f8:	627b      	str	r3, [r7, #36]	; 0x24
    53fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    53fc:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    53fe:	6a3b      	ldr	r3, [r7, #32]
    5400:	095b      	lsrs	r3, r3, #5
    5402:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    5404:	69fb      	ldr	r3, [r7, #28]
    5406:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    540a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    540e:	025b      	lsls	r3, r3, #9
    5410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5412:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    5414:	69ba      	ldr	r2, [r7, #24]
    5416:	f002 021f 	and.w	r2, r2, #31
    541a:	2101      	movs	r1, #1
    541c:	fa01 f202 	lsl.w	r2, r1, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    5420:	649a      	str	r2, [r3, #72]	; 0x48
    5422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5424:	617b      	str	r3, [r7, #20]
    5426:	697b      	ldr	r3, [r7, #20]
    5428:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    542a:	693b      	ldr	r3, [r7, #16]
    542c:	095b      	lsrs	r3, r3, #5
    542e:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    5430:	68fb      	ldr	r3, [r7, #12]
    5432:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5436:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    543a:	025b      	lsls	r3, r3, #9
    543c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    543e:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    5440:	68ba      	ldr	r2, [r7, #8]
    5442:	f002 021f 	and.w	r2, r2, #31
    5446:	2101      	movs	r1, #1
    5448:	fa01 f202 	lsl.w	r2, r1, r2
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    544c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	arch_ioport_set_pin_dir(pin, dir);
}
    5450:	3754      	adds	r7, #84	; 0x54
    5452:	46bd      	mov	sp, r7
    5454:	f85d 7b04 	ldr.w	r7, [sp], #4
    5458:	4770      	bx	lr
    545a:	bf00      	nop

0000545c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    545c:	b480      	push	{r7}
    545e:	b08d      	sub	sp, #52	; 0x34
    5460:	af00      	add	r7, sp, #0
    5462:	6078      	str	r0, [r7, #4]
    5464:	460b      	mov	r3, r1
    5466:	70fb      	strb	r3, [r7, #3]
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	62fb      	str	r3, [r7, #44]	; 0x2c
    546c:	78fb      	ldrb	r3, [r7, #3]
    546e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    5472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    5476:	2b00      	cmp	r3, #0
    5478:	d016      	beq.n	54a8 <ioport_set_pin_level+0x4c>
    547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    547c:	627b      	str	r3, [r7, #36]	; 0x24
    547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5480:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    5482:	6a3b      	ldr	r3, [r7, #32]
    5484:	095b      	lsrs	r3, r3, #5
    5486:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    5488:	69fb      	ldr	r3, [r7, #28]
    548a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    548e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    5492:	025b      	lsls	r3, r3, #9
    5494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5496:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    5498:	69ba      	ldr	r2, [r7, #24]
    549a:	f002 021f 	and.w	r2, r2, #31
    549e:	2101      	movs	r1, #1
    54a0:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    54a4:	655a      	str	r2, [r3, #84]	; 0x54
    54a6:	e015      	b.n	54d4 <ioport_set_pin_level+0x78>
    54a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54aa:	617b      	str	r3, [r7, #20]
    54ac:	697b      	ldr	r3, [r7, #20]
    54ae:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    54b0:	693b      	ldr	r3, [r7, #16]
    54b2:	095b      	lsrs	r3, r3, #5
    54b4:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    54b6:	68fb      	ldr	r3, [r7, #12]
    54b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    54bc:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    54c0:	025b      	lsls	r3, r3, #9
    54c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    54c4:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    54c6:	68ba      	ldr	r2, [r7, #8]
    54c8:	f002 021f 	and.w	r2, r2, #31
    54cc:	2101      	movs	r1, #1
    54ce:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    54d2:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(pin, level);
}
    54d4:	3734      	adds	r7, #52	; 0x34
    54d6:	46bd      	mov	sp, r7
    54d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    54dc:	4770      	bx	lr
    54de:	bf00      	nop

000054e0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
    54e0:	b480      	push	{r7}
    54e2:	b08d      	sub	sp, #52	; 0x34
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
    54e8:	460b      	mov	r3, r1
    54ea:	70fb      	strb	r3, [r7, #3]
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    54f0:	78fb      	ldrb	r3, [r7, #3]
    54f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    54f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54f8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    54fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54fc:	095a      	lsrs	r2, r3, #5
    54fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5500:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    5502:	6a3b      	ldr	r3, [r7, #32]
    5504:	f003 031f 	and.w	r3, r3, #31
    5508:	2101      	movs	r1, #1
    550a:	fa01 f303 	lsl.w	r3, r1, r3
    550e:	61fa      	str	r2, [r7, #28]
    5510:	61bb      	str	r3, [r7, #24]
    5512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    5516:	75fb      	strb	r3, [r7, #23]
    5518:	69fb      	ldr	r3, [r7, #28]
    551a:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    551c:	693b      	ldr	r3, [r7, #16]
    551e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5522:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    5526:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    5528:	60fb      	str	r3, [r7, #12]

	if (pin_sense & 0x01) {
    552a:	7dfb      	ldrb	r3, [r7, #23]
    552c:	f003 0301 	and.w	r3, r3, #1
    5530:	2b00      	cmp	r3, #0
    5532:	d004      	beq.n	553e <ioport_set_pin_sense_mode+0x5e>
		base->GPIO_IMR0S = mask;
    5534:	68fb      	ldr	r3, [r7, #12]
    5536:	69ba      	ldr	r2, [r7, #24]
    5538:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    553c:	e003      	b.n	5546 <ioport_set_pin_sense_mode+0x66>
	} else {
		base->GPIO_IMR0C = mask;
    553e:	68fb      	ldr	r3, [r7, #12]
    5540:	69ba      	ldr	r2, [r7, #24]
    5542:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
    5546:	7dfb      	ldrb	r3, [r7, #23]
    5548:	f003 0302 	and.w	r3, r3, #2
    554c:	2b00      	cmp	r3, #0
    554e:	d004      	beq.n	555a <ioport_set_pin_sense_mode+0x7a>
		base->GPIO_IMR1S = mask;
    5550:	68fb      	ldr	r3, [r7, #12]
    5552:	69ba      	ldr	r2, [r7, #24]
    5554:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    5558:	e003      	b.n	5562 <ioport_set_pin_sense_mode+0x82>
	} else {
		base->GPIO_IMR1C = mask;
    555a:	68fb      	ldr	r3, [r7, #12]
    555c:	69ba      	ldr	r2, [r7, #24]
    555e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
    5562:	3734      	adds	r7, #52	; 0x34
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    556c:	b580      	push	{r7, lr}
    556e:	b086      	sub	sp, #24
    5570:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    5572:	463b      	mov	r3, r7
    5574:	4618      	mov	r0, r3
    5576:	4b34      	ldr	r3, [pc, #208]	; (5648 <board_init+0xdc>)
    5578:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    557a:	f107 0210 	add.w	r2, r7, #16
    557e:	463b      	mov	r3, r7
    5580:	4610      	mov	r0, r2
    5582:	4932      	ldr	r1, [pc, #200]	; (564c <board_init+0xe0>)
    5584:	461a      	mov	r2, r3
    5586:	4b32      	ldr	r3, [pc, #200]	; (5650 <board_init+0xe4>)
    5588:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    558a:	f107 0310 	add.w	r3, r7, #16
    558e:	4618      	mov	r0, r3
    5590:	4b30      	ldr	r3, [pc, #192]	; (5654 <board_init+0xe8>)
    5592:	4798      	blx	r3
#endif

	/* Initialize IOPORT */
	ioport_init();
    5594:	4b30      	ldr	r3, [pc, #192]	; (5658 <board_init+0xec>)
    5596:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
    5598:	2047      	movs	r0, #71	; 0x47
    559a:	2101      	movs	r1, #1
    559c:	4b2f      	ldr	r3, [pc, #188]	; (565c <board_init+0xf0>)
    559e:	4798      	blx	r3
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
    55a0:	2047      	movs	r0, #71	; 0x47
    55a2:	2101      	movs	r1, #1
    55a4:	4b2e      	ldr	r3, [pc, #184]	; (5660 <board_init+0xf4>)
    55a6:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
    55a8:	2058      	movs	r0, #88	; 0x58
    55aa:	2100      	movs	r1, #0
    55ac:	4b2b      	ldr	r3, [pc, #172]	; (565c <board_init+0xf0>)
    55ae:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
    55b0:	2058      	movs	r0, #88	; 0x58
    55b2:	2108      	movs	r1, #8
    55b4:	4b2b      	ldr	r3, [pc, #172]	; (5664 <board_init+0xf8>)
    55b6:	4798      	blx	r3
	
	/* Initialize pins for input PWM */
	ioport_set_pin_peripheral_mode(PIN_PA12B_TC0_A2, MUX_PA12B_TC0_A2);
    55b8:	200c      	movs	r0, #12
    55ba:	2101      	movs	r1, #1
    55bc:	4b29      	ldr	r3, [pc, #164]	; (5664 <board_init+0xf8>)
    55be:	4798      	blx	r3
    55c0:	200c      	movs	r0, #12
    55c2:	4b29      	ldr	r3, [pc, #164]	; (5668 <board_init+0xfc>)
    55c4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PA13B_TC0_B2, MUX_PA13B_TC0_B2);
    55c6:	200d      	movs	r0, #13
    55c8:	2101      	movs	r1, #1
    55ca:	4b26      	ldr	r3, [pc, #152]	; (5664 <board_init+0xf8>)
    55cc:	4798      	blx	r3
    55ce:	200d      	movs	r0, #13
    55d0:	4b25      	ldr	r3, [pc, #148]	; (5668 <board_init+0xfc>)
    55d2:	4798      	blx	r3
	
#ifdef DEBUG
	
	/* Initialize OLED board buttons */
	ioport_set_pin_dir(OLED_BUTTON1, IOPORT_DIR_INPUT);
    55d4:	2006      	movs	r0, #6
    55d6:	2100      	movs	r1, #0
    55d8:	4b20      	ldr	r3, [pc, #128]	; (565c <board_init+0xf0>)
    55da:	4798      	blx	r3
	ioport_set_pin_mode(OLED_BUTTON1, IOPORT_MODE_PULLUP|IOPORT_MODE_GLITCH_FILTER);
    55dc:	2006      	movs	r0, #6
    55de:	2148      	movs	r1, #72	; 0x48
    55e0:	4b20      	ldr	r3, [pc, #128]	; (5664 <board_init+0xf8>)
    55e2:	4798      	blx	r3
	ioport_set_pin_sense_mode(OLED_BUTTON1, IOPORT_SENSE_FALLING);
    55e4:	2006      	movs	r0, #6
    55e6:	2102      	movs	r1, #2
    55e8:	4b20      	ldr	r3, [pc, #128]	; (566c <board_init+0x100>)
    55ea:	4798      	blx	r3
	
	ioport_set_pin_dir(OLED_BUTTON2, IOPORT_DIR_INPUT);
    55ec:	2023      	movs	r0, #35	; 0x23
    55ee:	2100      	movs	r1, #0
    55f0:	4b1a      	ldr	r3, [pc, #104]	; (565c <board_init+0xf0>)
    55f2:	4798      	blx	r3
	ioport_set_pin_mode(OLED_BUTTON2, IOPORT_MODE_PULLUP);
    55f4:	2023      	movs	r0, #35	; 0x23
    55f6:	2108      	movs	r1, #8
    55f8:	4b1a      	ldr	r3, [pc, #104]	; (5664 <board_init+0xf8>)
    55fa:	4798      	blx	r3
	ioport_set_pin_dir(OLED_BUTTON3, IOPORT_DIR_INPUT);
    55fc:	2024      	movs	r0, #36	; 0x24
    55fe:	2100      	movs	r1, #0
    5600:	4b16      	ldr	r3, [pc, #88]	; (565c <board_init+0xf0>)
    5602:	4798      	blx	r3
	ioport_set_pin_mode(OLED_BUTTON3, IOPORT_MODE_PULLUP);
    5604:	2024      	movs	r0, #36	; 0x24
    5606:	2108      	movs	r1, #8
    5608:	4b16      	ldr	r3, [pc, #88]	; (5664 <board_init+0xf8>)
    560a:	4798      	blx	r3
	
	ioport_set_pin_dir(OLED_LED1, IOPORT_DIR_OUTPUT);
    560c:	2008      	movs	r0, #8
    560e:	2101      	movs	r1, #1
    5610:	4b12      	ldr	r3, [pc, #72]	; (565c <board_init+0xf0>)
    5612:	4798      	blx	r3
	ioport_set_pin_dir(OLED_LED2, IOPORT_DIR_OUTPUT);
    5614:	2009      	movs	r0, #9
    5616:	2101      	movs	r1, #1
    5618:	4b10      	ldr	r3, [pc, #64]	; (565c <board_init+0xf0>)
    561a:	4798      	blx	r3
	ioport_set_pin_dir(OLED_LED3, IOPORT_DIR_OUTPUT);
    561c:	2050      	movs	r0, #80	; 0x50
    561e:	2101      	movs	r1, #1
    5620:	4b0e      	ldr	r3, [pc, #56]	; (565c <board_init+0xf0>)
    5622:	4798      	blx	r3
	ioport_set_pin_dir(LCD_BL_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LCD_BL_GPIO, LCD_BL_INACTIVE_LEVEL);
#endif

#if defined (CONF_BOARD_COM_PORT)
	ioport_set_pin_peripheral_mode(COM_PORT_RX_PIN, COM_PORT_RX_MUX);
    5624:	205a      	movs	r0, #90	; 0x5a
    5626:	2100      	movs	r1, #0
    5628:	4b0e      	ldr	r3, [pc, #56]	; (5664 <board_init+0xf8>)
    562a:	4798      	blx	r3
    562c:	205a      	movs	r0, #90	; 0x5a
    562e:	4b0e      	ldr	r3, [pc, #56]	; (5668 <board_init+0xfc>)
    5630:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(COM_PORT_TX_PIN, COM_PORT_TX_MUX);
    5632:	205b      	movs	r0, #91	; 0x5b
    5634:	2100      	movs	r1, #0
    5636:	4b0b      	ldr	r3, [pc, #44]	; (5664 <board_init+0xf8>)
    5638:	4798      	blx	r3
    563a:	205b      	movs	r0, #91	; 0x5b
    563c:	4b0a      	ldr	r3, [pc, #40]	; (5668 <board_init+0xfc>)
    563e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    5640:	3718      	adds	r7, #24
    5642:	46bd      	mov	sp, r7
    5644:	bd80      	pop	{r7, pc}
    5646:	bf00      	nop
    5648:	00005f35 	.word	0x00005f35
    564c:	400f0c00 	.word	0x400f0c00
    5650:	00005f71 	.word	0x00005f71
    5654:	00006071 	.word	0x00006071
    5658:	00005215 	.word	0x00005215
    565c:	00005375 	.word	0x00005375
    5660:	0000545d 	.word	0x0000545d
    5664:	00005271 	.word	0x00005271
    5668:	00005229 	.word	0x00005229
    566c:	000054e1 	.word	0x000054e1

00005670 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    5670:	b480      	push	{r7}
    5672:	b083      	sub	sp, #12
    5674:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5676:	f3ef 8310 	mrs	r3, PRIMASK
    567a:	603b      	str	r3, [r7, #0]
  return(result);
    567c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    567e:	2b00      	cmp	r3, #0
    5680:	bf14      	ite	ne
    5682:	2300      	movne	r3, #0
    5684:	2301      	moveq	r3, #1
    5686:	b2db      	uxtb	r3, r3
    5688:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    568a:	b672      	cpsid	i
    568c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5690:	4b04      	ldr	r3, [pc, #16]	; (56a4 <cpu_irq_save+0x34>)
    5692:	2200      	movs	r2, #0
    5694:	701a      	strb	r2, [r3, #0]
	return flags;
    5696:	687b      	ldr	r3, [r7, #4]
}
    5698:	4618      	mov	r0, r3
    569a:	370c      	adds	r7, #12
    569c:	46bd      	mov	sp, r7
    569e:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a2:	4770      	bx	lr
    56a4:	2000048c 	.word	0x2000048c

000056a8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    56a8:	b480      	push	{r7}
    56aa:	b083      	sub	sp, #12
    56ac:	af00      	add	r7, sp, #0
    56ae:	6078      	str	r0, [r7, #4]
	return (flags);
    56b0:	687b      	ldr	r3, [r7, #4]
    56b2:	2b00      	cmp	r3, #0
    56b4:	bf0c      	ite	eq
    56b6:	2300      	moveq	r3, #0
    56b8:	2301      	movne	r3, #1
    56ba:	b2db      	uxtb	r3, r3
}
    56bc:	4618      	mov	r0, r3
    56be:	370c      	adds	r7, #12
    56c0:	46bd      	mov	sp, r7
    56c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c6:	4770      	bx	lr

000056c8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    56c8:	b580      	push	{r7, lr}
    56ca:	b082      	sub	sp, #8
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    56d0:	6878      	ldr	r0, [r7, #4]
    56d2:	4b07      	ldr	r3, [pc, #28]	; (56f0 <cpu_irq_restore+0x28>)
    56d4:	4798      	blx	r3
    56d6:	4603      	mov	r3, r0
    56d8:	2b00      	cmp	r3, #0
    56da:	d005      	beq.n	56e8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    56dc:	4b05      	ldr	r3, [pc, #20]	; (56f4 <cpu_irq_restore+0x2c>)
    56de:	2201      	movs	r2, #1
    56e0:	701a      	strb	r2, [r3, #0]
    56e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    56e6:	b662      	cpsie	i
}
    56e8:	3708      	adds	r7, #8
    56ea:	46bd      	mov	sp, r7
    56ec:	bd80      	pop	{r7, pc}
    56ee:	bf00      	nop
    56f0:	000056a9 	.word	0x000056a9
    56f4:	2000048c 	.word	0x2000048c

000056f8 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    56f8:	b580      	push	{r7, lr}
    56fa:	b08a      	sub	sp, #40	; 0x28
    56fc:	af00      	add	r7, sp, #0
    56fe:	60f8      	str	r0, [r7, #12]
    5700:	60b9      	str	r1, [r7, #8]
    5702:	607a      	str	r2, [r7, #4]
	uint32_t pmcon = 0;
    5704:	2300      	movs	r3, #0
    5706:	627b      	str	r3, [r7, #36]	; 0x24

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    5708:	68fb      	ldr	r3, [r7, #12]
    570a:	69db      	ldr	r3, [r3, #28]
    570c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5710:	f023 0303 	bic.w	r3, r3, #3
    5714:	627b      	str	r3, [r7, #36]	; 0x24
	pmcon |= BPM_PMCON_PS(ps_value);
    5716:	68bb      	ldr	r3, [r7, #8]
    5718:	f003 0303 	and.w	r3, r3, #3
    571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    571e:	4313      	orrs	r3, r2
    5720:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set PSCM Value: PS change no halt */
	pmcon |= BPM_PMCON_PSCM;
    5722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5724:	f043 0308 	orr.w	r3, r3, #8
    5728:	627b      	str	r3, [r7, #36]	; 0x24

	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    572c:	f043 0304 	orr.w	r3, r3, #4
    5730:	627b      	str	r3, [r7, #36]	; 0x24
	/* Execute power scaling no halt in RAM */
	irqflags_t flags;
	bool b_psok;
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();
    5732:	4b16      	ldr	r3, [pc, #88]	; (578c <bpm_power_scaling_cpu_failsafe+0x94>)
    5734:	4798      	blx	r3
    5736:	6238      	str	r0, [r7, #32]

	/* Save SysTick */
	val = SysTick->VAL;
    5738:	4b15      	ldr	r3, [pc, #84]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    573a:	689b      	ldr	r3, [r3, #8]
    573c:	61fb      	str	r3, [r7, #28]
	ctrl = SysTick->CTRL;
    573e:	4b14      	ldr	r3, [pc, #80]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	61bb      	str	r3, [r7, #24]
	load = SysTick->LOAD;
    5744:	4b12      	ldr	r3, [pc, #72]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    5746:	685b      	ldr	r3, [r3, #4]
    5748:	617b      	str	r3, [r7, #20]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    574a:	4b11      	ldr	r3, [pc, #68]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    574c:	687a      	ldr	r2, [r7, #4]
    574e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    5750:	4b0f      	ldr	r3, [pc, #60]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    5752:	2205      	movs	r2, #5
    5754:	601a      	str	r2, [r3, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    5756:	68f8      	ldr	r0, [r7, #12]
    5758:	6a79      	ldr	r1, [r7, #36]	; 0x24
    575a:	4b0e      	ldr	r3, [pc, #56]	; (5794 <bpm_power_scaling_cpu_failsafe+0x9c>)
    575c:	4798      	blx	r3
    575e:	4603      	mov	r3, r0
    5760:	74fb      	strb	r3, [r7, #19]

	/* Restore SysTick */
	SysTick->CTRL = 0;
    5762:	4b0b      	ldr	r3, [pc, #44]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    5764:	2200      	movs	r2, #0
    5766:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = load;
    5768:	4b09      	ldr	r3, [pc, #36]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    576a:	697a      	ldr	r2, [r7, #20]
    576c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = val;
    576e:	4b08      	ldr	r3, [pc, #32]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    5770:	69fa      	ldr	r2, [r7, #28]
    5772:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = ctrl;
    5774:	4b06      	ldr	r3, [pc, #24]	; (5790 <bpm_power_scaling_cpu_failsafe+0x98>)
    5776:	69ba      	ldr	r2, [r7, #24]
    5778:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    577a:	6a38      	ldr	r0, [r7, #32]
    577c:	4b06      	ldr	r3, [pc, #24]	; (5798 <bpm_power_scaling_cpu_failsafe+0xa0>)
    577e:	4798      	blx	r3
	return b_psok;
    5780:	7cfb      	ldrb	r3, [r7, #19]
}
    5782:	4618      	mov	r0, r3
    5784:	3728      	adds	r7, #40	; 0x28
    5786:	46bd      	mov	sp, r7
    5788:	bd80      	pop	{r7, pc}
    578a:	bf00      	nop
    578c:	00005671 	.word	0x00005671
    5790:	e000e010 	.word	0xe000e010
    5794:	2000001d 	.word	0x2000001d
    5798:	000056c9 	.word	0x000056c9

0000579c <bpm_power_scaling_cpu>:

void bpm_power_scaling_cpu(Bpm *bpm, uint32_t ps_value)
{
    579c:	b480      	push	{r7}
    579e:	b085      	sub	sp, #20
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
    57a4:	6039      	str	r1, [r7, #0]
	uint32_t pmcon = 0;
    57a6:	2300      	movs	r3, #0
    57a8:	60fb      	str	r3, [r7, #12]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	69db      	ldr	r3, [r3, #28]
    57ae:	60fb      	str	r3, [r7, #12]
	/* Clear last PS Value */
	pmcon &= ~BPM_PMCON_PS_Msk;
    57b0:	68fb      	ldr	r3, [r7, #12]
    57b2:	f023 0303 	bic.w	r3, r3, #3
    57b6:	60fb      	str	r3, [r7, #12]
	/* Write new PS Value */
	pmcon |= BPM_PMCON_PS(ps_value);
    57b8:	683b      	ldr	r3, [r7, #0]
    57ba:	f003 0303 	and.w	r3, r3, #3
    57be:	68fa      	ldr	r2, [r7, #12]
    57c0:	4313      	orrs	r3, r2
    57c2:	60fb      	str	r3, [r7, #12]
	/* PSCM: without CPU halt */
	pmcon |= BPM_PMCON_PSCM;
    57c4:	68fb      	ldr	r3, [r7, #12]
    57c6:	f043 0308 	orr.w	r3, r3, #8
    57ca:	60fb      	str	r3, [r7, #12]
	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    57cc:	68fb      	ldr	r3, [r7, #12]
    57ce:	f043 0304 	orr.w	r3, r3, #4
    57d2:	60fb      	str	r3, [r7, #12]
	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    57d4:	4b05      	ldr	r3, [pc, #20]	; (57ec <bpm_power_scaling_cpu+0x50>)
    57d6:	4a06      	ldr	r2, [pc, #24]	; (57f0 <bpm_power_scaling_cpu+0x54>)
    57d8:	619a      	str	r2, [r3, #24]
	/* Write back PM_CON value */
	bpm->BPM_PMCON = pmcon;
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	68fa      	ldr	r2, [r7, #12]
    57de:	61da      	str	r2, [r3, #28]
}
    57e0:	3714      	adds	r7, #20
    57e2:	46bd      	mov	sp, r7
    57e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop
    57ec:	400f0000 	.word	0x400f0000
    57f0:	aa00001c 	.word	0xaa00001c

000057f4 <bpm_enable_fast_wakeup>:

void bpm_enable_fast_wakeup(Bpm *bpm)
{
    57f4:	b480      	push	{r7}
    57f6:	b085      	sub	sp, #20
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	69db      	ldr	r3, [r3, #28]
    5800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5804:	60fb      	str	r3, [r7, #12]
	BPM_UNLOCK(PMCON);
    5806:	4b05      	ldr	r3, [pc, #20]	; (581c <bpm_enable_fast_wakeup+0x28>)
    5808:	4a05      	ldr	r2, [pc, #20]	; (5820 <bpm_enable_fast_wakeup+0x2c>)
    580a:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    580c:	687b      	ldr	r3, [r7, #4]
    580e:	68fa      	ldr	r2, [r7, #12]
    5810:	61da      	str	r2, [r3, #28]
}
    5812:	3714      	adds	r7, #20
    5814:	46bd      	mov	sp, r7
    5816:	f85d 7b04 	ldr.w	r7, [sp], #4
    581a:	4770      	bx	lr
    581c:	400f0000 	.word	0x400f0000
    5820:	aa00001c 	.word	0xaa00001c

00005824 <bpm_get_status>:
{
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
    5824:	b480      	push	{r7}
    5826:	b083      	sub	sp, #12
    5828:	af00      	add	r7, sp, #0
    582a:	6078      	str	r0, [r7, #4]
	return bpm->BPM_SR;
    582c:	687b      	ldr	r3, [r7, #4]
    582e:	695b      	ldr	r3, [r3, #20]
}
    5830:	4618      	mov	r0, r3
    5832:	370c      	adds	r7, #12
    5834:	46bd      	mov	sp, r7
    5836:	f85d 7b04 	ldr.w	r7, [sp], #4
    583a:	4770      	bx	lr

0000583c <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    583c:	b480      	push	{r7}
    583e:	b085      	sub	sp, #20
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    5844:	6039      	str	r1, [r7, #0]
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	69db      	ldr	r3, [r3, #28]
    584a:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_BKUP;
    584c:	68fb      	ldr	r3, [r7, #12]
    584e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5852:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_RET;
    5854:	68fb      	ldr	r3, [r7, #12]
    5856:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    585a:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    585c:	68fb      	ldr	r3, [r7, #12]
    585e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5862:	60fb      	str	r3, [r7, #12]

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    5864:	4b43      	ldr	r3, [pc, #268]	; (5974 <bpm_sleep+0x138>)
    5866:	4a44      	ldr	r2, [pc, #272]	; (5978 <bpm_sleep+0x13c>)
    5868:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    586a:	683b      	ldr	r3, [r7, #0]
    586c:	2b01      	cmp	r3, #1
    586e:	d109      	bne.n	5884 <bpm_sleep+0x48>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	68fa      	ldr	r2, [r7, #12]
    5874:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    5876:	4b41      	ldr	r3, [pc, #260]	; (597c <bpm_sleep+0x140>)
    5878:	4a40      	ldr	r2, [pc, #256]	; (597c <bpm_sleep+0x140>)
    587a:	6912      	ldr	r2, [r2, #16]
    587c:	f022 0204 	bic.w	r2, r2, #4
    5880:	611a      	str	r2, [r3, #16]
    5882:	e062      	b.n	594a <bpm_sleep+0x10e>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    5884:	683b      	ldr	r3, [r7, #0]
    5886:	2b02      	cmp	r3, #2
    5888:	d10d      	bne.n	58a6 <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(1);
    588a:	68fb      	ldr	r3, [r7, #12]
    588c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5890:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	68fa      	ldr	r2, [r7, #12]
    5896:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    5898:	4b38      	ldr	r3, [pc, #224]	; (597c <bpm_sleep+0x140>)
    589a:	4a38      	ldr	r2, [pc, #224]	; (597c <bpm_sleep+0x140>)
    589c:	6912      	ldr	r2, [r2, #16]
    589e:	f022 0204 	bic.w	r2, r2, #4
    58a2:	611a      	str	r2, [r3, #16]
    58a4:	e051      	b.n	594a <bpm_sleep+0x10e>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    58a6:	683b      	ldr	r3, [r7, #0]
    58a8:	2b03      	cmp	r3, #3
    58aa:	d10d      	bne.n	58c8 <bpm_sleep+0x8c>
		pmcon |= BPM_PMCON_SLEEP(2);
    58ac:	68fb      	ldr	r3, [r7, #12]
    58ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    58b2:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    58b4:	687b      	ldr	r3, [r7, #4]
    58b6:	68fa      	ldr	r2, [r7, #12]
    58b8:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    58ba:	4b30      	ldr	r3, [pc, #192]	; (597c <bpm_sleep+0x140>)
    58bc:	4a2f      	ldr	r2, [pc, #188]	; (597c <bpm_sleep+0x140>)
    58be:	6912      	ldr	r2, [r2, #16]
    58c0:	f022 0204 	bic.w	r2, r2, #4
    58c4:	611a      	str	r2, [r3, #16]
    58c6:	e040      	b.n	594a <bpm_sleep+0x10e>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    58c8:	683b      	ldr	r3, [r7, #0]
    58ca:	2b04      	cmp	r3, #4
    58cc:	d10d      	bne.n	58ea <bpm_sleep+0xae>
		pmcon |= BPM_PMCON_SLEEP(3);
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    58d4:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	68fa      	ldr	r2, [r7, #12]
    58da:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    58dc:	4b27      	ldr	r3, [pc, #156]	; (597c <bpm_sleep+0x140>)
    58de:	4a27      	ldr	r2, [pc, #156]	; (597c <bpm_sleep+0x140>)
    58e0:	6912      	ldr	r2, [r2, #16]
    58e2:	f022 0204 	bic.w	r2, r2, #4
    58e6:	611a      	str	r2, [r3, #16]
    58e8:	e02f      	b.n	594a <bpm_sleep+0x10e>
	} else if (sleep_mode == BPM_SM_WAIT) {
    58ea:	683b      	ldr	r3, [r7, #0]
    58ec:	2b05      	cmp	r3, #5
    58ee:	d109      	bne.n	5904 <bpm_sleep+0xc8>
		bpm->BPM_PMCON = pmcon;
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	68fa      	ldr	r2, [r7, #12]
    58f4:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    58f6:	4b21      	ldr	r3, [pc, #132]	; (597c <bpm_sleep+0x140>)
    58f8:	4a20      	ldr	r2, [pc, #128]	; (597c <bpm_sleep+0x140>)
    58fa:	6912      	ldr	r2, [r2, #16]
    58fc:	f042 0204 	orr.w	r2, r2, #4
    5900:	611a      	str	r2, [r3, #16]
    5902:	e022      	b.n	594a <bpm_sleep+0x10e>
	} else if (sleep_mode == BPM_SM_RET) {
    5904:	683b      	ldr	r3, [r7, #0]
    5906:	2b06      	cmp	r3, #6
    5908:	d10d      	bne.n	5926 <bpm_sleep+0xea>
		pmcon |= BPM_PMCON_RET;
    590a:	68fb      	ldr	r3, [r7, #12]
    590c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5910:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	68fa      	ldr	r2, [r7, #12]
    5916:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    5918:	4b18      	ldr	r3, [pc, #96]	; (597c <bpm_sleep+0x140>)
    591a:	4a18      	ldr	r2, [pc, #96]	; (597c <bpm_sleep+0x140>)
    591c:	6912      	ldr	r2, [r2, #16]
    591e:	f042 0204 	orr.w	r2, r2, #4
    5922:	611a      	str	r2, [r3, #16]
    5924:	e011      	b.n	594a <bpm_sleep+0x10e>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    5926:	683b      	ldr	r3, [r7, #0]
    5928:	2b07      	cmp	r3, #7
    592a:	d10d      	bne.n	5948 <bpm_sleep+0x10c>
		pmcon |= BPM_PMCON_BKUP;
    592c:	68fb      	ldr	r3, [r7, #12]
    592e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5932:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	68fa      	ldr	r2, [r7, #12]
    5938:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    593a:	4b10      	ldr	r3, [pc, #64]	; (597c <bpm_sleep+0x140>)
    593c:	4a0f      	ldr	r2, [pc, #60]	; (597c <bpm_sleep+0x140>)
    593e:	6912      	ldr	r2, [r2, #16]
    5940:	f042 0204 	orr.w	r2, r2, #4
    5944:	611a      	str	r2, [r3, #16]
    5946:	e000      	b.n	594a <bpm_sleep+0x10e>
	} else {
		return;
    5948:	e00e      	b.n	5968 <bpm_sleep+0x12c>
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    594a:	bf00      	nop
    594c:	4b0c      	ldr	r3, [pc, #48]	; (5980 <bpm_sleep+0x144>)
    594e:	695b      	ldr	r3, [r3, #20]
    5950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5954:	2b00      	cmp	r3, #0
    5956:	d0f9      	beq.n	594c <bpm_sleep+0x110>
	asm volatile ("wfi");
    5958:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    595a:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    595c:	4b09      	ldr	r3, [pc, #36]	; (5984 <bpm_sleep+0x148>)
    595e:	2201      	movs	r2, #1
    5960:	701a      	strb	r2, [r3, #0]
    5962:	f3bf 8f5f 	dmb	sy
    5966:	b662      	cpsie	i
}
    5968:	3714      	adds	r7, #20
    596a:	46bd      	mov	sp, r7
    596c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5970:	4770      	bx	lr
    5972:	bf00      	nop
    5974:	400f0000 	.word	0x400f0000
    5978:	aa00001c 	.word	0xaa00001c
    597c:	e000ed00 	.word	0xe000ed00
    5980:	400f0400 	.word	0x400f0400
    5984:	2000048c 	.word	0x2000048c

00005988 <flashcalw_set_wait_state>:
 *
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
    5988:	b480      	push	{r7}
    598a:	b083      	sub	sp, #12
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    5990:	4a08      	ldr	r2, [pc, #32]	; (59b4 <flashcalw_set_wait_state+0x2c>)
    5992:	4b08      	ldr	r3, [pc, #32]	; (59b4 <flashcalw_set_wait_state+0x2c>)
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	f023 0140 	bic.w	r1, r3, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    599a:	687b      	ldr	r3, [r7, #4]
    599c:	2b00      	cmp	r3, #0
    599e:	d001      	beq.n	59a4 <flashcalw_set_wait_state+0x1c>
    59a0:	2340      	movs	r3, #64	; 0x40
    59a2:	e000      	b.n	59a6 <flashcalw_set_wait_state+0x1e>
    59a4:	2300      	movs	r3, #0
    59a6:	430b      	orrs	r3, r1
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    59a8:	6013      	str	r3, [r2, #0]
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
			FLASHCALW_FCR_FWS_0);
}
    59aa:	370c      	adds	r7, #12
    59ac:	46bd      	mov	sp, r7
    59ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b2:	4770      	bx	lr
    59b4:	400a0000 	.word	0x400a0000

000059b8 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    59b8:	b580      	push	{r7, lr}
    59ba:	b084      	sub	sp, #16
    59bc:	af00      	add	r7, sp, #0
    59be:	60f8      	str	r0, [r7, #12]
    59c0:	60b9      	str	r1, [r7, #8]
    59c2:	4613      	mov	r3, r2
    59c4:	71fb      	strb	r3, [r7, #7]
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    59c6:	68bb      	ldr	r3, [r7, #8]
    59c8:	2b00      	cmp	r3, #0
    59ca:	d132      	bne.n	5a32 <flashcalw_set_flash_waitstate_and_readmode+0x7a>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    59cc:	68fa      	ldr	r2, [r7, #12]
    59ce:	4b22      	ldr	r3, [pc, #136]	; (5a58 <flashcalw_set_flash_waitstate_and_readmode+0xa0>)
    59d0:	429a      	cmp	r2, r3
    59d2:	d915      	bls.n	5a00 <flashcalw_set_flash_waitstate_and_readmode+0x48>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    59d4:	68fa      	ldr	r2, [r7, #12]
    59d6:	4b21      	ldr	r3, [pc, #132]	; (5a5c <flashcalw_set_flash_waitstate_and_readmode+0xa4>)
    59d8:	429a      	cmp	r2, r3
    59da:	d808      	bhi.n	59ee <flashcalw_set_flash_waitstate_and_readmode+0x36>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    59dc:	2001      	movs	r0, #1
    59de:	4b20      	ldr	r3, [pc, #128]	; (5a60 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    59e0:	4798      	blx	r3
				flashcalw_issue_command(
    59e2:	2011      	movs	r0, #17
    59e4:	f04f 31ff 	mov.w	r1, #4294967295
    59e8:	4b1e      	ldr	r3, [pc, #120]	; (5a64 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    59ea:	4798      	blx	r3
    59ec:	e031      	b.n	5a52 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    59ee:	2001      	movs	r0, #1
    59f0:	4b1b      	ldr	r3, [pc, #108]	; (5a60 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    59f2:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    59f4:	2010      	movs	r0, #16
    59f6:	f04f 31ff 	mov.w	r1, #4294967295
    59fa:	4b1a      	ldr	r3, [pc, #104]	; (5a64 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    59fc:	4798      	blx	r3
    59fe:	e028      	b.n	5a52 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    5a00:	79fb      	ldrb	r3, [r7, #7]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d00c      	beq.n	5a20 <flashcalw_set_flash_waitstate_and_readmode+0x68>
    5a06:	68fa      	ldr	r2, [r7, #12]
    5a08:	4b17      	ldr	r3, [pc, #92]	; (5a68 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    5a0a:	429a      	cmp	r2, r3
    5a0c:	d808      	bhi.n	5a20 <flashcalw_set_flash_waitstate_and_readmode+0x68>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    5a0e:	2001      	movs	r0, #1
    5a10:	4b13      	ldr	r3, [pc, #76]	; (5a60 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    5a12:	4798      	blx	r3
				flashcalw_issue_command(
    5a14:	2011      	movs	r0, #17
    5a16:	f04f 31ff 	mov.w	r1, #4294967295
    5a1a:	4b12      	ldr	r3, [pc, #72]	; (5a64 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    5a1c:	4798      	blx	r3
    5a1e:	e018      	b.n	5a52 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    5a20:	2000      	movs	r0, #0
    5a22:	4b0f      	ldr	r3, [pc, #60]	; (5a60 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    5a24:	4798      	blx	r3
				flashcalw_issue_command(
    5a26:	2011      	movs	r0, #17
    5a28:	f04f 31ff 	mov.w	r1, #4294967295
    5a2c:	4b0d      	ldr	r3, [pc, #52]	; (5a64 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    5a2e:	4798      	blx	r3
    5a30:	e00f      	b.n	5a52 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    5a32:	68fa      	ldr	r2, [r7, #12]
    5a34:	4b0d      	ldr	r3, [pc, #52]	; (5a6c <flashcalw_set_flash_waitstate_and_readmode+0xb4>)
    5a36:	429a      	cmp	r2, r3
    5a38:	d903      	bls.n	5a42 <flashcalw_set_flash_waitstate_and_readmode+0x8a>
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    5a3a:	2001      	movs	r0, #1
    5a3c:	4b08      	ldr	r3, [pc, #32]	; (5a60 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    5a3e:	4798      	blx	r3
    5a40:	e002      	b.n	5a48 <flashcalw_set_flash_waitstate_and_readmode+0x90>
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    5a42:	2000      	movs	r0, #0
    5a44:	4b06      	ldr	r3, [pc, #24]	; (5a60 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    5a46:	4798      	blx	r3
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    5a48:	2011      	movs	r0, #17
    5a4a:	f04f 31ff 	mov.w	r1, #4294967295
    5a4e:	4b05      	ldr	r3, [pc, #20]	; (5a64 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    5a50:	4798      	blx	r3
	}
#endif
}
    5a52:	3710      	adds	r7, #16
    5a54:	46bd      	mov	sp, r7
    5a56:	bd80      	pop	{r7, pc}
    5a58:	0112a880 	.word	0x0112a880
    5a5c:	02255100 	.word	0x02255100
    5a60:	00005989 	.word	0x00005989
    5a64:	00005b15 	.word	0x00005b15
    5a68:	00b71b00 	.word	0x00b71b00
    5a6c:	007a1200 	.word	0x007a1200

00005a70 <flashcalw_is_ready>:
/*! \brief Tells whether the FLASHCALW is ready to run a new command.
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
    5a70:	b480      	push	{r7}
    5a72:	af00      	add	r7, sp, #0
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    5a74:	4b06      	ldr	r3, [pc, #24]	; (5a90 <flashcalw_is_ready+0x20>)
    5a76:	689b      	ldr	r3, [r3, #8]
    5a78:	f003 0301 	and.w	r3, r3, #1
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	bf0c      	ite	eq
    5a80:	2300      	moveq	r3, #0
    5a82:	2301      	movne	r3, #1
    5a84:	b2db      	uxtb	r3, r3
}
    5a86:	4618      	mov	r0, r3
    5a88:	46bd      	mov	sp, r7
    5a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8e:	4770      	bx	lr
    5a90:	400a0000 	.word	0x400a0000

00005a94 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    5a94:	b580      	push	{r7, lr}
    5a96:	af00      	add	r7, sp, #0
	while (!flashcalw_is_ready()) {
    5a98:	bf00      	nop
    5a9a:	4b04      	ldr	r3, [pc, #16]	; (5aac <flashcalw_default_wait_until_ready+0x18>)
    5a9c:	4798      	blx	r3
    5a9e:	4603      	mov	r3, r0
    5aa0:	f083 0301 	eor.w	r3, r3, #1
    5aa4:	b2db      	uxtb	r3, r3
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d1f7      	bne.n	5a9a <flashcalw_default_wait_until_ready+0x6>
	}
}
    5aaa:	bd80      	pop	{r7, pc}
    5aac:	00005a71 	.word	0x00005a71

00005ab0 <flashcalw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
    5ab0:	b480      	push	{r7}
    5ab2:	af00      	add	r7, sp, #0
	return HFLASHC->FLASHCALW_FSR &
    5ab4:	4b04      	ldr	r3, [pc, #16]	; (5ac8 <flashcalw_get_error_status+0x18>)
    5ab6:	689b      	ldr	r3, [r3, #8]
    5ab8:	f003 030c 	and.w	r3, r3, #12
	       (FLASHCALW_FSR_LOCKE | FLASHCALW_FSR_PROGE);
}
    5abc:	4618      	mov	r0, r3
    5abe:	46bd      	mov	sp, r7
    5ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac4:	4770      	bx	lr
    5ac6:	bf00      	nop
    5ac8:	400a0000 	.word	0x400a0000

00005acc <flashcalw_is_lock_error>:
 *
 * \return Whether a Lock Error has occurred during the last function called
 *         that issued one or more FLASHCALW commands.
 */
bool flashcalw_is_lock_error(void)
{
    5acc:	b480      	push	{r7}
    5ace:	af00      	add	r7, sp, #0
	return ((flashcalw_error_status & FLASHCALW_FSR_LOCKE) != 0);
    5ad0:	4b06      	ldr	r3, [pc, #24]	; (5aec <flashcalw_is_lock_error+0x20>)
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	f003 0304 	and.w	r3, r3, #4
    5ad8:	2b00      	cmp	r3, #0
    5ada:	bf0c      	ite	eq
    5adc:	2300      	moveq	r3, #0
    5ade:	2301      	movne	r3, #1
    5ae0:	b2db      	uxtb	r3, r3
}
    5ae2:	4618      	mov	r0, r3
    5ae4:	46bd      	mov	sp, r7
    5ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aea:	4770      	bx	lr
    5aec:	20000dc8 	.word	0x20000dc8

00005af0 <flashcalw_is_programming_error>:
 *
 * \return Whether a Programming Error has occurred during the last function
 *         called that issued one or more FLASHCALW commands.
 */
bool flashcalw_is_programming_error(void)
{
    5af0:	b480      	push	{r7}
    5af2:	af00      	add	r7, sp, #0
	return ((flashcalw_error_status & FLASHCALW_FSR_PROGE) != 0);
    5af4:	4b06      	ldr	r3, [pc, #24]	; (5b10 <flashcalw_is_programming_error+0x20>)
    5af6:	681b      	ldr	r3, [r3, #0]
    5af8:	f003 0308 	and.w	r3, r3, #8
    5afc:	2b00      	cmp	r3, #0
    5afe:	bf0c      	ite	eq
    5b00:	2300      	moveq	r3, #0
    5b02:	2301      	movne	r3, #1
    5b04:	b2db      	uxtb	r3, r3
}
    5b06:	4618      	mov	r0, r3
    5b08:	46bd      	mov	sp, r7
    5b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b0e:	4770      	bx	lr
    5b10:	20000dc8 	.word	0x20000dc8

00005b14 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    5b14:	b580      	push	{r7, lr}
    5b16:	b084      	sub	sp, #16
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
    5b1c:	6039      	str	r1, [r7, #0]
	uint32_t tempo;

	flashcalw_wait_until_ready();
    5b1e:	4b16      	ldr	r3, [pc, #88]	; (5b78 <flashcalw_issue_command+0x64>)
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    5b24:	4b15      	ldr	r3, [pc, #84]	; (5b7c <flashcalw_issue_command+0x68>)
    5b26:	685b      	ldr	r3, [r3, #4]
    5b28:	60fb      	str	r3, [r7, #12]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    5b2a:	68fb      	ldr	r3, [r7, #12]
    5b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    5b30:	60fb      	str	r3, [r7, #12]
	if (page_number >= 0) {
    5b32:	683b      	ldr	r3, [r7, #0]
    5b34:	2b00      	cmp	r3, #0
    5b36:	db0b      	blt.n	5b50 <flashcalw_issue_command+0x3c>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    5b38:	683b      	ldr	r3, [r7, #0]
    5b3a:	021b      	lsls	r3, r3, #8
    5b3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5b40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5b44:	687a      	ldr	r2, [r7, #4]
    5b46:	4313      	orrs	r3, r2
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    5b48:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    5b4c:	60fb      	str	r3, [r7, #12]
    5b4e:	e005      	b.n	5b5c <flashcalw_issue_command+0x48>
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    5b50:	687a      	ldr	r2, [r7, #4]
    5b52:	68fb      	ldr	r3, [r7, #12]
    5b54:	4313      	orrs	r3, r2
    5b56:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    5b5a:	60fb      	str	r3, [r7, #12]
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    5b5c:	4b07      	ldr	r3, [pc, #28]	; (5b7c <flashcalw_issue_command+0x68>)
    5b5e:	68fa      	ldr	r2, [r7, #12]
    5b60:	605a      	str	r2, [r3, #4]
	flashcalw_error_status = flashcalw_get_error_status();
    5b62:	4b07      	ldr	r3, [pc, #28]	; (5b80 <flashcalw_issue_command+0x6c>)
    5b64:	4798      	blx	r3
    5b66:	4602      	mov	r2, r0
    5b68:	4b06      	ldr	r3, [pc, #24]	; (5b84 <flashcalw_issue_command+0x70>)
    5b6a:	601a      	str	r2, [r3, #0]
	flashcalw_wait_until_ready();
    5b6c:	4b02      	ldr	r3, [pc, #8]	; (5b78 <flashcalw_issue_command+0x64>)
    5b6e:	681b      	ldr	r3, [r3, #0]
    5b70:	4798      	blx	r3
}
    5b72:	3710      	adds	r7, #16
    5b74:	46bd      	mov	sp, r7
    5b76:	bd80      	pop	{r7, pc}
    5b78:	20000490 	.word	0x20000490
    5b7c:	400a0000 	.word	0x400a0000
    5b80:	00005ab1 	.word	0x00005ab1
    5b84:	20000dc8 	.word	0x20000dc8

00005b88 <flashcalw_clear_page_buffer>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_clear_page_buffer(void)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	af00      	add	r7, sp, #0
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_CPB, -1);
    5b8c:	2003      	movs	r0, #3
    5b8e:	f04f 31ff 	mov.w	r1, #4294967295
    5b92:	4b01      	ldr	r3, [pc, #4]	; (5b98 <flashcalw_clear_page_buffer+0x10>)
    5b94:	4798      	blx	r3
}
    5b96:	bd80      	pop	{r7, pc}
    5b98:	00005b15 	.word	0x00005b15

00005b9c <flashcalw_is_page_erased>:
 *
 * \return Whether the page to which the last Quick Page Read or Quick Page Read
 *         User Page command was applied was erased.
 */
bool flashcalw_is_page_erased(void)
{
    5b9c:	b480      	push	{r7}
    5b9e:	af00      	add	r7, sp, #0
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_QPRR) != 0);
    5ba0:	4b06      	ldr	r3, [pc, #24]	; (5bbc <flashcalw_is_page_erased+0x20>)
    5ba2:	689b      	ldr	r3, [r3, #8]
    5ba4:	f003 0320 	and.w	r3, r3, #32
    5ba8:	2b00      	cmp	r3, #0
    5baa:	bf0c      	ite	eq
    5bac:	2300      	moveq	r3, #0
    5bae:	2301      	movne	r3, #1
    5bb0:	b2db      	uxtb	r3, r3
}
    5bb2:	4618      	mov	r0, r3
    5bb4:	46bd      	mov	sp, r7
    5bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bba:	4770      	bx	lr
    5bbc:	400a0000 	.word	0x400a0000

00005bc0 <flashcalw_quick_page_read>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
bool flashcalw_quick_page_read(int page_number)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b082      	sub	sp, #8
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_QPR, page_number);
    5bc8:	200c      	movs	r0, #12
    5bca:	6879      	ldr	r1, [r7, #4]
    5bcc:	4b04      	ldr	r3, [pc, #16]	; (5be0 <flashcalw_quick_page_read+0x20>)
    5bce:	4798      	blx	r3
	return flashcalw_is_page_erased();
    5bd0:	4b04      	ldr	r3, [pc, #16]	; (5be4 <flashcalw_quick_page_read+0x24>)
    5bd2:	4798      	blx	r3
    5bd4:	4603      	mov	r3, r0
}
    5bd6:	4618      	mov	r0, r3
    5bd8:	3708      	adds	r7, #8
    5bda:	46bd      	mov	sp, r7
    5bdc:	bd80      	pop	{r7, pc}
    5bde:	bf00      	nop
    5be0:	00005b15 	.word	0x00005b15
    5be4:	00005b9d 	.word	0x00005b9d

00005be8 <flashcalw_erase_page>:
 *       \ref flashcalw_is_programming_error is updated.
 *
 * \note An erase operation can only set bits.
 */
bool flashcalw_erase_page(int page_number, bool check)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b084      	sub	sp, #16
    5bec:	af00      	add	r7, sp, #0
    5bee:	6078      	str	r0, [r7, #4]
    5bf0:	460b      	mov	r3, r1
    5bf2:	70fb      	strb	r3, [r7, #3]
	bool page_erased = true;
    5bf4:	2301      	movs	r3, #1
    5bf6:	73fb      	strb	r3, [r7, #15]

	flashcalw_issue_command(FLASHCALW_FCMD_CMD_EP, page_number);
    5bf8:	2002      	movs	r0, #2
    5bfa:	6879      	ldr	r1, [r7, #4]
    5bfc:	4b0c      	ldr	r3, [pc, #48]	; (5c30 <flashcalw_erase_page+0x48>)
    5bfe:	4798      	blx	r3

	if (check) {
    5c00:	78fb      	ldrb	r3, [r7, #3]
    5c02:	2b00      	cmp	r3, #0
    5c04:	d00e      	beq.n	5c24 <flashcalw_erase_page+0x3c>
		uint32_t error_status = flashcalw_error_status;
    5c06:	4b0b      	ldr	r3, [pc, #44]	; (5c34 <flashcalw_erase_page+0x4c>)
    5c08:	681b      	ldr	r3, [r3, #0]
    5c0a:	60bb      	str	r3, [r7, #8]
		page_erased = flashcalw_quick_page_read(-1);
    5c0c:	f04f 30ff 	mov.w	r0, #4294967295
    5c10:	4b09      	ldr	r3, [pc, #36]	; (5c38 <flashcalw_erase_page+0x50>)
    5c12:	4798      	blx	r3
    5c14:	4603      	mov	r3, r0
    5c16:	73fb      	strb	r3, [r7, #15]
		flashcalw_error_status |= error_status;
    5c18:	4b06      	ldr	r3, [pc, #24]	; (5c34 <flashcalw_erase_page+0x4c>)
    5c1a:	681a      	ldr	r2, [r3, #0]
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	431a      	orrs	r2, r3
    5c20:	4b04      	ldr	r3, [pc, #16]	; (5c34 <flashcalw_erase_page+0x4c>)
    5c22:	601a      	str	r2, [r3, #0]
	}

	return page_erased;
    5c24:	7bfb      	ldrb	r3, [r7, #15]
}
    5c26:	4618      	mov	r0, r3
    5c28:	3710      	adds	r7, #16
    5c2a:	46bd      	mov	sp, r7
    5c2c:	bd80      	pop	{r7, pc}
    5c2e:	bf00      	nop
    5c30:	00005b15 	.word	0x00005b15
    5c34:	20000dc8 	.word	0x20000dc8
    5c38:	00005bc1 	.word	0x00005bc1

00005c3c <flashcalw_write_page>:
 *
 * \note A write operation can only clear bits; in other words, an erase
 *  operation must first be done if some bits need to be set to 1.
 */
void flashcalw_write_page(int page_number)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b082      	sub	sp, #8
    5c40:	af00      	add	r7, sp, #0
    5c42:	6078      	str	r0, [r7, #4]
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_WP, page_number);
    5c44:	2001      	movs	r0, #1
    5c46:	6879      	ldr	r1, [r7, #4]
    5c48:	4b02      	ldr	r3, [pc, #8]	; (5c54 <flashcalw_write_page+0x18>)
    5c4a:	4798      	blx	r3
}
    5c4c:	3708      	adds	r7, #8
    5c4e:	46bd      	mov	sp, r7
    5c50:	bd80      	pop	{r7, pc}
    5c52:	bf00      	nop
    5c54:	00005b15 	.word	0x00005b15

00005c58 <flashcalw_quick_user_page_read>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
bool flashcalw_quick_user_page_read(void)
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	af00      	add	r7, sp, #0
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_QPRUP, -1);
    5c5c:	200f      	movs	r0, #15
    5c5e:	f04f 31ff 	mov.w	r1, #4294967295
    5c62:	4b03      	ldr	r3, [pc, #12]	; (5c70 <flashcalw_quick_user_page_read+0x18>)
    5c64:	4798      	blx	r3
	return flashcalw_is_page_erased();
    5c66:	4b03      	ldr	r3, [pc, #12]	; (5c74 <flashcalw_quick_user_page_read+0x1c>)
    5c68:	4798      	blx	r3
    5c6a:	4603      	mov	r3, r0
}
    5c6c:	4618      	mov	r0, r3
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	00005b15 	.word	0x00005b15
    5c74:	00005b9d 	.word	0x00005b9d

00005c78 <flashcalw_erase_user_page>:
 *       \ref flashcalw_is_programming_error is updated.
 *
 * \note An erase operation can only set bits.
 */
bool flashcalw_erase_user_page(bool check)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b082      	sub	sp, #8
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	4603      	mov	r3, r0
    5c80:	71fb      	strb	r3, [r7, #7]
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_EUP, -1);
    5c82:	200e      	movs	r0, #14
    5c84:	f04f 31ff 	mov.w	r1, #4294967295
    5c88:	4b09      	ldr	r3, [pc, #36]	; (5cb0 <flashcalw_erase_user_page+0x38>)
    5c8a:	4798      	blx	r3
	return (check) ? flashcalw_quick_user_page_read() : true;
    5c8c:	79fb      	ldrb	r3, [r7, #7]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	d008      	beq.n	5ca4 <flashcalw_erase_user_page+0x2c>
    5c92:	4b08      	ldr	r3, [pc, #32]	; (5cb4 <flashcalw_erase_user_page+0x3c>)
    5c94:	4798      	blx	r3
    5c96:	4603      	mov	r3, r0
    5c98:	2b00      	cmp	r3, #0
    5c9a:	bf0c      	ite	eq
    5c9c:	2300      	moveq	r3, #0
    5c9e:	2301      	movne	r3, #1
    5ca0:	b2db      	uxtb	r3, r3
    5ca2:	e000      	b.n	5ca6 <flashcalw_erase_user_page+0x2e>
    5ca4:	2301      	movs	r3, #1
}
    5ca6:	4618      	mov	r0, r3
    5ca8:	3708      	adds	r7, #8
    5caa:	46bd      	mov	sp, r7
    5cac:	bd80      	pop	{r7, pc}
    5cae:	bf00      	nop
    5cb0:	00005b15 	.word	0x00005b15
    5cb4:	00005c59 	.word	0x00005c59

00005cb8 <flashcalw_write_user_page>:
 *
 * \note A write operation can only clear bits; in other words, an erase
 *  operation must first be done if some bits need to be set to 1.
 */
void flashcalw_write_user_page(void)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	af00      	add	r7, sp, #0
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_WUP, -1);
    5cbc:	200d      	movs	r0, #13
    5cbe:	f04f 31ff 	mov.w	r1, #4294967295
    5cc2:	4b01      	ldr	r3, [pc, #4]	; (5cc8 <flashcalw_write_user_page+0x10>)
    5cc4:	4798      	blx	r3
}
    5cc6:	bd80      	pop	{r7, pc}
    5cc8:	00005b15 	.word	0x00005b15

00005ccc <flashcalw_memcpy>:
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
volatile void *flashcalw_memcpy(volatile void *dst, const void *src,
		size_t nbytes, bool erase)
{
    5ccc:	b580      	push	{r7, lr}
    5cce:	b08c      	sub	sp, #48	; 0x30
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	60f8      	str	r0, [r7, #12]
    5cd4:	60b9      	str	r1, [r7, #8]
    5cd6:	607a      	str	r2, [r7, #4]
    5cd8:	70fb      	strb	r3, [r7, #3]
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	uint32_t error_status = 0;
    5cda:	2300      	movs	r3, #0
    5cdc:	62bb      	str	r3, [r7, #40]	; 0x28
	volatile uint8_t *flash_add;
	volatile uint8_t *dest_add = (uint8_t *)dst;
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	623b      	str	r3, [r7, #32]
	const uint8_t *src_buf = (const uint8_t *)src;
    5ce2:	68bb      	ldr	r3, [r7, #8]
    5ce4:	61fb      	str	r3, [r7, #28]
			(((uint8_t *)dst >= (uint8_t *)FLASH_USER_PAGE_ADDR) &&
			(((uint8_t *)dst + nbytes)
			<= (((uint8_t *)FLASH_USER_PAGE_ADDR)
			+ FLASH_PAGE_SIZE))));

	b_user_page = (volatile uint8_t *)dst
    5ce6:	68fa      	ldr	r2, [r7, #12]
    5ce8:	4b43      	ldr	r3, [pc, #268]	; (5df8 <flashcalw_memcpy+0x12c>)
    5cea:	429a      	cmp	r2, r3
    5cec:	bf94      	ite	ls
    5cee:	2300      	movls	r3, #0
    5cf0:	2301      	movhi	r3, #1
    5cf2:	76fb      	strb	r3, [r7, #27]
			>= (uint8_t *)FLASH_USER_PAGE_ADDR;

	flash_add = (uint8_t *)((uint32_t)dest_add
    5cf4:	6a3a      	ldr	r2, [r7, #32]
			- ((uint32_t)dest_add % FLASH_PAGE_SIZE));
    5cf6:	6a3b      	ldr	r3, [r7, #32]
    5cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5cfc:	1ad3      	subs	r3, r2, r3
			+ FLASH_PAGE_SIZE))));

	b_user_page = (volatile uint8_t *)dst
			>= (uint8_t *)FLASH_USER_PAGE_ADDR;

	flash_add = (uint8_t *)((uint32_t)dest_add
    5cfe:	627b      	str	r3, [r7, #36]	; 0x24
			- ((uint32_t)dest_add % FLASH_PAGE_SIZE));

	while (nbytes) {
    5d00:	e06f      	b.n	5de2 <flashcalw_memcpy+0x116>
		/* Clear the page buffer in order to prepare data for a flash
		 * page write. */
		flashcalw_clear_page_buffer();
    5d02:	4b3e      	ldr	r3, [pc, #248]	; (5dfc <flashcalw_memcpy+0x130>)
    5d04:	4798      	blx	r3
		error_status |= flashcalw_error_status;
    5d06:	4b3e      	ldr	r3, [pc, #248]	; (5e00 <flashcalw_memcpy+0x134>)
    5d08:	681b      	ldr	r3, [r3, #0]
    5d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5d0c:	4313      	orrs	r3, r2
    5d0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Loop in the page */
		for (page_pos = 0; page_pos < FLASH_PAGE_SIZE;
    5d10:	2300      	movs	r3, #0
    5d12:	85fb      	strh	r3, [r7, #46]	; 0x2e
    5d14:	e03e      	b.n	5d94 <flashcalw_memcpy+0xc8>
				page_pos += sizeof(uint64_t)) {
			/* Read the flash double-word buffer */
			flash_dword.u64 = *(volatile uint64_t *)((uint32_t)flash_add);
    5d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d18:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

			/* Update double-word if necessary */
			for (i = 0; i < sizeof(uint64_t); i++) {
    5d20:	2300      	movs	r3, #0
    5d22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    5d26:	e01e      	b.n	5d66 <flashcalw_memcpy+0x9a>
				if (nbytes && (flash_add == dest_add)) {
    5d28:	687b      	ldr	r3, [r7, #4]
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d013      	beq.n	5d56 <flashcalw_memcpy+0x8a>
    5d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d30:	6a3b      	ldr	r3, [r7, #32]
    5d32:	429a      	cmp	r2, r3
    5d34:	d10f      	bne.n	5d56 <flashcalw_memcpy+0x8a>
					/* Update page with data source */
					flash_dword.u8[i] = *src_buf++;
    5d36:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
    5d3a:	69fb      	ldr	r3, [r7, #28]
    5d3c:	1c5a      	adds	r2, r3, #1
    5d3e:	61fa      	str	r2, [r7, #28]
    5d40:	781a      	ldrb	r2, [r3, #0]
    5d42:	f107 0310 	add.w	r3, r7, #16
    5d46:	440b      	add	r3, r1
    5d48:	701a      	strb	r2, [r3, #0]
					dest_add++;
    5d4a:	6a3b      	ldr	r3, [r7, #32]
    5d4c:	3301      	adds	r3, #1
    5d4e:	623b      	str	r3, [r7, #32]
					nbytes--;
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	3b01      	subs	r3, #1
    5d54:	607b      	str	r3, [r7, #4]
				}

				flash_add++;
    5d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d58:	3301      	adds	r3, #1
    5d5a:	627b      	str	r3, [r7, #36]	; 0x24
				page_pos += sizeof(uint64_t)) {
			/* Read the flash double-word buffer */
			flash_dword.u64 = *(volatile uint64_t *)((uint32_t)flash_add);

			/* Update double-word if necessary */
			for (i = 0; i < sizeof(uint64_t); i++) {
    5d5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    5d60:	3301      	adds	r3, #1
    5d62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    5d66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    5d6a:	2b07      	cmp	r3, #7
    5d6c:	d9dc      	bls.n	5d28 <flashcalw_memcpy+0x5c>

				flash_add++;
			}

			/* Workaround for corrupted data after page write operations */
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))
    5d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d70:	3b08      	subs	r3, #8
    5d72:	4619      	mov	r1, r3
					= (uint64_t)-1;
    5d74:	f04f 32ff 	mov.w	r2, #4294967295
    5d78:	f04f 33ff 	mov.w	r3, #4294967295
    5d7c:	e9c1 2300 	strd	r2, r3, [r1]
			
			/* Write the flash double-word buffer to the page buffer */
			*(volatile uint64_t *)((uint32_t)flash_add - sizeof(uint64_t))
    5d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d82:	3b08      	subs	r3, #8
    5d84:	4619      	mov	r1, r3
					= flash_dword.u64;
    5d86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5d8a:	e9c1 2300 	strd	r2, r3, [r1]
		flashcalw_clear_page_buffer();
		error_status |= flashcalw_error_status;

		/* Loop in the page */
		for (page_pos = 0; page_pos < FLASH_PAGE_SIZE;
				page_pos += sizeof(uint64_t)) {
    5d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    5d90:	3308      	adds	r3, #8
    5d92:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 * page write. */
		flashcalw_clear_page_buffer();
		error_status |= flashcalw_error_status;

		/* Loop in the page */
		for (page_pos = 0; page_pos < FLASH_PAGE_SIZE;
    5d94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    5d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5d9a:	d3bc      	bcc.n	5d16 <flashcalw_memcpy+0x4a>
					= flash_dword.u64;
		}

		/* Erase the current page if requested and write it from the
		 * page buffer. */
		if (erase) {
    5d9c:	78fb      	ldrb	r3, [r7, #3]
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d010      	beq.n	5dc4 <flashcalw_memcpy+0xf8>
			(b_user_page) ? flashcalw_erase_user_page(false)
			: flashcalw_erase_page(-1, false);
    5da2:	7efb      	ldrb	r3, [r7, #27]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d003      	beq.n	5db0 <flashcalw_memcpy+0xe4>
		}

		/* Erase the current page if requested and write it from the
		 * page buffer. */
		if (erase) {
			(b_user_page) ? flashcalw_erase_user_page(false)
    5da8:	2000      	movs	r0, #0
    5daa:	4b16      	ldr	r3, [pc, #88]	; (5e04 <flashcalw_memcpy+0x138>)
    5dac:	4798      	blx	r3
    5dae:	e004      	b.n	5dba <flashcalw_memcpy+0xee>
			: flashcalw_erase_page(-1, false);
    5db0:	f04f 30ff 	mov.w	r0, #4294967295
    5db4:	2100      	movs	r1, #0
    5db6:	4b14      	ldr	r3, [pc, #80]	; (5e08 <flashcalw_memcpy+0x13c>)
    5db8:	4798      	blx	r3
			error_status |= flashcalw_error_status;
    5dba:	4b11      	ldr	r3, [pc, #68]	; (5e00 <flashcalw_memcpy+0x134>)
    5dbc:	681b      	ldr	r3, [r3, #0]
    5dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5dc0:	4313      	orrs	r3, r2
    5dc2:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* Write the page */
		(b_user_page) ? flashcalw_write_user_page()
		: flashcalw_write_page(-1);
    5dc4:	7efb      	ldrb	r3, [r7, #27]
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d002      	beq.n	5dd0 <flashcalw_memcpy+0x104>
			: flashcalw_erase_page(-1, false);
			error_status |= flashcalw_error_status;
		}

		/* Write the page */
		(b_user_page) ? flashcalw_write_user_page()
    5dca:	4b10      	ldr	r3, [pc, #64]	; (5e0c <flashcalw_memcpy+0x140>)
    5dcc:	4798      	blx	r3
    5dce:	e003      	b.n	5dd8 <flashcalw_memcpy+0x10c>
		: flashcalw_write_page(-1);
    5dd0:	f04f 30ff 	mov.w	r0, #4294967295
    5dd4:	4b0e      	ldr	r3, [pc, #56]	; (5e10 <flashcalw_memcpy+0x144>)
    5dd6:	4798      	blx	r3
		error_status |= flashcalw_error_status;
    5dd8:	4b09      	ldr	r3, [pc, #36]	; (5e00 <flashcalw_memcpy+0x134>)
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5dde:	4313      	orrs	r3, r2
    5de0:	62bb      	str	r3, [r7, #40]	; 0x28
			>= (uint8_t *)FLASH_USER_PAGE_ADDR;

	flash_add = (uint8_t *)((uint32_t)dest_add
			- ((uint32_t)dest_add % FLASH_PAGE_SIZE));

	while (nbytes) {
    5de2:	687b      	ldr	r3, [r7, #4]
    5de4:	2b00      	cmp	r3, #0
    5de6:	d18c      	bne.n	5d02 <flashcalw_memcpy+0x36>
		(b_user_page) ? flashcalw_write_user_page()
		: flashcalw_write_page(-1);
		error_status |= flashcalw_error_status;
	}
	/* Update the FLASHC error status. */
	flashcalw_error_status = error_status;
    5de8:	4b05      	ldr	r3, [pc, #20]	; (5e00 <flashcalw_memcpy+0x134>)
    5dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5dec:	601a      	str	r2, [r3, #0]

	/* Return the initial destination pointer as the standard memcpy
	 * function does. */
	return dst;
    5dee:	68fb      	ldr	r3, [r7, #12]
}
    5df0:	4618      	mov	r0, r3
    5df2:	3730      	adds	r7, #48	; 0x30
    5df4:	46bd      	mov	sp, r7
    5df6:	bd80      	pop	{r7, pc}
    5df8:	007fffff 	.word	0x007fffff
    5dfc:	00005b89 	.word	0x00005b89
    5e00:	20000dc8 	.word	0x20000dc8
    5e04:	00005c79 	.word	0x00005c79
    5e08:	00005be9 	.word	0x00005be9
    5e0c:	00005cb9 	.word	0x00005cb9
    5e10:	00005c3d 	.word	0x00005c3d

00005e14 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
    5e14:	b480      	push	{r7}
    5e16:	b083      	sub	sp, #12
    5e18:	af00      	add	r7, sp, #0
    5e1a:	4603      	mov	r3, r0
    5e1c:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    5e1e:	79fb      	ldrb	r3, [r7, #7]
    5e20:	2b06      	cmp	r3, #6
    5e22:	d821      	bhi.n	5e68 <osc_get_rate+0x54>
    5e24:	a201      	add	r2, pc, #4	; (adr r2, 5e2c <osc_get_rate+0x18>)
    5e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e2a:	bf00      	nop
    5e2c:	00005e49 	.word	0x00005e49
    5e30:	00005e4d 	.word	0x00005e4d
    5e34:	00005e53 	.word	0x00005e53
    5e38:	00005e59 	.word	0x00005e59
    5e3c:	00005e5d 	.word	0x00005e5d
    5e40:	00005e61 	.word	0x00005e61
    5e44:	00005e65 	.word	0x00005e65
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
    5e48:	4b0b      	ldr	r3, [pc, #44]	; (5e78 <osc_get_rate+0x64>)
    5e4a:	e00e      	b.n	5e6a <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
    5e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5e50:	e00b      	b.n	5e6a <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    5e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5e56:	e008      	b.n	5e6a <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    5e58:	4b08      	ldr	r3, [pc, #32]	; (5e7c <osc_get_rate+0x68>)
    5e5a:	e006      	b.n	5e6a <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
    5e5c:	4b08      	ldr	r3, [pc, #32]	; (5e80 <osc_get_rate+0x6c>)
    5e5e:	e004      	b.n	5e6a <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
    5e60:	4b08      	ldr	r3, [pc, #32]	; (5e84 <osc_get_rate+0x70>)
    5e62:	e002      	b.n	5e6a <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    5e64:	4b08      	ldr	r3, [pc, #32]	; (5e88 <osc_get_rate+0x74>)
    5e66:	e000      	b.n	5e6a <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
    5e68:	2300      	movs	r3, #0
	}
}
    5e6a:	4618      	mov	r0, r3
    5e6c:	370c      	adds	r7, #12
    5e6e:	46bd      	mov	sp, r7
    5e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e74:	4770      	bx	lr
    5e76:	bf00      	nop
    5e78:	00b71b00 	.word	0x00b71b00
    5e7c:	04c4b400 	.word	0x04c4b400
    5e80:	003d0900 	.word	0x003d0900
    5e84:	000f4240 	.word	0x000f4240
    5e88:	0001c138 	.word	0x0001c138

00005e8c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    5e8c:	b580      	push	{r7, lr}
    5e8e:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
    5e90:	2000      	movs	r0, #0
    5e92:	4b03      	ldr	r3, [pc, #12]	; (5ea0 <sysclk_get_main_hz+0x14>)
    5e94:	4798      	blx	r3
    5e96:	4603      	mov	r3, r0
    5e98:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    5e9a:	4618      	mov	r0, r3
    5e9c:	bd80      	pop	{r7, pc}
    5e9e:	bf00      	nop
    5ea0:	00005e15 	.word	0x00005e15

00005ea4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    5ea4:	b580      	push	{r7, lr}
    5ea6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    5ea8:	4b02      	ldr	r3, [pc, #8]	; (5eb4 <sysclk_get_cpu_hz+0x10>)
    5eaa:	4798      	blx	r3
    5eac:	4603      	mov	r3, r0
}
    5eae:	4618      	mov	r0, r3
    5eb0:	bd80      	pop	{r7, pc}
    5eb2:	bf00      	nop
    5eb4:	00005e8d 	.word	0x00005e8d

00005eb8 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	b084      	sub	sp, #16
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	6078      	str	r0, [r7, #4]
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    5ec0:	4b19      	ldr	r3, [pc, #100]	; (5f28 <wdt_set_ctrl+0x70>)
    5ec2:	681b      	ldr	r3, [r3, #0]
    5ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    5ec8:	2b00      	cmp	r3, #0
    5eca:	d10e      	bne.n	5eea <wdt_set_ctrl+0x32>
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    5ecc:	4b17      	ldr	r3, [pc, #92]	; (5f2c <wdt_set_ctrl+0x74>)
    5ece:	4798      	blx	r3
    5ed0:	4603      	mov	r3, r0
    5ed2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    5ed6:	339c      	adds	r3, #156	; 0x9c
    5ed8:	005b      	lsls	r3, r3, #1
    5eda:	3b01      	subs	r3, #1
    5edc:	08da      	lsrs	r2, r3, #3
    5ede:	4b14      	ldr	r3, [pc, #80]	; (5f30 <wdt_set_ctrl+0x78>)
    5ee0:	fba3 1302 	umull	r1, r3, r3, r2
    5ee4:	0a5b      	lsrs	r3, r3, #9
    5ee6:	60fb      	str	r3, [r7, #12]
    5ee8:	e008      	b.n	5efc <wdt_set_ctrl+0x44>
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    5eea:	4b10      	ldr	r3, [pc, #64]	; (5f2c <wdt_set_ctrl+0x74>)
    5eec:	4798      	blx	r3
    5eee:	4603      	mov	r3, r0
    5ef0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    5ef4:	005b      	lsls	r3, r3, #1
    5ef6:	3b01      	subs	r3, #1
    5ef8:	0bdb      	lsrs	r3, r3, #15
    5efa:	60fb      	str	r3, [r7, #12]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    5efc:	68fb      	ldr	r3, [r7, #12]
    5efe:	08db      	lsrs	r3, r3, #3
    5f00:	60fb      	str	r3, [r7, #12]
	while(dly--);
    5f02:	bf00      	nop
    5f04:	68fb      	ldr	r3, [r7, #12]
    5f06:	1e5a      	subs	r2, r3, #1
    5f08:	60fa      	str	r2, [r7, #12]
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d1fa      	bne.n	5f04 <wdt_set_ctrl+0x4c>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    5f0e:	4b06      	ldr	r3, [pc, #24]	; (5f28 <wdt_set_ctrl+0x70>)
    5f10:	687a      	ldr	r2, [r7, #4]
    5f12:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
    5f16:	601a      	str	r2, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    5f18:	4b03      	ldr	r3, [pc, #12]	; (5f28 <wdt_set_ctrl+0x70>)
    5f1a:	687a      	ldr	r2, [r7, #4]
    5f1c:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    5f20:	601a      	str	r2, [r3, #0]
}
    5f22:	3710      	adds	r7, #16
    5f24:	46bd      	mov	sp, r7
    5f26:	bd80      	pop	{r7, pc}
    5f28:	400f0c00 	.word	0x400f0c00
    5f2c:	00005ea5 	.word	0x00005ea5
    5f30:	091e38ab 	.word	0x091e38ab

00005f34 <wdt_get_config_defaults>:
 *  - No window period, so that the watchdog count can be reset at any time.
 *
 *  \param cfg    Configuration structure to initialize to default values.
 */
void wdt_get_config_defaults(struct wdt_config *const cfg)
{
    5f34:	b480      	push	{r7}
    5f36:	b083      	sub	sp, #12
    5f38:	af00      	add	r7, sp, #0
    5f3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	2200      	movs	r2, #0
    5f40:	601a      	str	r2, [r3, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	2200      	movs	r2, #0
    5f46:	605a      	str	r2, [r3, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	2210      	movs	r2, #16
    5f4c:	721a      	strb	r2, [r3, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	2200      	movs	r2, #0
    5f52:	725a      	strb	r2, [r3, #9]
	cfg->disable_flash_cali = true;
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	2201      	movs	r2, #1
    5f58:	729a      	strb	r2, [r3, #10]
	cfg->disable_wdt_after_reset = true;
    5f5a:	687b      	ldr	r3, [r7, #4]
    5f5c:	2201      	movs	r2, #1
    5f5e:	72da      	strb	r2, [r3, #11]
	cfg->always_on = false;
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	2200      	movs	r2, #0
    5f64:	731a      	strb	r2, [r3, #12]
}
    5f66:	370c      	adds	r7, #12
    5f68:	46bd      	mov	sp, r7
    5f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f6e:	4770      	bx	lr

00005f70 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    5f70:	b580      	push	{r7, lr}
    5f72:	b084      	sub	sp, #16
    5f74:	af00      	add	r7, sp, #0
    5f76:	60f8      	str	r0, [r7, #12]
    5f78:	60b9      	str	r1, [r7, #8]
    5f7a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	68ba      	ldr	r2, [r7, #8]
    5f80:	601a      	str	r2, [r3, #0]
	dev_inst->wdt_cfg = cfg;
    5f82:	68fb      	ldr	r3, [r7, #12]
    5f84:	687a      	ldr	r2, [r7, #4]
    5f86:	605a      	str	r2, [r3, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    5f88:	68b8      	ldr	r0, [r7, #8]
    5f8a:	4b36      	ldr	r3, [pc, #216]	; (6064 <wdt_init+0xf4>)
    5f8c:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    5f8e:	68bb      	ldr	r3, [r7, #8]
    5f90:	681b      	ldr	r3, [r3, #0]
    5f92:	f003 0308 	and.w	r3, r3, #8
    5f96:	2b00      	cmp	r3, #0
    5f98:	d001      	beq.n	5f9e <wdt_init+0x2e>
		return false;
    5f9a:	2300      	movs	r3, #0
    5f9c:	e05d      	b.n	605a <wdt_init+0xea>
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    5f9e:	68bb      	ldr	r3, [r7, #8]
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	f003 0301 	and.w	r3, r3, #1
    5fa6:	2b00      	cmp	r3, #0
    5fa8:	d00d      	beq.n	5fc6 <wdt_init+0x56>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    5faa:	68bb      	ldr	r3, [r7, #8]
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	f023 0301 	bic.w	r3, r3, #1
    5fb2:	4618      	mov	r0, r3
    5fb4:	4b2c      	ldr	r3, [pc, #176]	; (6068 <wdt_init+0xf8>)
    5fb6:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    5fb8:	bf00      	nop
    5fba:	68bb      	ldr	r3, [r7, #8]
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	f003 0301 	and.w	r3, r3, #1
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d1f9      	bne.n	5fba <wdt_init+0x4a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    5fc6:	68bb      	ldr	r3, [r7, #8]
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d00d      	beq.n	5fee <wdt_init+0x7e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    5fd2:	68bb      	ldr	r3, [r7, #8]
    5fd4:	681b      	ldr	r3, [r3, #0]
    5fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5fda:	4618      	mov	r0, r3
    5fdc:	4b22      	ldr	r3, [pc, #136]	; (6068 <wdt_init+0xf8>)
    5fde:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    5fe0:	bf00      	nop
    5fe2:	68bb      	ldr	r3, [r7, #8]
    5fe4:	681b      	ldr	r3, [r3, #0]
    5fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    5fea:	2b00      	cmp	r3, #0
    5fec:	d1f9      	bne.n	5fe2 <wdt_init+0x72>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	681a      	ldr	r2, [r3, #0]
			cfg->wdt_mode |
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	685b      	ldr	r3, [r3, #4]
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    5ff6:	431a      	orrs	r2, r3
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	7a1b      	ldrb	r3, [r3, #8]
    5ffc:	021b      	lsls	r3, r3, #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    5ffe:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    6002:	431a      	orrs	r2, r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    6004:	687b      	ldr	r3, [r7, #4]
    6006:	7a5b      	ldrb	r3, [r3, #9]
    6008:	049b      	lsls	r3, r3, #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    600a:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
    600e:	431a      	orrs	r2, r3
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	7a9b      	ldrb	r3, [r3, #10]

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    6014:	2b00      	cmp	r3, #0
    6016:	d001      	beq.n	601c <wdt_init+0xac>
    6018:	2380      	movs	r3, #128	; 0x80
    601a:	e000      	b.n	601e <wdt_init+0xae>
    601c:	2300      	movs	r3, #0
    601e:	431a      	orrs	r2, r3
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	7adb      	ldrb	r3, [r3, #11]
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    6024:	2b00      	cmp	r3, #0
    6026:	d001      	beq.n	602c <wdt_init+0xbc>
    6028:	2302      	movs	r3, #2
    602a:	e000      	b.n	602e <wdt_init+0xbe>
    602c:	2300      	movs	r3, #0
    602e:	4313      	orrs	r3, r2
    6030:	4618      	mov	r0, r3
    6032:	4b0d      	ldr	r3, [pc, #52]	; (6068 <wdt_init+0xf8>)
    6034:	4798      	blx	r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    6036:	68bb      	ldr	r3, [r7, #8]
    6038:	681b      	ldr	r3, [r3, #0]
    603a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    603e:	4618      	mov	r0, r3
    6040:	4b09      	ldr	r3, [pc, #36]	; (6068 <wdt_init+0xf8>)
    6042:	4798      	blx	r3
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    6044:	bf00      	nop
    6046:	68bb      	ldr	r3, [r7, #8]
    6048:	681b      	ldr	r3, [r3, #0]
    604a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    604e:	2b00      	cmp	r3, #0
    6050:	d0f9      	beq.n	6046 <wdt_init+0xd6>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    6052:	68b8      	ldr	r0, [r7, #8]
    6054:	4b05      	ldr	r3, [pc, #20]	; (606c <wdt_init+0xfc>)
    6056:	4798      	blx	r3

	return true;
    6058:	2301      	movs	r3, #1
}
    605a:	4618      	mov	r0, r3
    605c:	3710      	adds	r7, #16
    605e:	46bd      	mov	sp, r7
    6060:	bd80      	pop	{r7, pc}
    6062:	bf00      	nop
    6064:	00004899 	.word	0x00004899
    6068:	00005eb9 	.word	0x00005eb9
    606c:	00004cc9 	.word	0x00004cc9

00006070 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    6070:	b580      	push	{r7, lr}
    6072:	b084      	sub	sp, #16
    6074:	af00      	add	r7, sp, #0
    6076:	6078      	str	r0, [r7, #4]
	Wdt *wdt = dev_inst->hw_dev;
    6078:	687b      	ldr	r3, [r7, #4]
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	60fb      	str	r3, [r7, #12]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    607e:	68fb      	ldr	r3, [r7, #12]
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	f023 0301 	bic.w	r3, r3, #1
    6086:	4618      	mov	r0, r3
    6088:	4b07      	ldr	r3, [pc, #28]	; (60a8 <wdt_disable+0x38>)
    608a:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    608c:	bf00      	nop
    608e:	68fb      	ldr	r3, [r7, #12]
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	f003 0301 	and.w	r3, r3, #1
    6096:	2b00      	cmp	r3, #0
    6098:	d1f9      	bne.n	608e <wdt_disable+0x1e>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    609a:	68f8      	ldr	r0, [r7, #12]
    609c:	4b03      	ldr	r3, [pc, #12]	; (60ac <wdt_disable+0x3c>)
    609e:	4798      	blx	r3
}
    60a0:	3710      	adds	r7, #16
    60a2:	46bd      	mov	sp, r7
    60a4:	bd80      	pop	{r7, pc}
    60a6:	bf00      	nop
    60a8:	00005eb9 	.word	0x00005eb9
    60ac:	00004cc9 	.word	0x00004cc9

000060b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    60b0:	b480      	push	{r7}
    60b2:	af00      	add	r7, sp, #0
	while (1) {
	}
    60b4:	e7fe      	b.n	60b4 <Dummy_Handler+0x4>
    60b6:	bf00      	nop

000060b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    60b8:	b580      	push	{r7, lr}
    60ba:	b082      	sub	sp, #8
    60bc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
    60be:	4b16      	ldr	r3, [pc, #88]	; (6118 <Reset_Handler+0x60>)
    60c0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
    60c2:	4b16      	ldr	r3, [pc, #88]	; (611c <Reset_Handler+0x64>)
    60c4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
    60c6:	687a      	ldr	r2, [r7, #4]
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	429a      	cmp	r2, r3
    60cc:	d00c      	beq.n	60e8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
    60ce:	e007      	b.n	60e0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
    60d0:	683b      	ldr	r3, [r7, #0]
    60d2:	1d1a      	adds	r2, r3, #4
    60d4:	603a      	str	r2, [r7, #0]
    60d6:	687a      	ldr	r2, [r7, #4]
    60d8:	1d11      	adds	r1, r2, #4
    60da:	6079      	str	r1, [r7, #4]
    60dc:	6812      	ldr	r2, [r2, #0]
    60de:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    60e0:	683a      	ldr	r2, [r7, #0]
    60e2:	4b0f      	ldr	r3, [pc, #60]	; (6120 <Reset_Handler+0x68>)
    60e4:	429a      	cmp	r2, r3
    60e6:	d3f3      	bcc.n	60d0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    60e8:	4b0e      	ldr	r3, [pc, #56]	; (6124 <Reset_Handler+0x6c>)
    60ea:	603b      	str	r3, [r7, #0]
    60ec:	e004      	b.n	60f8 <Reset_Handler+0x40>
		*pDest++ = 0;
    60ee:	683b      	ldr	r3, [r7, #0]
    60f0:	1d1a      	adds	r2, r3, #4
    60f2:	603a      	str	r2, [r7, #0]
    60f4:	2200      	movs	r2, #0
    60f6:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    60f8:	683a      	ldr	r2, [r7, #0]
    60fa:	4b0b      	ldr	r3, [pc, #44]	; (6128 <Reset_Handler+0x70>)
    60fc:	429a      	cmp	r2, r3
    60fe:	d3f6      	bcc.n	60ee <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
    6100:	4b0a      	ldr	r3, [pc, #40]	; (612c <Reset_Handler+0x74>)
    6102:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6104:	4b0a      	ldr	r3, [pc, #40]	; (6130 <Reset_Handler+0x78>)
    6106:	687a      	ldr	r2, [r7, #4]
    6108:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    610c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
    610e:	4b09      	ldr	r3, [pc, #36]	; (6134 <Reset_Handler+0x7c>)
    6110:	4798      	blx	r3

	/* Branch to main function */
	main();
    6112:	4b09      	ldr	r3, [pc, #36]	; (6138 <Reset_Handler+0x80>)
    6114:	4798      	blx	r3

	/* Infinite loop */
	while (1);
    6116:	e7fe      	b.n	6116 <Reset_Handler+0x5e>
    6118:	00010d38 	.word	0x00010d38
    611c:	20000000 	.word	0x20000000
    6120:	20000d64 	.word	0x20000d64
    6124:	20000d64 	.word	0x20000d64
    6128:	20000fac 	.word	0x20000fac
    612c:	00000000 	.word	0x00000000
    6130:	e000ed00 	.word	0xe000ed00
    6134:	000082b5 	.word	0x000082b5
    6138:	00006f49 	.word	0x00006f49

0000613c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    613c:	b480      	push	{r7}
    613e:	b085      	sub	sp, #20
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
    6144:	4b10      	ldr	r3, [pc, #64]	; (6188 <_sbrk+0x4c>)
    6146:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
    6148:	4b10      	ldr	r3, [pc, #64]	; (618c <_sbrk+0x50>)
    614a:	681b      	ldr	r3, [r3, #0]
    614c:	2b00      	cmp	r3, #0
    614e:	d102      	bne.n	6156 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
    6150:	4b0e      	ldr	r3, [pc, #56]	; (618c <_sbrk+0x50>)
    6152:	4a0f      	ldr	r2, [pc, #60]	; (6190 <_sbrk+0x54>)
    6154:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6156:	4b0d      	ldr	r3, [pc, #52]	; (618c <_sbrk+0x50>)
    6158:	681b      	ldr	r3, [r3, #0]
    615a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
    615c:	68ba      	ldr	r2, [r7, #8]
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	441a      	add	r2, r3
    6162:	68fb      	ldr	r3, [r7, #12]
    6164:	429a      	cmp	r2, r3
    6166:	dd02      	ble.n	616e <_sbrk+0x32>
		return (caddr_t) -1;	
    6168:	f04f 33ff 	mov.w	r3, #4294967295
    616c:	e006      	b.n	617c <_sbrk+0x40>
	}

	heap += incr;
    616e:	4b07      	ldr	r3, [pc, #28]	; (618c <_sbrk+0x50>)
    6170:	681a      	ldr	r2, [r3, #0]
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	441a      	add	r2, r3
    6176:	4b05      	ldr	r3, [pc, #20]	; (618c <_sbrk+0x50>)
    6178:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    617a:	68bb      	ldr	r3, [r7, #8]
}
    617c:	4618      	mov	r0, r3
    617e:	3714      	adds	r7, #20
    6180:	46bd      	mov	sp, r7
    6182:	f85d 7b04 	ldr.w	r7, [sp], #4
    6186:	4770      	bx	lr
    6188:	20007ffc 	.word	0x20007ffc
    618c:	20000dcc 	.word	0x20000dcc
    6190:	20001fb0 	.word	0x20001fb0

00006194 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6194:	b480      	push	{r7}
    6196:	b083      	sub	sp, #12
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
	return -1;
    619c:	f04f 33ff 	mov.w	r3, #4294967295
}
    61a0:	4618      	mov	r0, r3
    61a2:	370c      	adds	r7, #12
    61a4:	46bd      	mov	sp, r7
    61a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61aa:	4770      	bx	lr

000061ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    61ac:	b480      	push	{r7}
    61ae:	b083      	sub	sp, #12
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
    61b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    61b6:	683b      	ldr	r3, [r7, #0]
    61b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    61bc:	605a      	str	r2, [r3, #4]

	return 0;
    61be:	2300      	movs	r3, #0
}
    61c0:	4618      	mov	r0, r3
    61c2:	370c      	adds	r7, #12
    61c4:	46bd      	mov	sp, r7
    61c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ca:	4770      	bx	lr

000061cc <_isatty>:

extern int _isatty(int file)
{
    61cc:	b480      	push	{r7}
    61ce:	b083      	sub	sp, #12
    61d0:	af00      	add	r7, sp, #0
    61d2:	6078      	str	r0, [r7, #4]
	return 1;
    61d4:	2301      	movs	r3, #1
}
    61d6:	4618      	mov	r0, r3
    61d8:	370c      	adds	r7, #12
    61da:	46bd      	mov	sp, r7
    61dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e0:	4770      	bx	lr
    61e2:	bf00      	nop

000061e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    61e4:	b480      	push	{r7}
    61e6:	b085      	sub	sp, #20
    61e8:	af00      	add	r7, sp, #0
    61ea:	60f8      	str	r0, [r7, #12]
    61ec:	60b9      	str	r1, [r7, #8]
    61ee:	607a      	str	r2, [r7, #4]
	return 0;
    61f0:	2300      	movs	r3, #0
}
    61f2:	4618      	mov	r0, r3
    61f4:	3714      	adds	r7, #20
    61f6:	46bd      	mov	sp, r7
    61f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    61fc:	4770      	bx	lr
    61fe:	bf00      	nop

00006200 <ast_is_busy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST is busy, else it will return 0.
 */
static inline bool ast_is_busy(Ast *ast)
{
    6200:	b480      	push	{r7}
    6202:	b083      	sub	sp, #12
    6204:	af00      	add	r7, sp, #0
    6206:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	689b      	ldr	r3, [r3, #8]
    620c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6210:	2b00      	cmp	r3, #0
    6212:	bf0c      	ite	eq
    6214:	2300      	moveq	r3, #0
    6216:	2301      	movne	r3, #1
    6218:	b2db      	uxtb	r3, r3
}
    621a:	4618      	mov	r0, r3
    621c:	370c      	adds	r7, #12
    621e:	46bd      	mov	sp, r7
    6220:	f85d 7b04 	ldr.w	r7, [sp], #4
    6224:	4770      	bx	lr
    6226:	bf00      	nop

00006228 <ast_start>:
 * \brief Start AST counter.
 *
 * \param ast  Base address of the AST.
 */
static inline void ast_start(Ast *ast)
{
    6228:	b580      	push	{r7, lr}
    622a:	b082      	sub	sp, #8
    622c:	af00      	add	r7, sp, #0
    622e:	6078      	str	r0, [r7, #4]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    6230:	bf00      	nop
    6232:	6878      	ldr	r0, [r7, #4]
    6234:	4b06      	ldr	r3, [pc, #24]	; (6250 <ast_start+0x28>)
    6236:	4798      	blx	r3
    6238:	4603      	mov	r3, r0
    623a:	2b00      	cmp	r3, #0
    623c:	d1f9      	bne.n	6232 <ast_start+0xa>
	}
	ast->AST_CR |= AST_CR_EN;
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	681b      	ldr	r3, [r3, #0]
    6242:	f043 0201 	orr.w	r2, r3, #1
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	601a      	str	r2, [r3, #0]
}
    624a:	3708      	adds	r7, #8
    624c:	46bd      	mov	sp, r7
    624e:	bd80      	pop	{r7, pc}
    6250:	00006201 	.word	0x00006201

00006254 <ast_stop>:
 * \brief Stop AST counter.
 *
 * \param ast  Base address of the AST.
 */
static inline void ast_stop(Ast *ast)
{
    6254:	b580      	push	{r7, lr}
    6256:	b082      	sub	sp, #8
    6258:	af00      	add	r7, sp, #0
    625a:	6078      	str	r0, [r7, #4]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    625c:	bf00      	nop
    625e:	6878      	ldr	r0, [r7, #4]
    6260:	4b06      	ldr	r3, [pc, #24]	; (627c <ast_stop+0x28>)
    6262:	4798      	blx	r3
    6264:	4603      	mov	r3, r0
    6266:	2b00      	cmp	r3, #0
    6268:	d1f9      	bne.n	625e <ast_stop+0xa>
	}
	ast->AST_CR &= ~(AST_CR_EN);
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	681b      	ldr	r3, [r3, #0]
    626e:	f023 0201 	bic.w	r2, r3, #1
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	601a      	str	r2, [r3, #0]
}
    6276:	3708      	adds	r7, #8
    6278:	46bd      	mov	sp, r7
    627a:	bd80      	pop	{r7, pc}
    627c:	00006201 	.word	0x00006201

00006280 <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    6280:	b580      	push	{r7, lr}
    6282:	b082      	sub	sp, #8
    6284:	af00      	add	r7, sp, #0
    6286:	4603      	mov	r3, r0
    6288:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    628a:	79fb      	ldrb	r3, [r7, #7]
    628c:	2b06      	cmp	r3, #6
    628e:	d823      	bhi.n	62d8 <osc_enable+0x58>
    6290:	a201      	add	r2, pc, #4	; (adr r2, 6298 <osc_enable+0x18>)
    6292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6296:	bf00      	nop
    6298:	000062b5 	.word	0x000062b5
    629c:	000062bb 	.word	0x000062bb
    62a0:	000062c1 	.word	0x000062c1
    62a4:	000062c7 	.word	0x000062c7
    62a8:	000062cd 	.word	0x000062cd
    62ac:	000062d3 	.word	0x000062d3
    62b0:	000062d9 	.word	0x000062d9
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    62b4:	4b0a      	ldr	r3, [pc, #40]	; (62e0 <osc_enable+0x60>)
    62b6:	4798      	blx	r3
		break;
    62b8:	e00f      	b.n	62da <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    62ba:	4b0a      	ldr	r3, [pc, #40]	; (62e4 <osc_enable+0x64>)
    62bc:	4798      	blx	r3
		break;
    62be:	e00c      	b.n	62da <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    62c0:	4b09      	ldr	r3, [pc, #36]	; (62e8 <osc_enable+0x68>)
    62c2:	4798      	blx	r3
		break;
    62c4:	e009      	b.n	62da <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    62c6:	4b09      	ldr	r3, [pc, #36]	; (62ec <osc_enable+0x6c>)
    62c8:	4798      	blx	r3
		break;
    62ca:	e006      	b.n	62da <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    62cc:	4b08      	ldr	r3, [pc, #32]	; (62f0 <osc_enable+0x70>)
    62ce:	4798      	blx	r3
		break;
    62d0:	e003      	b.n	62da <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    62d2:	4b08      	ldr	r3, [pc, #32]	; (62f4 <osc_enable+0x74>)
    62d4:	4798      	blx	r3
		break;
    62d6:	e000      	b.n	62da <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    62d8:	bf00      	nop
	}
}
    62da:	3708      	adds	r7, #8
    62dc:	46bd      	mov	sp, r7
    62de:	bd80      	pop	{r7, pc}
    62e0:	00003c59 	.word	0x00003c59
    62e4:	00003c91 	.word	0x00003c91
    62e8:	00003cc9 	.word	0x00003cc9
    62ec:	00003d49 	.word	0x00003d49
    62f0:	00003d89 	.word	0x00003d89
    62f4:	00003d09 	.word	0x00003d09

000062f8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    62f8:	b480      	push	{r7}
    62fa:	b083      	sub	sp, #12
    62fc:	af00      	add	r7, sp, #0
    62fe:	4603      	mov	r3, r0
    6300:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    6302:	79fb      	ldrb	r3, [r7, #7]
    6304:	2b06      	cmp	r3, #6
    6306:	d84f      	bhi.n	63a8 <osc_is_ready+0xb0>
    6308:	a201      	add	r2, pc, #4	; (adr r2, 6310 <osc_is_ready+0x18>)
    630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    630e:	bf00      	nop
    6310:	0000632d 	.word	0x0000632d
    6314:	00006341 	.word	0x00006341
    6318:	00006355 	.word	0x00006355
    631c:	00006369 	.word	0x00006369
    6320:	0000637d 	.word	0x0000637d
    6324:	00006391 	.word	0x00006391
    6328:	000063a5 	.word	0x000063a5
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    632c:	4b22      	ldr	r3, [pc, #136]	; (63b8 <osc_is_ready+0xc0>)
    632e:	695b      	ldr	r3, [r3, #20]
    6330:	f003 0301 	and.w	r3, r3, #1
    6334:	2b00      	cmp	r3, #0
    6336:	bf0c      	ite	eq
    6338:	2300      	moveq	r3, #0
    633a:	2301      	movne	r3, #1
    633c:	b2db      	uxtb	r3, r3
    633e:	e034      	b.n	63aa <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    6340:	4b1e      	ldr	r3, [pc, #120]	; (63bc <osc_is_ready+0xc4>)
    6342:	695b      	ldr	r3, [r3, #20]
    6344:	f003 0301 	and.w	r3, r3, #1
    6348:	2b00      	cmp	r3, #0
    634a:	bf0c      	ite	eq
    634c:	2300      	moveq	r3, #0
    634e:	2301      	movne	r3, #1
    6350:	b2db      	uxtb	r3, r3
    6352:	e02a      	b.n	63aa <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    6354:	4b19      	ldr	r3, [pc, #100]	; (63bc <osc_is_ready+0xc4>)
    6356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6358:	f003 0301 	and.w	r3, r3, #1
    635c:	2b00      	cmp	r3, #0
    635e:	bf0c      	ite	eq
    6360:	2300      	moveq	r3, #0
    6362:	2301      	movne	r3, #1
    6364:	b2db      	uxtb	r3, r3
    6366:	e020      	b.n	63aa <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    6368:	4b13      	ldr	r3, [pc, #76]	; (63b8 <osc_is_ready+0xc0>)
    636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    636c:	f003 0301 	and.w	r3, r3, #1
    6370:	2b00      	cmp	r3, #0
    6372:	bf0c      	ite	eq
    6374:	2300      	moveq	r3, #0
    6376:	2301      	movne	r3, #1
    6378:	b2db      	uxtb	r3, r3
    637a:	e016      	b.n	63aa <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    637c:	4b0e      	ldr	r3, [pc, #56]	; (63b8 <osc_is_ready+0xc0>)
    637e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6380:	f003 0301 	and.w	r3, r3, #1
    6384:	2b00      	cmp	r3, #0
    6386:	bf0c      	ite	eq
    6388:	2300      	moveq	r3, #0
    638a:	2301      	movne	r3, #1
    638c:	b2db      	uxtb	r3, r3
    638e:	e00c      	b.n	63aa <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    6390:	4b0a      	ldr	r3, [pc, #40]	; (63bc <osc_is_ready+0xc4>)
    6392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    6394:	f003 0301 	and.w	r3, r3, #1
    6398:	2b00      	cmp	r3, #0
    639a:	bf0c      	ite	eq
    639c:	2300      	moveq	r3, #0
    639e:	2301      	movne	r3, #1
    63a0:	b2db      	uxtb	r3, r3
    63a2:	e002      	b.n	63aa <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    63a4:	2301      	movs	r3, #1
    63a6:	e000      	b.n	63aa <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    63a8:	2300      	movs	r3, #0
	}
}
    63aa:	4618      	mov	r0, r3
    63ac:	370c      	adds	r7, #12
    63ae:	46bd      	mov	sp, r7
    63b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b4:	4770      	bx	lr
    63b6:	bf00      	nop
    63b8:	400e0800 	.word	0x400e0800
    63bc:	400f0400 	.word	0x400f0400

000063c0 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
    63c0:	b480      	push	{r7}
    63c2:	b083      	sub	sp, #12
    63c4:	af00      	add	r7, sp, #0
    63c6:	4603      	mov	r3, r0
    63c8:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    63ca:	79fb      	ldrb	r3, [r7, #7]
    63cc:	2b06      	cmp	r3, #6
    63ce:	d821      	bhi.n	6414 <osc_get_rate+0x54>
    63d0:	a201      	add	r2, pc, #4	; (adr r2, 63d8 <osc_get_rate+0x18>)
    63d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    63d6:	bf00      	nop
    63d8:	000063f5 	.word	0x000063f5
    63dc:	000063f9 	.word	0x000063f9
    63e0:	000063ff 	.word	0x000063ff
    63e4:	00006405 	.word	0x00006405
    63e8:	00006409 	.word	0x00006409
    63ec:	0000640d 	.word	0x0000640d
    63f0:	00006411 	.word	0x00006411
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
    63f4:	4b0b      	ldr	r3, [pc, #44]	; (6424 <osc_get_rate+0x64>)
    63f6:	e00e      	b.n	6416 <osc_get_rate+0x56>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
    63f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    63fc:	e00b      	b.n	6416 <osc_get_rate+0x56>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    63fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6402:	e008      	b.n	6416 <osc_get_rate+0x56>

	case OSC_ID_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    6404:	4b08      	ldr	r3, [pc, #32]	; (6428 <osc_get_rate+0x68>)
    6406:	e006      	b.n	6416 <osc_get_rate+0x56>

		} else if (CONFIG_RCFAST_FRANGE == 1) {
			return OSC_RCFAST8M_NOMINAL_HZ;

		} else {
			return OSC_RCFAST4M_NOMINAL_HZ;
    6408:	4b08      	ldr	r3, [pc, #32]	; (642c <osc_get_rate+0x6c>)
    640a:	e004      	b.n	6416 <osc_get_rate+0x56>
		}

	case OSC_ID_RC1M:
		return OSC_RC1M_NOMINAL_HZ;
    640c:	4b08      	ldr	r3, [pc, #32]	; (6430 <osc_get_rate+0x70>)
    640e:	e002      	b.n	6416 <osc_get_rate+0x56>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    6410:	4b08      	ldr	r3, [pc, #32]	; (6434 <osc_get_rate+0x74>)
    6412:	e000      	b.n	6416 <osc_get_rate+0x56>

	default:
		/* unhandled_case(id); */
		return 0;
    6414:	2300      	movs	r3, #0
	}
}
    6416:	4618      	mov	r0, r3
    6418:	370c      	adds	r7, #12
    641a:	46bd      	mov	sp, r7
    641c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6420:	4770      	bx	lr
    6422:	bf00      	nop
    6424:	00b71b00 	.word	0x00b71b00
    6428:	04c4b400 	.word	0x04c4b400
    642c:	003d0900 	.word	0x003d0900
    6430:	000f4240 	.word	0x000f4240
    6434:	0001c138 	.word	0x0001c138

00006438 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    6438:	b580      	push	{r7, lr}
    643a:	b082      	sub	sp, #8
    643c:	af00      	add	r7, sp, #0
    643e:	4603      	mov	r3, r0
    6440:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    6442:	bf00      	nop
    6444:	79fb      	ldrb	r3, [r7, #7]
    6446:	4618      	mov	r0, r3
    6448:	4b05      	ldr	r3, [pc, #20]	; (6460 <osc_wait_ready+0x28>)
    644a:	4798      	blx	r3
    644c:	4603      	mov	r3, r0
    644e:	f083 0301 	eor.w	r3, r3, #1
    6452:	b2db      	uxtb	r3, r3
    6454:	2b00      	cmp	r3, #0
    6456:	d1f5      	bne.n	6444 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    6458:	3708      	adds	r7, #8
    645a:	46bd      	mov	sp, r7
    645c:	bd80      	pop	{r7, pc}
    645e:	bf00      	nop
    6460:	000062f9 	.word	0x000062f9

00006464 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    6464:	b580      	push	{r7, lr}
    6466:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		return pll_get_default_rate(0);
    6468:	2000      	movs	r0, #0
    646a:	4b03      	ldr	r3, [pc, #12]	; (6478 <sysclk_get_main_hz+0x14>)
    646c:	4798      	blx	r3
    646e:	4603      	mov	r3, r0
    6470:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    6472:	4618      	mov	r0, r3
    6474:	bd80      	pop	{r7, pc}
    6476:	bf00      	nop
    6478:	000063c1 	.word	0x000063c1

0000647c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    647c:	b580      	push	{r7, lr}
    647e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    6480:	4b02      	ldr	r3, [pc, #8]	; (648c <sysclk_get_cpu_hz+0x10>)
    6482:	4798      	blx	r3
    6484:	4603      	mov	r3, r0
}
    6486:	4618      	mov	r0, r3
    6488:	bd80      	pop	{r7, pc}
    648a:	bf00      	nop
    648c:	00006465 	.word	0x00006465

00006490 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    6490:	b480      	push	{r7}
    6492:	b08d      	sub	sp, #52	; 0x34
    6494:	af00      	add	r7, sp, #0
    6496:	6078      	str	r0, [r7, #4]
    6498:	460b      	mov	r3, r1
    649a:	70fb      	strb	r3, [r7, #3]
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	62fb      	str	r3, [r7, #44]	; 0x2c
    64a0:	78fb      	ldrb	r3, [r7, #3]
    64a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    64a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    64aa:	2b00      	cmp	r3, #0
    64ac:	d016      	beq.n	64dc <ioport_set_pin_level+0x4c>
    64ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64b0:	627b      	str	r3, [r7, #36]	; 0x24
    64b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64b4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    64b6:	6a3b      	ldr	r3, [r7, #32]
    64b8:	095b      	lsrs	r3, r3, #5
    64ba:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    64bc:	69fb      	ldr	r3, [r7, #28]
    64be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    64c2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    64c6:	025b      	lsls	r3, r3, #9
    64c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    64ca:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    64cc:	69ba      	ldr	r2, [r7, #24]
    64ce:	f002 021f 	and.w	r2, r2, #31
    64d2:	2101      	movs	r1, #1
    64d4:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    64d8:	655a      	str	r2, [r3, #84]	; 0x54
    64da:	e015      	b.n	6508 <ioport_set_pin_level+0x78>
    64dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64de:	617b      	str	r3, [r7, #20]
    64e0:	697b      	ldr	r3, [r7, #20]
    64e2:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    64e4:	693b      	ldr	r3, [r7, #16]
    64e6:	095b      	lsrs	r3, r3, #5
    64e8:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    64ea:	68fb      	ldr	r3, [r7, #12]
    64ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    64f0:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    64f4:	025b      	lsls	r3, r3, #9
    64f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    64f8:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    64fa:	68ba      	ldr	r2, [r7, #8]
    64fc:	f002 021f 	and.w	r2, r2, #31
    6500:	2101      	movs	r1, #1
    6502:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    6506:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(pin, level);
}
    6508:	3734      	adds	r7, #52	; 0x34
    650a:	46bd      	mov	sp, r7
    650c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6510:	4770      	bx	lr
    6512:	bf00      	nop

00006514 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    6514:	b480      	push	{r7}
    6516:	b089      	sub	sp, #36	; 0x24
    6518:	af00      	add	r7, sp, #0
    651a:	6078      	str	r0, [r7, #4]
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	61fb      	str	r3, [r7, #28]
    6520:	69fb      	ldr	r3, [r7, #28]
    6522:	61bb      	str	r3, [r7, #24]
    6524:	69bb      	ldr	r3, [r7, #24]
    6526:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6528:	697b      	ldr	r3, [r7, #20]
    652a:	095b      	lsrs	r3, r3, #5
    652c:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    652e:	693b      	ldr	r3, [r7, #16]
    6530:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6534:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6538:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    653a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    653c:	69fb      	ldr	r3, [r7, #28]
    653e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6540:	68fb      	ldr	r3, [r7, #12]
    6542:	f003 031f 	and.w	r3, r3, #31
    6546:	2101      	movs	r1, #1
    6548:	fa01 f303 	lsl.w	r3, r1, r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    654c:	4013      	ands	r3, r2
    654e:	2b00      	cmp	r3, #0
    6550:	bf0c      	ite	eq
    6552:	2300      	moveq	r3, #0
    6554:	2301      	movne	r3, #1
    6556:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
    6558:	4618      	mov	r0, r3
    655a:	3724      	adds	r7, #36	; 0x24
    655c:	46bd      	mov	sp, r7
    655e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6562:	4770      	bx	lr

00006564 <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
    6564:	b480      	push	{r7}
    6566:	b085      	sub	sp, #20
    6568:	af00      	add	r7, sp, #0
    656a:	6078      	str	r0, [r7, #4]
    656c:	687b      	ldr	r3, [r7, #4]
    656e:	60fb      	str	r3, [r7, #12]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6570:	68fb      	ldr	r3, [r7, #12]
    6572:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
}
    6574:	4618      	mov	r0, r3
    6576:	3714      	adds	r7, #20
    6578:	46bd      	mov	sp, r7
    657a:	f85d 7b04 	ldr.w	r7, [sp], #4
    657e:	4770      	bx	lr

00006580 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    6580:	b480      	push	{r7}
    6582:	b085      	sub	sp, #20
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    658c:	68fb      	ldr	r3, [r7, #12]
    658e:	f003 031f 	and.w	r3, r3, #31
    6592:	2201      	movs	r2, #1
    6594:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
}
    6598:	4618      	mov	r0, r3
    659a:	3714      	adds	r7, #20
    659c:	46bd      	mov	sp, r7
    659e:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a2:	4770      	bx	lr

000065a4 <gpio_enable_pin_interrupt>:
 * \brief Enable the interrupt of a pin.
 *
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
    65a4:	b580      	push	{r7, lr}
    65a6:	b084      	sub	sp, #16
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
    65ac:	6878      	ldr	r0, [r7, #4]
    65ae:	4b09      	ldr	r3, [pc, #36]	; (65d4 <gpio_enable_pin_interrupt+0x30>)
    65b0:	4798      	blx	r3
    65b2:	4603      	mov	r3, r0
    65b4:	025b      	lsls	r3, r3, #9
    65b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    65ba:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    65be:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    65c0:	6878      	ldr	r0, [r7, #4]
    65c2:	4b05      	ldr	r3, [pc, #20]	; (65d8 <gpio_enable_pin_interrupt+0x34>)
    65c4:	4798      	blx	r3
    65c6:	4602      	mov	r2, r0
    65c8:	68fb      	ldr	r3, [r7, #12]
    65ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    65ce:	3710      	adds	r7, #16
    65d0:	46bd      	mov	sp, r7
    65d2:	bd80      	pop	{r7, pc}
    65d4:	00006565 	.word	0x00006565
    65d8:	00006581 	.word	0x00006581

000065dc <gpio_disable_pin_interrupt>:
 * \brief Disable the interrupt of a pin.
 *
 * \param pin The pin number.
 */
static inline void gpio_disable_pin_interrupt(ioport_pin_t pin)
{
    65dc:	b580      	push	{r7, lr}
    65de:	b084      	sub	sp, #16
    65e0:	af00      	add	r7, sp, #0
    65e2:	6078      	str	r0, [r7, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
    65e4:	6878      	ldr	r0, [r7, #4]
    65e6:	4b09      	ldr	r3, [pc, #36]	; (660c <gpio_disable_pin_interrupt+0x30>)
    65e8:	4798      	blx	r3
    65ea:	4603      	mov	r3, r0
    65ec:	025b      	lsls	r3, r3, #9
    65ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    65f2:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    65f6:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IERC = ioport_pin_to_mask(pin);
    65f8:	6878      	ldr	r0, [r7, #4]
    65fa:	4b05      	ldr	r3, [pc, #20]	; (6610 <gpio_disable_pin_interrupt+0x34>)
    65fc:	4798      	blx	r3
    65fe:	4602      	mov	r2, r0
    6600:	68fb      	ldr	r3, [r7, #12]
    6602:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    6606:	3710      	adds	r7, #16
    6608:	46bd      	mov	sp, r7
    660a:	bd80      	pop	{r7, pc}
    660c:	00006565 	.word	0x00006565
    6610:	00006581 	.word	0x00006581
    6614:	00000000 	.word	0x00000000

00006618 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    6618:	b5b0      	push	{r4, r5, r7, lr}
    661a:	b08e      	sub	sp, #56	; 0x38
    661c:	af00      	add	r7, sp, #0
    661e:	4603      	mov	r3, r0
    6620:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    6622:	2311      	movs	r3, #17
    6624:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    6626:	f107 030c 	add.w	r3, r7, #12
    662a:	4839      	ldr	r0, [pc, #228]	; (6710 <ssd1306_write_command+0xf8>)
    662c:	4619      	mov	r1, r3
    662e:	4b39      	ldr	r3, [pc, #228]	; (6714 <ssd1306_write_command+0xfc>)
    6630:	4798      	blx	r3
    6632:	234f      	movs	r3, #79	; 0x4f
    6634:	637b      	str	r3, [r7, #52]	; 0x34
    6636:	2300      	movs	r3, #0
    6638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    663c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    6640:	2b00      	cmp	r3, #0
    6642:	d016      	beq.n	6672 <ssd1306_write_command+0x5a>
    6644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6646:	62fb      	str	r3, [r7, #44]	; 0x2c
    6648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    664a:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    664e:	095b      	lsrs	r3, r3, #5
    6650:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6654:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6658:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    665c:	025b      	lsls	r3, r3, #9
    665e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6660:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6662:	6a3a      	ldr	r2, [r7, #32]
    6664:	f002 021f 	and.w	r2, r2, #31
    6668:	2101      	movs	r1, #1
    666a:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    666e:	655a      	str	r2, [r3, #84]	; 0x54
    6670:	e015      	b.n	669e <ssd1306_write_command+0x86>
    6672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6674:	61fb      	str	r3, [r7, #28]
    6676:	69fb      	ldr	r3, [r7, #28]
    6678:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    667a:	69bb      	ldr	r3, [r7, #24]
    667c:	095b      	lsrs	r3, r3, #5
    667e:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6680:	697b      	ldr	r3, [r7, #20]
    6682:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6686:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    668a:	025b      	lsls	r3, r3, #9
    668c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    668e:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6690:	693a      	ldr	r2, [r7, #16]
    6692:	f002 021f 	and.w	r2, r2, #31
    6696:	2101      	movs	r1, #1
    6698:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    669c:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
    669e:	79fb      	ldrb	r3, [r7, #7]
    66a0:	481b      	ldr	r0, [pc, #108]	; (6710 <ssd1306_write_command+0xf8>)
    66a2:	4619      	mov	r1, r3
    66a4:	4b1c      	ldr	r3, [pc, #112]	; (6718 <ssd1306_write_command+0x100>)
    66a6:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
    66a8:	4b1c      	ldr	r3, [pc, #112]	; (671c <ssd1306_write_command+0x104>)
    66aa:	4798      	blx	r3
    66ac:	4603      	mov	r3, r0
    66ae:	4618      	mov	r0, r3
    66b0:	f04f 0100 	mov.w	r1, #0
    66b4:	4602      	mov	r2, r0
    66b6:	460b      	mov	r3, r1
    66b8:	009d      	lsls	r5, r3, #2
    66ba:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    66be:	0094      	lsls	r4, r2, #2
    66c0:	4622      	mov	r2, r4
    66c2:	462b      	mov	r3, r5
    66c4:	1880      	adds	r0, r0, r2
    66c6:	eb41 0103 	adc.w	r1, r1, r3
    66ca:	a30f      	add	r3, pc, #60	; (adr r3, 6708 <ssd1306_write_command+0xf0>)
    66cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    66d0:	1812      	adds	r2, r2, r0
    66d2:	eb43 0301 	adc.w	r3, r3, r1
    66d6:	4c12      	ldr	r4, [pc, #72]	; (6720 <ssd1306_write_command+0x108>)
    66d8:	4610      	mov	r0, r2
    66da:	4619      	mov	r1, r3
    66dc:	4a11      	ldr	r2, [pc, #68]	; (6724 <ssd1306_write_command+0x10c>)
    66de:	f04f 0300 	mov.w	r3, #0
    66e2:	47a0      	blx	r4
    66e4:	4602      	mov	r2, r0
    66e6:	460b      	mov	r3, r1
    66e8:	4613      	mov	r3, r2
    66ea:	4618      	mov	r0, r3
    66ec:	4b0e      	ldr	r3, [pc, #56]	; (6728 <ssd1306_write_command+0x110>)
    66ee:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    66f0:	f107 030c 	add.w	r3, r7, #12
    66f4:	4806      	ldr	r0, [pc, #24]	; (6710 <ssd1306_write_command+0xf8>)
    66f6:	4619      	mov	r1, r3
    66f8:	4b0c      	ldr	r3, [pc, #48]	; (672c <ssd1306_write_command+0x114>)
    66fa:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    66fc:	3738      	adds	r7, #56	; 0x38
    66fe:	46bd      	mov	sp, r7
    6700:	bdb0      	pop	{r4, r5, r7, pc}
    6702:	bf00      	nop
    6704:	f3af 8000 	nop.w
    6708:	00d59f7f 	.word	0x00d59f7f
    670c:	00000000 	.word	0x00000000
    6710:	4002c000 	.word	0x4002c000
    6714:	00000a69 	.word	0x00000a69
    6718:	00000a49 	.word	0x00000a49
    671c:	0000647d 	.word	0x0000647d
    6720:	00007cd1 	.word	0x00007cd1
    6724:	00d59f80 	.word	0x00d59f80
    6728:	20000001 	.word	0x20000001
    672c:	00000a85 	.word	0x00000a85

00006730 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
    6730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6734:	b099      	sub	sp, #100	; 0x64
    6736:	af00      	add	r7, sp, #0
    6738:	4603      	mov	r3, r0
    673a:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    673c:	2311      	movs	r3, #17
    673e:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    6740:	f107 030c 	add.w	r3, r7, #12
    6744:	4866      	ldr	r0, [pc, #408]	; (68e0 <ssd1306_write_data+0x1b0>)
    6746:	4619      	mov	r1, r3
    6748:	4b66      	ldr	r3, [pc, #408]	; (68e4 <ssd1306_write_data+0x1b4>)
    674a:	4798      	blx	r3
    674c:	234f      	movs	r3, #79	; 0x4f
    674e:	65fb      	str	r3, [r7, #92]	; 0x5c
    6750:	2301      	movs	r3, #1
    6752:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    6756:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    675a:	2b00      	cmp	r3, #0
    675c:	d016      	beq.n	678c <ssd1306_write_data+0x5c>
    675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6760:	657b      	str	r3, [r7, #84]	; 0x54
    6762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6764:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6768:	095b      	lsrs	r3, r3, #5
    676a:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    676c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    676e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6772:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6776:	025b      	lsls	r3, r3, #9
    6778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    677a:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    677c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    677e:	f002 021f 	and.w	r2, r2, #31
    6782:	2101      	movs	r1, #1
    6784:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    6788:	655a      	str	r2, [r3, #84]	; 0x54
    678a:	e015      	b.n	67b8 <ssd1306_write_data+0x88>
    678c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    678e:	647b      	str	r3, [r7, #68]	; 0x44
    6790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6792:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6796:	095b      	lsrs	r3, r3, #5
    6798:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    679c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    67a0:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    67a4:	025b      	lsls	r3, r3, #9
    67a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    67a8:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    67aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    67ac:	f002 021f 	and.w	r2, r2, #31
    67b0:	2101      	movs	r1, #1
    67b2:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    67b6:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    67b8:	4b4b      	ldr	r3, [pc, #300]	; (68e8 <ssd1306_write_data+0x1b8>)
    67ba:	4798      	blx	r3
    67bc:	4603      	mov	r3, r0
    67be:	4618      	mov	r0, r3
    67c0:	f04f 0100 	mov.w	r1, #0
    67c4:	4602      	mov	r2, r0
    67c6:	460b      	mov	r3, r1
    67c8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    67cc:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    67d0:	ea4f 0882 	mov.w	r8, r2, lsl #2
    67d4:	4642      	mov	r2, r8
    67d6:	464b      	mov	r3, r9
    67d8:	1880      	adds	r0, r0, r2
    67da:	eb41 0103 	adc.w	r1, r1, r3
    67de:	a33e      	add	r3, pc, #248	; (adr r3, 68d8 <ssd1306_write_data+0x1a8>)
    67e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    67e4:	1812      	adds	r2, r2, r0
    67e6:	eb43 0301 	adc.w	r3, r3, r1
    67ea:	4e40      	ldr	r6, [pc, #256]	; (68ec <ssd1306_write_data+0x1bc>)
    67ec:	4610      	mov	r0, r2
    67ee:	4619      	mov	r1, r3
    67f0:	4a3f      	ldr	r2, [pc, #252]	; (68f0 <ssd1306_write_data+0x1c0>)
    67f2:	f04f 0300 	mov.w	r3, #0
    67f6:	47b0      	blx	r6
    67f8:	4602      	mov	r2, r0
    67fa:	460b      	mov	r3, r1
    67fc:	4613      	mov	r3, r2
    67fe:	4618      	mov	r0, r3
    6800:	4b3c      	ldr	r3, [pc, #240]	; (68f4 <ssd1306_write_data+0x1c4>)
    6802:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
    6804:	79fb      	ldrb	r3, [r7, #7]
    6806:	4836      	ldr	r0, [pc, #216]	; (68e0 <ssd1306_write_data+0x1b0>)
    6808:	4619      	mov	r1, r3
    680a:	4b3b      	ldr	r3, [pc, #236]	; (68f8 <ssd1306_write_data+0x1c8>)
    680c:	4798      	blx	r3
    680e:	234f      	movs	r3, #79	; 0x4f
    6810:	637b      	str	r3, [r7, #52]	; 0x34
    6812:	2301      	movs	r3, #1
    6814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    6818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    681c:	2b00      	cmp	r3, #0
    681e:	d016      	beq.n	684e <ssd1306_write_data+0x11e>
    6820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6822:	62fb      	str	r3, [r7, #44]	; 0x2c
    6824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6826:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6828:	6abb      	ldr	r3, [r7, #40]	; 0x28
    682a:	095b      	lsrs	r3, r3, #5
    682c:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6830:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6834:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6838:	025b      	lsls	r3, r3, #9
    683a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    683c:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    683e:	6a3a      	ldr	r2, [r7, #32]
    6840:	f002 021f 	and.w	r2, r2, #31
    6844:	2101      	movs	r1, #1
    6846:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    684a:	655a      	str	r2, [r3, #84]	; 0x54
    684c:	e015      	b.n	687a <ssd1306_write_data+0x14a>
    684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6850:	61fb      	str	r3, [r7, #28]
    6852:	69fb      	ldr	r3, [r7, #28]
    6854:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6856:	69bb      	ldr	r3, [r7, #24]
    6858:	095b      	lsrs	r3, r3, #5
    685a:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    685c:	697b      	ldr	r3, [r7, #20]
    685e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6862:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6866:	025b      	lsls	r3, r3, #9
    6868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    686a:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    686c:	693a      	ldr	r2, [r7, #16]
    686e:	f002 021f 	and.w	r2, r2, #31
    6872:	2101      	movs	r1, #1
    6874:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    6878:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
    687a:	4b1b      	ldr	r3, [pc, #108]	; (68e8 <ssd1306_write_data+0x1b8>)
    687c:	4798      	blx	r3
    687e:	4603      	mov	r3, r0
    6880:	4618      	mov	r0, r3
    6882:	f04f 0100 	mov.w	r1, #0
    6886:	4602      	mov	r2, r0
    6888:	460b      	mov	r3, r1
    688a:	009d      	lsls	r5, r3, #2
    688c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    6890:	0094      	lsls	r4, r2, #2
    6892:	4622      	mov	r2, r4
    6894:	462b      	mov	r3, r5
    6896:	1880      	adds	r0, r0, r2
    6898:	eb41 0103 	adc.w	r1, r1, r3
    689c:	a30e      	add	r3, pc, #56	; (adr r3, 68d8 <ssd1306_write_data+0x1a8>)
    689e:	e9d3 2300 	ldrd	r2, r3, [r3]
    68a2:	1812      	adds	r2, r2, r0
    68a4:	eb43 0301 	adc.w	r3, r3, r1
    68a8:	4c10      	ldr	r4, [pc, #64]	; (68ec <ssd1306_write_data+0x1bc>)
    68aa:	4610      	mov	r0, r2
    68ac:	4619      	mov	r1, r3
    68ae:	4a10      	ldr	r2, [pc, #64]	; (68f0 <ssd1306_write_data+0x1c0>)
    68b0:	f04f 0300 	mov.w	r3, #0
    68b4:	47a0      	blx	r4
    68b6:	4602      	mov	r2, r0
    68b8:	460b      	mov	r3, r1
    68ba:	4613      	mov	r3, r2
    68bc:	4618      	mov	r0, r3
    68be:	4b0d      	ldr	r3, [pc, #52]	; (68f4 <ssd1306_write_data+0x1c4>)
    68c0:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    68c2:	f107 030c 	add.w	r3, r7, #12
    68c6:	4806      	ldr	r0, [pc, #24]	; (68e0 <ssd1306_write_data+0x1b0>)
    68c8:	4619      	mov	r1, r3
    68ca:	4b0c      	ldr	r3, [pc, #48]	; (68fc <ssd1306_write_data+0x1cc>)
    68cc:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    68ce:	3764      	adds	r7, #100	; 0x64
    68d0:	46bd      	mov	sp, r7
    68d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    68d6:	bf00      	nop
    68d8:	00d59f7f 	.word	0x00d59f7f
    68dc:	00000000 	.word	0x00000000
    68e0:	4002c000 	.word	0x4002c000
    68e4:	00000a69 	.word	0x00000a69
    68e8:	0000647d 	.word	0x0000647d
    68ec:	00007cd1 	.word	0x00007cd1
    68f0:	00d59f80 	.word	0x00d59f80
    68f4:	20000001 	.word	0x20000001
    68f8:	00000a49 	.word	0x00000a49
    68fc:	00000a85 	.word	0x00000a85

00006900 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
    6900:	b580      	push	{r7, lr}
    6902:	b082      	sub	sp, #8
    6904:	af00      	add	r7, sp, #0
    6906:	4603      	mov	r3, r0
    6908:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    690a:	79fb      	ldrb	r3, [r7, #7]
    690c:	f003 030f 	and.w	r3, r3, #15
    6910:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    6912:	79fb      	ldrb	r3, [r7, #7]
    6914:	f003 0307 	and.w	r3, r3, #7
    6918:	b2db      	uxtb	r3, r3
    691a:	f063 034f 	orn	r3, r3, #79	; 0x4f
    691e:	b2db      	uxtb	r3, r3
    6920:	b2db      	uxtb	r3, r3
    6922:	4618      	mov	r0, r3
    6924:	4b02      	ldr	r3, [pc, #8]	; (6930 <ssd1306_set_page_address+0x30>)
    6926:	4798      	blx	r3
}
    6928:	3708      	adds	r7, #8
    692a:	46bd      	mov	sp, r7
    692c:	bd80      	pop	{r7, pc}
    692e:	bf00      	nop
    6930:	00006619 	.word	0x00006619

00006934 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
    6934:	b580      	push	{r7, lr}
    6936:	b082      	sub	sp, #8
    6938:	af00      	add	r7, sp, #0
    693a:	4603      	mov	r3, r0
    693c:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
    693e:	79fb      	ldrb	r3, [r7, #7]
    6940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6944:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    6946:	79fb      	ldrb	r3, [r7, #7]
    6948:	091b      	lsrs	r3, r3, #4
    694a:	b2db      	uxtb	r3, r3
    694c:	f043 0310 	orr.w	r3, r3, #16
    6950:	b2db      	uxtb	r3, r3
    6952:	4618      	mov	r0, r3
    6954:	4b05      	ldr	r3, [pc, #20]	; (696c <ssd1306_set_column_address+0x38>)
    6956:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    6958:	79fb      	ldrb	r3, [r7, #7]
    695a:	f003 030f 	and.w	r3, r3, #15
    695e:	b2db      	uxtb	r3, r3
    6960:	4618      	mov	r0, r3
    6962:	4b02      	ldr	r3, [pc, #8]	; (696c <ssd1306_set_column_address+0x38>)
    6964:	4798      	blx	r3
}
    6966:	3708      	adds	r7, #8
    6968:	46bd      	mov	sp, r7
    696a:	bd80      	pop	{r7, pc}
    696c:	00006619 	.word	0x00006619

00006970 <ssd1306_clear>:
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
}

static inline void ssd1306_clear(void)
{
    6970:	b580      	push	{r7, lr}
    6972:	b082      	sub	sp, #8
    6974:	af00      	add	r7, sp, #0
	uint8_t page = 0;
    6976:	2300      	movs	r3, #0
    6978:	71fb      	strb	r3, [r7, #7]
	uint8_t col = 0;
    697a:	2300      	movs	r3, #0
    697c:	71bb      	strb	r3, [r7, #6]

	for (page = 0; page < 4; ++page)
    697e:	2300      	movs	r3, #0
    6980:	71fb      	strb	r3, [r7, #7]
    6982:	e016      	b.n	69b2 <ssd1306_clear+0x42>
	{
		ssd1306_set_page_address(page);
    6984:	79fb      	ldrb	r3, [r7, #7]
    6986:	4618      	mov	r0, r3
    6988:	4b0d      	ldr	r3, [pc, #52]	; (69c0 <ssd1306_clear+0x50>)
    698a:	4798      	blx	r3
		ssd1306_set_column_address(0);
    698c:	2000      	movs	r0, #0
    698e:	4b0d      	ldr	r3, [pc, #52]	; (69c4 <ssd1306_clear+0x54>)
    6990:	4798      	blx	r3
		for (col = 0; col < 128; ++col)
    6992:	2300      	movs	r3, #0
    6994:	71bb      	strb	r3, [r7, #6]
    6996:	e005      	b.n	69a4 <ssd1306_clear+0x34>
		{
			ssd1306_write_data(0x00);
    6998:	2000      	movs	r0, #0
    699a:	4b0b      	ldr	r3, [pc, #44]	; (69c8 <ssd1306_clear+0x58>)
    699c:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    699e:	79bb      	ldrb	r3, [r7, #6]
    69a0:	3301      	adds	r3, #1
    69a2:	71bb      	strb	r3, [r7, #6]
    69a4:	79bb      	ldrb	r3, [r7, #6]
    69a6:	b25b      	sxtb	r3, r3
    69a8:	2b00      	cmp	r3, #0
    69aa:	daf5      	bge.n	6998 <ssd1306_clear+0x28>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    69ac:	79fb      	ldrb	r3, [r7, #7]
    69ae:	3301      	adds	r3, #1
    69b0:	71fb      	strb	r3, [r7, #7]
    69b2:	79fb      	ldrb	r3, [r7, #7]
    69b4:	2b03      	cmp	r3, #3
    69b6:	d9e5      	bls.n	6984 <ssd1306_clear+0x14>
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
		}
	}
}
    69b8:	3708      	adds	r7, #8
    69ba:	46bd      	mov	sp, r7
    69bc:	bd80      	pop	{r7, pc}
    69be:	bf00      	nop
    69c0:	00006901 	.word	0x00006901
    69c4:	00006935 	.word	0x00006935
    69c8:	00006731 	.word	0x00006731

000069cc <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    69cc:	b580      	push	{r7, lr}
    69ce:	b082      	sub	sp, #8
    69d0:	af00      	add	r7, sp, #0
    69d2:	4603      	mov	r3, r0
    69d4:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    69d6:	b672      	cpsid	i
    69d8:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    69dc:	4b05      	ldr	r3, [pc, #20]	; (69f4 <sleepmgr_sleep+0x28>)
    69de:	2200      	movs	r2, #0
    69e0:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
    69e2:	79fb      	ldrb	r3, [r7, #7]
    69e4:	4804      	ldr	r0, [pc, #16]	; (69f8 <sleepmgr_sleep+0x2c>)
    69e6:	4619      	mov	r1, r3
    69e8:	4b04      	ldr	r3, [pc, #16]	; (69fc <sleepmgr_sleep+0x30>)
    69ea:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    69ec:	3708      	adds	r7, #8
    69ee:	46bd      	mov	sp, r7
    69f0:	bd80      	pop	{r7, pc}
    69f2:	bf00      	nop
    69f4:	2000048c 	.word	0x2000048c
    69f8:	400f0000 	.word	0x400f0000
    69fc:	0000583d 	.word	0x0000583d

00006a00 <console_interrupt_handler>:
uint32_t pwm_sensor_angle, pwm_sensor_frequency;

/* Interrupt handlers */

void console_interrupt_handler(void)
{
    6a00:	b580      	push	{r7, lr}
    6a02:	af00      	add	r7, sp, #0
	console_read_command();
    6a04:	4b01      	ldr	r3, [pc, #4]	; (6a0c <console_interrupt_handler+0xc>)
    6a06:	4798      	blx	r3
}
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	bf00      	nop
    6a0c:	00002355 	.word	0x00002355

00006a10 <OLED_BUTTON1_handler>:

void OLED_BUTTON1_handler(void)
{	
    6a10:	b580      	push	{r7, lr}
    6a12:	af00      	add	r7, sp, #0
	// Button 1 changes display
	if( (ioport_get_pin_level(OLED_BUTTON1) == false) && (display_change == 0) )
    6a14:	2006      	movs	r0, #6
    6a16:	4b10      	ldr	r3, [pc, #64]	; (6a58 <OLED_BUTTON1_handler+0x48>)
    6a18:	4798      	blx	r3
    6a1a:	4603      	mov	r3, r0
    6a1c:	f083 0301 	eor.w	r3, r3, #1
    6a20:	b2db      	uxtb	r3, r3
    6a22:	2b00      	cmp	r3, #0
    6a24:	d013      	beq.n	6a4e <OLED_BUTTON1_handler+0x3e>
    6a26:	4b0d      	ldr	r3, [pc, #52]	; (6a5c <OLED_BUTTON1_handler+0x4c>)
    6a28:	781b      	ldrb	r3, [r3, #0]
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d10f      	bne.n	6a4e <OLED_BUTTON1_handler+0x3e>
	{
		display_change = 1;
    6a2e:	4b0b      	ldr	r3, [pc, #44]	; (6a5c <OLED_BUTTON1_handler+0x4c>)
    6a30:	2201      	movs	r2, #1
    6a32:	701a      	strb	r2, [r3, #0]
		display_selection++;
    6a34:	4b0a      	ldr	r3, [pc, #40]	; (6a60 <OLED_BUTTON1_handler+0x50>)
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	3301      	adds	r3, #1
    6a3a:	b2da      	uxtb	r2, r3
    6a3c:	4b08      	ldr	r3, [pc, #32]	; (6a60 <OLED_BUTTON1_handler+0x50>)
    6a3e:	701a      	strb	r2, [r3, #0]
			
		if( display_selection > 3)
    6a40:	4b07      	ldr	r3, [pc, #28]	; (6a60 <OLED_BUTTON1_handler+0x50>)
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	2b03      	cmp	r3, #3
    6a46:	d902      	bls.n	6a4e <OLED_BUTTON1_handler+0x3e>
		{
			display_selection = 1;
    6a48:	4b05      	ldr	r3, [pc, #20]	; (6a60 <OLED_BUTTON1_handler+0x50>)
    6a4a:	2201      	movs	r2, #1
    6a4c:	701a      	strb	r2, [r3, #0]
		}
	}

	gpio_disable_pin_interrupt(OLED_BUTTON1);
    6a4e:	2006      	movs	r0, #6
    6a50:	4b04      	ldr	r3, [pc, #16]	; (6a64 <OLED_BUTTON1_handler+0x54>)
    6a52:	4798      	blx	r3
}
    6a54:	bd80      	pop	{r7, pc}
    6a56:	bf00      	nop
    6a58:	00006515 	.word	0x00006515
    6a5c:	20000495 	.word	0x20000495
    6a60:	20000494 	.word	0x20000494
    6a64:	000065dd 	.word	0x000065dd

00006a68 <OLED_BUTTON2_handler>:

void OLED_BUTTON2_handler(void)
{	
    6a68:	b580      	push	{r7, lr}
    6a6a:	af00      	add	r7, sp, #0
	// Button 2 changes wind_sensor
	if( (ioport_get_pin_level(OLED_BUTTON2) == false) )
    6a6c:	2023      	movs	r0, #35	; 0x23
    6a6e:	4b12      	ldr	r3, [pc, #72]	; (6ab8 <OLED_BUTTON2_handler+0x50>)
    6a70:	4798      	blx	r3
    6a72:	4603      	mov	r3, r0
    6a74:	f083 0301 	eor.w	r3, r3, #1
    6a78:	b2db      	uxtb	r3, r3
    6a7a:	2b00      	cmp	r3, #0
    6a7c:	d018      	beq.n	6ab0 <OLED_BUTTON2_handler+0x48>
	{
		if( !strcmp(wind_sensor.name, "CV7") )
    6a7e:	480f      	ldr	r0, [pc, #60]	; (6abc <OLED_BUTTON2_handler+0x54>)
    6a80:	490f      	ldr	r1, [pc, #60]	; (6ac0 <OLED_BUTTON2_handler+0x58>)
    6a82:	4b10      	ldr	r3, [pc, #64]	; (6ac4 <OLED_BUTTON2_handler+0x5c>)
    6a84:	4798      	blx	r3
    6a86:	4603      	mov	r3, r0
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d103      	bne.n	6a94 <OLED_BUTTON2_handler+0x2c>
		{
			strcpy(wind_sensor.name, "PWM");
    6a8c:	4b0b      	ldr	r3, [pc, #44]	; (6abc <OLED_BUTTON2_handler+0x54>)
    6a8e:	4a0e      	ldr	r2, [pc, #56]	; (6ac8 <OLED_BUTTON2_handler+0x60>)
    6a90:	601a      	str	r2, [r3, #0]
    6a92:	e00d      	b.n	6ab0 <OLED_BUTTON2_handler+0x48>
		}
		
		else if( !strcmp(wind_sensor.name, "PWM") )
    6a94:	4809      	ldr	r0, [pc, #36]	; (6abc <OLED_BUTTON2_handler+0x54>)
    6a96:	490d      	ldr	r1, [pc, #52]	; (6acc <OLED_BUTTON2_handler+0x64>)
    6a98:	4b0a      	ldr	r3, [pc, #40]	; (6ac4 <OLED_BUTTON2_handler+0x5c>)
    6a9a:	4798      	blx	r3
    6a9c:	4603      	mov	r3, r0
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d103      	bne.n	6aaa <OLED_BUTTON2_handler+0x42>
		{
			strcpy(wind_sensor.name, "CV7");
    6aa2:	4b06      	ldr	r3, [pc, #24]	; (6abc <OLED_BUTTON2_handler+0x54>)
    6aa4:	4a0a      	ldr	r2, [pc, #40]	; (6ad0 <OLED_BUTTON2_handler+0x68>)
    6aa6:	601a      	str	r2, [r3, #0]
    6aa8:	e002      	b.n	6ab0 <OLED_BUTTON2_handler+0x48>
		}
		
		else
			strcpy(wind_sensor.name, "CV7");
    6aaa:	4b04      	ldr	r3, [pc, #16]	; (6abc <OLED_BUTTON2_handler+0x54>)
    6aac:	4a08      	ldr	r2, [pc, #32]	; (6ad0 <OLED_BUTTON2_handler+0x68>)
    6aae:	601a      	str	r2, [r3, #0]
	}

	gpio_disable_pin_interrupt(OLED_BUTTON2);
    6ab0:	2023      	movs	r0, #35	; 0x23
    6ab2:	4b08      	ldr	r3, [pc, #32]	; (6ad4 <OLED_BUTTON2_handler+0x6c>)
    6ab4:	4798      	blx	r3
}
    6ab6:	bd80      	pop	{r7, pc}
    6ab8:	00006515 	.word	0x00006515
    6abc:	20000e80 	.word	0x20000e80
    6ac0:	000108d0 	.word	0x000108d0
    6ac4:	00008603 	.word	0x00008603
    6ac8:	004d5750 	.word	0x004d5750
    6acc:	000108d4 	.word	0x000108d4
    6ad0:	00375643 	.word	0x00375643
    6ad4:	000065dd 	.word	0x000065dd

00006ad8 <OLED_BUTTON3_handler>:

void OLED_BUTTON3_handler(void)
{	
    6ad8:	b580      	push	{r7, lr}
    6ada:	af00      	add	r7, sp, #0
	// Button 3 changes turns regulator output on/off
	if( (ioport_get_pin_level(OLED_BUTTON3) == false) )
    6adc:	2024      	movs	r0, #36	; 0x24
    6ade:	4b0e      	ldr	r3, [pc, #56]	; (6b18 <OLED_BUTTON3_handler+0x40>)
    6ae0:	4798      	blx	r3
    6ae2:	4603      	mov	r3, r0
    6ae4:	f083 0301 	eor.w	r3, r3, #1
    6ae8:	b2db      	uxtb	r3, r3
    6aea:	2b00      	cmp	r3, #0
    6aec:	d010      	beq.n	6b10 <OLED_BUTTON3_handler+0x38>
	{
		if(rudder_regulator.output_enable == false)
    6aee:	4b0b      	ldr	r3, [pc, #44]	; (6b1c <OLED_BUTTON3_handler+0x44>)
    6af0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    6af4:	f083 0301 	eor.w	r3, r3, #1
    6af8:	b2db      	uxtb	r3, r3
    6afa:	2b00      	cmp	r3, #0
    6afc:	d004      	beq.n	6b08 <OLED_BUTTON3_handler+0x30>
		{
			rudder_regulator.output_enable = true;
    6afe:	4b07      	ldr	r3, [pc, #28]	; (6b1c <OLED_BUTTON3_handler+0x44>)
    6b00:	2201      	movs	r2, #1
    6b02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    6b06:	e003      	b.n	6b10 <OLED_BUTTON3_handler+0x38>
		}
		else
		{
			rudder_regulator.output_enable = false;
    6b08:	4b04      	ldr	r3, [pc, #16]	; (6b1c <OLED_BUTTON3_handler+0x44>)
    6b0a:	2200      	movs	r2, #0
    6b0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		}
	}

	gpio_disable_pin_interrupt(OLED_BUTTON3);
    6b10:	2024      	movs	r0, #36	; 0x24
    6b12:	4b03      	ldr	r3, [pc, #12]	; (6b20 <OLED_BUTTON3_handler+0x48>)
    6b14:	4798      	blx	r3
}
    6b16:	bd80      	pop	{r7, pc}
    6b18:	00006515 	.word	0x00006515
    6b1c:	20000f2c 	.word	0x20000f2c
    6b20:	000065dd 	.word	0x000065dd

00006b24 <USART1_Handler>:

void USART1_Handler(void)
{	
    6b24:	b580      	push	{r7, lr}
    6b26:	af00      	add	r7, sp, #0
	console_interrupt_handler();
    6b28:	4b01      	ldr	r3, [pc, #4]	; (6b30 <USART1_Handler+0xc>)
    6b2a:	4798      	blx	r3
}
    6b2c:	bd80      	pop	{r7, pc}
    6b2e:	bf00      	nop
    6b30:	00006a01 	.word	0x00006a01

00006b34 <USART0_Handler>:

void USART0_Handler(void)
{	
    6b34:	b580      	push	{r7, lr}
    6b36:	af00      	add	r7, sp, #0
	CV7_interrupt_handler();
    6b38:	4b01      	ldr	r3, [pc, #4]	; (6b40 <USART0_Handler+0xc>)
    6b3a:	4798      	blx	r3
}
    6b3c:	bd80      	pop	{r7, pc}
    6b3e:	bf00      	nop
    6b40:	000033d1 	.word	0x000033d1

00006b44 <TC02_Handler>:

// Interrupt handler for PWM capture
void TC02_Handler(void)
{		
    6b44:	b580      	push	{r7, lr}
    6b46:	b082      	sub	sp, #8
    6b48:	af00      	add	r7, sp, #0
		
	if ((tc_get_status(TC0, PWM_WIND_SENSOR_CHANNEL) & TC_SR_LDRBS) == TC_SR_LDRBS) {
    6b4a:	4820      	ldr	r0, [pc, #128]	; (6bcc <TC02_Handler+0x88>)
    6b4c:	2102      	movs	r1, #2
    6b4e:	4b20      	ldr	r3, [pc, #128]	; (6bd0 <TC02_Handler+0x8c>)
    6b50:	4798      	blx	r3
    6b52:	4603      	mov	r3, r0
    6b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d033      	beq.n	6bc4 <TC02_Handler+0x80>
		PWM_captured_ra = tc_read_ra(TC0, PWM_WIND_SENSOR_CHANNEL);
    6b5c:	481b      	ldr	r0, [pc, #108]	; (6bcc <TC02_Handler+0x88>)
    6b5e:	2102      	movs	r1, #2
    6b60:	4b1c      	ldr	r3, [pc, #112]	; (6bd4 <TC02_Handler+0x90>)
    6b62:	4798      	blx	r3
    6b64:	4602      	mov	r2, r0
    6b66:	4b1c      	ldr	r3, [pc, #112]	; (6bd8 <TC02_Handler+0x94>)
    6b68:	601a      	str	r2, [r3, #0]
		PWM_captured_rb = tc_read_rb(TC0, PWM_WIND_SENSOR_CHANNEL);		
    6b6a:	4818      	ldr	r0, [pc, #96]	; (6bcc <TC02_Handler+0x88>)
    6b6c:	2102      	movs	r1, #2
    6b6e:	4b1b      	ldr	r3, [pc, #108]	; (6bdc <TC02_Handler+0x98>)
    6b70:	4798      	blx	r3
    6b72:	4602      	mov	r2, r0
    6b74:	4b1a      	ldr	r3, [pc, #104]	; (6be0 <TC02_Handler+0x9c>)
    6b76:	601a      	str	r2, [r3, #0]
	
		uint8_t dutycycle = (PWM_captured_rb - PWM_captured_ra) * 100 / PWM_captured_rb;
    6b78:	4b19      	ldr	r3, [pc, #100]	; (6be0 <TC02_Handler+0x9c>)
    6b7a:	681a      	ldr	r2, [r3, #0]
    6b7c:	4b16      	ldr	r3, [pc, #88]	; (6bd8 <TC02_Handler+0x94>)
    6b7e:	681b      	ldr	r3, [r3, #0]
    6b80:	1ad3      	subs	r3, r2, r3
    6b82:	2264      	movs	r2, #100	; 0x64
    6b84:	fb02 f203 	mul.w	r2, r2, r3
    6b88:	4b15      	ldr	r3, [pc, #84]	; (6be0 <TC02_Handler+0x9c>)
    6b8a:	681b      	ldr	r3, [r3, #0]
    6b8c:	fbb2 f3f3 	udiv	r3, r2, r3
    6b90:	71fb      	strb	r3, [r7, #7]
		//wind_sensor_frequency = (sysclk_get_peripheral_bus_hz(TC0) / divisors[TC_CAPTURE_TIMER_SELECTION]) / PWM_captured_rb;
		
		wind_sensor.output[ANGLE_BUFFER_SIZE - 1] = dutycycle;	// percent
    6b92:	4b14      	ldr	r3, [pc, #80]	; (6be4 <TC02_Handler+0xa0>)
    6b94:	79fa      	ldrb	r2, [r7, #7]
    6b96:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		wind_sensor.angle = dutycycle * 360/100;				// degrees
    6b9a:	79fb      	ldrb	r3, [r7, #7]
    6b9c:	f44f 72b4 	mov.w	r2, #360	; 0x168
    6ba0:	fb02 f303 	mul.w	r3, r2, r3
    6ba4:	4a10      	ldr	r2, [pc, #64]	; (6be8 <TC02_Handler+0xa4>)
    6ba6:	fb82 1203 	smull	r1, r2, r2, r3
    6baa:	1152      	asrs	r2, r2, #5
    6bac:	17db      	asrs	r3, r3, #31
    6bae:	1ad3      	subs	r3, r2, r3
    6bb0:	b29a      	uxth	r2, r3
    6bb2:	4b0c      	ldr	r3, [pc, #48]	; (6be4 <TC02_Handler+0xa0>)
    6bb4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		 
		PWM_captured_ra = 0;
    6bb8:	4b07      	ldr	r3, [pc, #28]	; (6bd8 <TC02_Handler+0x94>)
    6bba:	2200      	movs	r2, #0
    6bbc:	601a      	str	r2, [r3, #0]
		PWM_captured_rb = 0;
    6bbe:	4b08      	ldr	r3, [pc, #32]	; (6be0 <TC02_Handler+0x9c>)
    6bc0:	2200      	movs	r2, #0
    6bc2:	601a      	str	r2, [r3, #0]
				
	}
	
}
    6bc4:	3708      	adds	r7, #8
    6bc6:	46bd      	mov	sp, r7
    6bc8:	bd80      	pop	{r7, pc}
    6bca:	bf00      	nop
    6bcc:	40010000 	.word	0x40010000
    6bd0:	000015a1 	.word	0x000015a1
    6bd4:	000014e9 	.word	0x000014e9
    6bd8:	20000f60 	.word	0x20000f60
    6bdc:	0000150d 	.word	0x0000150d
    6be0:	20000f64 	.word	0x20000f64
    6be4:	20000e80 	.word	0x20000e80
    6be8:	51eb851f 	.word	0x51eb851f

00006bec <ast_per_callback>:

/**
 * AST interrupt handler
 */
static void ast_per_callback(void)
{
    6bec:	b590      	push	{r4, r7, lr}
    6bee:	b08f      	sub	sp, #60	; 0x3c
    6bf0:	af02      	add	r7, sp, #8
	// stop timer	
	ast_stop(AST);
    6bf2:	4875      	ldr	r0, [pc, #468]	; (6dc8 <ast_per_callback+0x1dc>)
    6bf4:	4b75      	ldr	r3, [pc, #468]	; (6dcc <ast_per_callback+0x1e0>)
    6bf6:	4798      	blx	r3
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_PER);	
    6bf8:	4873      	ldr	r0, [pc, #460]	; (6dc8 <ast_per_callback+0x1dc>)
    6bfa:	2101      	movs	r1, #1
    6bfc:	4b74      	ldr	r3, [pc, #464]	; (6dd0 <ast_per_callback+0x1e4>)
    6bfe:	4798      	blx	r3
	
	// Is OLEDbutton1 released?
	if (ioport_get_pin_level(OLED_BUTTON1) == 1) {
    6c00:	2006      	movs	r0, #6
    6c02:	4b74      	ldr	r3, [pc, #464]	; (6dd4 <ast_per_callback+0x1e8>)
    6c04:	4798      	blx	r3
    6c06:	4603      	mov	r3, r0
    6c08:	2b00      	cmp	r3, #0
    6c0a:	d002      	beq.n	6c12 <ast_per_callback+0x26>
		// Yes, so turn interrupt back on.
		gpio_enable_pin_interrupt(OLED_BUTTON1);
    6c0c:	2006      	movs	r0, #6
    6c0e:	4b72      	ldr	r3, [pc, #456]	; (6dd8 <ast_per_callback+0x1ec>)
    6c10:	4798      	blx	r3
	}
	
	// Is OLEDbutton2 released?
	if (ioport_get_pin_level(OLED_BUTTON2) == 1) {
    6c12:	2023      	movs	r0, #35	; 0x23
    6c14:	4b6f      	ldr	r3, [pc, #444]	; (6dd4 <ast_per_callback+0x1e8>)
    6c16:	4798      	blx	r3
    6c18:	4603      	mov	r3, r0
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d002      	beq.n	6c24 <ast_per_callback+0x38>
		// Yes, so turn interrupt back on.
		gpio_enable_pin_interrupt(OLED_BUTTON2);
    6c1e:	2023      	movs	r0, #35	; 0x23
    6c20:	4b6d      	ldr	r3, [pc, #436]	; (6dd8 <ast_per_callback+0x1ec>)
    6c22:	4798      	blx	r3
	}
	
	// Is OLEDbutton3 released?
	if (ioport_get_pin_level(OLED_BUTTON3) == 1) {
    6c24:	2024      	movs	r0, #36	; 0x24
    6c26:	4b6b      	ldr	r3, [pc, #428]	; (6dd4 <ast_per_callback+0x1e8>)
    6c28:	4798      	blx	r3
    6c2a:	4603      	mov	r3, r0
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d002      	beq.n	6c36 <ast_per_callback+0x4a>
		// Yes, so turn interrupt back on.
		gpio_enable_pin_interrupt(OLED_BUTTON3);
    6c30:	2024      	movs	r0, #36	; 0x24
    6c32:	4b69      	ldr	r3, [pc, #420]	; (6dd8 <ast_per_callback+0x1ec>)
    6c34:	4798      	blx	r3
	}
			
			
#ifdef DEBUG			

	if(display_selection == 1)
    6c36:	4b69      	ldr	r3, [pc, #420]	; (6ddc <ast_per_callback+0x1f0>)
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	2b01      	cmp	r3, #1
    6c3c:	d10b      	bne.n	6c56 <ast_per_callback+0x6a>
	{	
		// Clear display and change leds
		if( display_change == 1)			
    6c3e:	4b68      	ldr	r3, [pc, #416]	; (6de0 <ast_per_callback+0x1f4>)
    6c40:	781b      	ldrb	r3, [r3, #0]
    6c42:	2b01      	cmp	r3, #1
    6c44:	d104      	bne.n	6c50 <ast_per_callback+0x64>
		{ 
			ssd1306_clear();
    6c46:	4b67      	ldr	r3, [pc, #412]	; (6de4 <ast_per_callback+0x1f8>)
    6c48:	4798      	blx	r3
					
			display_change = 0;
    6c4a:	4b65      	ldr	r3, [pc, #404]	; (6de0 <ast_per_callback+0x1f4>)
    6c4c:	2200      	movs	r2, #0
    6c4e:	701a      	strb	r2, [r3, #0]
		}
				
		display_pid_regulator_data();
    6c50:	4b65      	ldr	r3, [pc, #404]	; (6de8 <ast_per_callback+0x1fc>)
    6c52:	4798      	blx	r3
    6c54:	e05b      	b.n	6d0e <ast_per_callback+0x122>
	}
	else if(display_selection == 2)
    6c56:	4b61      	ldr	r3, [pc, #388]	; (6ddc <ast_per_callback+0x1f0>)
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	2b02      	cmp	r3, #2
    6c5c:	d13f      	bne.n	6cde <ast_per_callback+0xf2>
	{
				
		// Clear display and change leds
		if( display_change == 1)			
    6c5e:	4b60      	ldr	r3, [pc, #384]	; (6de0 <ast_per_callback+0x1f4>)
    6c60:	781b      	ldrb	r3, [r3, #0]
    6c62:	2b01      	cmp	r3, #1
    6c64:	d104      	bne.n	6c70 <ast_per_callback+0x84>
		{ 
			ssd1306_clear();
    6c66:	4b5f      	ldr	r3, [pc, #380]	; (6de4 <ast_per_callback+0x1f8>)
    6c68:	4798      	blx	r3
									
			display_change = 0;
    6c6a:	4b5d      	ldr	r3, [pc, #372]	; (6de0 <ast_per_callback+0x1f4>)
    6c6c:	2200      	movs	r2, #0
    6c6e:	701a      	strb	r2, [r3, #0]
		}
				
		// Display print buffer
		char buffer[40];
				
		ssd1306_set_column_address(0);
    6c70:	2000      	movs	r0, #0
    6c72:	4b5e      	ldr	r3, [pc, #376]	; (6dec <ast_per_callback+0x200>)
    6c74:	4798      	blx	r3
		ssd1306_set_page_address(0);	// row
    6c76:	2000      	movs	r0, #0
    6c78:	4b5d      	ldr	r3, [pc, #372]	; (6df0 <ast_per_callback+0x204>)
    6c7a:	4798      	blx	r3
				
		ssd1306_write_text( "Sensor history" );
    6c7c:	485d      	ldr	r0, [pc, #372]	; (6df4 <ast_per_callback+0x208>)
    6c7e:	4b5e      	ldr	r3, [pc, #376]	; (6df8 <ast_per_callback+0x20c>)
    6c80:	4798      	blx	r3
				
		// About middle of display
		ssd1306_set_column_address(75);
    6c82:	204b      	movs	r0, #75	; 0x4b
    6c84:	4b59      	ldr	r3, [pc, #356]	; (6dec <ast_per_callback+0x200>)
    6c86:	4798      	blx	r3
				
		sprintf(buffer, "Angle: %d", wind_sensor.angle );
    6c88:	4b5c      	ldr	r3, [pc, #368]	; (6dfc <ast_per_callback+0x210>)
    6c8a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    6c8e:	1d3a      	adds	r2, r7, #4
    6c90:	4610      	mov	r0, r2
    6c92:	495b      	ldr	r1, [pc, #364]	; (6e00 <ast_per_callback+0x214>)
    6c94:	461a      	mov	r2, r3
    6c96:	4b5b      	ldr	r3, [pc, #364]	; (6e04 <ast_per_callback+0x218>)
    6c98:	4798      	blx	r3
		ssd1306_write_text( buffer );
    6c9a:	1d3b      	adds	r3, r7, #4
    6c9c:	4618      	mov	r0, r3
    6c9e:	4b56      	ldr	r3, [pc, #344]	; (6df8 <ast_per_callback+0x20c>)
    6ca0:	4798      	blx	r3
				
		// Remove chars
		if(wind_sensor.angle > 99)
    6ca2:	4b56      	ldr	r3, [pc, #344]	; (6dfc <ast_per_callback+0x210>)
    6ca4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    6ca8:	2b63      	cmp	r3, #99	; 0x63
    6caa:	d903      	bls.n	6cb4 <ast_per_callback+0xc8>
			ssd1306_clear_char(4);
    6cac:	2004      	movs	r0, #4
    6cae:	4b56      	ldr	r3, [pc, #344]	; (6e08 <ast_per_callback+0x21c>)
    6cb0:	4798      	blx	r3
    6cb2:	e00b      	b.n	6ccc <ast_per_callback+0xe0>
		else if (wind_sensor.angle > 9)
    6cb4:	4b51      	ldr	r3, [pc, #324]	; (6dfc <ast_per_callback+0x210>)
    6cb6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
    6cba:	2b09      	cmp	r3, #9
    6cbc:	d903      	bls.n	6cc6 <ast_per_callback+0xda>
			ssd1306_clear_char(9);
    6cbe:	2009      	movs	r0, #9
    6cc0:	4b51      	ldr	r3, [pc, #324]	; (6e08 <ast_per_callback+0x21c>)
    6cc2:	4798      	blx	r3
    6cc4:	e002      	b.n	6ccc <ast_per_callback+0xe0>
		else
			ssd1306_clear_char(13);
    6cc6:	200d      	movs	r0, #13
    6cc8:	4b4f      	ldr	r3, [pc, #316]	; (6e08 <ast_per_callback+0x21c>)
    6cca:	4798      	blx	r3
				
		// Draw rolling graph
		ssd1306_draw_graph(0, 1, ANGLE_BUFFER_SIZE, 3, &wind_sensor.output );
    6ccc:	4b4f      	ldr	r3, [pc, #316]	; (6e0c <ast_per_callback+0x220>)
    6cce:	9300      	str	r3, [sp, #0]
    6cd0:	2000      	movs	r0, #0
    6cd2:	2101      	movs	r1, #1
    6cd4:	2280      	movs	r2, #128	; 0x80
    6cd6:	2303      	movs	r3, #3
    6cd8:	4c4d      	ldr	r4, [pc, #308]	; (6e10 <ast_per_callback+0x224>)
    6cda:	47a0      	blx	r4
    6cdc:	e017      	b.n	6d0e <ast_per_callback+0x122>
	}
			
	else if(display_selection == 3)
    6cde:	4b3f      	ldr	r3, [pc, #252]	; (6ddc <ast_per_callback+0x1f0>)
    6ce0:	781b      	ldrb	r3, [r3, #0]
    6ce2:	2b03      	cmp	r3, #3
    6ce4:	d113      	bne.n	6d0e <ast_per_callback+0x122>
	{		
		// Clear display and change leds
		if( display_change == 1)			
    6ce6:	4b3e      	ldr	r3, [pc, #248]	; (6de0 <ast_per_callback+0x1f4>)
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	2b01      	cmp	r3, #1
    6cec:	d104      	bne.n	6cf8 <ast_per_callback+0x10c>
		{ 
			ssd1306_clear();
    6cee:	4b3d      	ldr	r3, [pc, #244]	; (6de4 <ast_per_callback+0x1f8>)
    6cf0:	4798      	blx	r3
					
			display_change = 0;
    6cf2:	4b3b      	ldr	r3, [pc, #236]	; (6de0 <ast_per_callback+0x1f4>)
    6cf4:	2200      	movs	r2, #0
    6cf6:	701a      	strb	r2, [r3, #0]
		}
									
		ssd1306_set_column_address(0);
    6cf8:	2000      	movs	r0, #0
    6cfa:	4b3c      	ldr	r3, [pc, #240]	; (6dec <ast_per_callback+0x200>)
    6cfc:	4798      	blx	r3
		ssd1306_set_page_address(0);	// row
    6cfe:	2000      	movs	r0, #0
    6d00:	4b3b      	ldr	r3, [pc, #236]	; (6df0 <ast_per_callback+0x204>)
    6d02:	4798      	blx	r3
				
		ssd1306_write_text( "Sensor data" );
    6d04:	4843      	ldr	r0, [pc, #268]	; (6e14 <ast_per_callback+0x228>)
    6d06:	4b3c      	ldr	r3, [pc, #240]	; (6df8 <ast_per_callback+0x20c>)
    6d08:	4798      	blx	r3
		display_wind_sensor_data();
    6d0a:	4b43      	ldr	r3, [pc, #268]	; (6e18 <ast_per_callback+0x22c>)
    6d0c:	4798      	blx	r3
	}
#endif			

	if(rudder_regulator.output_enable == true)		
    6d0e:	4b43      	ldr	r3, [pc, #268]	; (6e1c <ast_per_callback+0x230>)
    6d10:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    6d14:	2b00      	cmp	r3, #0
    6d16:	d004      	beq.n	6d22 <ast_per_callback+0x136>
		ioport_set_pin_level(OLED_LED3, OLED_LED_ON);			
    6d18:	2050      	movs	r0, #80	; 0x50
    6d1a:	2100      	movs	r1, #0
    6d1c:	4b40      	ldr	r3, [pc, #256]	; (6e20 <ast_per_callback+0x234>)
    6d1e:	4798      	blx	r3
    6d20:	e003      	b.n	6d2a <ast_per_callback+0x13e>
	else
		ioport_set_pin_level(OLED_LED3, OLED_LED_OFF);	
    6d22:	2050      	movs	r0, #80	; 0x50
    6d24:	2101      	movs	r1, #1
    6d26:	4b3e      	ldr	r3, [pc, #248]	; (6e20 <ast_per_callback+0x234>)
    6d28:	4798      	blx	r3

	if( !strcmp(wind_sensor.name, "CV7") )
    6d2a:	4834      	ldr	r0, [pc, #208]	; (6dfc <ast_per_callback+0x210>)
    6d2c:	493d      	ldr	r1, [pc, #244]	; (6e24 <ast_per_callback+0x238>)
    6d2e:	4b3e      	ldr	r3, [pc, #248]	; (6e28 <ast_per_callback+0x23c>)
    6d30:	4798      	blx	r3
    6d32:	4603      	mov	r3, r0
    6d34:	2b00      	cmp	r3, #0
    6d36:	d10c      	bne.n	6d52 <ast_per_callback+0x166>
	{
		ioport_set_pin_level(OLED_LED1, OLED_LED_ON);
    6d38:	2008      	movs	r0, #8
    6d3a:	2100      	movs	r1, #0
    6d3c:	4b38      	ldr	r3, [pc, #224]	; (6e20 <ast_per_callback+0x234>)
    6d3e:	4798      	blx	r3
		ioport_set_pin_level(OLED_LED2, OLED_LED_OFF);
    6d40:	2009      	movs	r0, #9
    6d42:	2101      	movs	r1, #1
    6d44:	4b36      	ldr	r3, [pc, #216]	; (6e20 <ast_per_callback+0x234>)
    6d46:	4798      	blx	r3
		
		init_CV7_wind_sensor();
    6d48:	4b38      	ldr	r3, [pc, #224]	; (6e2c <ast_per_callback+0x240>)
    6d4a:	4798      	blx	r3
		deinit_wales_wind_sensor();
    6d4c:	4b38      	ldr	r3, [pc, #224]	; (6e30 <ast_per_callback+0x244>)
    6d4e:	4798      	blx	r3
    6d50:	e017      	b.n	6d82 <ast_per_callback+0x196>
	}
	else if( !strcmp(wind_sensor.name, "wales") )
    6d52:	482a      	ldr	r0, [pc, #168]	; (6dfc <ast_per_callback+0x210>)
    6d54:	4937      	ldr	r1, [pc, #220]	; (6e34 <ast_per_callback+0x248>)
    6d56:	4b34      	ldr	r3, [pc, #208]	; (6e28 <ast_per_callback+0x23c>)
    6d58:	4798      	blx	r3
    6d5a:	4603      	mov	r3, r0
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d10c      	bne.n	6d7a <ast_per_callback+0x18e>
	{
		ioport_set_pin_level(OLED_LED1, OLED_LED_OFF);
    6d60:	2008      	movs	r0, #8
    6d62:	2101      	movs	r1, #1
    6d64:	4b2e      	ldr	r3, [pc, #184]	; (6e20 <ast_per_callback+0x234>)
    6d66:	4798      	blx	r3
		ioport_set_pin_level(OLED_LED2, OLED_LED_ON);
    6d68:	2009      	movs	r0, #9
    6d6a:	2100      	movs	r1, #0
    6d6c:	4b2c      	ldr	r3, [pc, #176]	; (6e20 <ast_per_callback+0x234>)
    6d6e:	4798      	blx	r3
			
		init_wales_wind_sensor();
    6d70:	4b31      	ldr	r3, [pc, #196]	; (6e38 <ast_per_callback+0x24c>)
    6d72:	4798      	blx	r3
		deinit_CV7_wind_sensor();
    6d74:	4b31      	ldr	r3, [pc, #196]	; (6e3c <ast_per_callback+0x250>)
    6d76:	4798      	blx	r3
    6d78:	e003      	b.n	6d82 <ast_per_callback+0x196>
	}
	else
	{
		deinit_PWM_counter_wales_wind_sensor();
    6d7a:	4b31      	ldr	r3, [pc, #196]	; (6e40 <ast_per_callback+0x254>)
    6d7c:	4798      	blx	r3
		deinit_CV7_wind_sensor();
    6d7e:	4b2f      	ldr	r3, [pc, #188]	; (6e3c <ast_per_callback+0x250>)
    6d80:	4798      	blx	r3
	}
	
	// update wind sensor
	update_wind_sensor();
    6d82:	4b30      	ldr	r3, [pc, #192]	; (6e44 <ast_per_callback+0x258>)
    6d84:	4798      	blx	r3
	
// 	for(int a = 0; a < rudder_regulator.)
// 	wind_sensor.mean_output = wind_sensor.output[ANGLE_BUFFER_SIZE - 1]

	// update regulator values
	update_rudder_regulator(wind_sensor.output[ANGLE_BUFFER_SIZE - 1]);
    6d86:	4b1d      	ldr	r3, [pc, #116]	; (6dfc <ast_per_callback+0x210>)
    6d88:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    6d8c:	4618      	mov	r0, r3
    6d8e:	4b2e      	ldr	r3, [pc, #184]	; (6e48 <ast_per_callback+0x25c>)
    6d90:	4798      	blx	r3
			
	// Update pwm output
	update_pwm_output_rudder_regulator(rudder_regulator.output);
    6d92:	4b22      	ldr	r3, [pc, #136]	; (6e1c <ast_per_callback+0x230>)
    6d94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    6d96:	4618      	mov	r0, r3
    6d98:	4b2c      	ldr	r3, [pc, #176]	; (6e4c <ast_per_callback+0x260>)
    6d9a:	4798      	blx	r3
		
		
	/*Shift history buffers.*/
	for (int i = 0; i < (ANGLE_BUFFER_SIZE - 1); ++i)
    6d9c:	2300      	movs	r3, #0
    6d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6da0:	e00c      	b.n	6dbc <ast_per_callback+0x1d0>
	{
		wind_sensor.output[i] = wind_sensor.output[i + 1];
    6da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6da4:	3301      	adds	r3, #1
    6da6:	4a15      	ldr	r2, [pc, #84]	; (6dfc <ast_per_callback+0x210>)
    6da8:	4413      	add	r3, r2
    6daa:	7f9a      	ldrb	r2, [r3, #30]
    6dac:	4913      	ldr	r1, [pc, #76]	; (6dfc <ast_per_callback+0x210>)
    6dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6db0:	440b      	add	r3, r1
    6db2:	3318      	adds	r3, #24
    6db4:	719a      	strb	r2, [r3, #6]
	// Update pwm output
	update_pwm_output_rudder_regulator(rudder_regulator.output);
		
		
	/*Shift history buffers.*/
	for (int i = 0; i < (ANGLE_BUFFER_SIZE - 1); ++i)
    6db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6db8:	3301      	adds	r3, #1
    6dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    6dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dbe:	2b7e      	cmp	r3, #126	; 0x7e
    6dc0:	ddef      	ble.n	6da2 <ast_per_callback+0x1b6>
	{
		wind_sensor.output[i] = wind_sensor.output[i + 1];
	}

}
    6dc2:	3734      	adds	r7, #52	; 0x34
    6dc4:	46bd      	mov	sp, r7
    6dc6:	bd90      	pop	{r4, r7, pc}
    6dc8:	400f0800 	.word	0x400f0800
    6dcc:	00006255 	.word	0x00006255
    6dd0:	00000fb9 	.word	0x00000fb9
    6dd4:	00006515 	.word	0x00006515
    6dd8:	000065a5 	.word	0x000065a5
    6ddc:	20000494 	.word	0x20000494
    6de0:	20000495 	.word	0x20000495
    6de4:	00006971 	.word	0x00006971
    6de8:	00003919 	.word	0x00003919
    6dec:	00006935 	.word	0x00006935
    6df0:	00006901 	.word	0x00006901
    6df4:	000108d8 	.word	0x000108d8
    6df8:	00000885 	.word	0x00000885
    6dfc:	20000e80 	.word	0x20000e80
    6e00:	000108e8 	.word	0x000108e8
    6e04:	00008489 	.word	0x00008489
    6e08:	00003ab5 	.word	0x00003ab5
    6e0c:	20000e9e 	.word	0x20000e9e
    6e10:	00003ae1 	.word	0x00003ae1
    6e14:	000108f4 	.word	0x000108f4
    6e18:	000039e1 	.word	0x000039e1
    6e1c:	20000f2c 	.word	0x20000f2c
    6e20:	00006491 	.word	0x00006491
    6e24:	000108d0 	.word	0x000108d0
    6e28:	00008603 	.word	0x00008603
    6e2c:	000032f9 	.word	0x000032f9
    6e30:	0000339d 	.word	0x0000339d
    6e34:	00010900 	.word	0x00010900
    6e38:	00003355 	.word	0x00003355
    6e3c:	00003335 	.word	0x00003335
    6e40:	00002e4d 	.word	0x00002e4d
    6e44:	000033b5 	.word	0x000033b5
    6e48:	00003035 	.word	0x00003035
    6e4c:	00002ea1 	.word	0x00002ea1

00006e50 <config_ast>:

/**
 * Initialize AST to generate 1Hz counter
 */
static void config_ast(void)
{
    6e50:	b590      	push	{r4, r7, lr}
    6e52:	b087      	sub	sp, #28
    6e54:	af02      	add	r7, sp, #8
	struct ast_config ast_conf;

	/* Enable osc32 oscillator */
	if (!osc_is_ready(OSC_ID_OSC32)) {
    6e56:	2001      	movs	r0, #1
    6e58:	4b1b      	ldr	r3, [pc, #108]	; (6ec8 <config_ast+0x78>)
    6e5a:	4798      	blx	r3
    6e5c:	4603      	mov	r3, r0
    6e5e:	f083 0301 	eor.w	r3, r3, #1
    6e62:	b2db      	uxtb	r3, r3
    6e64:	2b00      	cmp	r3, #0
    6e66:	d005      	beq.n	6e74 <config_ast+0x24>
		osc_enable(OSC_ID_OSC32);
    6e68:	2001      	movs	r0, #1
    6e6a:	4b18      	ldr	r3, [pc, #96]	; (6ecc <config_ast+0x7c>)
    6e6c:	4798      	blx	r3
		osc_wait_ready(OSC_ID_OSC32);
    6e6e:	2001      	movs	r0, #1
    6e70:	4b17      	ldr	r3, [pc, #92]	; (6ed0 <config_ast+0x80>)
    6e72:	4798      	blx	r3
	}

	/* Enable the AST. */
	ast_enable(AST);
    6e74:	4817      	ldr	r0, [pc, #92]	; (6ed4 <config_ast+0x84>)
    6e76:	4b18      	ldr	r3, [pc, #96]	; (6ed8 <config_ast+0x88>)
    6e78:	4798      	blx	r3

	ast_conf.mode = AST_COUNTER_MODE;
    6e7a:	2300      	movs	r3, #0
    6e7c:	713b      	strb	r3, [r7, #4]
	ast_conf.osc_type = AST_OSC_1KHZ;
    6e7e:	2304      	movs	r3, #4
    6e80:	717b      	strb	r3, [r7, #5]
	ast_conf.psel = AST_PSEL_32KHZ_1HZ;
    6e82:	230e      	movs	r3, #14
    6e84:	71bb      	strb	r3, [r7, #6]
	ast_conf.counter = 0;
    6e86:	2300      	movs	r3, #0
    6e88:	60bb      	str	r3, [r7, #8]
	ast_set_config(AST, &ast_conf);
    6e8a:	1d3b      	adds	r3, r7, #4
    6e8c:	4811      	ldr	r0, [pc, #68]	; (6ed4 <config_ast+0x84>)
    6e8e:	4619      	mov	r1, r3
    6e90:	4b12      	ldr	r3, [pc, #72]	; (6edc <config_ast+0x8c>)
    6e92:	4798      	blx	r3
	ast_stop(AST);
    6e94:	480f      	ldr	r0, [pc, #60]	; (6ed4 <config_ast+0x84>)
    6e96:	4b12      	ldr	r3, [pc, #72]	; (6ee0 <config_ast+0x90>)
    6e98:	4798      	blx	r3

	/* Set periodic 0 to interrupt after 8 second in counter mode. */
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_PER);
    6e9a:	480e      	ldr	r0, [pc, #56]	; (6ed4 <config_ast+0x84>)
    6e9c:	2101      	movs	r1, #1
    6e9e:	4b11      	ldr	r3, [pc, #68]	; (6ee4 <config_ast+0x94>)
    6ea0:	4798      	blx	r3
	ast_write_periodic0_value(AST, AST_PSEL_32KHZ_1HZ - 9);
    6ea2:	480c      	ldr	r0, [pc, #48]	; (6ed4 <config_ast+0x84>)
    6ea4:	2105      	movs	r1, #5
    6ea6:	4b10      	ldr	r3, [pc, #64]	; (6ee8 <config_ast+0x98>)
    6ea8:	4798      	blx	r3
	ast_enable_wakeup(AST, AST_WAKEUP_PER);
    6eaa:	480a      	ldr	r0, [pc, #40]	; (6ed4 <config_ast+0x84>)
    6eac:	2101      	movs	r1, #1
    6eae:	4b0f      	ldr	r3, [pc, #60]	; (6eec <config_ast+0x9c>)
    6eb0:	4798      	blx	r3
	/* Set callback for periodic0. */
	ast_set_callback(AST, AST_INTERRUPT_PER, ast_per_callback,
    6eb2:	2302      	movs	r3, #2
    6eb4:	9300      	str	r3, [sp, #0]
    6eb6:	4807      	ldr	r0, [pc, #28]	; (6ed4 <config_ast+0x84>)
    6eb8:	2101      	movs	r1, #1
    6eba:	4a0d      	ldr	r2, [pc, #52]	; (6ef0 <config_ast+0xa0>)
    6ebc:	2328      	movs	r3, #40	; 0x28
    6ebe:	4c0d      	ldr	r4, [pc, #52]	; (6ef4 <config_ast+0xa4>)
    6ec0:	47a0      	blx	r4
			AST_PER_IRQn, 2);
}
    6ec2:	3714      	adds	r7, #20
    6ec4:	46bd      	mov	sp, r7
    6ec6:	bd90      	pop	{r4, r7, pc}
    6ec8:	000062f9 	.word	0x000062f9
    6ecc:	00006281 	.word	0x00006281
    6ed0:	00006439 	.word	0x00006439
    6ed4:	400f0800 	.word	0x400f0800
    6ed8:	00000d31 	.word	0x00000d31
    6edc:	00000d55 	.word	0x00000d55
    6ee0:	00006255 	.word	0x00006255
    6ee4:	00000fb9 	.word	0x00000fb9
    6ee8:	00000ef9 	.word	0x00000ef9
    6eec:	000010b1 	.word	0x000010b1
    6ef0:	00006bed 	.word	0x00006bed
    6ef4:	00001041 	.word	0x00001041

00006ef8 <configure_OLED_pins>:

static void configure_OLED_pins(void)
{
    6ef8:	b580      	push	{r7, lr}
    6efa:	af00      	add	r7, sp, #0
	/* Configure Button1 interrupt*/
	gpio_enable_pin_interrupt(OLED_BUTTON1);
    6efc:	2006      	movs	r0, #6
    6efe:	4b0c      	ldr	r3, [pc, #48]	; (6f30 <configure_OLED_pins+0x38>)
    6f00:	4798      	blx	r3
	gpio_set_pin_callback(OLED_BUTTON1, OLED_BUTTON1_handler, 3);
    6f02:	2006      	movs	r0, #6
    6f04:	490b      	ldr	r1, [pc, #44]	; (6f34 <configure_OLED_pins+0x3c>)
    6f06:	2203      	movs	r2, #3
    6f08:	4b0b      	ldr	r3, [pc, #44]	; (6f38 <configure_OLED_pins+0x40>)
    6f0a:	4798      	blx	r3
	
	/* Configure Button2 interrupt*/
	gpio_enable_pin_interrupt(OLED_BUTTON2);
    6f0c:	2023      	movs	r0, #35	; 0x23
    6f0e:	4b08      	ldr	r3, [pc, #32]	; (6f30 <configure_OLED_pins+0x38>)
    6f10:	4798      	blx	r3
	gpio_set_pin_callback(OLED_BUTTON2, OLED_BUTTON2_handler, 3);
    6f12:	2023      	movs	r0, #35	; 0x23
    6f14:	4909      	ldr	r1, [pc, #36]	; (6f3c <configure_OLED_pins+0x44>)
    6f16:	2203      	movs	r2, #3
    6f18:	4b07      	ldr	r3, [pc, #28]	; (6f38 <configure_OLED_pins+0x40>)
    6f1a:	4798      	blx	r3
	
	/* Configure Button3 interrupt*/
	gpio_enable_pin_interrupt(OLED_BUTTON3);
    6f1c:	2024      	movs	r0, #36	; 0x24
    6f1e:	4b04      	ldr	r3, [pc, #16]	; (6f30 <configure_OLED_pins+0x38>)
    6f20:	4798      	blx	r3
	gpio_set_pin_callback(OLED_BUTTON3, OLED_BUTTON3_handler, 3);
    6f22:	2024      	movs	r0, #36	; 0x24
    6f24:	4906      	ldr	r1, [pc, #24]	; (6f40 <configure_OLED_pins+0x48>)
    6f26:	2203      	movs	r2, #3
    6f28:	4b03      	ldr	r3, [pc, #12]	; (6f38 <configure_OLED_pins+0x40>)
    6f2a:	4798      	blx	r3
}
    6f2c:	bd80      	pop	{r7, pc}
    6f2e:	bf00      	nop
    6f30:	000065a5 	.word	0x000065a5
    6f34:	00006a11 	.word	0x00006a11
    6f38:	00001215 	.word	0x00001215
    6f3c:	00006a69 	.word	0x00006a69
    6f40:	00006ad9 	.word	0x00006ad9
    6f44:	00000000 	.word	0x00000000

00006f48 <main>:

int main (void)
{		
    6f48:	b5b0      	push	{r4, r5, r7, lr}
    6f4a:	af00      	add	r7, sp, #0
	// Initate clocks
	sysclk_init();
    6f4c:	4b28      	ldr	r3, [pc, #160]	; (6ff0 <main+0xa8>)
    6f4e:	4798      	blx	r3
	
	// Initiate pins for XPLAINED PRO
	board_init();
    6f50:	4b28      	ldr	r3, [pc, #160]	; (6ff4 <main+0xac>)
    6f52:	4798      	blx	r3
	
	// Set USART for console
	configure_console();
    6f54:	4b28      	ldr	r3, [pc, #160]	; (6ff8 <main+0xb0>)
    6f56:	4798      	blx	r3
	
	// Print startup information
	printf( STRING_HEADER ); 
    6f58:	4828      	ldr	r0, [pc, #160]	; (6ffc <main+0xb4>)
    6f5a:	4b29      	ldr	r3, [pc, #164]	; (7000 <main+0xb8>)
    6f5c:	4798      	blx	r3
	
#ifdef DEBUG
	ssd1306_custom_init();
    6f5e:	4b29      	ldr	r3, [pc, #164]	; (7004 <main+0xbc>)
    6f60:	4798      	blx	r3
	ssd1306_init();
    6f62:	4b29      	ldr	r3, [pc, #164]	; (7008 <main+0xc0>)
    6f64:	4798      	blx	r3
	delay_us(100);
    6f66:	4b29      	ldr	r3, [pc, #164]	; (700c <main+0xc4>)
    6f68:	4798      	blx	r3
    6f6a:	4603      	mov	r3, r0
    6f6c:	4618      	mov	r0, r3
    6f6e:	f04f 0100 	mov.w	r1, #0
    6f72:	4602      	mov	r2, r0
    6f74:	460b      	mov	r3, r1
    6f76:	1892      	adds	r2, r2, r2
    6f78:	eb43 0303 	adc.w	r3, r3, r3
    6f7c:	1812      	adds	r2, r2, r0
    6f7e:	eb43 0301 	adc.w	r3, r3, r1
    6f82:	015d      	lsls	r5, r3, #5
    6f84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    6f88:	0154      	lsls	r4, r2, #5
    6f8a:	1912      	adds	r2, r2, r4
    6f8c:	eb43 0305 	adc.w	r3, r3, r5
    6f90:	1880      	adds	r0, r0, r2
    6f92:	eb41 0103 	adc.w	r1, r1, r3
    6f96:	a314      	add	r3, pc, #80	; (adr r3, 6fe8 <main+0xa0>)
    6f98:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f9c:	1812      	adds	r2, r2, r0
    6f9e:	eb43 0301 	adc.w	r3, r3, r1
    6fa2:	4c1b      	ldr	r4, [pc, #108]	; (7010 <main+0xc8>)
    6fa4:	4610      	mov	r0, r2
    6fa6:	4619      	mov	r1, r3
    6fa8:	4a1a      	ldr	r2, [pc, #104]	; (7014 <main+0xcc>)
    6faa:	f04f 0300 	mov.w	r3, #0
    6fae:	47a0      	blx	r4
    6fb0:	4602      	mov	r2, r0
    6fb2:	460b      	mov	r3, r1
    6fb4:	4613      	mov	r3, r2
    6fb6:	4618      	mov	r0, r3
    6fb8:	4b17      	ldr	r3, [pc, #92]	; (7018 <main+0xd0>)
    6fba:	4798      	blx	r3
	
	ssd1306_clear();
    6fbc:	4b17      	ldr	r3, [pc, #92]	; (701c <main+0xd4>)
    6fbe:	4798      	blx	r3
	
	configure_OLED_pins();
    6fc0:	4b17      	ldr	r3, [pc, #92]	; (7020 <main+0xd8>)
    6fc2:	4798      	blx	r3
	
#endif
	
	// configure asynchronous timer
	config_ast();
    6fc4:	4b17      	ldr	r3, [pc, #92]	; (7024 <main+0xdc>)
    6fc6:	4798      	blx	r3
	
	init_CV7_wind_sensor();
    6fc8:	4b17      	ldr	r3, [pc, #92]	; (7028 <main+0xe0>)
    6fca:	4798      	blx	r3
	init_rudder_regulator();
    6fcc:	4b17      	ldr	r3, [pc, #92]	; (702c <main+0xe4>)
    6fce:	4798      	blx	r3
	init_sheeting_regulator();
    6fd0:	4b17      	ldr	r3, [pc, #92]	; (7030 <main+0xe8>)
    6fd2:	4798      	blx	r3

	while (1) {	
		
		ast_start(AST);
    6fd4:	4817      	ldr	r0, [pc, #92]	; (7034 <main+0xec>)
    6fd6:	4b18      	ldr	r3, [pc, #96]	; (7038 <main+0xf0>)
    6fd8:	4798      	blx	r3
		// Go to sleep and wait for interrupts
		sleepmgr_sleep(SLEEPMGR_SLEEP_0);
    6fda:	2001      	movs	r0, #1
    6fdc:	4b17      	ldr	r3, [pc, #92]	; (703c <main+0xf4>)
    6fde:	4798      	blx	r3
		
	}
    6fe0:	e7f8      	b.n	6fd4 <main+0x8c>
    6fe2:	bf00      	nop
    6fe4:	f3af 8000 	nop.w
    6fe8:	00d59f7f 	.word	0x00d59f7f
    6fec:	00000000 	.word	0x00000000
    6ff0:	00005119 	.word	0x00005119
    6ff4:	0000556d 	.word	0x0000556d
    6ff8:	000029d9 	.word	0x000029d9
    6ffc:	00010908 	.word	0x00010908
    7000:	00008301 	.word	0x00008301
    7004:	00003909 	.word	0x00003909
    7008:	000007e5 	.word	0x000007e5
    700c:	0000647d 	.word	0x0000647d
    7010:	00007cd1 	.word	0x00007cd1
    7014:	00d59f80 	.word	0x00d59f80
    7018:	20000001 	.word	0x20000001
    701c:	00006971 	.word	0x00006971
    7020:	00006ef9 	.word	0x00006ef9
    7024:	00006e51 	.word	0x00006e51
    7028:	000032f9 	.word	0x000032f9
    702c:	00002ff9 	.word	0x00002ff9
    7030:	00003089 	.word	0x00003089
    7034:	400f0800 	.word	0x400f0800
    7038:	00006229 	.word	0x00006229
    703c:	000069cd 	.word	0x000069cd

00007040 <__aeabi_drsub>:
    7040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    7044:	e002      	b.n	704c <__adddf3>
    7046:	bf00      	nop

00007048 <__aeabi_dsub>:
    7048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000704c <__adddf3>:
    704c:	b530      	push	{r4, r5, lr}
    704e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    7052:	ea4f 0543 	mov.w	r5, r3, lsl #1
    7056:	ea94 0f05 	teq	r4, r5
    705a:	bf08      	it	eq
    705c:	ea90 0f02 	teqeq	r0, r2
    7060:	bf1f      	itttt	ne
    7062:	ea54 0c00 	orrsne.w	ip, r4, r0
    7066:	ea55 0c02 	orrsne.w	ip, r5, r2
    706a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    706e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7072:	f000 80e2 	beq.w	723a <__adddf3+0x1ee>
    7076:	ea4f 5454 	mov.w	r4, r4, lsr #21
    707a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    707e:	bfb8      	it	lt
    7080:	426d      	neglt	r5, r5
    7082:	dd0c      	ble.n	709e <__adddf3+0x52>
    7084:	442c      	add	r4, r5
    7086:	ea80 0202 	eor.w	r2, r0, r2
    708a:	ea81 0303 	eor.w	r3, r1, r3
    708e:	ea82 0000 	eor.w	r0, r2, r0
    7092:	ea83 0101 	eor.w	r1, r3, r1
    7096:	ea80 0202 	eor.w	r2, r0, r2
    709a:	ea81 0303 	eor.w	r3, r1, r3
    709e:	2d36      	cmp	r5, #54	; 0x36
    70a0:	bf88      	it	hi
    70a2:	bd30      	pophi	{r4, r5, pc}
    70a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    70a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    70ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    70b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    70b4:	d002      	beq.n	70bc <__adddf3+0x70>
    70b6:	4240      	negs	r0, r0
    70b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    70bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    70c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    70c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    70c8:	d002      	beq.n	70d0 <__adddf3+0x84>
    70ca:	4252      	negs	r2, r2
    70cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    70d0:	ea94 0f05 	teq	r4, r5
    70d4:	f000 80a7 	beq.w	7226 <__adddf3+0x1da>
    70d8:	f1a4 0401 	sub.w	r4, r4, #1
    70dc:	f1d5 0e20 	rsbs	lr, r5, #32
    70e0:	db0d      	blt.n	70fe <__adddf3+0xb2>
    70e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    70e6:	fa22 f205 	lsr.w	r2, r2, r5
    70ea:	1880      	adds	r0, r0, r2
    70ec:	f141 0100 	adc.w	r1, r1, #0
    70f0:	fa03 f20e 	lsl.w	r2, r3, lr
    70f4:	1880      	adds	r0, r0, r2
    70f6:	fa43 f305 	asr.w	r3, r3, r5
    70fa:	4159      	adcs	r1, r3
    70fc:	e00e      	b.n	711c <__adddf3+0xd0>
    70fe:	f1a5 0520 	sub.w	r5, r5, #32
    7102:	f10e 0e20 	add.w	lr, lr, #32
    7106:	2a01      	cmp	r2, #1
    7108:	fa03 fc0e 	lsl.w	ip, r3, lr
    710c:	bf28      	it	cs
    710e:	f04c 0c02 	orrcs.w	ip, ip, #2
    7112:	fa43 f305 	asr.w	r3, r3, r5
    7116:	18c0      	adds	r0, r0, r3
    7118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    711c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7120:	d507      	bpl.n	7132 <__adddf3+0xe6>
    7122:	f04f 0e00 	mov.w	lr, #0
    7126:	f1dc 0c00 	rsbs	ip, ip, #0
    712a:	eb7e 0000 	sbcs.w	r0, lr, r0
    712e:	eb6e 0101 	sbc.w	r1, lr, r1
    7132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    7136:	d31b      	bcc.n	7170 <__adddf3+0x124>
    7138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    713c:	d30c      	bcc.n	7158 <__adddf3+0x10c>
    713e:	0849      	lsrs	r1, r1, #1
    7140:	ea5f 0030 	movs.w	r0, r0, rrx
    7144:	ea4f 0c3c 	mov.w	ip, ip, rrx
    7148:	f104 0401 	add.w	r4, r4, #1
    714c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    7150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    7154:	f080 809a 	bcs.w	728c <__adddf3+0x240>
    7158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    715c:	bf08      	it	eq
    715e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    7162:	f150 0000 	adcs.w	r0, r0, #0
    7166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    716a:	ea41 0105 	orr.w	r1, r1, r5
    716e:	bd30      	pop	{r4, r5, pc}
    7170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    7174:	4140      	adcs	r0, r0
    7176:	eb41 0101 	adc.w	r1, r1, r1
    717a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    717e:	f1a4 0401 	sub.w	r4, r4, #1
    7182:	d1e9      	bne.n	7158 <__adddf3+0x10c>
    7184:	f091 0f00 	teq	r1, #0
    7188:	bf04      	itt	eq
    718a:	4601      	moveq	r1, r0
    718c:	2000      	moveq	r0, #0
    718e:	fab1 f381 	clz	r3, r1
    7192:	bf08      	it	eq
    7194:	3320      	addeq	r3, #32
    7196:	f1a3 030b 	sub.w	r3, r3, #11
    719a:	f1b3 0220 	subs.w	r2, r3, #32
    719e:	da0c      	bge.n	71ba <__adddf3+0x16e>
    71a0:	320c      	adds	r2, #12
    71a2:	dd08      	ble.n	71b6 <__adddf3+0x16a>
    71a4:	f102 0c14 	add.w	ip, r2, #20
    71a8:	f1c2 020c 	rsb	r2, r2, #12
    71ac:	fa01 f00c 	lsl.w	r0, r1, ip
    71b0:	fa21 f102 	lsr.w	r1, r1, r2
    71b4:	e00c      	b.n	71d0 <__adddf3+0x184>
    71b6:	f102 0214 	add.w	r2, r2, #20
    71ba:	bfd8      	it	le
    71bc:	f1c2 0c20 	rsble	ip, r2, #32
    71c0:	fa01 f102 	lsl.w	r1, r1, r2
    71c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    71c8:	bfdc      	itt	le
    71ca:	ea41 010c 	orrle.w	r1, r1, ip
    71ce:	4090      	lslle	r0, r2
    71d0:	1ae4      	subs	r4, r4, r3
    71d2:	bfa2      	ittt	ge
    71d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    71d8:	4329      	orrge	r1, r5
    71da:	bd30      	popge	{r4, r5, pc}
    71dc:	ea6f 0404 	mvn.w	r4, r4
    71e0:	3c1f      	subs	r4, #31
    71e2:	da1c      	bge.n	721e <__adddf3+0x1d2>
    71e4:	340c      	adds	r4, #12
    71e6:	dc0e      	bgt.n	7206 <__adddf3+0x1ba>
    71e8:	f104 0414 	add.w	r4, r4, #20
    71ec:	f1c4 0220 	rsb	r2, r4, #32
    71f0:	fa20 f004 	lsr.w	r0, r0, r4
    71f4:	fa01 f302 	lsl.w	r3, r1, r2
    71f8:	ea40 0003 	orr.w	r0, r0, r3
    71fc:	fa21 f304 	lsr.w	r3, r1, r4
    7200:	ea45 0103 	orr.w	r1, r5, r3
    7204:	bd30      	pop	{r4, r5, pc}
    7206:	f1c4 040c 	rsb	r4, r4, #12
    720a:	f1c4 0220 	rsb	r2, r4, #32
    720e:	fa20 f002 	lsr.w	r0, r0, r2
    7212:	fa01 f304 	lsl.w	r3, r1, r4
    7216:	ea40 0003 	orr.w	r0, r0, r3
    721a:	4629      	mov	r1, r5
    721c:	bd30      	pop	{r4, r5, pc}
    721e:	fa21 f004 	lsr.w	r0, r1, r4
    7222:	4629      	mov	r1, r5
    7224:	bd30      	pop	{r4, r5, pc}
    7226:	f094 0f00 	teq	r4, #0
    722a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    722e:	bf06      	itte	eq
    7230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    7234:	3401      	addeq	r4, #1
    7236:	3d01      	subne	r5, #1
    7238:	e74e      	b.n	70d8 <__adddf3+0x8c>
    723a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    723e:	bf18      	it	ne
    7240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7244:	d029      	beq.n	729a <__adddf3+0x24e>
    7246:	ea94 0f05 	teq	r4, r5
    724a:	bf08      	it	eq
    724c:	ea90 0f02 	teqeq	r0, r2
    7250:	d005      	beq.n	725e <__adddf3+0x212>
    7252:	ea54 0c00 	orrs.w	ip, r4, r0
    7256:	bf04      	itt	eq
    7258:	4619      	moveq	r1, r3
    725a:	4610      	moveq	r0, r2
    725c:	bd30      	pop	{r4, r5, pc}
    725e:	ea91 0f03 	teq	r1, r3
    7262:	bf1e      	ittt	ne
    7264:	2100      	movne	r1, #0
    7266:	2000      	movne	r0, #0
    7268:	bd30      	popne	{r4, r5, pc}
    726a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    726e:	d105      	bne.n	727c <__adddf3+0x230>
    7270:	0040      	lsls	r0, r0, #1
    7272:	4149      	adcs	r1, r1
    7274:	bf28      	it	cs
    7276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    727a:	bd30      	pop	{r4, r5, pc}
    727c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    7280:	bf3c      	itt	cc
    7282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    7286:	bd30      	popcc	{r4, r5, pc}
    7288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    728c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    7290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    7294:	f04f 0000 	mov.w	r0, #0
    7298:	bd30      	pop	{r4, r5, pc}
    729a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    729e:	bf1a      	itte	ne
    72a0:	4619      	movne	r1, r3
    72a2:	4610      	movne	r0, r2
    72a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    72a8:	bf1c      	itt	ne
    72aa:	460b      	movne	r3, r1
    72ac:	4602      	movne	r2, r0
    72ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    72b2:	bf06      	itte	eq
    72b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    72b8:	ea91 0f03 	teqeq	r1, r3
    72bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    72c0:	bd30      	pop	{r4, r5, pc}
    72c2:	bf00      	nop

000072c4 <__aeabi_ui2d>:
    72c4:	f090 0f00 	teq	r0, #0
    72c8:	bf04      	itt	eq
    72ca:	2100      	moveq	r1, #0
    72cc:	4770      	bxeq	lr
    72ce:	b530      	push	{r4, r5, lr}
    72d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    72d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    72d8:	f04f 0500 	mov.w	r5, #0
    72dc:	f04f 0100 	mov.w	r1, #0
    72e0:	e750      	b.n	7184 <__adddf3+0x138>
    72e2:	bf00      	nop

000072e4 <__aeabi_i2d>:
    72e4:	f090 0f00 	teq	r0, #0
    72e8:	bf04      	itt	eq
    72ea:	2100      	moveq	r1, #0
    72ec:	4770      	bxeq	lr
    72ee:	b530      	push	{r4, r5, lr}
    72f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    72f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    72f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    72fc:	bf48      	it	mi
    72fe:	4240      	negmi	r0, r0
    7300:	f04f 0100 	mov.w	r1, #0
    7304:	e73e      	b.n	7184 <__adddf3+0x138>
    7306:	bf00      	nop

00007308 <__aeabi_f2d>:
    7308:	0042      	lsls	r2, r0, #1
    730a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    730e:	ea4f 0131 	mov.w	r1, r1, rrx
    7312:	ea4f 7002 	mov.w	r0, r2, lsl #28
    7316:	bf1f      	itttt	ne
    7318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    731c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    7320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    7324:	4770      	bxne	lr
    7326:	f092 0f00 	teq	r2, #0
    732a:	bf14      	ite	ne
    732c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    7330:	4770      	bxeq	lr
    7332:	b530      	push	{r4, r5, lr}
    7334:	f44f 7460 	mov.w	r4, #896	; 0x380
    7338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    733c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7340:	e720      	b.n	7184 <__adddf3+0x138>
    7342:	bf00      	nop

00007344 <__aeabi_ul2d>:
    7344:	ea50 0201 	orrs.w	r2, r0, r1
    7348:	bf08      	it	eq
    734a:	4770      	bxeq	lr
    734c:	b530      	push	{r4, r5, lr}
    734e:	f04f 0500 	mov.w	r5, #0
    7352:	e00a      	b.n	736a <__aeabi_l2d+0x16>

00007354 <__aeabi_l2d>:
    7354:	ea50 0201 	orrs.w	r2, r0, r1
    7358:	bf08      	it	eq
    735a:	4770      	bxeq	lr
    735c:	b530      	push	{r4, r5, lr}
    735e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    7362:	d502      	bpl.n	736a <__aeabi_l2d+0x16>
    7364:	4240      	negs	r0, r0
    7366:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    736a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    736e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7372:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    7376:	f43f aedc 	beq.w	7132 <__adddf3+0xe6>
    737a:	f04f 0203 	mov.w	r2, #3
    737e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7382:	bf18      	it	ne
    7384:	3203      	addne	r2, #3
    7386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    738a:	bf18      	it	ne
    738c:	3203      	addne	r2, #3
    738e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    7392:	f1c2 0320 	rsb	r3, r2, #32
    7396:	fa00 fc03 	lsl.w	ip, r0, r3
    739a:	fa20 f002 	lsr.w	r0, r0, r2
    739e:	fa01 fe03 	lsl.w	lr, r1, r3
    73a2:	ea40 000e 	orr.w	r0, r0, lr
    73a6:	fa21 f102 	lsr.w	r1, r1, r2
    73aa:	4414      	add	r4, r2
    73ac:	e6c1      	b.n	7132 <__adddf3+0xe6>
    73ae:	bf00      	nop

000073b0 <__aeabi_dmul>:
    73b0:	b570      	push	{r4, r5, r6, lr}
    73b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    73b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    73ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    73be:	bf1d      	ittte	ne
    73c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    73c4:	ea94 0f0c 	teqne	r4, ip
    73c8:	ea95 0f0c 	teqne	r5, ip
    73cc:	f000 f8de 	bleq	758c <__aeabi_dmul+0x1dc>
    73d0:	442c      	add	r4, r5
    73d2:	ea81 0603 	eor.w	r6, r1, r3
    73d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    73da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    73de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    73e2:	bf18      	it	ne
    73e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    73e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    73ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    73f0:	d038      	beq.n	7464 <__aeabi_dmul+0xb4>
    73f2:	fba0 ce02 	umull	ip, lr, r0, r2
    73f6:	f04f 0500 	mov.w	r5, #0
    73fa:	fbe1 e502 	umlal	lr, r5, r1, r2
    73fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    7402:	fbe0 e503 	umlal	lr, r5, r0, r3
    7406:	f04f 0600 	mov.w	r6, #0
    740a:	fbe1 5603 	umlal	r5, r6, r1, r3
    740e:	f09c 0f00 	teq	ip, #0
    7412:	bf18      	it	ne
    7414:	f04e 0e01 	orrne.w	lr, lr, #1
    7418:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    741c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    7420:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    7424:	d204      	bcs.n	7430 <__aeabi_dmul+0x80>
    7426:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    742a:	416d      	adcs	r5, r5
    742c:	eb46 0606 	adc.w	r6, r6, r6
    7430:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    7434:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    7438:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    743c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    7440:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    7444:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    7448:	bf88      	it	hi
    744a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    744e:	d81e      	bhi.n	748e <__aeabi_dmul+0xde>
    7450:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    7454:	bf08      	it	eq
    7456:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    745a:	f150 0000 	adcs.w	r0, r0, #0
    745e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    7462:	bd70      	pop	{r4, r5, r6, pc}
    7464:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    7468:	ea46 0101 	orr.w	r1, r6, r1
    746c:	ea40 0002 	orr.w	r0, r0, r2
    7470:	ea81 0103 	eor.w	r1, r1, r3
    7474:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    7478:	bfc2      	ittt	gt
    747a:	ebd4 050c 	rsbsgt	r5, r4, ip
    747e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    7482:	bd70      	popgt	{r4, r5, r6, pc}
    7484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7488:	f04f 0e00 	mov.w	lr, #0
    748c:	3c01      	subs	r4, #1
    748e:	f300 80ab 	bgt.w	75e8 <__aeabi_dmul+0x238>
    7492:	f114 0f36 	cmn.w	r4, #54	; 0x36
    7496:	bfde      	ittt	le
    7498:	2000      	movle	r0, #0
    749a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    749e:	bd70      	pople	{r4, r5, r6, pc}
    74a0:	f1c4 0400 	rsb	r4, r4, #0
    74a4:	3c20      	subs	r4, #32
    74a6:	da35      	bge.n	7514 <__aeabi_dmul+0x164>
    74a8:	340c      	adds	r4, #12
    74aa:	dc1b      	bgt.n	74e4 <__aeabi_dmul+0x134>
    74ac:	f104 0414 	add.w	r4, r4, #20
    74b0:	f1c4 0520 	rsb	r5, r4, #32
    74b4:	fa00 f305 	lsl.w	r3, r0, r5
    74b8:	fa20 f004 	lsr.w	r0, r0, r4
    74bc:	fa01 f205 	lsl.w	r2, r1, r5
    74c0:	ea40 0002 	orr.w	r0, r0, r2
    74c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    74c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    74cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    74d0:	fa21 f604 	lsr.w	r6, r1, r4
    74d4:	eb42 0106 	adc.w	r1, r2, r6
    74d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    74dc:	bf08      	it	eq
    74de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    74e2:	bd70      	pop	{r4, r5, r6, pc}
    74e4:	f1c4 040c 	rsb	r4, r4, #12
    74e8:	f1c4 0520 	rsb	r5, r4, #32
    74ec:	fa00 f304 	lsl.w	r3, r0, r4
    74f0:	fa20 f005 	lsr.w	r0, r0, r5
    74f4:	fa01 f204 	lsl.w	r2, r1, r4
    74f8:	ea40 0002 	orr.w	r0, r0, r2
    74fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7500:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    7504:	f141 0100 	adc.w	r1, r1, #0
    7508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    750c:	bf08      	it	eq
    750e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    7512:	bd70      	pop	{r4, r5, r6, pc}
    7514:	f1c4 0520 	rsb	r5, r4, #32
    7518:	fa00 f205 	lsl.w	r2, r0, r5
    751c:	ea4e 0e02 	orr.w	lr, lr, r2
    7520:	fa20 f304 	lsr.w	r3, r0, r4
    7524:	fa01 f205 	lsl.w	r2, r1, r5
    7528:	ea43 0302 	orr.w	r3, r3, r2
    752c:	fa21 f004 	lsr.w	r0, r1, r4
    7530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7534:	fa21 f204 	lsr.w	r2, r1, r4
    7538:	ea20 0002 	bic.w	r0, r0, r2
    753c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    7540:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    7544:	bf08      	it	eq
    7546:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    754a:	bd70      	pop	{r4, r5, r6, pc}
    754c:	f094 0f00 	teq	r4, #0
    7550:	d10f      	bne.n	7572 <__aeabi_dmul+0x1c2>
    7552:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    7556:	0040      	lsls	r0, r0, #1
    7558:	eb41 0101 	adc.w	r1, r1, r1
    755c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7560:	bf08      	it	eq
    7562:	3c01      	subeq	r4, #1
    7564:	d0f7      	beq.n	7556 <__aeabi_dmul+0x1a6>
    7566:	ea41 0106 	orr.w	r1, r1, r6
    756a:	f095 0f00 	teq	r5, #0
    756e:	bf18      	it	ne
    7570:	4770      	bxne	lr
    7572:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    7576:	0052      	lsls	r2, r2, #1
    7578:	eb43 0303 	adc.w	r3, r3, r3
    757c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    7580:	bf08      	it	eq
    7582:	3d01      	subeq	r5, #1
    7584:	d0f7      	beq.n	7576 <__aeabi_dmul+0x1c6>
    7586:	ea43 0306 	orr.w	r3, r3, r6
    758a:	4770      	bx	lr
    758c:	ea94 0f0c 	teq	r4, ip
    7590:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    7594:	bf18      	it	ne
    7596:	ea95 0f0c 	teqne	r5, ip
    759a:	d00c      	beq.n	75b6 <__aeabi_dmul+0x206>
    759c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    75a0:	bf18      	it	ne
    75a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    75a6:	d1d1      	bne.n	754c <__aeabi_dmul+0x19c>
    75a8:	ea81 0103 	eor.w	r1, r1, r3
    75ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    75b0:	f04f 0000 	mov.w	r0, #0
    75b4:	bd70      	pop	{r4, r5, r6, pc}
    75b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    75ba:	bf06      	itte	eq
    75bc:	4610      	moveq	r0, r2
    75be:	4619      	moveq	r1, r3
    75c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    75c4:	d019      	beq.n	75fa <__aeabi_dmul+0x24a>
    75c6:	ea94 0f0c 	teq	r4, ip
    75ca:	d102      	bne.n	75d2 <__aeabi_dmul+0x222>
    75cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    75d0:	d113      	bne.n	75fa <__aeabi_dmul+0x24a>
    75d2:	ea95 0f0c 	teq	r5, ip
    75d6:	d105      	bne.n	75e4 <__aeabi_dmul+0x234>
    75d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    75dc:	bf1c      	itt	ne
    75de:	4610      	movne	r0, r2
    75e0:	4619      	movne	r1, r3
    75e2:	d10a      	bne.n	75fa <__aeabi_dmul+0x24a>
    75e4:	ea81 0103 	eor.w	r1, r1, r3
    75e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    75ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    75f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    75f4:	f04f 0000 	mov.w	r0, #0
    75f8:	bd70      	pop	{r4, r5, r6, pc}
    75fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    75fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    7602:	bd70      	pop	{r4, r5, r6, pc}

00007604 <__aeabi_ddiv>:
    7604:	b570      	push	{r4, r5, r6, lr}
    7606:	f04f 0cff 	mov.w	ip, #255	; 0xff
    760a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    760e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    7612:	bf1d      	ittte	ne
    7614:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    7618:	ea94 0f0c 	teqne	r4, ip
    761c:	ea95 0f0c 	teqne	r5, ip
    7620:	f000 f8a7 	bleq	7772 <__aeabi_ddiv+0x16e>
    7624:	eba4 0405 	sub.w	r4, r4, r5
    7628:	ea81 0e03 	eor.w	lr, r1, r3
    762c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    7630:	ea4f 3101 	mov.w	r1, r1, lsl #12
    7634:	f000 8088 	beq.w	7748 <__aeabi_ddiv+0x144>
    7638:	ea4f 3303 	mov.w	r3, r3, lsl #12
    763c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7640:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    7644:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    7648:	ea4f 2202 	mov.w	r2, r2, lsl #8
    764c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    7650:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    7654:	ea4f 2600 	mov.w	r6, r0, lsl #8
    7658:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    765c:	429d      	cmp	r5, r3
    765e:	bf08      	it	eq
    7660:	4296      	cmpeq	r6, r2
    7662:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    7666:	f504 7440 	add.w	r4, r4, #768	; 0x300
    766a:	d202      	bcs.n	7672 <__aeabi_ddiv+0x6e>
    766c:	085b      	lsrs	r3, r3, #1
    766e:	ea4f 0232 	mov.w	r2, r2, rrx
    7672:	1ab6      	subs	r6, r6, r2
    7674:	eb65 0503 	sbc.w	r5, r5, r3
    7678:	085b      	lsrs	r3, r3, #1
    767a:	ea4f 0232 	mov.w	r2, r2, rrx
    767e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7682:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    7686:	ebb6 0e02 	subs.w	lr, r6, r2
    768a:	eb75 0e03 	sbcs.w	lr, r5, r3
    768e:	bf22      	ittt	cs
    7690:	1ab6      	subcs	r6, r6, r2
    7692:	4675      	movcs	r5, lr
    7694:	ea40 000c 	orrcs.w	r0, r0, ip
    7698:	085b      	lsrs	r3, r3, #1
    769a:	ea4f 0232 	mov.w	r2, r2, rrx
    769e:	ebb6 0e02 	subs.w	lr, r6, r2
    76a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    76a6:	bf22      	ittt	cs
    76a8:	1ab6      	subcs	r6, r6, r2
    76aa:	4675      	movcs	r5, lr
    76ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    76b0:	085b      	lsrs	r3, r3, #1
    76b2:	ea4f 0232 	mov.w	r2, r2, rrx
    76b6:	ebb6 0e02 	subs.w	lr, r6, r2
    76ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    76be:	bf22      	ittt	cs
    76c0:	1ab6      	subcs	r6, r6, r2
    76c2:	4675      	movcs	r5, lr
    76c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    76c8:	085b      	lsrs	r3, r3, #1
    76ca:	ea4f 0232 	mov.w	r2, r2, rrx
    76ce:	ebb6 0e02 	subs.w	lr, r6, r2
    76d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    76d6:	bf22      	ittt	cs
    76d8:	1ab6      	subcs	r6, r6, r2
    76da:	4675      	movcs	r5, lr
    76dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    76e0:	ea55 0e06 	orrs.w	lr, r5, r6
    76e4:	d018      	beq.n	7718 <__aeabi_ddiv+0x114>
    76e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    76ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    76ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
    76f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    76f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    76fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    76fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    7702:	d1c0      	bne.n	7686 <__aeabi_ddiv+0x82>
    7704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7708:	d10b      	bne.n	7722 <__aeabi_ddiv+0x11e>
    770a:	ea41 0100 	orr.w	r1, r1, r0
    770e:	f04f 0000 	mov.w	r0, #0
    7712:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    7716:	e7b6      	b.n	7686 <__aeabi_ddiv+0x82>
    7718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    771c:	bf04      	itt	eq
    771e:	4301      	orreq	r1, r0
    7720:	2000      	moveq	r0, #0
    7722:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    7726:	bf88      	it	hi
    7728:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    772c:	f63f aeaf 	bhi.w	748e <__aeabi_dmul+0xde>
    7730:	ebb5 0c03 	subs.w	ip, r5, r3
    7734:	bf04      	itt	eq
    7736:	ebb6 0c02 	subseq.w	ip, r6, r2
    773a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    773e:	f150 0000 	adcs.w	r0, r0, #0
    7742:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    774c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    7750:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    7754:	bfc2      	ittt	gt
    7756:	ebd4 050c 	rsbsgt	r5, r4, ip
    775a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    775e:	bd70      	popgt	{r4, r5, r6, pc}
    7760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7764:	f04f 0e00 	mov.w	lr, #0
    7768:	3c01      	subs	r4, #1
    776a:	e690      	b.n	748e <__aeabi_dmul+0xde>
    776c:	ea45 0e06 	orr.w	lr, r5, r6
    7770:	e68d      	b.n	748e <__aeabi_dmul+0xde>
    7772:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    7776:	ea94 0f0c 	teq	r4, ip
    777a:	bf08      	it	eq
    777c:	ea95 0f0c 	teqeq	r5, ip
    7780:	f43f af3b 	beq.w	75fa <__aeabi_dmul+0x24a>
    7784:	ea94 0f0c 	teq	r4, ip
    7788:	d10a      	bne.n	77a0 <__aeabi_ddiv+0x19c>
    778a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    778e:	f47f af34 	bne.w	75fa <__aeabi_dmul+0x24a>
    7792:	ea95 0f0c 	teq	r5, ip
    7796:	f47f af25 	bne.w	75e4 <__aeabi_dmul+0x234>
    779a:	4610      	mov	r0, r2
    779c:	4619      	mov	r1, r3
    779e:	e72c      	b.n	75fa <__aeabi_dmul+0x24a>
    77a0:	ea95 0f0c 	teq	r5, ip
    77a4:	d106      	bne.n	77b4 <__aeabi_ddiv+0x1b0>
    77a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    77aa:	f43f aefd 	beq.w	75a8 <__aeabi_dmul+0x1f8>
    77ae:	4610      	mov	r0, r2
    77b0:	4619      	mov	r1, r3
    77b2:	e722      	b.n	75fa <__aeabi_dmul+0x24a>
    77b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    77b8:	bf18      	it	ne
    77ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    77be:	f47f aec5 	bne.w	754c <__aeabi_dmul+0x19c>
    77c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    77c6:	f47f af0d 	bne.w	75e4 <__aeabi_dmul+0x234>
    77ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    77ce:	f47f aeeb 	bne.w	75a8 <__aeabi_dmul+0x1f8>
    77d2:	e712      	b.n	75fa <__aeabi_dmul+0x24a>

000077d4 <__aeabi_d2uiz>:
    77d4:	004a      	lsls	r2, r1, #1
    77d6:	d211      	bcs.n	77fc <__aeabi_d2uiz+0x28>
    77d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    77dc:	d211      	bcs.n	7802 <__aeabi_d2uiz+0x2e>
    77de:	d50d      	bpl.n	77fc <__aeabi_d2uiz+0x28>
    77e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    77e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    77e8:	d40e      	bmi.n	7808 <__aeabi_d2uiz+0x34>
    77ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    77ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    77f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    77f6:	fa23 f002 	lsr.w	r0, r3, r2
    77fa:	4770      	bx	lr
    77fc:	f04f 0000 	mov.w	r0, #0
    7800:	4770      	bx	lr
    7802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    7806:	d102      	bne.n	780e <__aeabi_d2uiz+0x3a>
    7808:	f04f 30ff 	mov.w	r0, #4294967295
    780c:	4770      	bx	lr
    780e:	f04f 0000 	mov.w	r0, #0
    7812:	4770      	bx	lr

00007814 <__aeabi_frsub>:
    7814:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    7818:	e002      	b.n	7820 <__addsf3>
    781a:	bf00      	nop

0000781c <__aeabi_fsub>:
    781c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00007820 <__addsf3>:
    7820:	0042      	lsls	r2, r0, #1
    7822:	bf1f      	itttt	ne
    7824:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    7828:	ea92 0f03 	teqne	r2, r3
    782c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    7830:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7834:	d06a      	beq.n	790c <__addsf3+0xec>
    7836:	ea4f 6212 	mov.w	r2, r2, lsr #24
    783a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    783e:	bfc1      	itttt	gt
    7840:	18d2      	addgt	r2, r2, r3
    7842:	4041      	eorgt	r1, r0
    7844:	4048      	eorgt	r0, r1
    7846:	4041      	eorgt	r1, r0
    7848:	bfb8      	it	lt
    784a:	425b      	neglt	r3, r3
    784c:	2b19      	cmp	r3, #25
    784e:	bf88      	it	hi
    7850:	4770      	bxhi	lr
    7852:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    7856:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    785a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    785e:	bf18      	it	ne
    7860:	4240      	negne	r0, r0
    7862:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    7866:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    786a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    786e:	bf18      	it	ne
    7870:	4249      	negne	r1, r1
    7872:	ea92 0f03 	teq	r2, r3
    7876:	d03f      	beq.n	78f8 <__addsf3+0xd8>
    7878:	f1a2 0201 	sub.w	r2, r2, #1
    787c:	fa41 fc03 	asr.w	ip, r1, r3
    7880:	eb10 000c 	adds.w	r0, r0, ip
    7884:	f1c3 0320 	rsb	r3, r3, #32
    7888:	fa01 f103 	lsl.w	r1, r1, r3
    788c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7890:	d502      	bpl.n	7898 <__addsf3+0x78>
    7892:	4249      	negs	r1, r1
    7894:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    7898:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    789c:	d313      	bcc.n	78c6 <__addsf3+0xa6>
    789e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    78a2:	d306      	bcc.n	78b2 <__addsf3+0x92>
    78a4:	0840      	lsrs	r0, r0, #1
    78a6:	ea4f 0131 	mov.w	r1, r1, rrx
    78aa:	f102 0201 	add.w	r2, r2, #1
    78ae:	2afe      	cmp	r2, #254	; 0xfe
    78b0:	d251      	bcs.n	7956 <__addsf3+0x136>
    78b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    78b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    78ba:	bf08      	it	eq
    78bc:	f020 0001 	biceq.w	r0, r0, #1
    78c0:	ea40 0003 	orr.w	r0, r0, r3
    78c4:	4770      	bx	lr
    78c6:	0049      	lsls	r1, r1, #1
    78c8:	eb40 0000 	adc.w	r0, r0, r0
    78cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    78d0:	f1a2 0201 	sub.w	r2, r2, #1
    78d4:	d1ed      	bne.n	78b2 <__addsf3+0x92>
    78d6:	fab0 fc80 	clz	ip, r0
    78da:	f1ac 0c08 	sub.w	ip, ip, #8
    78de:	ebb2 020c 	subs.w	r2, r2, ip
    78e2:	fa00 f00c 	lsl.w	r0, r0, ip
    78e6:	bfaa      	itet	ge
    78e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    78ec:	4252      	neglt	r2, r2
    78ee:	4318      	orrge	r0, r3
    78f0:	bfbc      	itt	lt
    78f2:	40d0      	lsrlt	r0, r2
    78f4:	4318      	orrlt	r0, r3
    78f6:	4770      	bx	lr
    78f8:	f092 0f00 	teq	r2, #0
    78fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    7900:	bf06      	itte	eq
    7902:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    7906:	3201      	addeq	r2, #1
    7908:	3b01      	subne	r3, #1
    790a:	e7b5      	b.n	7878 <__addsf3+0x58>
    790c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7910:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7914:	bf18      	it	ne
    7916:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    791a:	d021      	beq.n	7960 <__addsf3+0x140>
    791c:	ea92 0f03 	teq	r2, r3
    7920:	d004      	beq.n	792c <__addsf3+0x10c>
    7922:	f092 0f00 	teq	r2, #0
    7926:	bf08      	it	eq
    7928:	4608      	moveq	r0, r1
    792a:	4770      	bx	lr
    792c:	ea90 0f01 	teq	r0, r1
    7930:	bf1c      	itt	ne
    7932:	2000      	movne	r0, #0
    7934:	4770      	bxne	lr
    7936:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    793a:	d104      	bne.n	7946 <__addsf3+0x126>
    793c:	0040      	lsls	r0, r0, #1
    793e:	bf28      	it	cs
    7940:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    7944:	4770      	bx	lr
    7946:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    794a:	bf3c      	itt	cc
    794c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    7950:	4770      	bxcc	lr
    7952:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7956:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    795a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    795e:	4770      	bx	lr
    7960:	ea7f 6222 	mvns.w	r2, r2, asr #24
    7964:	bf16      	itet	ne
    7966:	4608      	movne	r0, r1
    7968:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    796c:	4601      	movne	r1, r0
    796e:	0242      	lsls	r2, r0, #9
    7970:	bf06      	itte	eq
    7972:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    7976:	ea90 0f01 	teqeq	r0, r1
    797a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    797e:	4770      	bx	lr

00007980 <__aeabi_ui2f>:
    7980:	f04f 0300 	mov.w	r3, #0
    7984:	e004      	b.n	7990 <__aeabi_i2f+0x8>
    7986:	bf00      	nop

00007988 <__aeabi_i2f>:
    7988:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    798c:	bf48      	it	mi
    798e:	4240      	negmi	r0, r0
    7990:	ea5f 0c00 	movs.w	ip, r0
    7994:	bf08      	it	eq
    7996:	4770      	bxeq	lr
    7998:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    799c:	4601      	mov	r1, r0
    799e:	f04f 0000 	mov.w	r0, #0
    79a2:	e01c      	b.n	79de <__aeabi_l2f+0x2a>

000079a4 <__aeabi_ul2f>:
    79a4:	ea50 0201 	orrs.w	r2, r0, r1
    79a8:	bf08      	it	eq
    79aa:	4770      	bxeq	lr
    79ac:	f04f 0300 	mov.w	r3, #0
    79b0:	e00a      	b.n	79c8 <__aeabi_l2f+0x14>
    79b2:	bf00      	nop

000079b4 <__aeabi_l2f>:
    79b4:	ea50 0201 	orrs.w	r2, r0, r1
    79b8:	bf08      	it	eq
    79ba:	4770      	bxeq	lr
    79bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    79c0:	d502      	bpl.n	79c8 <__aeabi_l2f+0x14>
    79c2:	4240      	negs	r0, r0
    79c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    79c8:	ea5f 0c01 	movs.w	ip, r1
    79cc:	bf02      	ittt	eq
    79ce:	4684      	moveq	ip, r0
    79d0:	4601      	moveq	r1, r0
    79d2:	2000      	moveq	r0, #0
    79d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    79d8:	bf08      	it	eq
    79da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    79de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    79e2:	fabc f28c 	clz	r2, ip
    79e6:	3a08      	subs	r2, #8
    79e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    79ec:	db10      	blt.n	7a10 <__aeabi_l2f+0x5c>
    79ee:	fa01 fc02 	lsl.w	ip, r1, r2
    79f2:	4463      	add	r3, ip
    79f4:	fa00 fc02 	lsl.w	ip, r0, r2
    79f8:	f1c2 0220 	rsb	r2, r2, #32
    79fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7a00:	fa20 f202 	lsr.w	r2, r0, r2
    7a04:	eb43 0002 	adc.w	r0, r3, r2
    7a08:	bf08      	it	eq
    7a0a:	f020 0001 	biceq.w	r0, r0, #1
    7a0e:	4770      	bx	lr
    7a10:	f102 0220 	add.w	r2, r2, #32
    7a14:	fa01 fc02 	lsl.w	ip, r1, r2
    7a18:	f1c2 0220 	rsb	r2, r2, #32
    7a1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    7a20:	fa21 f202 	lsr.w	r2, r1, r2
    7a24:	eb43 0002 	adc.w	r0, r3, r2
    7a28:	bf08      	it	eq
    7a2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7a2e:	4770      	bx	lr

00007a30 <__aeabi_fmul>:
    7a30:	f04f 0cff 	mov.w	ip, #255	; 0xff
    7a34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    7a38:	bf1e      	ittt	ne
    7a3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    7a3e:	ea92 0f0c 	teqne	r2, ip
    7a42:	ea93 0f0c 	teqne	r3, ip
    7a46:	d06f      	beq.n	7b28 <__aeabi_fmul+0xf8>
    7a48:	441a      	add	r2, r3
    7a4a:	ea80 0c01 	eor.w	ip, r0, r1
    7a4e:	0240      	lsls	r0, r0, #9
    7a50:	bf18      	it	ne
    7a52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    7a56:	d01e      	beq.n	7a96 <__aeabi_fmul+0x66>
    7a58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    7a5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    7a60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    7a64:	fba0 3101 	umull	r3, r1, r0, r1
    7a68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    7a6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    7a70:	bf3e      	ittt	cc
    7a72:	0049      	lslcc	r1, r1, #1
    7a74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    7a78:	005b      	lslcc	r3, r3, #1
    7a7a:	ea40 0001 	orr.w	r0, r0, r1
    7a7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    7a82:	2afd      	cmp	r2, #253	; 0xfd
    7a84:	d81d      	bhi.n	7ac2 <__aeabi_fmul+0x92>
    7a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7a8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7a8e:	bf08      	it	eq
    7a90:	f020 0001 	biceq.w	r0, r0, #1
    7a94:	4770      	bx	lr
    7a96:	f090 0f00 	teq	r0, #0
    7a9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    7a9e:	bf08      	it	eq
    7aa0:	0249      	lsleq	r1, r1, #9
    7aa2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    7aa6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    7aaa:	3a7f      	subs	r2, #127	; 0x7f
    7aac:	bfc2      	ittt	gt
    7aae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    7ab2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    7ab6:	4770      	bxgt	lr
    7ab8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7abc:	f04f 0300 	mov.w	r3, #0
    7ac0:	3a01      	subs	r2, #1
    7ac2:	dc5d      	bgt.n	7b80 <__aeabi_fmul+0x150>
    7ac4:	f112 0f19 	cmn.w	r2, #25
    7ac8:	bfdc      	itt	le
    7aca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    7ace:	4770      	bxle	lr
    7ad0:	f1c2 0200 	rsb	r2, r2, #0
    7ad4:	0041      	lsls	r1, r0, #1
    7ad6:	fa21 f102 	lsr.w	r1, r1, r2
    7ada:	f1c2 0220 	rsb	r2, r2, #32
    7ade:	fa00 fc02 	lsl.w	ip, r0, r2
    7ae2:	ea5f 0031 	movs.w	r0, r1, rrx
    7ae6:	f140 0000 	adc.w	r0, r0, #0
    7aea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    7aee:	bf08      	it	eq
    7af0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7af4:	4770      	bx	lr
    7af6:	f092 0f00 	teq	r2, #0
    7afa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    7afe:	bf02      	ittt	eq
    7b00:	0040      	lsleq	r0, r0, #1
    7b02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    7b06:	3a01      	subeq	r2, #1
    7b08:	d0f9      	beq.n	7afe <__aeabi_fmul+0xce>
    7b0a:	ea40 000c 	orr.w	r0, r0, ip
    7b0e:	f093 0f00 	teq	r3, #0
    7b12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    7b16:	bf02      	ittt	eq
    7b18:	0049      	lsleq	r1, r1, #1
    7b1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    7b1e:	3b01      	subeq	r3, #1
    7b20:	d0f9      	beq.n	7b16 <__aeabi_fmul+0xe6>
    7b22:	ea41 010c 	orr.w	r1, r1, ip
    7b26:	e78f      	b.n	7a48 <__aeabi_fmul+0x18>
    7b28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    7b2c:	ea92 0f0c 	teq	r2, ip
    7b30:	bf18      	it	ne
    7b32:	ea93 0f0c 	teqne	r3, ip
    7b36:	d00a      	beq.n	7b4e <__aeabi_fmul+0x11e>
    7b38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    7b3c:	bf18      	it	ne
    7b3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    7b42:	d1d8      	bne.n	7af6 <__aeabi_fmul+0xc6>
    7b44:	ea80 0001 	eor.w	r0, r0, r1
    7b48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    7b4c:	4770      	bx	lr
    7b4e:	f090 0f00 	teq	r0, #0
    7b52:	bf17      	itett	ne
    7b54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    7b58:	4608      	moveq	r0, r1
    7b5a:	f091 0f00 	teqne	r1, #0
    7b5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    7b62:	d014      	beq.n	7b8e <__aeabi_fmul+0x15e>
    7b64:	ea92 0f0c 	teq	r2, ip
    7b68:	d101      	bne.n	7b6e <__aeabi_fmul+0x13e>
    7b6a:	0242      	lsls	r2, r0, #9
    7b6c:	d10f      	bne.n	7b8e <__aeabi_fmul+0x15e>
    7b6e:	ea93 0f0c 	teq	r3, ip
    7b72:	d103      	bne.n	7b7c <__aeabi_fmul+0x14c>
    7b74:	024b      	lsls	r3, r1, #9
    7b76:	bf18      	it	ne
    7b78:	4608      	movne	r0, r1
    7b7a:	d108      	bne.n	7b8e <__aeabi_fmul+0x15e>
    7b7c:	ea80 0001 	eor.w	r0, r0, r1
    7b80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    7b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7b8c:	4770      	bx	lr
    7b8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7b92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    7b96:	4770      	bx	lr

00007b98 <__aeabi_fdiv>:
    7b98:	f04f 0cff 	mov.w	ip, #255	; 0xff
    7b9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    7ba0:	bf1e      	ittt	ne
    7ba2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    7ba6:	ea92 0f0c 	teqne	r2, ip
    7baa:	ea93 0f0c 	teqne	r3, ip
    7bae:	d069      	beq.n	7c84 <__aeabi_fdiv+0xec>
    7bb0:	eba2 0203 	sub.w	r2, r2, r3
    7bb4:	ea80 0c01 	eor.w	ip, r0, r1
    7bb8:	0249      	lsls	r1, r1, #9
    7bba:	ea4f 2040 	mov.w	r0, r0, lsl #9
    7bbe:	d037      	beq.n	7c30 <__aeabi_fdiv+0x98>
    7bc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7bc4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    7bc8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    7bcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    7bd0:	428b      	cmp	r3, r1
    7bd2:	bf38      	it	cc
    7bd4:	005b      	lslcc	r3, r3, #1
    7bd6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    7bda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    7bde:	428b      	cmp	r3, r1
    7be0:	bf24      	itt	cs
    7be2:	1a5b      	subcs	r3, r3, r1
    7be4:	ea40 000c 	orrcs.w	r0, r0, ip
    7be8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    7bec:	bf24      	itt	cs
    7bee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    7bf2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    7bf6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    7bfa:	bf24      	itt	cs
    7bfc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    7c00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    7c04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    7c08:	bf24      	itt	cs
    7c0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    7c0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    7c12:	011b      	lsls	r3, r3, #4
    7c14:	bf18      	it	ne
    7c16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    7c1a:	d1e0      	bne.n	7bde <__aeabi_fdiv+0x46>
    7c1c:	2afd      	cmp	r2, #253	; 0xfd
    7c1e:	f63f af50 	bhi.w	7ac2 <__aeabi_fmul+0x92>
    7c22:	428b      	cmp	r3, r1
    7c24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7c28:	bf08      	it	eq
    7c2a:	f020 0001 	biceq.w	r0, r0, #1
    7c2e:	4770      	bx	lr
    7c30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    7c34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    7c38:	327f      	adds	r2, #127	; 0x7f
    7c3a:	bfc2      	ittt	gt
    7c3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    7c40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    7c44:	4770      	bxgt	lr
    7c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7c4a:	f04f 0300 	mov.w	r3, #0
    7c4e:	3a01      	subs	r2, #1
    7c50:	e737      	b.n	7ac2 <__aeabi_fmul+0x92>
    7c52:	f092 0f00 	teq	r2, #0
    7c56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    7c5a:	bf02      	ittt	eq
    7c5c:	0040      	lsleq	r0, r0, #1
    7c5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    7c62:	3a01      	subeq	r2, #1
    7c64:	d0f9      	beq.n	7c5a <__aeabi_fdiv+0xc2>
    7c66:	ea40 000c 	orr.w	r0, r0, ip
    7c6a:	f093 0f00 	teq	r3, #0
    7c6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    7c72:	bf02      	ittt	eq
    7c74:	0049      	lsleq	r1, r1, #1
    7c76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    7c7a:	3b01      	subeq	r3, #1
    7c7c:	d0f9      	beq.n	7c72 <__aeabi_fdiv+0xda>
    7c7e:	ea41 010c 	orr.w	r1, r1, ip
    7c82:	e795      	b.n	7bb0 <__aeabi_fdiv+0x18>
    7c84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    7c88:	ea92 0f0c 	teq	r2, ip
    7c8c:	d108      	bne.n	7ca0 <__aeabi_fdiv+0x108>
    7c8e:	0242      	lsls	r2, r0, #9
    7c90:	f47f af7d 	bne.w	7b8e <__aeabi_fmul+0x15e>
    7c94:	ea93 0f0c 	teq	r3, ip
    7c98:	f47f af70 	bne.w	7b7c <__aeabi_fmul+0x14c>
    7c9c:	4608      	mov	r0, r1
    7c9e:	e776      	b.n	7b8e <__aeabi_fmul+0x15e>
    7ca0:	ea93 0f0c 	teq	r3, ip
    7ca4:	d104      	bne.n	7cb0 <__aeabi_fdiv+0x118>
    7ca6:	024b      	lsls	r3, r1, #9
    7ca8:	f43f af4c 	beq.w	7b44 <__aeabi_fmul+0x114>
    7cac:	4608      	mov	r0, r1
    7cae:	e76e      	b.n	7b8e <__aeabi_fmul+0x15e>
    7cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    7cb4:	bf18      	it	ne
    7cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    7cba:	d1ca      	bne.n	7c52 <__aeabi_fdiv+0xba>
    7cbc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    7cc0:	f47f af5c 	bne.w	7b7c <__aeabi_fmul+0x14c>
    7cc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    7cc8:	f47f af3c 	bne.w	7b44 <__aeabi_fmul+0x114>
    7ccc:	e75f      	b.n	7b8e <__aeabi_fmul+0x15e>
    7cce:	bf00      	nop

00007cd0 <__aeabi_uldivmod>:
    7cd0:	b94b      	cbnz	r3, 7ce6 <__aeabi_uldivmod+0x16>
    7cd2:	b942      	cbnz	r2, 7ce6 <__aeabi_uldivmod+0x16>
    7cd4:	2900      	cmp	r1, #0
    7cd6:	bf08      	it	eq
    7cd8:	2800      	cmpeq	r0, #0
    7cda:	d002      	beq.n	7ce2 <__aeabi_uldivmod+0x12>
    7cdc:	f04f 31ff 	mov.w	r1, #4294967295
    7ce0:	4608      	mov	r0, r1
    7ce2:	f000 b83b 	b.w	7d5c <__aeabi_idiv0>
    7ce6:	b082      	sub	sp, #8
    7ce8:	46ec      	mov	ip, sp
    7cea:	e92d 5000 	stmdb	sp!, {ip, lr}
    7cee:	f000 f81d 	bl	7d2c <__gnu_uldivmod_helper>
    7cf2:	f8dd e004 	ldr.w	lr, [sp, #4]
    7cf6:	b002      	add	sp, #8
    7cf8:	bc0c      	pop	{r2, r3}
    7cfa:	4770      	bx	lr

00007cfc <__gnu_ldivmod_helper>:
    7cfc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    7d00:	9e06      	ldr	r6, [sp, #24]
    7d02:	4614      	mov	r4, r2
    7d04:	461d      	mov	r5, r3
    7d06:	4680      	mov	r8, r0
    7d08:	4689      	mov	r9, r1
    7d0a:	f000 f829 	bl	7d60 <__divdi3>
    7d0e:	fb04 f301 	mul.w	r3, r4, r1
    7d12:	fb00 3305 	mla	r3, r0, r5, r3
    7d16:	fba4 4500 	umull	r4, r5, r4, r0
    7d1a:	441d      	add	r5, r3
    7d1c:	ebb8 0404 	subs.w	r4, r8, r4
    7d20:	eb69 0505 	sbc.w	r5, r9, r5
    7d24:	e9c6 4500 	strd	r4, r5, [r6]
    7d28:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00007d2c <__gnu_uldivmod_helper>:
    7d2c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    7d30:	9e06      	ldr	r6, [sp, #24]
    7d32:	4614      	mov	r4, r2
    7d34:	4680      	mov	r8, r0
    7d36:	4689      	mov	r9, r1
    7d38:	461d      	mov	r5, r3
    7d3a:	f000 f95d 	bl	7ff8 <__udivdi3>
    7d3e:	fb00 f505 	mul.w	r5, r0, r5
    7d42:	fb04 5301 	mla	r3, r4, r1, r5
    7d46:	fba0 4504 	umull	r4, r5, r0, r4
    7d4a:	441d      	add	r5, r3
    7d4c:	ebb8 0404 	subs.w	r4, r8, r4
    7d50:	eb69 0505 	sbc.w	r5, r9, r5
    7d54:	e9c6 4500 	strd	r4, r5, [r6]
    7d58:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00007d5c <__aeabi_idiv0>:
    7d5c:	4770      	bx	lr
    7d5e:	bf00      	nop

00007d60 <__divdi3>:
    7d60:	2900      	cmp	r1, #0
    7d62:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    7d66:	f2c0 809f 	blt.w	7ea8 <__divdi3+0x148>
    7d6a:	2400      	movs	r4, #0
    7d6c:	2b00      	cmp	r3, #0
    7d6e:	f2c0 8096 	blt.w	7e9e <__divdi3+0x13e>
    7d72:	4615      	mov	r5, r2
    7d74:	4606      	mov	r6, r0
    7d76:	460f      	mov	r7, r1
    7d78:	2b00      	cmp	r3, #0
    7d7a:	d13e      	bne.n	7dfa <__divdi3+0x9a>
    7d7c:	428a      	cmp	r2, r1
    7d7e:	d957      	bls.n	7e30 <__divdi3+0xd0>
    7d80:	fab2 f382 	clz	r3, r2
    7d84:	b14b      	cbz	r3, 7d9a <__divdi3+0x3a>
    7d86:	f1c3 0220 	rsb	r2, r3, #32
    7d8a:	fa01 f703 	lsl.w	r7, r1, r3
    7d8e:	fa20 f202 	lsr.w	r2, r0, r2
    7d92:	409d      	lsls	r5, r3
    7d94:	4317      	orrs	r7, r2
    7d96:	fa00 f603 	lsl.w	r6, r0, r3
    7d9a:	0c29      	lsrs	r1, r5, #16
    7d9c:	fbb7 f2f1 	udiv	r2, r7, r1
    7da0:	0c33      	lsrs	r3, r6, #16
    7da2:	fb01 7c12 	mls	ip, r1, r2, r7
    7da6:	b2a8      	uxth	r0, r5
    7da8:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
    7dac:	fb00 f302 	mul.w	r3, r0, r2
    7db0:	42bb      	cmp	r3, r7
    7db2:	d909      	bls.n	7dc8 <__divdi3+0x68>
    7db4:	197f      	adds	r7, r7, r5
    7db6:	f102 3cff 	add.w	ip, r2, #4294967295
    7dba:	f080 8101 	bcs.w	7fc0 <__divdi3+0x260>
    7dbe:	42bb      	cmp	r3, r7
    7dc0:	f240 80fe 	bls.w	7fc0 <__divdi3+0x260>
    7dc4:	3a02      	subs	r2, #2
    7dc6:	442f      	add	r7, r5
    7dc8:	1aff      	subs	r7, r7, r3
    7dca:	fbb7 f3f1 	udiv	r3, r7, r1
    7dce:	b2b6      	uxth	r6, r6
    7dd0:	fb01 7113 	mls	r1, r1, r3, r7
    7dd4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    7dd8:	fb00 f003 	mul.w	r0, r0, r3
    7ddc:	4288      	cmp	r0, r1
    7dde:	d908      	bls.n	7df2 <__divdi3+0x92>
    7de0:	1949      	adds	r1, r1, r5
    7de2:	f103 37ff 	add.w	r7, r3, #4294967295
    7de6:	f080 80ed 	bcs.w	7fc4 <__divdi3+0x264>
    7dea:	4288      	cmp	r0, r1
    7dec:	f240 80ea 	bls.w	7fc4 <__divdi3+0x264>
    7df0:	3b02      	subs	r3, #2
    7df2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    7df6:	2300      	movs	r3, #0
    7df8:	e003      	b.n	7e02 <__divdi3+0xa2>
    7dfa:	428b      	cmp	r3, r1
    7dfc:	d90a      	bls.n	7e14 <__divdi3+0xb4>
    7dfe:	2300      	movs	r3, #0
    7e00:	461a      	mov	r2, r3
    7e02:	4610      	mov	r0, r2
    7e04:	4619      	mov	r1, r3
    7e06:	b114      	cbz	r4, 7e0e <__divdi3+0xae>
    7e08:	4240      	negs	r0, r0
    7e0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7e0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    7e12:	4770      	bx	lr
    7e14:	fab3 f883 	clz	r8, r3
    7e18:	f1b8 0f00 	cmp.w	r8, #0
    7e1c:	f040 8084 	bne.w	7f28 <__divdi3+0x1c8>
    7e20:	428b      	cmp	r3, r1
    7e22:	d302      	bcc.n	7e2a <__divdi3+0xca>
    7e24:	4282      	cmp	r2, r0
    7e26:	f200 80de 	bhi.w	7fe6 <__divdi3+0x286>
    7e2a:	2300      	movs	r3, #0
    7e2c:	2201      	movs	r2, #1
    7e2e:	e7e8      	b.n	7e02 <__divdi3+0xa2>
    7e30:	b912      	cbnz	r2, 7e38 <__divdi3+0xd8>
    7e32:	2301      	movs	r3, #1
    7e34:	fbb3 f5f2 	udiv	r5, r3, r2
    7e38:	fab5 f285 	clz	r2, r5
    7e3c:	2a00      	cmp	r2, #0
    7e3e:	d139      	bne.n	7eb4 <__divdi3+0x154>
    7e40:	1b7f      	subs	r7, r7, r5
    7e42:	0c28      	lsrs	r0, r5, #16
    7e44:	fa1f fc85 	uxth.w	ip, r5
    7e48:	2301      	movs	r3, #1
    7e4a:	fbb7 f1f0 	udiv	r1, r7, r0
    7e4e:	0c32      	lsrs	r2, r6, #16
    7e50:	fb00 7711 	mls	r7, r0, r1, r7
    7e54:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
    7e58:	fb0c f201 	mul.w	r2, ip, r1
    7e5c:	42ba      	cmp	r2, r7
    7e5e:	d907      	bls.n	7e70 <__divdi3+0x110>
    7e60:	197f      	adds	r7, r7, r5
    7e62:	f101 38ff 	add.w	r8, r1, #4294967295
    7e66:	d202      	bcs.n	7e6e <__divdi3+0x10e>
    7e68:	42ba      	cmp	r2, r7
    7e6a:	f200 80c1 	bhi.w	7ff0 <__divdi3+0x290>
    7e6e:	4641      	mov	r1, r8
    7e70:	1abf      	subs	r7, r7, r2
    7e72:	fbb7 f2f0 	udiv	r2, r7, r0
    7e76:	b2b6      	uxth	r6, r6
    7e78:	fb00 7012 	mls	r0, r0, r2, r7
    7e7c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    7e80:	fb0c fc02 	mul.w	ip, ip, r2
    7e84:	4584      	cmp	ip, r0
    7e86:	d907      	bls.n	7e98 <__divdi3+0x138>
    7e88:	1940      	adds	r0, r0, r5
    7e8a:	f102 37ff 	add.w	r7, r2, #4294967295
    7e8e:	d202      	bcs.n	7e96 <__divdi3+0x136>
    7e90:	4584      	cmp	ip, r0
    7e92:	f200 80ab 	bhi.w	7fec <__divdi3+0x28c>
    7e96:	463a      	mov	r2, r7
    7e98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    7e9c:	e7b1      	b.n	7e02 <__divdi3+0xa2>
    7e9e:	43e4      	mvns	r4, r4
    7ea0:	4252      	negs	r2, r2
    7ea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    7ea6:	e764      	b.n	7d72 <__divdi3+0x12>
    7ea8:	4240      	negs	r0, r0
    7eaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7eae:	f04f 34ff 	mov.w	r4, #4294967295
    7eb2:	e75b      	b.n	7d6c <__divdi3+0xc>
    7eb4:	4095      	lsls	r5, r2
    7eb6:	f1c2 0320 	rsb	r3, r2, #32
    7eba:	fa27 f103 	lsr.w	r1, r7, r3
    7ebe:	0c28      	lsrs	r0, r5, #16
    7ec0:	fa26 f303 	lsr.w	r3, r6, r3
    7ec4:	4097      	lsls	r7, r2
    7ec6:	fbb1 f8f0 	udiv	r8, r1, r0
    7eca:	431f      	orrs	r7, r3
    7ecc:	0c3b      	lsrs	r3, r7, #16
    7ece:	fb00 1118 	mls	r1, r0, r8, r1
    7ed2:	fa1f fc85 	uxth.w	ip, r5
    7ed6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7eda:	fb0c f308 	mul.w	r3, ip, r8
    7ede:	428b      	cmp	r3, r1
    7ee0:	fa06 f602 	lsl.w	r6, r6, r2
    7ee4:	d908      	bls.n	7ef8 <__divdi3+0x198>
    7ee6:	1949      	adds	r1, r1, r5
    7ee8:	f108 32ff 	add.w	r2, r8, #4294967295
    7eec:	d279      	bcs.n	7fe2 <__divdi3+0x282>
    7eee:	428b      	cmp	r3, r1
    7ef0:	d977      	bls.n	7fe2 <__divdi3+0x282>
    7ef2:	f1a8 0802 	sub.w	r8, r8, #2
    7ef6:	4429      	add	r1, r5
    7ef8:	1ac9      	subs	r1, r1, r3
    7efa:	fbb1 f3f0 	udiv	r3, r1, r0
    7efe:	b2bf      	uxth	r7, r7
    7f00:	fb00 1113 	mls	r1, r0, r3, r1
    7f04:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    7f08:	fb0c f203 	mul.w	r2, ip, r3
    7f0c:	42ba      	cmp	r2, r7
    7f0e:	d907      	bls.n	7f20 <__divdi3+0x1c0>
    7f10:	197f      	adds	r7, r7, r5
    7f12:	f103 31ff 	add.w	r1, r3, #4294967295
    7f16:	d260      	bcs.n	7fda <__divdi3+0x27a>
    7f18:	42ba      	cmp	r2, r7
    7f1a:	d95e      	bls.n	7fda <__divdi3+0x27a>
    7f1c:	3b02      	subs	r3, #2
    7f1e:	442f      	add	r7, r5
    7f20:	1abf      	subs	r7, r7, r2
    7f22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    7f26:	e790      	b.n	7e4a <__divdi3+0xea>
    7f28:	f1c8 0220 	rsb	r2, r8, #32
    7f2c:	fa03 fc08 	lsl.w	ip, r3, r8
    7f30:	fa25 f302 	lsr.w	r3, r5, r2
    7f34:	ea43 0c0c 	orr.w	ip, r3, ip
    7f38:	ea4f 491c 	mov.w	r9, ip, lsr #16
    7f3c:	fa21 f302 	lsr.w	r3, r1, r2
    7f40:	fa01 f708 	lsl.w	r7, r1, r8
    7f44:	fa20 f202 	lsr.w	r2, r0, r2
    7f48:	fbb3 f1f9 	udiv	r1, r3, r9
    7f4c:	4317      	orrs	r7, r2
    7f4e:	fb09 3311 	mls	r3, r9, r1, r3
    7f52:	0c3a      	lsrs	r2, r7, #16
    7f54:	fa1f fb8c 	uxth.w	fp, ip
    7f58:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    7f5c:	fb0b fa01 	mul.w	sl, fp, r1
    7f60:	459a      	cmp	sl, r3
    7f62:	fa05 f008 	lsl.w	r0, r5, r8
    7f66:	d908      	bls.n	7f7a <__divdi3+0x21a>
    7f68:	eb13 030c 	adds.w	r3, r3, ip
    7f6c:	f101 32ff 	add.w	r2, r1, #4294967295
    7f70:	d235      	bcs.n	7fde <__divdi3+0x27e>
    7f72:	459a      	cmp	sl, r3
    7f74:	d933      	bls.n	7fde <__divdi3+0x27e>
    7f76:	3902      	subs	r1, #2
    7f78:	4463      	add	r3, ip
    7f7a:	ebca 0303 	rsb	r3, sl, r3
    7f7e:	fbb3 f2f9 	udiv	r2, r3, r9
    7f82:	fb09 3312 	mls	r3, r9, r2, r3
    7f86:	b2bf      	uxth	r7, r7
    7f88:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    7f8c:	fb0b f902 	mul.w	r9, fp, r2
    7f90:	45b9      	cmp	r9, r7
    7f92:	d908      	bls.n	7fa6 <__divdi3+0x246>
    7f94:	eb17 070c 	adds.w	r7, r7, ip
    7f98:	f102 33ff 	add.w	r3, r2, #4294967295
    7f9c:	d21b      	bcs.n	7fd6 <__divdi3+0x276>
    7f9e:	45b9      	cmp	r9, r7
    7fa0:	d919      	bls.n	7fd6 <__divdi3+0x276>
    7fa2:	3a02      	subs	r2, #2
    7fa4:	4467      	add	r7, ip
    7fa6:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
    7faa:	fba5 0100 	umull	r0, r1, r5, r0
    7fae:	ebc9 0707 	rsb	r7, r9, r7
    7fb2:	428f      	cmp	r7, r1
    7fb4:	f04f 0300 	mov.w	r3, #0
    7fb8:	d30a      	bcc.n	7fd0 <__divdi3+0x270>
    7fba:	d005      	beq.n	7fc8 <__divdi3+0x268>
    7fbc:	462a      	mov	r2, r5
    7fbe:	e720      	b.n	7e02 <__divdi3+0xa2>
    7fc0:	4662      	mov	r2, ip
    7fc2:	e701      	b.n	7dc8 <__divdi3+0x68>
    7fc4:	463b      	mov	r3, r7
    7fc6:	e714      	b.n	7df2 <__divdi3+0x92>
    7fc8:	fa06 f608 	lsl.w	r6, r6, r8
    7fcc:	4286      	cmp	r6, r0
    7fce:	d2f5      	bcs.n	7fbc <__divdi3+0x25c>
    7fd0:	1e6a      	subs	r2, r5, #1
    7fd2:	2300      	movs	r3, #0
    7fd4:	e715      	b.n	7e02 <__divdi3+0xa2>
    7fd6:	461a      	mov	r2, r3
    7fd8:	e7e5      	b.n	7fa6 <__divdi3+0x246>
    7fda:	460b      	mov	r3, r1
    7fdc:	e7a0      	b.n	7f20 <__divdi3+0x1c0>
    7fde:	4611      	mov	r1, r2
    7fe0:	e7cb      	b.n	7f7a <__divdi3+0x21a>
    7fe2:	4690      	mov	r8, r2
    7fe4:	e788      	b.n	7ef8 <__divdi3+0x198>
    7fe6:	4643      	mov	r3, r8
    7fe8:	4642      	mov	r2, r8
    7fea:	e70a      	b.n	7e02 <__divdi3+0xa2>
    7fec:	3a02      	subs	r2, #2
    7fee:	e753      	b.n	7e98 <__divdi3+0x138>
    7ff0:	3902      	subs	r1, #2
    7ff2:	442f      	add	r7, r5
    7ff4:	e73c      	b.n	7e70 <__divdi3+0x110>
    7ff6:	bf00      	nop

00007ff8 <__udivdi3>:
    7ff8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    7ffc:	4614      	mov	r4, r2
    7ffe:	4605      	mov	r5, r0
    8000:	460e      	mov	r6, r1
    8002:	2b00      	cmp	r3, #0
    8004:	d143      	bne.n	808e <__udivdi3+0x96>
    8006:	428a      	cmp	r2, r1
    8008:	d953      	bls.n	80b2 <__udivdi3+0xba>
    800a:	fab2 f782 	clz	r7, r2
    800e:	b157      	cbz	r7, 8026 <__udivdi3+0x2e>
    8010:	f1c7 0620 	rsb	r6, r7, #32
    8014:	fa20 f606 	lsr.w	r6, r0, r6
    8018:	fa01 f307 	lsl.w	r3, r1, r7
    801c:	fa02 f407 	lsl.w	r4, r2, r7
    8020:	431e      	orrs	r6, r3
    8022:	fa00 f507 	lsl.w	r5, r0, r7
    8026:	0c21      	lsrs	r1, r4, #16
    8028:	fbb6 f2f1 	udiv	r2, r6, r1
    802c:	0c2b      	lsrs	r3, r5, #16
    802e:	fb01 6712 	mls	r7, r1, r2, r6
    8032:	b2a0      	uxth	r0, r4
    8034:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
    8038:	fb00 f302 	mul.w	r3, r0, r2
    803c:	42b3      	cmp	r3, r6
    803e:	d909      	bls.n	8054 <__udivdi3+0x5c>
    8040:	1936      	adds	r6, r6, r4
    8042:	f102 37ff 	add.w	r7, r2, #4294967295
    8046:	f080 80f6 	bcs.w	8236 <__udivdi3+0x23e>
    804a:	42b3      	cmp	r3, r6
    804c:	f240 80f3 	bls.w	8236 <__udivdi3+0x23e>
    8050:	3a02      	subs	r2, #2
    8052:	4426      	add	r6, r4
    8054:	1af6      	subs	r6, r6, r3
    8056:	fbb6 f3f1 	udiv	r3, r6, r1
    805a:	b2ad      	uxth	r5, r5
    805c:	fb01 6113 	mls	r1, r1, r3, r6
    8060:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    8064:	fb00 f003 	mul.w	r0, r0, r3
    8068:	4288      	cmp	r0, r1
    806a:	d908      	bls.n	807e <__udivdi3+0x86>
    806c:	1909      	adds	r1, r1, r4
    806e:	f103 36ff 	add.w	r6, r3, #4294967295
    8072:	f080 80e2 	bcs.w	823a <__udivdi3+0x242>
    8076:	4288      	cmp	r0, r1
    8078:	f240 80df 	bls.w	823a <__udivdi3+0x242>
    807c:	3b02      	subs	r3, #2
    807e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    8082:	2300      	movs	r3, #0
    8084:	4610      	mov	r0, r2
    8086:	4619      	mov	r1, r3
    8088:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    808c:	4770      	bx	lr
    808e:	428b      	cmp	r3, r1
    8090:	d84a      	bhi.n	8128 <__udivdi3+0x130>
    8092:	fab3 f683 	clz	r6, r3
    8096:	2e00      	cmp	r6, #0
    8098:	d14d      	bne.n	8136 <__udivdi3+0x13e>
    809a:	428b      	cmp	r3, r1
    809c:	d302      	bcc.n	80a4 <__udivdi3+0xac>
    809e:	4282      	cmp	r2, r0
    80a0:	f200 80d6 	bhi.w	8250 <__udivdi3+0x258>
    80a4:	2300      	movs	r3, #0
    80a6:	2201      	movs	r2, #1
    80a8:	4610      	mov	r0, r2
    80aa:	4619      	mov	r1, r3
    80ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    80b0:	4770      	bx	lr
    80b2:	b912      	cbnz	r2, 80ba <__udivdi3+0xc2>
    80b4:	2401      	movs	r4, #1
    80b6:	fbb4 f4f2 	udiv	r4, r4, r2
    80ba:	fab4 f284 	clz	r2, r4
    80be:	2a00      	cmp	r2, #0
    80c0:	d17c      	bne.n	81bc <__udivdi3+0x1c4>
    80c2:	1b09      	subs	r1, r1, r4
    80c4:	0c26      	lsrs	r6, r4, #16
    80c6:	b2a7      	uxth	r7, r4
    80c8:	2301      	movs	r3, #1
    80ca:	fbb1 f0f6 	udiv	r0, r1, r6
    80ce:	0c2a      	lsrs	r2, r5, #16
    80d0:	fb06 1110 	mls	r1, r6, r0, r1
    80d4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    80d8:	fb07 f200 	mul.w	r2, r7, r0
    80dc:	428a      	cmp	r2, r1
    80de:	d907      	bls.n	80f0 <__udivdi3+0xf8>
    80e0:	1909      	adds	r1, r1, r4
    80e2:	f100 3cff 	add.w	ip, r0, #4294967295
    80e6:	d202      	bcs.n	80ee <__udivdi3+0xf6>
    80e8:	428a      	cmp	r2, r1
    80ea:	f200 80c3 	bhi.w	8274 <__udivdi3+0x27c>
    80ee:	4660      	mov	r0, ip
    80f0:	1a89      	subs	r1, r1, r2
    80f2:	fbb1 f2f6 	udiv	r2, r1, r6
    80f6:	b2ad      	uxth	r5, r5
    80f8:	fb06 1112 	mls	r1, r6, r2, r1
    80fc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    8100:	fb07 f702 	mul.w	r7, r7, r2
    8104:	42af      	cmp	r7, r5
    8106:	d908      	bls.n	811a <__udivdi3+0x122>
    8108:	192c      	adds	r4, r5, r4
    810a:	f102 31ff 	add.w	r1, r2, #4294967295
    810e:	f080 8096 	bcs.w	823e <__udivdi3+0x246>
    8112:	42a7      	cmp	r7, r4
    8114:	f240 8093 	bls.w	823e <__udivdi3+0x246>
    8118:	3a02      	subs	r2, #2
    811a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    811e:	4610      	mov	r0, r2
    8120:	4619      	mov	r1, r3
    8122:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8126:	4770      	bx	lr
    8128:	2300      	movs	r3, #0
    812a:	461a      	mov	r2, r3
    812c:	4610      	mov	r0, r2
    812e:	4619      	mov	r1, r3
    8130:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8134:	4770      	bx	lr
    8136:	f1c6 0520 	rsb	r5, r6, #32
    813a:	fa22 f405 	lsr.w	r4, r2, r5
    813e:	40b3      	lsls	r3, r6
    8140:	431c      	orrs	r4, r3
    8142:	ea4f 4814 	mov.w	r8, r4, lsr #16
    8146:	fa21 f305 	lsr.w	r3, r1, r5
    814a:	fa01 f706 	lsl.w	r7, r1, r6
    814e:	fa20 f505 	lsr.w	r5, r0, r5
    8152:	fbb3 fcf8 	udiv	ip, r3, r8
    8156:	432f      	orrs	r7, r5
    8158:	fb08 331c 	mls	r3, r8, ip, r3
    815c:	0c3d      	lsrs	r5, r7, #16
    815e:	fa1f fa84 	uxth.w	sl, r4
    8162:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    8166:	fb0a f90c 	mul.w	r9, sl, ip
    816a:	4599      	cmp	r9, r3
    816c:	fa02 fb06 	lsl.w	fp, r2, r6
    8170:	d904      	bls.n	817c <__udivdi3+0x184>
    8172:	191b      	adds	r3, r3, r4
    8174:	f10c 32ff 	add.w	r2, ip, #4294967295
    8178:	d36d      	bcc.n	8256 <__udivdi3+0x25e>
    817a:	4694      	mov	ip, r2
    817c:	ebc9 0303 	rsb	r3, r9, r3
    8180:	fbb3 f5f8 	udiv	r5, r3, r8
    8184:	fb08 3315 	mls	r3, r8, r5, r3
    8188:	b2bf      	uxth	r7, r7
    818a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    818e:	fb0a f805 	mul.w	r8, sl, r5
    8192:	45b8      	cmp	r8, r7
    8194:	d904      	bls.n	81a0 <__udivdi3+0x1a8>
    8196:	193f      	adds	r7, r7, r4
    8198:	f105 33ff 	add.w	r3, r5, #4294967295
    819c:	d361      	bcc.n	8262 <__udivdi3+0x26a>
    819e:	461d      	mov	r5, r3
    81a0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
    81a4:	fbac 230b 	umull	r2, r3, ip, fp
    81a8:	ebc8 0707 	rsb	r7, r8, r7
    81ac:	429f      	cmp	r7, r3
    81ae:	f04f 0500 	mov.w	r5, #0
    81b2:	d349      	bcc.n	8248 <__udivdi3+0x250>
    81b4:	d045      	beq.n	8242 <__udivdi3+0x24a>
    81b6:	4662      	mov	r2, ip
    81b8:	462b      	mov	r3, r5
    81ba:	e763      	b.n	8084 <__udivdi3+0x8c>
    81bc:	4094      	lsls	r4, r2
    81be:	f1c2 0320 	rsb	r3, r2, #32
    81c2:	fa21 fc03 	lsr.w	ip, r1, r3
    81c6:	0c26      	lsrs	r6, r4, #16
    81c8:	fa20 f303 	lsr.w	r3, r0, r3
    81cc:	fa01 f502 	lsl.w	r5, r1, r2
    81d0:	fbbc f8f6 	udiv	r8, ip, r6
    81d4:	ea43 0105 	orr.w	r1, r3, r5
    81d8:	0c0b      	lsrs	r3, r1, #16
    81da:	fb06 cc18 	mls	ip, r6, r8, ip
    81de:	b2a7      	uxth	r7, r4
    81e0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    81e4:	fb07 f308 	mul.w	r3, r7, r8
    81e8:	4563      	cmp	r3, ip
    81ea:	fa00 f502 	lsl.w	r5, r0, r2
    81ee:	d909      	bls.n	8204 <__udivdi3+0x20c>
    81f0:	eb1c 0c04 	adds.w	ip, ip, r4
    81f4:	f108 32ff 	add.w	r2, r8, #4294967295
    81f8:	d23a      	bcs.n	8270 <__udivdi3+0x278>
    81fa:	4563      	cmp	r3, ip
    81fc:	d938      	bls.n	8270 <__udivdi3+0x278>
    81fe:	f1a8 0802 	sub.w	r8, r8, #2
    8202:	44a4      	add	ip, r4
    8204:	ebc3 0c0c 	rsb	ip, r3, ip
    8208:	fbbc f3f6 	udiv	r3, ip, r6
    820c:	b289      	uxth	r1, r1
    820e:	fb06 cc13 	mls	ip, r6, r3, ip
    8212:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    8216:	fb07 f203 	mul.w	r2, r7, r3
    821a:	428a      	cmp	r2, r1
    821c:	d907      	bls.n	822e <__udivdi3+0x236>
    821e:	1909      	adds	r1, r1, r4
    8220:	f103 30ff 	add.w	r0, r3, #4294967295
    8224:	d222      	bcs.n	826c <__udivdi3+0x274>
    8226:	428a      	cmp	r2, r1
    8228:	d920      	bls.n	826c <__udivdi3+0x274>
    822a:	3b02      	subs	r3, #2
    822c:	4421      	add	r1, r4
    822e:	1a89      	subs	r1, r1, r2
    8230:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    8234:	e749      	b.n	80ca <__udivdi3+0xd2>
    8236:	463a      	mov	r2, r7
    8238:	e70c      	b.n	8054 <__udivdi3+0x5c>
    823a:	4633      	mov	r3, r6
    823c:	e71f      	b.n	807e <__udivdi3+0x86>
    823e:	460a      	mov	r2, r1
    8240:	e76b      	b.n	811a <__udivdi3+0x122>
    8242:	40b0      	lsls	r0, r6
    8244:	4290      	cmp	r0, r2
    8246:	d2b6      	bcs.n	81b6 <__udivdi3+0x1be>
    8248:	f10c 32ff 	add.w	r2, ip, #4294967295
    824c:	2300      	movs	r3, #0
    824e:	e719      	b.n	8084 <__udivdi3+0x8c>
    8250:	4633      	mov	r3, r6
    8252:	4632      	mov	r2, r6
    8254:	e716      	b.n	8084 <__udivdi3+0x8c>
    8256:	4599      	cmp	r9, r3
    8258:	d98f      	bls.n	817a <__udivdi3+0x182>
    825a:	f1ac 0c02 	sub.w	ip, ip, #2
    825e:	4423      	add	r3, r4
    8260:	e78c      	b.n	817c <__udivdi3+0x184>
    8262:	45b8      	cmp	r8, r7
    8264:	d99b      	bls.n	819e <__udivdi3+0x1a6>
    8266:	3d02      	subs	r5, #2
    8268:	4427      	add	r7, r4
    826a:	e799      	b.n	81a0 <__udivdi3+0x1a8>
    826c:	4603      	mov	r3, r0
    826e:	e7de      	b.n	822e <__udivdi3+0x236>
    8270:	4690      	mov	r8, r2
    8272:	e7c7      	b.n	8204 <__udivdi3+0x20c>
    8274:	3802      	subs	r0, #2
    8276:	4421      	add	r1, r4
    8278:	e73a      	b.n	80f0 <__udivdi3+0xf8>
    827a:	bf00      	nop

0000827c <atexit>:
    827c:	4601      	mov	r1, r0
    827e:	2000      	movs	r0, #0
    8280:	4602      	mov	r2, r0
    8282:	4603      	mov	r3, r0
    8284:	f002 bbe8 	b.w	aa58 <__register_exitproc>

00008288 <__libc_fini_array>:
    8288:	b538      	push	{r3, r4, r5, lr}
    828a:	4d08      	ldr	r5, [pc, #32]	; (82ac <__libc_fini_array+0x24>)
    828c:	4c08      	ldr	r4, [pc, #32]	; (82b0 <__libc_fini_array+0x28>)
    828e:	1b64      	subs	r4, r4, r5
    8290:	10a4      	asrs	r4, r4, #2
    8292:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    8296:	b124      	cbz	r4, 82a2 <__libc_fini_array+0x1a>
    8298:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    829c:	3c01      	subs	r4, #1
    829e:	4798      	blx	r3
    82a0:	e7f9      	b.n	8296 <__libc_fini_array+0xe>
    82a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    82a6:	f008 bd3b 	b.w	10d20 <_fini>
    82aa:	bf00      	nop
    82ac:	00010d2c 	.word	0x00010d2c
    82b0:	00010d30 	.word	0x00010d30

000082b4 <__libc_init_array>:
    82b4:	b570      	push	{r4, r5, r6, lr}
    82b6:	4b0e      	ldr	r3, [pc, #56]	; (82f0 <__libc_init_array+0x3c>)
    82b8:	4d0e      	ldr	r5, [pc, #56]	; (82f4 <__libc_init_array+0x40>)
    82ba:	1aed      	subs	r5, r5, r3
    82bc:	10ad      	asrs	r5, r5, #2
    82be:	2400      	movs	r4, #0
    82c0:	461e      	mov	r6, r3
    82c2:	42ac      	cmp	r4, r5
    82c4:	d004      	beq.n	82d0 <__libc_init_array+0x1c>
    82c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    82ca:	4790      	blx	r2
    82cc:	3401      	adds	r4, #1
    82ce:	e7f8      	b.n	82c2 <__libc_init_array+0xe>
    82d0:	f008 fd1c 	bl	10d0c <_init>
    82d4:	4d08      	ldr	r5, [pc, #32]	; (82f8 <__libc_init_array+0x44>)
    82d6:	4b09      	ldr	r3, [pc, #36]	; (82fc <__libc_init_array+0x48>)
    82d8:	1aed      	subs	r5, r5, r3
    82da:	10ad      	asrs	r5, r5, #2
    82dc:	2400      	movs	r4, #0
    82de:	461e      	mov	r6, r3
    82e0:	42ac      	cmp	r4, r5
    82e2:	d004      	beq.n	82ee <__libc_init_array+0x3a>
    82e4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    82e8:	4790      	blx	r2
    82ea:	3401      	adds	r4, #1
    82ec:	e7f8      	b.n	82e0 <__libc_init_array+0x2c>
    82ee:	bd70      	pop	{r4, r5, r6, pc}
    82f0:	00010d18 	.word	0x00010d18
    82f4:	00010d18 	.word	0x00010d18
    82f8:	00010d20 	.word	0x00010d20
    82fc:	00010d18 	.word	0x00010d18

00008300 <iprintf>:
    8300:	b40f      	push	{r0, r1, r2, r3}
    8302:	b507      	push	{r0, r1, r2, lr}
    8304:	4906      	ldr	r1, [pc, #24]	; (8320 <iprintf+0x20>)
    8306:	ab04      	add	r3, sp, #16
    8308:	6808      	ldr	r0, [r1, #0]
    830a:	f853 2b04 	ldr.w	r2, [r3], #4
    830e:	6881      	ldr	r1, [r0, #8]
    8310:	9301      	str	r3, [sp, #4]
    8312:	f001 fee0 	bl	a0d6 <_vfiprintf_r>
    8316:	b003      	add	sp, #12
    8318:	f85d eb04 	ldr.w	lr, [sp], #4
    831c:	b004      	add	sp, #16
    831e:	4770      	bx	lr
    8320:	200004a0 	.word	0x200004a0

00008324 <_iprintf_r>:
    8324:	b40e      	push	{r1, r2, r3}
    8326:	b503      	push	{r0, r1, lr}
    8328:	ab03      	add	r3, sp, #12
    832a:	6881      	ldr	r1, [r0, #8]
    832c:	f853 2b04 	ldr.w	r2, [r3], #4
    8330:	9301      	str	r3, [sp, #4]
    8332:	f001 fed0 	bl	a0d6 <_vfiprintf_r>
    8336:	b002      	add	sp, #8
    8338:	f85d eb04 	ldr.w	lr, [sp], #4
    833c:	b003      	add	sp, #12
    833e:	4770      	bx	lr

00008340 <memset>:
    8340:	4402      	add	r2, r0
    8342:	4603      	mov	r3, r0
    8344:	4293      	cmp	r3, r2
    8346:	d002      	beq.n	834e <memset+0xe>
    8348:	f803 1b01 	strb.w	r1, [r3], #1
    834c:	e7fa      	b.n	8344 <memset+0x4>
    834e:	4770      	bx	lr

00008350 <setbuf>:
    8350:	2900      	cmp	r1, #0
    8352:	bf0c      	ite	eq
    8354:	2202      	moveq	r2, #2
    8356:	2200      	movne	r2, #0
    8358:	f44f 6380 	mov.w	r3, #1024	; 0x400
    835c:	f000 b800 	b.w	8360 <setvbuf>

00008360 <setvbuf>:
    8360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8364:	461d      	mov	r5, r3
    8366:	4b36      	ldr	r3, [pc, #216]	; (8440 <setvbuf+0xe0>)
    8368:	681f      	ldr	r7, [r3, #0]
    836a:	4604      	mov	r4, r0
    836c:	460e      	mov	r6, r1
    836e:	4690      	mov	r8, r2
    8370:	b127      	cbz	r7, 837c <setvbuf+0x1c>
    8372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8374:	b913      	cbnz	r3, 837c <setvbuf+0x1c>
    8376:	4638      	mov	r0, r7
    8378:	f003 fae8 	bl	b94c <__sinit>
    837c:	f1b8 0f02 	cmp.w	r8, #2
    8380:	d859      	bhi.n	8436 <setvbuf+0xd6>
    8382:	2d00      	cmp	r5, #0
    8384:	db57      	blt.n	8436 <setvbuf+0xd6>
    8386:	4638      	mov	r0, r7
    8388:	4621      	mov	r1, r4
    838a:	f003 fa95 	bl	b8b8 <_fflush_r>
    838e:	2300      	movs	r3, #0
    8390:	6063      	str	r3, [r4, #4]
    8392:	61a3      	str	r3, [r4, #24]
    8394:	89a3      	ldrh	r3, [r4, #12]
    8396:	061b      	lsls	r3, r3, #24
    8398:	d503      	bpl.n	83a2 <setvbuf+0x42>
    839a:	4638      	mov	r0, r7
    839c:	6921      	ldr	r1, [r4, #16]
    839e:	f003 fc59 	bl	bc54 <_free_r>
    83a2:	89a3      	ldrh	r3, [r4, #12]
    83a4:	f1b8 0f02 	cmp.w	r8, #2
    83a8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
    83ac:	81a3      	strh	r3, [r4, #12]
    83ae:	d012      	beq.n	83d6 <setvbuf+0x76>
    83b0:	bb36      	cbnz	r6, 8400 <setvbuf+0xa0>
    83b2:	2d00      	cmp	r5, #0
    83b4:	bf08      	it	eq
    83b6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    83ba:	4628      	mov	r0, r5
    83bc:	f003 ff4e 	bl	c25c <malloc>
    83c0:	4606      	mov	r6, r0
    83c2:	b9c8      	cbnz	r0, 83f8 <setvbuf+0x98>
    83c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    83c8:	f003 ff48 	bl	c25c <malloc>
    83cc:	4606      	mov	r6, r0
    83ce:	b988      	cbnz	r0, 83f4 <setvbuf+0x94>
    83d0:	f04f 30ff 	mov.w	r0, #4294967295
    83d4:	e000      	b.n	83d8 <setvbuf+0x78>
    83d6:	2000      	movs	r0, #0
    83d8:	89a3      	ldrh	r3, [r4, #12]
    83da:	f043 0302 	orr.w	r3, r3, #2
    83de:	81a3      	strh	r3, [r4, #12]
    83e0:	2300      	movs	r3, #0
    83e2:	60a3      	str	r3, [r4, #8]
    83e4:	f104 0343 	add.w	r3, r4, #67	; 0x43
    83e8:	6023      	str	r3, [r4, #0]
    83ea:	6123      	str	r3, [r4, #16]
    83ec:	2301      	movs	r3, #1
    83ee:	6163      	str	r3, [r4, #20]
    83f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83f4:	f44f 6580 	mov.w	r5, #1024	; 0x400
    83f8:	89a3      	ldrh	r3, [r4, #12]
    83fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    83fe:	81a3      	strh	r3, [r4, #12]
    8400:	f1b8 0f01 	cmp.w	r8, #1
    8404:	d105      	bne.n	8412 <setvbuf+0xb2>
    8406:	89a3      	ldrh	r3, [r4, #12]
    8408:	f043 0301 	orr.w	r3, r3, #1
    840c:	81a3      	strh	r3, [r4, #12]
    840e:	426b      	negs	r3, r5
    8410:	61a3      	str	r3, [r4, #24]
    8412:	4b0c      	ldr	r3, [pc, #48]	; (8444 <setvbuf+0xe4>)
    8414:	63fb      	str	r3, [r7, #60]	; 0x3c
    8416:	89a3      	ldrh	r3, [r4, #12]
    8418:	6026      	str	r6, [r4, #0]
    841a:	f003 0008 	and.w	r0, r3, #8
    841e:	b280      	uxth	r0, r0
    8420:	6126      	str	r6, [r4, #16]
    8422:	6165      	str	r5, [r4, #20]
    8424:	b148      	cbz	r0, 843a <setvbuf+0xda>
    8426:	f013 0f03 	tst.w	r3, #3
    842a:	bf18      	it	ne
    842c:	2500      	movne	r5, #0
    842e:	60a5      	str	r5, [r4, #8]
    8430:	2000      	movs	r0, #0
    8432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8436:	f04f 30ff 	mov.w	r0, #4294967295
    843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    843e:	bf00      	nop
    8440:	200004a0 	.word	0x200004a0
    8444:	0000b909 	.word	0x0000b909

00008448 <_sprintf_r>:
    8448:	b40c      	push	{r2, r3}
    844a:	b510      	push	{r4, lr}
    844c:	b09c      	sub	sp, #112	; 0x70
    844e:	ab1e      	add	r3, sp, #120	; 0x78
    8450:	9102      	str	r1, [sp, #8]
    8452:	9106      	str	r1, [sp, #24]
    8454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8458:	9104      	str	r1, [sp, #16]
    845a:	9107      	str	r1, [sp, #28]
    845c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8460:	f853 2b04 	ldr.w	r2, [r3], #4
    8464:	f8ad 1016 	strh.w	r1, [sp, #22]
    8468:	f44f 7402 	mov.w	r4, #520	; 0x208
    846c:	a902      	add	r1, sp, #8
    846e:	9301      	str	r3, [sp, #4]
    8470:	f8ad 4014 	strh.w	r4, [sp, #20]
    8474:	f000 f8d8 	bl	8628 <_svfprintf_r>
    8478:	9b02      	ldr	r3, [sp, #8]
    847a:	2200      	movs	r2, #0
    847c:	701a      	strb	r2, [r3, #0]
    847e:	b01c      	add	sp, #112	; 0x70
    8480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8484:	b002      	add	sp, #8
    8486:	4770      	bx	lr

00008488 <sprintf>:
    8488:	b40e      	push	{r1, r2, r3}
    848a:	b500      	push	{lr}
    848c:	b09c      	sub	sp, #112	; 0x70
    848e:	f44f 7102 	mov.w	r1, #520	; 0x208
    8492:	f8ad 1014 	strh.w	r1, [sp, #20]
    8496:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    849a:	9104      	str	r1, [sp, #16]
    849c:	9107      	str	r1, [sp, #28]
    849e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    84a2:	ab1d      	add	r3, sp, #116	; 0x74
    84a4:	f8ad 1016 	strh.w	r1, [sp, #22]
    84a8:	4908      	ldr	r1, [pc, #32]	; (84cc <sprintf+0x44>)
    84aa:	f853 2b04 	ldr.w	r2, [r3], #4
    84ae:	9002      	str	r0, [sp, #8]
    84b0:	9006      	str	r0, [sp, #24]
    84b2:	6808      	ldr	r0, [r1, #0]
    84b4:	9301      	str	r3, [sp, #4]
    84b6:	a902      	add	r1, sp, #8
    84b8:	f000 f8b6 	bl	8628 <_svfprintf_r>
    84bc:	9b02      	ldr	r3, [sp, #8]
    84be:	2200      	movs	r2, #0
    84c0:	701a      	strb	r2, [r3, #0]
    84c2:	b01c      	add	sp, #112	; 0x70
    84c4:	f85d eb04 	ldr.w	lr, [sp], #4
    84c8:	b003      	add	sp, #12
    84ca:	4770      	bx	lr
    84cc:	200004a0 	.word	0x200004a0

000084d0 <sscanf>:
    84d0:	b40e      	push	{r1, r2, r3}
    84d2:	b530      	push	{r4, r5, lr}
    84d4:	b09c      	sub	sp, #112	; 0x70
    84d6:	ac1f      	add	r4, sp, #124	; 0x7c
    84d8:	f44f 7201 	mov.w	r2, #516	; 0x204
    84dc:	f854 5b04 	ldr.w	r5, [r4], #4
    84e0:	f8ad 2014 	strh.w	r2, [sp, #20]
    84e4:	9002      	str	r0, [sp, #8]
    84e6:	9006      	str	r0, [sp, #24]
    84e8:	f000 f895 	bl	8616 <strlen>
    84ec:	4b0b      	ldr	r3, [pc, #44]	; (851c <sscanf+0x4c>)
    84ee:	930a      	str	r3, [sp, #40]	; 0x28
    84f0:	2300      	movs	r3, #0
    84f2:	930e      	str	r3, [sp, #56]	; 0x38
    84f4:	9313      	str	r3, [sp, #76]	; 0x4c
    84f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    84fa:	f8ad 3016 	strh.w	r3, [sp, #22]
    84fe:	4b08      	ldr	r3, [pc, #32]	; (8520 <sscanf+0x50>)
    8500:	9003      	str	r0, [sp, #12]
    8502:	9007      	str	r0, [sp, #28]
    8504:	a902      	add	r1, sp, #8
    8506:	6818      	ldr	r0, [r3, #0]
    8508:	9401      	str	r4, [sp, #4]
    850a:	462a      	mov	r2, r5
    850c:	4623      	mov	r3, r4
    850e:	f001 f821 	bl	9554 <__ssvfscanf_r>
    8512:	b01c      	add	sp, #112	; 0x70
    8514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8518:	b003      	add	sp, #12
    851a:	4770      	bx	lr
    851c:	0000859b 	.word	0x0000859b
    8520:	200004a0 	.word	0x200004a0

00008524 <_sscanf_r>:
    8524:	b40c      	push	{r2, r3}
    8526:	b570      	push	{r4, r5, r6, lr}
    8528:	b09c      	sub	sp, #112	; 0x70
    852a:	ac20      	add	r4, sp, #128	; 0x80
    852c:	4606      	mov	r6, r0
    852e:	f44f 7301 	mov.w	r3, #516	; 0x204
    8532:	4608      	mov	r0, r1
    8534:	f854 5b04 	ldr.w	r5, [r4], #4
    8538:	f8ad 3014 	strh.w	r3, [sp, #20]
    853c:	9102      	str	r1, [sp, #8]
    853e:	9106      	str	r1, [sp, #24]
    8540:	f000 f869 	bl	8616 <strlen>
    8544:	4b0b      	ldr	r3, [pc, #44]	; (8574 <_sscanf_r+0x50>)
    8546:	930a      	str	r3, [sp, #40]	; 0x28
    8548:	2300      	movs	r3, #0
    854a:	930e      	str	r3, [sp, #56]	; 0x38
    854c:	9313      	str	r3, [sp, #76]	; 0x4c
    854e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8552:	9003      	str	r0, [sp, #12]
    8554:	9007      	str	r0, [sp, #28]
    8556:	f8ad 3016 	strh.w	r3, [sp, #22]
    855a:	4630      	mov	r0, r6
    855c:	a902      	add	r1, sp, #8
    855e:	462a      	mov	r2, r5
    8560:	4623      	mov	r3, r4
    8562:	9401      	str	r4, [sp, #4]
    8564:	f000 fff6 	bl	9554 <__ssvfscanf_r>
    8568:	b01c      	add	sp, #112	; 0x70
    856a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    856e:	b002      	add	sp, #8
    8570:	4770      	bx	lr
    8572:	bf00      	nop
    8574:	0000859b 	.word	0x0000859b

00008578 <__sread>:
    8578:	b510      	push	{r4, lr}
    857a:	460c      	mov	r4, r1
    857c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8580:	f004 fd0a 	bl	cf98 <_read_r>
    8584:	2800      	cmp	r0, #0
    8586:	db03      	blt.n	8590 <__sread+0x18>
    8588:	6d23      	ldr	r3, [r4, #80]	; 0x50
    858a:	4403      	add	r3, r0
    858c:	6523      	str	r3, [r4, #80]	; 0x50
    858e:	bd10      	pop	{r4, pc}
    8590:	89a3      	ldrh	r3, [r4, #12]
    8592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    8596:	81a3      	strh	r3, [r4, #12]
    8598:	bd10      	pop	{r4, pc}

0000859a <__seofread>:
    859a:	2000      	movs	r0, #0
    859c:	4770      	bx	lr

0000859e <__swrite>:
    859e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85a2:	461d      	mov	r5, r3
    85a4:	898b      	ldrh	r3, [r1, #12]
    85a6:	05db      	lsls	r3, r3, #23
    85a8:	4607      	mov	r7, r0
    85aa:	460c      	mov	r4, r1
    85ac:	4616      	mov	r6, r2
    85ae:	d505      	bpl.n	85bc <__swrite+0x1e>
    85b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    85b4:	2200      	movs	r2, #0
    85b6:	2302      	movs	r3, #2
    85b8:	f003 fdda 	bl	c170 <_lseek_r>
    85bc:	89a3      	ldrh	r3, [r4, #12]
    85be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    85c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    85c6:	81a3      	strh	r3, [r4, #12]
    85c8:	4638      	mov	r0, r7
    85ca:	4632      	mov	r2, r6
    85cc:	462b      	mov	r3, r5
    85ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    85d2:	f002 b9d5 	b.w	a980 <_write_r>

000085d6 <__sseek>:
    85d6:	b510      	push	{r4, lr}
    85d8:	460c      	mov	r4, r1
    85da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    85de:	f003 fdc7 	bl	c170 <_lseek_r>
    85e2:	1c43      	adds	r3, r0, #1
    85e4:	89a3      	ldrh	r3, [r4, #12]
    85e6:	d103      	bne.n	85f0 <__sseek+0x1a>
    85e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    85ec:	81a3      	strh	r3, [r4, #12]
    85ee:	bd10      	pop	{r4, pc}
    85f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    85f4:	81a3      	strh	r3, [r4, #12]
    85f6:	6520      	str	r0, [r4, #80]	; 0x50
    85f8:	bd10      	pop	{r4, pc}

000085fa <__sclose>:
    85fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    85fe:	f002 ba81 	b.w	ab04 <_close_r>

00008602 <strcmp>:
    8602:	f810 2b01 	ldrb.w	r2, [r0], #1
    8606:	f811 3b01 	ldrb.w	r3, [r1], #1
    860a:	2a01      	cmp	r2, #1
    860c:	bf28      	it	cs
    860e:	429a      	cmpcs	r2, r3
    8610:	d0f7      	beq.n	8602 <strcmp>
    8612:	1ad0      	subs	r0, r2, r3
    8614:	4770      	bx	lr

00008616 <strlen>:
    8616:	4603      	mov	r3, r0
    8618:	f813 2b01 	ldrb.w	r2, [r3], #1
    861c:	2a00      	cmp	r2, #0
    861e:	d1fb      	bne.n	8618 <strlen+0x2>
    8620:	1a18      	subs	r0, r3, r0
    8622:	3801      	subs	r0, #1
    8624:	4770      	bx	lr
	...

00008628 <_svfprintf_r>:
    8628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    862c:	b0c3      	sub	sp, #268	; 0x10c
    862e:	468b      	mov	fp, r1
    8630:	4698      	mov	r8, r3
    8632:	920b      	str	r2, [sp, #44]	; 0x2c
    8634:	4682      	mov	sl, r0
    8636:	f003 fd89 	bl	c14c <_localeconv_r>
    863a:	6800      	ldr	r0, [r0, #0]
    863c:	9018      	str	r0, [sp, #96]	; 0x60
    863e:	f7ff ffea 	bl	8616 <strlen>
    8642:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    8646:	9010      	str	r0, [sp, #64]	; 0x40
    8648:	0619      	lsls	r1, r3, #24
    864a:	d515      	bpl.n	8678 <_svfprintf_r+0x50>
    864c:	f8db 3010 	ldr.w	r3, [fp, #16]
    8650:	b993      	cbnz	r3, 8678 <_svfprintf_r+0x50>
    8652:	4650      	mov	r0, sl
    8654:	2140      	movs	r1, #64	; 0x40
    8656:	f003 fe11 	bl	c27c <_malloc_r>
    865a:	f8cb 0000 	str.w	r0, [fp]
    865e:	f8cb 0010 	str.w	r0, [fp, #16]
    8662:	b930      	cbnz	r0, 8672 <_svfprintf_r+0x4a>
    8664:	230c      	movs	r3, #12
    8666:	f8ca 3000 	str.w	r3, [sl]
    866a:	f04f 30ff 	mov.w	r0, #4294967295
    866e:	f000 bf6c 	b.w	954a <_svfprintf_r+0xf22>
    8672:	2340      	movs	r3, #64	; 0x40
    8674:	f8cb 3014 	str.w	r3, [fp, #20]
    8678:	2400      	movs	r4, #0
    867a:	2500      	movs	r5, #0
    867c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    8680:	2300      	movs	r3, #0
    8682:	ae32      	add	r6, sp, #200	; 0xc8
    8684:	9625      	str	r6, [sp, #148]	; 0x94
    8686:	9327      	str	r3, [sp, #156]	; 0x9c
    8688:	9326      	str	r3, [sp, #152]	; 0x98
    868a:	9309      	str	r3, [sp, #36]	; 0x24
    868c:	931b      	str	r3, [sp, #108]	; 0x6c
    868e:	931a      	str	r3, [sp, #104]	; 0x68
    8690:	930f      	str	r3, [sp, #60]	; 0x3c
    8692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8694:	461c      	mov	r4, r3
    8696:	f813 2b01 	ldrb.w	r2, [r3], #1
    869a:	b91a      	cbnz	r2, 86a4 <_svfprintf_r+0x7c>
    869c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    869e:	1a25      	subs	r5, r4, r0
    86a0:	d103      	bne.n	86aa <_svfprintf_r+0x82>
    86a2:	e01b      	b.n	86dc <_svfprintf_r+0xb4>
    86a4:	2a25      	cmp	r2, #37	; 0x25
    86a6:	d1f5      	bne.n	8694 <_svfprintf_r+0x6c>
    86a8:	e7f8      	b.n	869c <_svfprintf_r+0x74>
    86aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    86ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    86ae:	442b      	add	r3, r5
    86b0:	9327      	str	r3, [sp, #156]	; 0x9c
    86b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    86b4:	3301      	adds	r3, #1
    86b6:	2b07      	cmp	r3, #7
    86b8:	e886 0022 	stmia.w	r6, {r1, r5}
    86bc:	9326      	str	r3, [sp, #152]	; 0x98
    86be:	dc01      	bgt.n	86c4 <_svfprintf_r+0x9c>
    86c0:	3608      	adds	r6, #8
    86c2:	e008      	b.n	86d6 <_svfprintf_r+0xae>
    86c4:	4650      	mov	r0, sl
    86c6:	4659      	mov	r1, fp
    86c8:	aa25      	add	r2, sp, #148	; 0x94
    86ca:	f005 ff77 	bl	e5bc <__ssprint_r>
    86ce:	2800      	cmp	r0, #0
    86d0:	f040 8733 	bne.w	953a <_svfprintf_r+0xf12>
    86d4:	ae32      	add	r6, sp, #200	; 0xc8
    86d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    86d8:	442a      	add	r2, r5
    86da:	920f      	str	r2, [sp, #60]	; 0x3c
    86dc:	7823      	ldrb	r3, [r4, #0]
    86de:	2b00      	cmp	r3, #0
    86e0:	f000 8724 	beq.w	952c <_svfprintf_r+0xf04>
    86e4:	2300      	movs	r3, #0
    86e6:	3401      	adds	r4, #1
    86e8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    86ec:	f04f 39ff 	mov.w	r9, #4294967295
    86f0:	930e      	str	r3, [sp, #56]	; 0x38
    86f2:	461f      	mov	r7, r3
    86f4:	1c65      	adds	r5, r4, #1
    86f6:	7824      	ldrb	r4, [r4, #0]
    86f8:	950b      	str	r5, [sp, #44]	; 0x2c
    86fa:	9408      	str	r4, [sp, #32]
    86fc:	9c08      	ldr	r4, [sp, #32]
    86fe:	f1a4 0220 	sub.w	r2, r4, #32
    8702:	2a58      	cmp	r2, #88	; 0x58
    8704:	f200 8384 	bhi.w	8e10 <_svfprintf_r+0x7e8>
    8708:	e8df f012 	tbh	[pc, r2, lsl #1]
    870c:	0382006d 	.word	0x0382006d
    8710:	00710382 	.word	0x00710382
    8714:	03820382 	.word	0x03820382
    8718:	03820382 	.word	0x03820382
    871c:	03820382 	.word	0x03820382
    8720:	0059005b 	.word	0x0059005b
    8724:	00770382 	.word	0x00770382
    8728:	0382007a 	.word	0x0382007a
    872c:	00a300a0 	.word	0x00a300a0
    8730:	00a300a3 	.word	0x00a300a3
    8734:	00a300a3 	.word	0x00a300a3
    8738:	00a300a3 	.word	0x00a300a3
    873c:	00a300a3 	.word	0x00a300a3
    8740:	03820382 	.word	0x03820382
    8744:	03820382 	.word	0x03820382
    8748:	03820382 	.word	0x03820382
    874c:	03820382 	.word	0x03820382
    8750:	03820382 	.word	0x03820382
    8754:	00ff00d4 	.word	0x00ff00d4
    8758:	00ff0382 	.word	0x00ff0382
    875c:	03820382 	.word	0x03820382
    8760:	03820382 	.word	0x03820382
    8764:	038200b7 	.word	0x038200b7
    8768:	026a0382 	.word	0x026a0382
    876c:	03820382 	.word	0x03820382
    8770:	03820382 	.word	0x03820382
    8774:	02ba0382 	.word	0x02ba0382
    8778:	03820382 	.word	0x03820382
    877c:	03820068 	.word	0x03820068
    8780:	03820382 	.word	0x03820382
    8784:	03820382 	.word	0x03820382
    8788:	03820382 	.word	0x03820382
    878c:	03820382 	.word	0x03820382
    8790:	00ca0382 	.word	0x00ca0382
    8794:	00ff0065 	.word	0x00ff0065
    8798:	00ff00ff 	.word	0x00ff00ff
    879c:	006500ba 	.word	0x006500ba
    87a0:	03820382 	.word	0x03820382
    87a4:	038200bd 	.word	0x038200bd
    87a8:	026c024b 	.word	0x026c024b
    87ac:	00c7028b 	.word	0x00c7028b
    87b0:	029d0382 	.word	0x029d0382
    87b4:	02bc0382 	.word	0x02bc0382
    87b8:	03820382 	.word	0x03820382
    87bc:	02d7      	.short	0x02d7
    87be:	232b      	movs	r3, #43	; 0x2b
    87c0:	e007      	b.n	87d2 <_svfprintf_r+0x1aa>
    87c2:	f8d8 5000 	ldr.w	r5, [r8]
    87c6:	950e      	str	r5, [sp, #56]	; 0x38
    87c8:	2d00      	cmp	r5, #0
    87ca:	f108 0204 	add.w	r2, r8, #4
    87ce:	db11      	blt.n	87f4 <_svfprintf_r+0x1cc>
    87d0:	4690      	mov	r8, r2
    87d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    87d4:	e78e      	b.n	86f4 <_svfprintf_r+0xcc>
    87d6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    87da:	e06f      	b.n	88bc <_svfprintf_r+0x294>
    87dc:	4cab      	ldr	r4, [pc, #684]	; (8a8c <_svfprintf_r+0x464>)
    87de:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    87e2:	941b      	str	r4, [sp, #108]	; 0x6c
    87e4:	e26d      	b.n	8cc2 <_svfprintf_r+0x69a>
    87e6:	2b00      	cmp	r3, #0
    87e8:	bf08      	it	eq
    87ea:	2320      	moveq	r3, #32
    87ec:	e7f1      	b.n	87d2 <_svfprintf_r+0x1aa>
    87ee:	f047 0701 	orr.w	r7, r7, #1
    87f2:	e7ee      	b.n	87d2 <_svfprintf_r+0x1aa>
    87f4:	426d      	negs	r5, r5
    87f6:	950e      	str	r5, [sp, #56]	; 0x38
    87f8:	4690      	mov	r8, r2
    87fa:	f047 0704 	orr.w	r7, r7, #4
    87fe:	e7e8      	b.n	87d2 <_svfprintf_r+0x1aa>
    8800:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    8802:	7825      	ldrb	r5, [r4, #0]
    8804:	9508      	str	r5, [sp, #32]
    8806:	2d2a      	cmp	r5, #42	; 0x2a
    8808:	f104 0201 	add.w	r2, r4, #1
    880c:	d002      	beq.n	8814 <_svfprintf_r+0x1ec>
    880e:	f04f 0900 	mov.w	r9, #0
    8812:	e00b      	b.n	882c <_svfprintf_r+0x204>
    8814:	f8d8 9000 	ldr.w	r9, [r8]
    8818:	920b      	str	r2, [sp, #44]	; 0x2c
    881a:	f108 0104 	add.w	r1, r8, #4
    881e:	f1b9 0f00 	cmp.w	r9, #0
    8822:	4688      	mov	r8, r1
    8824:	dad5      	bge.n	87d2 <_svfprintf_r+0x1aa>
    8826:	f04f 39ff 	mov.w	r9, #4294967295
    882a:	e7d2      	b.n	87d2 <_svfprintf_r+0x1aa>
    882c:	9d08      	ldr	r5, [sp, #32]
    882e:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
    8832:	2909      	cmp	r1, #9
    8834:	d806      	bhi.n	8844 <_svfprintf_r+0x21c>
    8836:	200a      	movs	r0, #10
    8838:	f812 4b01 	ldrb.w	r4, [r2], #1
    883c:	9408      	str	r4, [sp, #32]
    883e:	fb00 1909 	mla	r9, r0, r9, r1
    8842:	e7f3      	b.n	882c <_svfprintf_r+0x204>
    8844:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
    8848:	920b      	str	r2, [sp, #44]	; 0x2c
    884a:	e757      	b.n	86fc <_svfprintf_r+0xd4>
    884c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    8850:	e7bf      	b.n	87d2 <_svfprintf_r+0x1aa>
    8852:	2400      	movs	r4, #0
    8854:	940e      	str	r4, [sp, #56]	; 0x38
    8856:	9d08      	ldr	r5, [sp, #32]
    8858:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    885a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    885e:	210a      	movs	r1, #10
    8860:	fb01 2404 	mla	r4, r1, r4, r2
    8864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8866:	940e      	str	r4, [sp, #56]	; 0x38
    8868:	f812 5b01 	ldrb.w	r5, [r2], #1
    886c:	9508      	str	r5, [sp, #32]
    886e:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
    8872:	2909      	cmp	r1, #9
    8874:	d8e8      	bhi.n	8848 <_svfprintf_r+0x220>
    8876:	920b      	str	r2, [sp, #44]	; 0x2c
    8878:	e7ed      	b.n	8856 <_svfprintf_r+0x22e>
    887a:	f047 0708 	orr.w	r7, r7, #8
    887e:	e7a8      	b.n	87d2 <_svfprintf_r+0x1aa>
    8880:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    8884:	e7a5      	b.n	87d2 <_svfprintf_r+0x1aa>
    8886:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    8888:	7822      	ldrb	r2, [r4, #0]
    888a:	2a6c      	cmp	r2, #108	; 0x6c
    888c:	d102      	bne.n	8894 <_svfprintf_r+0x26c>
    888e:	3401      	adds	r4, #1
    8890:	940b      	str	r4, [sp, #44]	; 0x2c
    8892:	e002      	b.n	889a <_svfprintf_r+0x272>
    8894:	f047 0710 	orr.w	r7, r7, #16
    8898:	e79b      	b.n	87d2 <_svfprintf_r+0x1aa>
    889a:	f047 0720 	orr.w	r7, r7, #32
    889e:	e798      	b.n	87d2 <_svfprintf_r+0x1aa>
    88a0:	f8d8 3000 	ldr.w	r3, [r8]
    88a4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    88a8:	2500      	movs	r5, #0
    88aa:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    88ae:	f108 0804 	add.w	r8, r8, #4
    88b2:	e2b8      	b.n	8e26 <_svfprintf_r+0x7fe>
    88b4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    88b8:	f047 0710 	orr.w	r7, r7, #16
    88bc:	06ba      	lsls	r2, r7, #26
    88be:	d508      	bpl.n	88d2 <_svfprintf_r+0x2aa>
    88c0:	f108 0807 	add.w	r8, r8, #7
    88c4:	f028 0307 	bic.w	r3, r8, #7
    88c8:	f103 0808 	add.w	r8, r3, #8
    88cc:	e9d3 4500 	ldrd	r4, r5, [r3]
    88d0:	e00f      	b.n	88f2 <_svfprintf_r+0x2ca>
    88d2:	f017 0f10 	tst.w	r7, #16
    88d6:	f108 0304 	add.w	r3, r8, #4
    88da:	d002      	beq.n	88e2 <_svfprintf_r+0x2ba>
    88dc:	f8d8 4000 	ldr.w	r4, [r8]
    88e0:	e005      	b.n	88ee <_svfprintf_r+0x2c6>
    88e2:	f8d8 4000 	ldr.w	r4, [r8]
    88e6:	f017 0f40 	tst.w	r7, #64	; 0x40
    88ea:	bf18      	it	ne
    88ec:	b224      	sxthne	r4, r4
    88ee:	17e5      	asrs	r5, r4, #31
    88f0:	4698      	mov	r8, r3
    88f2:	2c00      	cmp	r4, #0
    88f4:	f175 0100 	sbcs.w	r1, r5, #0
    88f8:	f280 820e 	bge.w	8d18 <_svfprintf_r+0x6f0>
    88fc:	232d      	movs	r3, #45	; 0x2d
    88fe:	4264      	negs	r4, r4
    8900:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    8904:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8908:	e206      	b.n	8d18 <_svfprintf_r+0x6f0>
    890a:	9c08      	ldr	r4, [sp, #32]
    890c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8910:	f108 0807 	add.w	r8, r8, #7
    8914:	f028 0307 	bic.w	r3, r8, #7
    8918:	970a      	str	r7, [sp, #40]	; 0x28
    891a:	9411      	str	r4, [sp, #68]	; 0x44
    891c:	e9d3 4500 	ldrd	r4, r5, [r3]
    8920:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    8924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    8928:	f103 0808 	add.w	r8, r3, #8
    892c:	f004 fcee 	bl	d30c <__fpclassifyd>
    8930:	2801      	cmp	r0, #1
    8932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    8936:	d114      	bne.n	8962 <_svfprintf_r+0x33a>
    8938:	2200      	movs	r2, #0
    893a:	2300      	movs	r3, #0
    893c:	f007 fc8a 	bl	10254 <__aeabi_dcmplt>
    8940:	b110      	cbz	r0, 8948 <_svfprintf_r+0x320>
    8942:	232d      	movs	r3, #45	; 0x2d
    8944:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8948:	9d08      	ldr	r5, [sp, #32]
    894a:	4b51      	ldr	r3, [pc, #324]	; (8a90 <_svfprintf_r+0x468>)
    894c:	4a51      	ldr	r2, [pc, #324]	; (8a94 <_svfprintf_r+0x46c>)
    894e:	2d47      	cmp	r5, #71	; 0x47
    8950:	bfd8      	it	le
    8952:	461a      	movle	r2, r3
    8954:	9207      	str	r2, [sp, #28]
    8956:	f027 0780 	bic.w	r7, r7, #128	; 0x80
    895a:	f04f 0903 	mov.w	r9, #3
    895e:	2500      	movs	r5, #0
    8960:	e268      	b.n	8e34 <_svfprintf_r+0x80c>
    8962:	f004 fcd3 	bl	d30c <__fpclassifyd>
    8966:	b958      	cbnz	r0, 8980 <_svfprintf_r+0x358>
    8968:	4b4b      	ldr	r3, [pc, #300]	; (8a98 <_svfprintf_r+0x470>)
    896a:	4a4c      	ldr	r2, [pc, #304]	; (8a9c <_svfprintf_r+0x474>)
    896c:	9c08      	ldr	r4, [sp, #32]
    896e:	2c47      	cmp	r4, #71	; 0x47
    8970:	bfd8      	it	le
    8972:	461a      	movle	r2, r3
    8974:	9207      	str	r2, [sp, #28]
    8976:	f027 0780 	bic.w	r7, r7, #128	; 0x80
    897a:	f04f 0903 	mov.w	r9, #3
    897e:	e258      	b.n	8e32 <_svfprintf_r+0x80a>
    8980:	f1b9 3fff 	cmp.w	r9, #4294967295
    8984:	d00a      	beq.n	899c <_svfprintf_r+0x374>
    8986:	9d08      	ldr	r5, [sp, #32]
    8988:	f025 0320 	bic.w	r3, r5, #32
    898c:	2b47      	cmp	r3, #71	; 0x47
    898e:	d107      	bne.n	89a0 <_svfprintf_r+0x378>
    8990:	f1b9 0f00 	cmp.w	r9, #0
    8994:	bf08      	it	eq
    8996:	f04f 0901 	moveq.w	r9, #1
    899a:	e001      	b.n	89a0 <_svfprintf_r+0x378>
    899c:	f04f 0906 	mov.w	r9, #6
    89a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    89a4:	2b00      	cmp	r3, #0
    89a6:	f447 7780 	orr.w	r7, r7, #256	; 0x100
    89aa:	da08      	bge.n	89be <_svfprintf_r+0x396>
    89ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    89ae:	980c      	ldr	r0, [sp, #48]	; 0x30
    89b0:	9012      	str	r0, [sp, #72]	; 0x48
    89b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    89b6:	242d      	movs	r4, #45	; 0x2d
    89b8:	9113      	str	r1, [sp, #76]	; 0x4c
    89ba:	9419      	str	r4, [sp, #100]	; 0x64
    89bc:	e005      	b.n	89ca <_svfprintf_r+0x3a2>
    89be:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
    89c2:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    89c6:	2500      	movs	r5, #0
    89c8:	9519      	str	r5, [sp, #100]	; 0x64
    89ca:	9d08      	ldr	r5, [sp, #32]
    89cc:	f025 0420 	bic.w	r4, r5, #32
    89d0:	2c46      	cmp	r4, #70	; 0x46
    89d2:	d004      	beq.n	89de <_svfprintf_r+0x3b6>
    89d4:	2c45      	cmp	r4, #69	; 0x45
    89d6:	d105      	bne.n	89e4 <_svfprintf_r+0x3bc>
    89d8:	f109 0501 	add.w	r5, r9, #1
    89dc:	e003      	b.n	89e6 <_svfprintf_r+0x3be>
    89de:	464d      	mov	r5, r9
    89e0:	2303      	movs	r3, #3
    89e2:	e001      	b.n	89e8 <_svfprintf_r+0x3c0>
    89e4:	464d      	mov	r5, r9
    89e6:	2302      	movs	r3, #2
    89e8:	e88d 0028 	stmia.w	sp, {r3, r5}
    89ec:	ab1f      	add	r3, sp, #124	; 0x7c
    89ee:	9302      	str	r3, [sp, #8]
    89f0:	ab20      	add	r3, sp, #128	; 0x80
    89f2:	9303      	str	r3, [sp, #12]
    89f4:	ab23      	add	r3, sp, #140	; 0x8c
    89f6:	9304      	str	r3, [sp, #16]
    89f8:	4650      	mov	r0, sl
    89fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    89fe:	f002 f920 	bl	ac42 <_dtoa_r>
    8a02:	2c47      	cmp	r4, #71	; 0x47
    8a04:	9007      	str	r0, [sp, #28]
    8a06:	d10a      	bne.n	8a1e <_svfprintf_r+0x3f6>
    8a08:	980a      	ldr	r0, [sp, #40]	; 0x28
    8a0a:	07c3      	lsls	r3, r0, #31
    8a0c:	d407      	bmi.n	8a1e <_svfprintf_r+0x3f6>
    8a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8a10:	9d07      	ldr	r5, [sp, #28]
    8a12:	2c47      	cmp	r4, #71	; 0x47
    8a14:	ebc5 0303 	rsb	r3, r5, r3
    8a18:	9309      	str	r3, [sp, #36]	; 0x24
    8a1a:	d141      	bne.n	8aa0 <_svfprintf_r+0x478>
    8a1c:	e02d      	b.n	8a7a <_svfprintf_r+0x452>
    8a1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
    8a22:	2c46      	cmp	r4, #70	; 0x46
    8a24:	44ac      	add	ip, r5
    8a26:	d113      	bne.n	8a50 <_svfprintf_r+0x428>
    8a28:	9807      	ldr	r0, [sp, #28]
    8a2a:	7803      	ldrb	r3, [r0, #0]
    8a2c:	2b30      	cmp	r3, #48	; 0x30
    8a2e:	d10d      	bne.n	8a4c <_svfprintf_r+0x424>
    8a30:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    8a34:	2200      	movs	r2, #0
    8a36:	2300      	movs	r3, #0
    8a38:	f8cd c018 	str.w	ip, [sp, #24]
    8a3c:	f007 fc00 	bl	10240 <__aeabi_dcmpeq>
    8a40:	f8dd c018 	ldr.w	ip, [sp, #24]
    8a44:	b910      	cbnz	r0, 8a4c <_svfprintf_r+0x424>
    8a46:	f1c5 0501 	rsb	r5, r5, #1
    8a4a:	951f      	str	r5, [sp, #124]	; 0x7c
    8a4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8a4e:	449c      	add	ip, r3
    8a50:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    8a54:	2200      	movs	r2, #0
    8a56:	2300      	movs	r3, #0
    8a58:	f8cd c018 	str.w	ip, [sp, #24]
    8a5c:	f007 fbf0 	bl	10240 <__aeabi_dcmpeq>
    8a60:	f8dd c018 	ldr.w	ip, [sp, #24]
    8a64:	b108      	cbz	r0, 8a6a <_svfprintf_r+0x442>
    8a66:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
    8a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8a6c:	4563      	cmp	r3, ip
    8a6e:	d2ce      	bcs.n	8a0e <_svfprintf_r+0x3e6>
    8a70:	1c5a      	adds	r2, r3, #1
    8a72:	9223      	str	r2, [sp, #140]	; 0x8c
    8a74:	2230      	movs	r2, #48	; 0x30
    8a76:	701a      	strb	r2, [r3, #0]
    8a78:	e7f7      	b.n	8a6a <_svfprintf_r+0x442>
    8a7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8a7c:	1cdc      	adds	r4, r3, #3
    8a7e:	db01      	blt.n	8a84 <_svfprintf_r+0x45c>
    8a80:	454b      	cmp	r3, r9
    8a82:	dd6c      	ble.n	8b5e <_svfprintf_r+0x536>
    8a84:	9c08      	ldr	r4, [sp, #32]
    8a86:	3c02      	subs	r4, #2
    8a88:	9408      	str	r4, [sp, #32]
    8a8a:	e00c      	b.n	8aa6 <_svfprintf_r+0x47e>
    8a8c:	00010ace 	.word	0x00010ace
    8a90:	00010abe 	.word	0x00010abe
    8a94:	00010ac2 	.word	0x00010ac2
    8a98:	00010ac6 	.word	0x00010ac6
    8a9c:	00010aca 	.word	0x00010aca
    8aa0:	9d08      	ldr	r5, [sp, #32]
    8aa2:	2d65      	cmp	r5, #101	; 0x65
    8aa4:	dc42      	bgt.n	8b2c <_svfprintf_r+0x504>
    8aa6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8aa8:	9c08      	ldr	r4, [sp, #32]
    8aaa:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
    8aae:	3b01      	subs	r3, #1
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	931f      	str	r3, [sp, #124]	; 0x7c
    8ab4:	bfba      	itte	lt
    8ab6:	425b      	neglt	r3, r3
    8ab8:	222d      	movlt	r2, #45	; 0x2d
    8aba:	222b      	movge	r2, #43	; 0x2b
    8abc:	2b09      	cmp	r3, #9
    8abe:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
    8ac2:	dd1c      	ble.n	8afe <_svfprintf_r+0x4d6>
    8ac4:	f10d 0292 	add.w	r2, sp, #146	; 0x92
    8ac8:	200a      	movs	r0, #10
    8aca:	fb93 f1f0 	sdiv	r1, r3, r0
    8ace:	fb00 3311 	mls	r3, r0, r1, r3
    8ad2:	3330      	adds	r3, #48	; 0x30
    8ad4:	2909      	cmp	r1, #9
    8ad6:	4614      	mov	r4, r2
    8ad8:	f802 3901 	strb.w	r3, [r2], #-1
    8adc:	460b      	mov	r3, r1
    8ade:	dcf3      	bgt.n	8ac8 <_svfprintf_r+0x4a0>
    8ae0:	f101 0330 	add.w	r3, r1, #48	; 0x30
    8ae4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    8ae8:	f10d 0386 	add.w	r3, sp, #134	; 0x86
    8aec:	f10d 0293 	add.w	r2, sp, #147	; 0x93
    8af0:	4294      	cmp	r4, r2
    8af2:	d20b      	bcs.n	8b0c <_svfprintf_r+0x4e4>
    8af4:	f814 2b01 	ldrb.w	r2, [r4], #1
    8af8:	f803 2b01 	strb.w	r2, [r3], #1
    8afc:	e7f6      	b.n	8aec <_svfprintf_r+0x4c4>
    8afe:	2230      	movs	r2, #48	; 0x30
    8b00:	4413      	add	r3, r2
    8b02:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    8b06:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
    8b0a:	ab22      	add	r3, sp, #136	; 0x88
    8b0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    8b0e:	aa21      	add	r2, sp, #132	; 0x84
    8b10:	1a9a      	subs	r2, r3, r2
    8b12:	4691      	mov	r9, r2
    8b14:	2d01      	cmp	r5, #1
    8b16:	921a      	str	r2, [sp, #104]	; 0x68
    8b18:	44a9      	add	r9, r5
    8b1a:	dc03      	bgt.n	8b24 <_svfprintf_r+0x4fc>
    8b1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8b1e:	f015 0401 	ands.w	r4, r5, #1
    8b22:	d037      	beq.n	8b94 <_svfprintf_r+0x56c>
    8b24:	f109 0901 	add.w	r9, r9, #1
    8b28:	2400      	movs	r4, #0
    8b2a:	e033      	b.n	8b94 <_svfprintf_r+0x56c>
    8b2c:	9c08      	ldr	r4, [sp, #32]
    8b2e:	2c66      	cmp	r4, #102	; 0x66
    8b30:	d115      	bne.n	8b5e <_svfprintf_r+0x536>
    8b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8b34:	2b00      	cmp	r3, #0
    8b36:	dd09      	ble.n	8b4c <_svfprintf_r+0x524>
    8b38:	f1b9 0f00 	cmp.w	r9, #0
    8b3c:	d102      	bne.n	8b44 <_svfprintf_r+0x51c>
    8b3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8b40:	07e8      	lsls	r0, r5, #31
    8b42:	d523      	bpl.n	8b8c <_svfprintf_r+0x564>
    8b44:	f109 0901 	add.w	r9, r9, #1
    8b48:	444b      	add	r3, r9
    8b4a:	e01f      	b.n	8b8c <_svfprintf_r+0x564>
    8b4c:	f1b9 0f00 	cmp.w	r9, #0
    8b50:	d102      	bne.n	8b58 <_svfprintf_r+0x530>
    8b52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8b54:	07e1      	lsls	r1, r4, #31
    8b56:	d515      	bpl.n	8b84 <_svfprintf_r+0x55c>
    8b58:	f109 0302 	add.w	r3, r9, #2
    8b5c:	e016      	b.n	8b8c <_svfprintf_r+0x564>
    8b5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8b60:	9d09      	ldr	r5, [sp, #36]	; 0x24
    8b62:	42ab      	cmp	r3, r5
    8b64:	db04      	blt.n	8b70 <_svfprintf_r+0x548>
    8b66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8b68:	07e2      	lsls	r2, r4, #31
    8b6a:	d50d      	bpl.n	8b88 <_svfprintf_r+0x560>
    8b6c:	3301      	adds	r3, #1
    8b6e:	e006      	b.n	8b7e <_svfprintf_r+0x556>
    8b70:	2b00      	cmp	r3, #0
    8b72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8b74:	bfd4      	ite	le
    8b76:	f1c3 0302 	rsble	r3, r3, #2
    8b7a:	2301      	movgt	r3, #1
    8b7c:	4423      	add	r3, r4
    8b7e:	2567      	movs	r5, #103	; 0x67
    8b80:	9511      	str	r5, [sp, #68]	; 0x44
    8b82:	e003      	b.n	8b8c <_svfprintf_r+0x564>
    8b84:	2301      	movs	r3, #1
    8b86:	e001      	b.n	8b8c <_svfprintf_r+0x564>
    8b88:	2467      	movs	r4, #103	; 0x67
    8b8a:	9411      	str	r4, [sp, #68]	; 0x44
    8b8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
    8b8e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    8b90:	9508      	str	r5, [sp, #32]
    8b92:	4699      	mov	r9, r3
    8b94:	9d19      	ldr	r5, [sp, #100]	; 0x64
    8b96:	b115      	cbz	r5, 8b9e <_svfprintf_r+0x576>
    8b98:	232d      	movs	r3, #45	; 0x2d
    8b9a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8b9e:	2500      	movs	r5, #0
    8ba0:	e149      	b.n	8e36 <_svfprintf_r+0x80e>
    8ba2:	f017 0f20 	tst.w	r7, #32
    8ba6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8baa:	f108 0104 	add.w	r1, r8, #4
    8bae:	d008      	beq.n	8bc2 <_svfprintf_r+0x59a>
    8bb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8bb2:	f8d8 0000 	ldr.w	r0, [r8]
    8bb6:	17e5      	asrs	r5, r4, #31
    8bb8:	4622      	mov	r2, r4
    8bba:	462b      	mov	r3, r5
    8bbc:	e9c0 2300 	strd	r2, r3, [r0]
    8bc0:	e00c      	b.n	8bdc <_svfprintf_r+0x5b4>
    8bc2:	06fb      	lsls	r3, r7, #27
    8bc4:	d406      	bmi.n	8bd4 <_svfprintf_r+0x5ac>
    8bc6:	067d      	lsls	r5, r7, #25
    8bc8:	d504      	bpl.n	8bd4 <_svfprintf_r+0x5ac>
    8bca:	f8d8 3000 	ldr.w	r3, [r8]
    8bce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8bd0:	801c      	strh	r4, [r3, #0]
    8bd2:	e003      	b.n	8bdc <_svfprintf_r+0x5b4>
    8bd4:	f8d8 3000 	ldr.w	r3, [r8]
    8bd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8bda:	601d      	str	r5, [r3, #0]
    8bdc:	4688      	mov	r8, r1
    8bde:	e558      	b.n	8692 <_svfprintf_r+0x6a>
    8be0:	f047 0710 	orr.w	r7, r7, #16
    8be4:	f017 0320 	ands.w	r3, r7, #32
    8be8:	d009      	beq.n	8bfe <_svfprintf_r+0x5d6>
    8bea:	f108 0807 	add.w	r8, r8, #7
    8bee:	f028 0307 	bic.w	r3, r8, #7
    8bf2:	e9d3 4500 	ldrd	r4, r5, [r3]
    8bf6:	f103 0808 	add.w	r8, r3, #8
    8bfa:	2300      	movs	r3, #0
    8bfc:	e088      	b.n	8d10 <_svfprintf_r+0x6e8>
    8bfe:	f017 0110 	ands.w	r1, r7, #16
    8c02:	f108 0204 	add.w	r2, r8, #4
    8c06:	d107      	bne.n	8c18 <_svfprintf_r+0x5f0>
    8c08:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    8c0c:	d004      	beq.n	8c18 <_svfprintf_r+0x5f0>
    8c0e:	f8b8 4000 	ldrh.w	r4, [r8]
    8c12:	2500      	movs	r5, #0
    8c14:	4690      	mov	r8, r2
    8c16:	e7f0      	b.n	8bfa <_svfprintf_r+0x5d2>
    8c18:	f8d8 4000 	ldr.w	r4, [r8]
    8c1c:	2500      	movs	r5, #0
    8c1e:	4690      	mov	r8, r2
    8c20:	e076      	b.n	8d10 <_svfprintf_r+0x6e8>
    8c22:	2330      	movs	r3, #48	; 0x30
    8c24:	2278      	movs	r2, #120	; 0x78
    8c26:	48a8      	ldr	r0, [pc, #672]	; (8ec8 <_svfprintf_r+0x8a0>)
    8c28:	f8d8 4000 	ldr.w	r4, [r8]
    8c2c:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    8c30:	2500      	movs	r5, #0
    8c32:	f047 0702 	orr.w	r7, r7, #2
    8c36:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    8c3a:	f108 0804 	add.w	r8, r8, #4
    8c3e:	901b      	str	r0, [sp, #108]	; 0x6c
    8c40:	2302      	movs	r3, #2
    8c42:	9208      	str	r2, [sp, #32]
    8c44:	e064      	b.n	8d10 <_svfprintf_r+0x6e8>
    8c46:	4643      	mov	r3, r8
    8c48:	2500      	movs	r5, #0
    8c4a:	681b      	ldr	r3, [r3, #0]
    8c4c:	9307      	str	r3, [sp, #28]
    8c4e:	45a9      	cmp	r9, r5
    8c50:	f108 0804 	add.w	r8, r8, #4
    8c54:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    8c58:	db0d      	blt.n	8c76 <_svfprintf_r+0x64e>
    8c5a:	4618      	mov	r0, r3
    8c5c:	4629      	mov	r1, r5
    8c5e:	464a      	mov	r2, r9
    8c60:	f003 fd7a 	bl	c758 <memchr>
    8c64:	2800      	cmp	r0, #0
    8c66:	f000 80e4 	beq.w	8e32 <_svfprintf_r+0x80a>
    8c6a:	9c07      	ldr	r4, [sp, #28]
    8c6c:	1b00      	subs	r0, r0, r4
    8c6e:	4548      	cmp	r0, r9
    8c70:	bfb8      	it	lt
    8c72:	4681      	movlt	r9, r0
    8c74:	e0de      	b.n	8e34 <_svfprintf_r+0x80c>
    8c76:	9807      	ldr	r0, [sp, #28]
    8c78:	f7ff fccd 	bl	8616 <strlen>
    8c7c:	4681      	mov	r9, r0
    8c7e:	e0d9      	b.n	8e34 <_svfprintf_r+0x80c>
    8c80:	f047 0710 	orr.w	r7, r7, #16
    8c84:	06bc      	lsls	r4, r7, #26
    8c86:	d508      	bpl.n	8c9a <_svfprintf_r+0x672>
    8c88:	f108 0807 	add.w	r8, r8, #7
    8c8c:	f028 0307 	bic.w	r3, r8, #7
    8c90:	f103 0808 	add.w	r8, r3, #8
    8c94:	e9d3 4500 	ldrd	r4, r5, [r3]
    8c98:	e00d      	b.n	8cb6 <_svfprintf_r+0x68e>
    8c9a:	f017 0f10 	tst.w	r7, #16
    8c9e:	f108 0304 	add.w	r3, r8, #4
    8ca2:	d104      	bne.n	8cae <_svfprintf_r+0x686>
    8ca4:	0678      	lsls	r0, r7, #25
    8ca6:	d502      	bpl.n	8cae <_svfprintf_r+0x686>
    8ca8:	f8b8 4000 	ldrh.w	r4, [r8]
    8cac:	e001      	b.n	8cb2 <_svfprintf_r+0x68a>
    8cae:	f8d8 4000 	ldr.w	r4, [r8]
    8cb2:	2500      	movs	r5, #0
    8cb4:	4698      	mov	r8, r3
    8cb6:	2301      	movs	r3, #1
    8cb8:	e02a      	b.n	8d10 <_svfprintf_r+0x6e8>
    8cba:	4d83      	ldr	r5, [pc, #524]	; (8ec8 <_svfprintf_r+0x8a0>)
    8cbc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8cc0:	951b      	str	r5, [sp, #108]	; 0x6c
    8cc2:	06b9      	lsls	r1, r7, #26
    8cc4:	d508      	bpl.n	8cd8 <_svfprintf_r+0x6b0>
    8cc6:	f108 0807 	add.w	r8, r8, #7
    8cca:	f028 0307 	bic.w	r3, r8, #7
    8cce:	f103 0808 	add.w	r8, r3, #8
    8cd2:	e9d3 4500 	ldrd	r4, r5, [r3]
    8cd6:	e00d      	b.n	8cf4 <_svfprintf_r+0x6cc>
    8cd8:	f017 0f10 	tst.w	r7, #16
    8cdc:	f108 0304 	add.w	r3, r8, #4
    8ce0:	d104      	bne.n	8cec <_svfprintf_r+0x6c4>
    8ce2:	067a      	lsls	r2, r7, #25
    8ce4:	d502      	bpl.n	8cec <_svfprintf_r+0x6c4>
    8ce6:	f8b8 4000 	ldrh.w	r4, [r8]
    8cea:	e001      	b.n	8cf0 <_svfprintf_r+0x6c8>
    8cec:	f8d8 4000 	ldr.w	r4, [r8]
    8cf0:	2500      	movs	r5, #0
    8cf2:	4698      	mov	r8, r3
    8cf4:	07fb      	lsls	r3, r7, #31
    8cf6:	d50a      	bpl.n	8d0e <_svfprintf_r+0x6e6>
    8cf8:	ea54 0005 	orrs.w	r0, r4, r5
    8cfc:	d007      	beq.n	8d0e <_svfprintf_r+0x6e6>
    8cfe:	2330      	movs	r3, #48	; 0x30
    8d00:	9908      	ldr	r1, [sp, #32]
    8d02:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    8d06:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
    8d0a:	f047 0702 	orr.w	r7, r7, #2
    8d0e:	2302      	movs	r3, #2
    8d10:	2200      	movs	r2, #0
    8d12:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
    8d16:	e000      	b.n	8d1a <_svfprintf_r+0x6f2>
    8d18:	2301      	movs	r3, #1
    8d1a:	f1b9 0f00 	cmp.w	r9, #0
    8d1e:	bfa8      	it	ge
    8d20:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    8d24:	ea54 0205 	orrs.w	r2, r4, r5
    8d28:	d102      	bne.n	8d30 <_svfprintf_r+0x708>
    8d2a:	f1b9 0f00 	cmp.w	r9, #0
    8d2e:	d05a      	beq.n	8de6 <_svfprintf_r+0x7be>
    8d30:	2b01      	cmp	r3, #1
    8d32:	d01f      	beq.n	8d74 <_svfprintf_r+0x74c>
    8d34:	2b02      	cmp	r3, #2
    8d36:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
    8d3a:	d041      	beq.n	8dc0 <_svfprintf_r+0x798>
    8d3c:	08e1      	lsrs	r1, r4, #3
    8d3e:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
    8d42:	08e9      	lsrs	r1, r5, #3
    8d44:	9014      	str	r0, [sp, #80]	; 0x50
    8d46:	9115      	str	r1, [sp, #84]	; 0x54
    8d48:	f004 0207 	and.w	r2, r4, #7
    8d4c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
    8d50:	3230      	adds	r2, #48	; 0x30
    8d52:	ea54 0005 	orrs.w	r0, r4, r5
    8d56:	9307      	str	r3, [sp, #28]
    8d58:	701a      	strb	r2, [r3, #0]
    8d5a:	f103 33ff 	add.w	r3, r3, #4294967295
    8d5e:	d1ed      	bne.n	8d3c <_svfprintf_r+0x714>
    8d60:	07f8      	lsls	r0, r7, #31
    8d62:	9907      	ldr	r1, [sp, #28]
    8d64:	d54c      	bpl.n	8e00 <_svfprintf_r+0x7d8>
    8d66:	2a30      	cmp	r2, #48	; 0x30
    8d68:	d04a      	beq.n	8e00 <_svfprintf_r+0x7d8>
    8d6a:	9307      	str	r3, [sp, #28]
    8d6c:	2330      	movs	r3, #48	; 0x30
    8d6e:	f801 3c01 	strb.w	r3, [r1, #-1]
    8d72:	e045      	b.n	8e00 <_svfprintf_r+0x7d8>
    8d74:	2d00      	cmp	r5, #0
    8d76:	bf08      	it	eq
    8d78:	2c0a      	cmpeq	r4, #10
    8d7a:	d205      	bcs.n	8d88 <_svfprintf_r+0x760>
    8d7c:	3430      	adds	r4, #48	; 0x30
    8d7e:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    8d82:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
    8d86:	e03a      	b.n	8dfe <_svfprintf_r+0x7d6>
    8d88:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
    8d8c:	900a      	str	r0, [sp, #40]	; 0x28
    8d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d90:	9107      	str	r1, [sp, #28]
    8d92:	4620      	mov	r0, r4
    8d94:	4629      	mov	r1, r5
    8d96:	220a      	movs	r2, #10
    8d98:	2300      	movs	r3, #0
    8d9a:	f7fe ff99 	bl	7cd0 <__aeabi_uldivmod>
    8d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8da0:	3230      	adds	r2, #48	; 0x30
    8da2:	f803 2901 	strb.w	r2, [r3], #-1
    8da6:	4620      	mov	r0, r4
    8da8:	930a      	str	r3, [sp, #40]	; 0x28
    8daa:	4629      	mov	r1, r5
    8dac:	220a      	movs	r2, #10
    8dae:	2300      	movs	r3, #0
    8db0:	f7fe ff8e 	bl	7cd0 <__aeabi_uldivmod>
    8db4:	4604      	mov	r4, r0
    8db6:	460d      	mov	r5, r1
    8db8:	ea54 0005 	orrs.w	r0, r4, r5
    8dbc:	d1e7      	bne.n	8d8e <_svfprintf_r+0x766>
    8dbe:	e01f      	b.n	8e00 <_svfprintf_r+0x7d8>
    8dc0:	f004 020f 	and.w	r2, r4, #15
    8dc4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8dc6:	9307      	str	r3, [sp, #28]
    8dc8:	5c8a      	ldrb	r2, [r1, r2]
    8dca:	f803 2901 	strb.w	r2, [r3], #-1
    8dce:	0922      	lsrs	r2, r4, #4
    8dd0:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
    8dd4:	0929      	lsrs	r1, r5, #4
    8dd6:	9016      	str	r0, [sp, #88]	; 0x58
    8dd8:	9117      	str	r1, [sp, #92]	; 0x5c
    8dda:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    8dde:	ea54 0205 	orrs.w	r2, r4, r5
    8de2:	d1ed      	bne.n	8dc0 <_svfprintf_r+0x798>
    8de4:	e00c      	b.n	8e00 <_svfprintf_r+0x7d8>
    8de6:	b933      	cbnz	r3, 8df6 <_svfprintf_r+0x7ce>
    8de8:	07fb      	lsls	r3, r7, #31
    8dea:	d507      	bpl.n	8dfc <_svfprintf_r+0x7d4>
    8dec:	ac42      	add	r4, sp, #264	; 0x108
    8dee:	2330      	movs	r3, #48	; 0x30
    8df0:	f804 3d41 	strb.w	r3, [r4, #-65]!
    8df4:	e003      	b.n	8dfe <_svfprintf_r+0x7d6>
    8df6:	ad32      	add	r5, sp, #200	; 0xc8
    8df8:	9507      	str	r5, [sp, #28]
    8dfa:	e001      	b.n	8e00 <_svfprintf_r+0x7d8>
    8dfc:	ac32      	add	r4, sp, #200	; 0xc8
    8dfe:	9407      	str	r4, [sp, #28]
    8e00:	9c07      	ldr	r4, [sp, #28]
    8e02:	464d      	mov	r5, r9
    8e04:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
    8e08:	ebc4 0909 	rsb	r9, r4, r9
    8e0c:	2400      	movs	r4, #0
    8e0e:	e012      	b.n	8e36 <_svfprintf_r+0x80e>
    8e10:	9d08      	ldr	r5, [sp, #32]
    8e12:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    8e16:	2d00      	cmp	r5, #0
    8e18:	f000 8388 	beq.w	952c <_svfprintf_r+0xf04>
    8e1c:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
    8e20:	2500      	movs	r5, #0
    8e22:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    8e26:	a828      	add	r0, sp, #160	; 0xa0
    8e28:	f04f 0901 	mov.w	r9, #1
    8e2c:	462c      	mov	r4, r5
    8e2e:	9007      	str	r0, [sp, #28]
    8e30:	e001      	b.n	8e36 <_svfprintf_r+0x80e>
    8e32:	4605      	mov	r5, r0
    8e34:	462c      	mov	r4, r5
    8e36:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    8e3a:	45a9      	cmp	r9, r5
    8e3c:	bfac      	ite	ge
    8e3e:	4649      	movge	r1, r9
    8e40:	4629      	movlt	r1, r5
    8e42:	910a      	str	r1, [sp, #40]	; 0x28
    8e44:	b10b      	cbz	r3, 8e4a <_svfprintf_r+0x822>
    8e46:	3101      	adds	r1, #1
    8e48:	910a      	str	r1, [sp, #40]	; 0x28
    8e4a:	f017 0302 	ands.w	r3, r7, #2
    8e4e:	9311      	str	r3, [sp, #68]	; 0x44
    8e50:	d002      	beq.n	8e58 <_svfprintf_r+0x830>
    8e52:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e54:	3002      	adds	r0, #2
    8e56:	900a      	str	r0, [sp, #40]	; 0x28
    8e58:	f017 0384 	ands.w	r3, r7, #132	; 0x84
    8e5c:	9319      	str	r3, [sp, #100]	; 0x64
    8e5e:	d140      	bne.n	8ee2 <_svfprintf_r+0x8ba>
    8e60:	980e      	ldr	r0, [sp, #56]	; 0x38
    8e62:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e64:	ebc1 0c00 	rsb	ip, r1, r0
    8e68:	f1bc 0f00 	cmp.w	ip, #0
    8e6c:	dd39      	ble.n	8ee2 <_svfprintf_r+0x8ba>
    8e6e:	4b17      	ldr	r3, [pc, #92]	; (8ecc <_svfprintf_r+0x8a4>)
    8e70:	6033      	str	r3, [r6, #0]
    8e72:	f1bc 0f10 	cmp.w	ip, #16
    8e76:	dd1b      	ble.n	8eb0 <_svfprintf_r+0x888>
    8e78:	2310      	movs	r3, #16
    8e7a:	6073      	str	r3, [r6, #4]
    8e7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8e7e:	3310      	adds	r3, #16
    8e80:	9327      	str	r3, [sp, #156]	; 0x9c
    8e82:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8e84:	3301      	adds	r3, #1
    8e86:	2b07      	cmp	r3, #7
    8e88:	9326      	str	r3, [sp, #152]	; 0x98
    8e8a:	dc01      	bgt.n	8e90 <_svfprintf_r+0x868>
    8e8c:	3608      	adds	r6, #8
    8e8e:	e00c      	b.n	8eaa <_svfprintf_r+0x882>
    8e90:	4650      	mov	r0, sl
    8e92:	4659      	mov	r1, fp
    8e94:	aa25      	add	r2, sp, #148	; 0x94
    8e96:	f8cd c018 	str.w	ip, [sp, #24]
    8e9a:	f005 fb8f 	bl	e5bc <__ssprint_r>
    8e9e:	f8dd c018 	ldr.w	ip, [sp, #24]
    8ea2:	2800      	cmp	r0, #0
    8ea4:	f040 8349 	bne.w	953a <_svfprintf_r+0xf12>
    8ea8:	ae32      	add	r6, sp, #200	; 0xc8
    8eaa:	f1ac 0c10 	sub.w	ip, ip, #16
    8eae:	e7de      	b.n	8e6e <_svfprintf_r+0x846>
    8eb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8eb2:	f8c6 c004 	str.w	ip, [r6, #4]
    8eb6:	4463      	add	r3, ip
    8eb8:	9327      	str	r3, [sp, #156]	; 0x9c
    8eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8ebc:	3301      	adds	r3, #1
    8ebe:	2b07      	cmp	r3, #7
    8ec0:	9326      	str	r3, [sp, #152]	; 0x98
    8ec2:	dc05      	bgt.n	8ed0 <_svfprintf_r+0x8a8>
    8ec4:	3608      	adds	r6, #8
    8ec6:	e00c      	b.n	8ee2 <_svfprintf_r+0x8ba>
    8ec8:	00010adf 	.word	0x00010adf
    8ecc:	00010a9e 	.word	0x00010a9e
    8ed0:	4650      	mov	r0, sl
    8ed2:	4659      	mov	r1, fp
    8ed4:	aa25      	add	r2, sp, #148	; 0x94
    8ed6:	f005 fb71 	bl	e5bc <__ssprint_r>
    8eda:	2800      	cmp	r0, #0
    8edc:	f040 832d 	bne.w	953a <_svfprintf_r+0xf12>
    8ee0:	ae32      	add	r6, sp, #200	; 0xc8
    8ee2:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    8ee6:	b1bb      	cbz	r3, 8f18 <_svfprintf_r+0x8f0>
    8ee8:	f10d 0377 	add.w	r3, sp, #119	; 0x77
    8eec:	6033      	str	r3, [r6, #0]
    8eee:	2301      	movs	r3, #1
    8ef0:	6073      	str	r3, [r6, #4]
    8ef2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8ef4:	3301      	adds	r3, #1
    8ef6:	9327      	str	r3, [sp, #156]	; 0x9c
    8ef8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8efa:	3301      	adds	r3, #1
    8efc:	2b07      	cmp	r3, #7
    8efe:	9326      	str	r3, [sp, #152]	; 0x98
    8f00:	dc01      	bgt.n	8f06 <_svfprintf_r+0x8de>
    8f02:	3608      	adds	r6, #8
    8f04:	e008      	b.n	8f18 <_svfprintf_r+0x8f0>
    8f06:	4650      	mov	r0, sl
    8f08:	4659      	mov	r1, fp
    8f0a:	aa25      	add	r2, sp, #148	; 0x94
    8f0c:	f005 fb56 	bl	e5bc <__ssprint_r>
    8f10:	2800      	cmp	r0, #0
    8f12:	f040 8312 	bne.w	953a <_svfprintf_r+0xf12>
    8f16:	ae32      	add	r6, sp, #200	; 0xc8
    8f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f1a:	b1b3      	cbz	r3, 8f4a <_svfprintf_r+0x922>
    8f1c:	ab1e      	add	r3, sp, #120	; 0x78
    8f1e:	6033      	str	r3, [r6, #0]
    8f20:	2302      	movs	r3, #2
    8f22:	6073      	str	r3, [r6, #4]
    8f24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8f26:	3302      	adds	r3, #2
    8f28:	9327      	str	r3, [sp, #156]	; 0x9c
    8f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8f2c:	3301      	adds	r3, #1
    8f2e:	2b07      	cmp	r3, #7
    8f30:	9326      	str	r3, [sp, #152]	; 0x98
    8f32:	dc01      	bgt.n	8f38 <_svfprintf_r+0x910>
    8f34:	3608      	adds	r6, #8
    8f36:	e008      	b.n	8f4a <_svfprintf_r+0x922>
    8f38:	4650      	mov	r0, sl
    8f3a:	4659      	mov	r1, fp
    8f3c:	aa25      	add	r2, sp, #148	; 0x94
    8f3e:	f005 fb3d 	bl	e5bc <__ssprint_r>
    8f42:	2800      	cmp	r0, #0
    8f44:	f040 82f9 	bne.w	953a <_svfprintf_r+0xf12>
    8f48:	ae32      	add	r6, sp, #200	; 0xc8
    8f4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8f4c:	2b80      	cmp	r3, #128	; 0x80
    8f4e:	d13c      	bne.n	8fca <_svfprintf_r+0x9a2>
    8f50:	980e      	ldr	r0, [sp, #56]	; 0x38
    8f52:	990a      	ldr	r1, [sp, #40]	; 0x28
    8f54:	ebc1 0c00 	rsb	ip, r1, r0
    8f58:	f1bc 0f00 	cmp.w	ip, #0
    8f5c:	dd35      	ble.n	8fca <_svfprintf_r+0x9a2>
    8f5e:	4b9c      	ldr	r3, [pc, #624]	; (91d0 <_svfprintf_r+0xba8>)
    8f60:	6033      	str	r3, [r6, #0]
    8f62:	f1bc 0f10 	cmp.w	ip, #16
    8f66:	dd1b      	ble.n	8fa0 <_svfprintf_r+0x978>
    8f68:	2310      	movs	r3, #16
    8f6a:	6073      	str	r3, [r6, #4]
    8f6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8f6e:	3310      	adds	r3, #16
    8f70:	9327      	str	r3, [sp, #156]	; 0x9c
    8f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8f74:	3301      	adds	r3, #1
    8f76:	2b07      	cmp	r3, #7
    8f78:	9326      	str	r3, [sp, #152]	; 0x98
    8f7a:	dc01      	bgt.n	8f80 <_svfprintf_r+0x958>
    8f7c:	3608      	adds	r6, #8
    8f7e:	e00c      	b.n	8f9a <_svfprintf_r+0x972>
    8f80:	4650      	mov	r0, sl
    8f82:	4659      	mov	r1, fp
    8f84:	aa25      	add	r2, sp, #148	; 0x94
    8f86:	f8cd c018 	str.w	ip, [sp, #24]
    8f8a:	f005 fb17 	bl	e5bc <__ssprint_r>
    8f8e:	f8dd c018 	ldr.w	ip, [sp, #24]
    8f92:	2800      	cmp	r0, #0
    8f94:	f040 82d1 	bne.w	953a <_svfprintf_r+0xf12>
    8f98:	ae32      	add	r6, sp, #200	; 0xc8
    8f9a:	f1ac 0c10 	sub.w	ip, ip, #16
    8f9e:	e7de      	b.n	8f5e <_svfprintf_r+0x936>
    8fa0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8fa2:	f8c6 c004 	str.w	ip, [r6, #4]
    8fa6:	4463      	add	r3, ip
    8fa8:	9327      	str	r3, [sp, #156]	; 0x9c
    8faa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8fac:	3301      	adds	r3, #1
    8fae:	2b07      	cmp	r3, #7
    8fb0:	9326      	str	r3, [sp, #152]	; 0x98
    8fb2:	dc01      	bgt.n	8fb8 <_svfprintf_r+0x990>
    8fb4:	3608      	adds	r6, #8
    8fb6:	e008      	b.n	8fca <_svfprintf_r+0x9a2>
    8fb8:	4650      	mov	r0, sl
    8fba:	4659      	mov	r1, fp
    8fbc:	aa25      	add	r2, sp, #148	; 0x94
    8fbe:	f005 fafd 	bl	e5bc <__ssprint_r>
    8fc2:	2800      	cmp	r0, #0
    8fc4:	f040 82b9 	bne.w	953a <_svfprintf_r+0xf12>
    8fc8:	ae32      	add	r6, sp, #200	; 0xc8
    8fca:	ebc9 0505 	rsb	r5, r9, r5
    8fce:	2d00      	cmp	r5, #0
    8fd0:	dd2e      	ble.n	9030 <_svfprintf_r+0xa08>
    8fd2:	4b7f      	ldr	r3, [pc, #508]	; (91d0 <_svfprintf_r+0xba8>)
    8fd4:	6033      	str	r3, [r6, #0]
    8fd6:	2d10      	cmp	r5, #16
    8fd8:	dd16      	ble.n	9008 <_svfprintf_r+0x9e0>
    8fda:	2310      	movs	r3, #16
    8fdc:	6073      	str	r3, [r6, #4]
    8fde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8fe0:	3310      	adds	r3, #16
    8fe2:	9327      	str	r3, [sp, #156]	; 0x9c
    8fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8fe6:	3301      	adds	r3, #1
    8fe8:	2b07      	cmp	r3, #7
    8fea:	9326      	str	r3, [sp, #152]	; 0x98
    8fec:	dc01      	bgt.n	8ff2 <_svfprintf_r+0x9ca>
    8fee:	3608      	adds	r6, #8
    8ff0:	e008      	b.n	9004 <_svfprintf_r+0x9dc>
    8ff2:	4650      	mov	r0, sl
    8ff4:	4659      	mov	r1, fp
    8ff6:	aa25      	add	r2, sp, #148	; 0x94
    8ff8:	f005 fae0 	bl	e5bc <__ssprint_r>
    8ffc:	2800      	cmp	r0, #0
    8ffe:	f040 829c 	bne.w	953a <_svfprintf_r+0xf12>
    9002:	ae32      	add	r6, sp, #200	; 0xc8
    9004:	3d10      	subs	r5, #16
    9006:	e7e4      	b.n	8fd2 <_svfprintf_r+0x9aa>
    9008:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    900a:	6075      	str	r5, [r6, #4]
    900c:	441d      	add	r5, r3
    900e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9010:	9527      	str	r5, [sp, #156]	; 0x9c
    9012:	3301      	adds	r3, #1
    9014:	2b07      	cmp	r3, #7
    9016:	9326      	str	r3, [sp, #152]	; 0x98
    9018:	dc01      	bgt.n	901e <_svfprintf_r+0x9f6>
    901a:	3608      	adds	r6, #8
    901c:	e008      	b.n	9030 <_svfprintf_r+0xa08>
    901e:	4650      	mov	r0, sl
    9020:	4659      	mov	r1, fp
    9022:	aa25      	add	r2, sp, #148	; 0x94
    9024:	f005 faca 	bl	e5bc <__ssprint_r>
    9028:	2800      	cmp	r0, #0
    902a:	f040 8286 	bne.w	953a <_svfprintf_r+0xf12>
    902e:	ae32      	add	r6, sp, #200	; 0xc8
    9030:	05fd      	lsls	r5, r7, #23
    9032:	d405      	bmi.n	9040 <_svfprintf_r+0xa18>
    9034:	9c07      	ldr	r4, [sp, #28]
    9036:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9038:	e886 0210 	stmia.w	r6, {r4, r9}
    903c:	444b      	add	r3, r9
    903e:	e0da      	b.n	91f6 <_svfprintf_r+0xbce>
    9040:	9d08      	ldr	r5, [sp, #32]
    9042:	2d65      	cmp	r5, #101	; 0x65
    9044:	f340 81a7 	ble.w	9396 <_svfprintf_r+0xd6e>
    9048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    904c:	2200      	movs	r2, #0
    904e:	2300      	movs	r3, #0
    9050:	f007 f8f6 	bl	10240 <__aeabi_dcmpeq>
    9054:	2800      	cmp	r0, #0
    9056:	d059      	beq.n	910c <_svfprintf_r+0xae4>
    9058:	4b5e      	ldr	r3, [pc, #376]	; (91d4 <_svfprintf_r+0xbac>)
    905a:	6033      	str	r3, [r6, #0]
    905c:	2301      	movs	r3, #1
    905e:	6073      	str	r3, [r6, #4]
    9060:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9062:	3301      	adds	r3, #1
    9064:	9327      	str	r3, [sp, #156]	; 0x9c
    9066:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9068:	3301      	adds	r3, #1
    906a:	2b07      	cmp	r3, #7
    906c:	9326      	str	r3, [sp, #152]	; 0x98
    906e:	dc01      	bgt.n	9074 <_svfprintf_r+0xa4c>
    9070:	3608      	adds	r6, #8
    9072:	e008      	b.n	9086 <_svfprintf_r+0xa5e>
    9074:	4650      	mov	r0, sl
    9076:	4659      	mov	r1, fp
    9078:	aa25      	add	r2, sp, #148	; 0x94
    907a:	f005 fa9f 	bl	e5bc <__ssprint_r>
    907e:	2800      	cmp	r0, #0
    9080:	f040 825b 	bne.w	953a <_svfprintf_r+0xf12>
    9084:	ae32      	add	r6, sp, #200	; 0xc8
    9086:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9088:	9c09      	ldr	r4, [sp, #36]	; 0x24
    908a:	42a3      	cmp	r3, r4
    908c:	db02      	blt.n	9094 <_svfprintf_r+0xa6c>
    908e:	07fc      	lsls	r4, r7, #31
    9090:	f140 8202 	bpl.w	9498 <_svfprintf_r+0xe70>
    9094:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9096:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9098:	9d18      	ldr	r5, [sp, #96]	; 0x60
    909a:	6035      	str	r5, [r6, #0]
    909c:	4423      	add	r3, r4
    909e:	9327      	str	r3, [sp, #156]	; 0x9c
    90a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    90a2:	6074      	str	r4, [r6, #4]
    90a4:	3301      	adds	r3, #1
    90a6:	2b07      	cmp	r3, #7
    90a8:	9326      	str	r3, [sp, #152]	; 0x98
    90aa:	dc01      	bgt.n	90b0 <_svfprintf_r+0xa88>
    90ac:	3608      	adds	r6, #8
    90ae:	e008      	b.n	90c2 <_svfprintf_r+0xa9a>
    90b0:	4650      	mov	r0, sl
    90b2:	4659      	mov	r1, fp
    90b4:	aa25      	add	r2, sp, #148	; 0x94
    90b6:	f005 fa81 	bl	e5bc <__ssprint_r>
    90ba:	2800      	cmp	r0, #0
    90bc:	f040 823d 	bne.w	953a <_svfprintf_r+0xf12>
    90c0:	ae32      	add	r6, sp, #200	; 0xc8
    90c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    90c4:	1e6c      	subs	r4, r5, #1
    90c6:	2c00      	cmp	r4, #0
    90c8:	f340 81e6 	ble.w	9498 <_svfprintf_r+0xe70>
    90cc:	4b40      	ldr	r3, [pc, #256]	; (91d0 <_svfprintf_r+0xba8>)
    90ce:	6033      	str	r3, [r6, #0]
    90d0:	2c10      	cmp	r4, #16
    90d2:	dd16      	ble.n	9102 <_svfprintf_r+0xada>
    90d4:	2310      	movs	r3, #16
    90d6:	6073      	str	r3, [r6, #4]
    90d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    90da:	3310      	adds	r3, #16
    90dc:	9327      	str	r3, [sp, #156]	; 0x9c
    90de:	9b26      	ldr	r3, [sp, #152]	; 0x98
    90e0:	3301      	adds	r3, #1
    90e2:	2b07      	cmp	r3, #7
    90e4:	9326      	str	r3, [sp, #152]	; 0x98
    90e6:	dc01      	bgt.n	90ec <_svfprintf_r+0xac4>
    90e8:	3608      	adds	r6, #8
    90ea:	e008      	b.n	90fe <_svfprintf_r+0xad6>
    90ec:	4650      	mov	r0, sl
    90ee:	4659      	mov	r1, fp
    90f0:	aa25      	add	r2, sp, #148	; 0x94
    90f2:	f005 fa63 	bl	e5bc <__ssprint_r>
    90f6:	2800      	cmp	r0, #0
    90f8:	f040 821f 	bne.w	953a <_svfprintf_r+0xf12>
    90fc:	ae32      	add	r6, sp, #200	; 0xc8
    90fe:	3c10      	subs	r4, #16
    9100:	e7e4      	b.n	90cc <_svfprintf_r+0xaa4>
    9102:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9104:	6074      	str	r4, [r6, #4]
    9106:	441c      	add	r4, r3
    9108:	9427      	str	r4, [sp, #156]	; 0x9c
    910a:	e134      	b.n	9376 <_svfprintf_r+0xd4e>
    910c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    910e:	2b00      	cmp	r3, #0
    9110:	dc73      	bgt.n	91fa <_svfprintf_r+0xbd2>
    9112:	4b30      	ldr	r3, [pc, #192]	; (91d4 <_svfprintf_r+0xbac>)
    9114:	6033      	str	r3, [r6, #0]
    9116:	2301      	movs	r3, #1
    9118:	6073      	str	r3, [r6, #4]
    911a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    911c:	3301      	adds	r3, #1
    911e:	9327      	str	r3, [sp, #156]	; 0x9c
    9120:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9122:	3301      	adds	r3, #1
    9124:	2b07      	cmp	r3, #7
    9126:	9326      	str	r3, [sp, #152]	; 0x98
    9128:	dc01      	bgt.n	912e <_svfprintf_r+0xb06>
    912a:	3608      	adds	r6, #8
    912c:	e008      	b.n	9140 <_svfprintf_r+0xb18>
    912e:	4650      	mov	r0, sl
    9130:	4659      	mov	r1, fp
    9132:	aa25      	add	r2, sp, #148	; 0x94
    9134:	f005 fa42 	bl	e5bc <__ssprint_r>
    9138:	2800      	cmp	r0, #0
    913a:	f040 81fe 	bne.w	953a <_svfprintf_r+0xf12>
    913e:	ae32      	add	r6, sp, #200	; 0xc8
    9140:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9142:	b923      	cbnz	r3, 914e <_svfprintf_r+0xb26>
    9144:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9146:	b914      	cbnz	r4, 914e <_svfprintf_r+0xb26>
    9148:	07f8      	lsls	r0, r7, #31
    914a:	f140 81a5 	bpl.w	9498 <_svfprintf_r+0xe70>
    914e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9150:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9152:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9154:	6035      	str	r5, [r6, #0]
    9156:	4423      	add	r3, r4
    9158:	9327      	str	r3, [sp, #156]	; 0x9c
    915a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    915c:	6074      	str	r4, [r6, #4]
    915e:	3301      	adds	r3, #1
    9160:	2b07      	cmp	r3, #7
    9162:	9326      	str	r3, [sp, #152]	; 0x98
    9164:	dc01      	bgt.n	916a <_svfprintf_r+0xb42>
    9166:	3608      	adds	r6, #8
    9168:	e008      	b.n	917c <_svfprintf_r+0xb54>
    916a:	4650      	mov	r0, sl
    916c:	4659      	mov	r1, fp
    916e:	aa25      	add	r2, sp, #148	; 0x94
    9170:	f005 fa24 	bl	e5bc <__ssprint_r>
    9174:	2800      	cmp	r0, #0
    9176:	f040 81e0 	bne.w	953a <_svfprintf_r+0xf12>
    917a:	ae32      	add	r6, sp, #200	; 0xc8
    917c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    917e:	4264      	negs	r4, r4
    9180:	2c00      	cmp	r4, #0
    9182:	dd32      	ble.n	91ea <_svfprintf_r+0xbc2>
    9184:	4b12      	ldr	r3, [pc, #72]	; (91d0 <_svfprintf_r+0xba8>)
    9186:	6033      	str	r3, [r6, #0]
    9188:	2c10      	cmp	r4, #16
    918a:	dd16      	ble.n	91ba <_svfprintf_r+0xb92>
    918c:	2310      	movs	r3, #16
    918e:	6073      	str	r3, [r6, #4]
    9190:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9192:	3310      	adds	r3, #16
    9194:	9327      	str	r3, [sp, #156]	; 0x9c
    9196:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9198:	3301      	adds	r3, #1
    919a:	2b07      	cmp	r3, #7
    919c:	9326      	str	r3, [sp, #152]	; 0x98
    919e:	dc01      	bgt.n	91a4 <_svfprintf_r+0xb7c>
    91a0:	3608      	adds	r6, #8
    91a2:	e008      	b.n	91b6 <_svfprintf_r+0xb8e>
    91a4:	4650      	mov	r0, sl
    91a6:	4659      	mov	r1, fp
    91a8:	aa25      	add	r2, sp, #148	; 0x94
    91aa:	f005 fa07 	bl	e5bc <__ssprint_r>
    91ae:	2800      	cmp	r0, #0
    91b0:	f040 81c3 	bne.w	953a <_svfprintf_r+0xf12>
    91b4:	ae32      	add	r6, sp, #200	; 0xc8
    91b6:	3c10      	subs	r4, #16
    91b8:	e7e4      	b.n	9184 <_svfprintf_r+0xb5c>
    91ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    91bc:	6074      	str	r4, [r6, #4]
    91be:	441c      	add	r4, r3
    91c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    91c2:	9427      	str	r4, [sp, #156]	; 0x9c
    91c4:	3301      	adds	r3, #1
    91c6:	2b07      	cmp	r3, #7
    91c8:	9326      	str	r3, [sp, #152]	; 0x98
    91ca:	dc05      	bgt.n	91d8 <_svfprintf_r+0xbb0>
    91cc:	3608      	adds	r6, #8
    91ce:	e00c      	b.n	91ea <_svfprintf_r+0xbc2>
    91d0:	00010aae 	.word	0x00010aae
    91d4:	00010af0 	.word	0x00010af0
    91d8:	4650      	mov	r0, sl
    91da:	4659      	mov	r1, fp
    91dc:	aa25      	add	r2, sp, #148	; 0x94
    91de:	f005 f9ed 	bl	e5bc <__ssprint_r>
    91e2:	2800      	cmp	r0, #0
    91e4:	f040 81a9 	bne.w	953a <_svfprintf_r+0xf12>
    91e8:	ae32      	add	r6, sp, #200	; 0xc8
    91ea:	9d07      	ldr	r5, [sp, #28]
    91ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
    91ee:	6035      	str	r5, [r6, #0]
    91f0:	6074      	str	r4, [r6, #4]
    91f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    91f4:	4423      	add	r3, r4
    91f6:	9327      	str	r3, [sp, #156]	; 0x9c
    91f8:	e0bd      	b.n	9376 <_svfprintf_r+0xd4e>
    91fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    91fc:	9d07      	ldr	r5, [sp, #28]
    91fe:	4681      	mov	r9, r0
    9200:	45a1      	cmp	r9, r4
    9202:	bfa8      	it	ge
    9204:	46a1      	movge	r9, r4
    9206:	f1b9 0f00 	cmp.w	r9, #0
    920a:	4405      	add	r5, r0
    920c:	dd15      	ble.n	923a <_svfprintf_r+0xc12>
    920e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9210:	9907      	ldr	r1, [sp, #28]
    9212:	444b      	add	r3, r9
    9214:	9327      	str	r3, [sp, #156]	; 0x9c
    9216:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9218:	3301      	adds	r3, #1
    921a:	2b07      	cmp	r3, #7
    921c:	e886 0202 	stmia.w	r6, {r1, r9}
    9220:	9326      	str	r3, [sp, #152]	; 0x98
    9222:	dc01      	bgt.n	9228 <_svfprintf_r+0xc00>
    9224:	3608      	adds	r6, #8
    9226:	e008      	b.n	923a <_svfprintf_r+0xc12>
    9228:	4650      	mov	r0, sl
    922a:	4659      	mov	r1, fp
    922c:	aa25      	add	r2, sp, #148	; 0x94
    922e:	f005 f9c5 	bl	e5bc <__ssprint_r>
    9232:	2800      	cmp	r0, #0
    9234:	f040 8181 	bne.w	953a <_svfprintf_r+0xf12>
    9238:	ae32      	add	r6, sp, #200	; 0xc8
    923a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    923e:	ebc9 0904 	rsb	r9, r9, r4
    9242:	f1b9 0f00 	cmp.w	r9, #0
    9246:	dd31      	ble.n	92ac <_svfprintf_r+0xc84>
    9248:	4b9a      	ldr	r3, [pc, #616]	; (94b4 <_svfprintf_r+0xe8c>)
    924a:	6033      	str	r3, [r6, #0]
    924c:	f1b9 0f10 	cmp.w	r9, #16
    9250:	dd17      	ble.n	9282 <_svfprintf_r+0xc5a>
    9252:	2310      	movs	r3, #16
    9254:	6073      	str	r3, [r6, #4]
    9256:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9258:	3310      	adds	r3, #16
    925a:	9327      	str	r3, [sp, #156]	; 0x9c
    925c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    925e:	3301      	adds	r3, #1
    9260:	2b07      	cmp	r3, #7
    9262:	9326      	str	r3, [sp, #152]	; 0x98
    9264:	dc01      	bgt.n	926a <_svfprintf_r+0xc42>
    9266:	3608      	adds	r6, #8
    9268:	e008      	b.n	927c <_svfprintf_r+0xc54>
    926a:	4650      	mov	r0, sl
    926c:	4659      	mov	r1, fp
    926e:	aa25      	add	r2, sp, #148	; 0x94
    9270:	f005 f9a4 	bl	e5bc <__ssprint_r>
    9274:	2800      	cmp	r0, #0
    9276:	f040 8160 	bne.w	953a <_svfprintf_r+0xf12>
    927a:	ae32      	add	r6, sp, #200	; 0xc8
    927c:	f1a9 0910 	sub.w	r9, r9, #16
    9280:	e7e2      	b.n	9248 <_svfprintf_r+0xc20>
    9282:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9284:	f8c6 9004 	str.w	r9, [r6, #4]
    9288:	444b      	add	r3, r9
    928a:	9327      	str	r3, [sp, #156]	; 0x9c
    928c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    928e:	3301      	adds	r3, #1
    9290:	2b07      	cmp	r3, #7
    9292:	9326      	str	r3, [sp, #152]	; 0x98
    9294:	dc01      	bgt.n	929a <_svfprintf_r+0xc72>
    9296:	3608      	adds	r6, #8
    9298:	e008      	b.n	92ac <_svfprintf_r+0xc84>
    929a:	4650      	mov	r0, sl
    929c:	4659      	mov	r1, fp
    929e:	aa25      	add	r2, sp, #148	; 0x94
    92a0:	f005 f98c 	bl	e5bc <__ssprint_r>
    92a4:	2800      	cmp	r0, #0
    92a6:	f040 8148 	bne.w	953a <_svfprintf_r+0xf12>
    92aa:	ae32      	add	r6, sp, #200	; 0xc8
    92ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    92ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    92b0:	9a07      	ldr	r2, [sp, #28]
    92b2:	4283      	cmp	r3, r0
    92b4:	4414      	add	r4, r2
    92b6:	db01      	blt.n	92bc <_svfprintf_r+0xc94>
    92b8:	07f9      	lsls	r1, r7, #31
    92ba:	d516      	bpl.n	92ea <_svfprintf_r+0xcc2>
    92bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    92be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    92c0:	9918      	ldr	r1, [sp, #96]	; 0x60
    92c2:	6031      	str	r1, [r6, #0]
    92c4:	4413      	add	r3, r2
    92c6:	9327      	str	r3, [sp, #156]	; 0x9c
    92c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    92ca:	6072      	str	r2, [r6, #4]
    92cc:	3301      	adds	r3, #1
    92ce:	2b07      	cmp	r3, #7
    92d0:	9326      	str	r3, [sp, #152]	; 0x98
    92d2:	dc01      	bgt.n	92d8 <_svfprintf_r+0xcb0>
    92d4:	3608      	adds	r6, #8
    92d6:	e008      	b.n	92ea <_svfprintf_r+0xcc2>
    92d8:	4650      	mov	r0, sl
    92da:	4659      	mov	r1, fp
    92dc:	aa25      	add	r2, sp, #148	; 0x94
    92de:	f005 f96d 	bl	e5bc <__ssprint_r>
    92e2:	2800      	cmp	r0, #0
    92e4:	f040 8129 	bne.w	953a <_svfprintf_r+0xf12>
    92e8:	ae32      	add	r6, sp, #200	; 0xc8
    92ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    92ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    92ee:	1b2d      	subs	r5, r5, r4
    92f0:	1ac3      	subs	r3, r0, r3
    92f2:	429d      	cmp	r5, r3
    92f4:	bfa8      	it	ge
    92f6:	461d      	movge	r5, r3
    92f8:	2d00      	cmp	r5, #0
    92fa:	dd14      	ble.n	9326 <_svfprintf_r+0xcfe>
    92fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    92fe:	442b      	add	r3, r5
    9300:	9327      	str	r3, [sp, #156]	; 0x9c
    9302:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9304:	3301      	adds	r3, #1
    9306:	2b07      	cmp	r3, #7
    9308:	e886 0030 	stmia.w	r6, {r4, r5}
    930c:	9326      	str	r3, [sp, #152]	; 0x98
    930e:	dc01      	bgt.n	9314 <_svfprintf_r+0xcec>
    9310:	3608      	adds	r6, #8
    9312:	e008      	b.n	9326 <_svfprintf_r+0xcfe>
    9314:	4650      	mov	r0, sl
    9316:	4659      	mov	r1, fp
    9318:	aa25      	add	r2, sp, #148	; 0x94
    931a:	f005 f94f 	bl	e5bc <__ssprint_r>
    931e:	2800      	cmp	r0, #0
    9320:	f040 810b 	bne.w	953a <_svfprintf_r+0xf12>
    9324:	ae32      	add	r6, sp, #200	; 0xc8
    9326:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9328:	9c09      	ldr	r4, [sp, #36]	; 0x24
    932a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    932e:	1ae3      	subs	r3, r4, r3
    9330:	1b5d      	subs	r5, r3, r5
    9332:	2d00      	cmp	r5, #0
    9334:	f340 80b0 	ble.w	9498 <_svfprintf_r+0xe70>
    9338:	4b5e      	ldr	r3, [pc, #376]	; (94b4 <_svfprintf_r+0xe8c>)
    933a:	6033      	str	r3, [r6, #0]
    933c:	2d10      	cmp	r5, #16
    933e:	dd16      	ble.n	936e <_svfprintf_r+0xd46>
    9340:	2310      	movs	r3, #16
    9342:	6073      	str	r3, [r6, #4]
    9344:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9346:	3310      	adds	r3, #16
    9348:	9327      	str	r3, [sp, #156]	; 0x9c
    934a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    934c:	3301      	adds	r3, #1
    934e:	2b07      	cmp	r3, #7
    9350:	9326      	str	r3, [sp, #152]	; 0x98
    9352:	dc01      	bgt.n	9358 <_svfprintf_r+0xd30>
    9354:	3608      	adds	r6, #8
    9356:	e008      	b.n	936a <_svfprintf_r+0xd42>
    9358:	4650      	mov	r0, sl
    935a:	4659      	mov	r1, fp
    935c:	aa25      	add	r2, sp, #148	; 0x94
    935e:	f005 f92d 	bl	e5bc <__ssprint_r>
    9362:	2800      	cmp	r0, #0
    9364:	f040 80e9 	bne.w	953a <_svfprintf_r+0xf12>
    9368:	ae32      	add	r6, sp, #200	; 0xc8
    936a:	3d10      	subs	r5, #16
    936c:	e7e4      	b.n	9338 <_svfprintf_r+0xd10>
    936e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9370:	6075      	str	r5, [r6, #4]
    9372:	441d      	add	r5, r3
    9374:	9527      	str	r5, [sp, #156]	; 0x9c
    9376:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9378:	3301      	adds	r3, #1
    937a:	2b07      	cmp	r3, #7
    937c:	9326      	str	r3, [sp, #152]	; 0x98
    937e:	f340 808a 	ble.w	9496 <_svfprintf_r+0xe6e>
    9382:	4650      	mov	r0, sl
    9384:	4659      	mov	r1, fp
    9386:	aa25      	add	r2, sp, #148	; 0x94
    9388:	f005 f918 	bl	e5bc <__ssprint_r>
    938c:	2800      	cmp	r0, #0
    938e:	f040 80d4 	bne.w	953a <_svfprintf_r+0xf12>
    9392:	ae32      	add	r6, sp, #200	; 0xc8
    9394:	e080      	b.n	9498 <_svfprintf_r+0xe70>
    9396:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9398:	2d01      	cmp	r5, #1
    939a:	dc01      	bgt.n	93a0 <_svfprintf_r+0xd78>
    939c:	07fa      	lsls	r2, r7, #31
    939e:	d56d      	bpl.n	947c <_svfprintf_r+0xe54>
    93a0:	2301      	movs	r3, #1
    93a2:	6073      	str	r3, [r6, #4]
    93a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    93a6:	9c07      	ldr	r4, [sp, #28]
    93a8:	6034      	str	r4, [r6, #0]
    93aa:	3301      	adds	r3, #1
    93ac:	9327      	str	r3, [sp, #156]	; 0x9c
    93ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
    93b0:	3301      	adds	r3, #1
    93b2:	2b07      	cmp	r3, #7
    93b4:	9326      	str	r3, [sp, #152]	; 0x98
    93b6:	dc01      	bgt.n	93bc <_svfprintf_r+0xd94>
    93b8:	3608      	adds	r6, #8
    93ba:	e008      	b.n	93ce <_svfprintf_r+0xda6>
    93bc:	4650      	mov	r0, sl
    93be:	4659      	mov	r1, fp
    93c0:	aa25      	add	r2, sp, #148	; 0x94
    93c2:	f005 f8fb 	bl	e5bc <__ssprint_r>
    93c6:	2800      	cmp	r0, #0
    93c8:	f040 80b7 	bne.w	953a <_svfprintf_r+0xf12>
    93cc:	ae32      	add	r6, sp, #200	; 0xc8
    93ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
    93d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    93d2:	9d18      	ldr	r5, [sp, #96]	; 0x60
    93d4:	6035      	str	r5, [r6, #0]
    93d6:	4423      	add	r3, r4
    93d8:	9327      	str	r3, [sp, #156]	; 0x9c
    93da:	9b26      	ldr	r3, [sp, #152]	; 0x98
    93dc:	6074      	str	r4, [r6, #4]
    93de:	3301      	adds	r3, #1
    93e0:	2b07      	cmp	r3, #7
    93e2:	9326      	str	r3, [sp, #152]	; 0x98
    93e4:	dc01      	bgt.n	93ea <_svfprintf_r+0xdc2>
    93e6:	3608      	adds	r6, #8
    93e8:	e008      	b.n	93fc <_svfprintf_r+0xdd4>
    93ea:	4650      	mov	r0, sl
    93ec:	4659      	mov	r1, fp
    93ee:	aa25      	add	r2, sp, #148	; 0x94
    93f0:	f005 f8e4 	bl	e5bc <__ssprint_r>
    93f4:	2800      	cmp	r0, #0
    93f6:	f040 80a0 	bne.w	953a <_svfprintf_r+0xf12>
    93fa:	ae32      	add	r6, sp, #200	; 0xc8
    93fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9400:	2200      	movs	r2, #0
    9402:	2300      	movs	r3, #0
    9404:	f006 ff1c 	bl	10240 <__aeabi_dcmpeq>
    9408:	9d09      	ldr	r5, [sp, #36]	; 0x24
    940a:	1e6c      	subs	r4, r5, #1
    940c:	b940      	cbnz	r0, 9420 <_svfprintf_r+0xdf8>
    940e:	9d07      	ldr	r5, [sp, #28]
    9410:	1c6b      	adds	r3, r5, #1
    9412:	e886 0018 	stmia.w	r6, {r3, r4}
    9416:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9418:	9c09      	ldr	r4, [sp, #36]	; 0x24
    941a:	3b01      	subs	r3, #1
    941c:	4423      	add	r3, r4
    941e:	e033      	b.n	9488 <_svfprintf_r+0xe60>
    9420:	2c00      	cmp	r4, #0
    9422:	dd34      	ble.n	948e <_svfprintf_r+0xe66>
    9424:	4b23      	ldr	r3, [pc, #140]	; (94b4 <_svfprintf_r+0xe8c>)
    9426:	6033      	str	r3, [r6, #0]
    9428:	2c10      	cmp	r4, #16
    942a:	dd15      	ble.n	9458 <_svfprintf_r+0xe30>
    942c:	2310      	movs	r3, #16
    942e:	6073      	str	r3, [r6, #4]
    9430:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9432:	3310      	adds	r3, #16
    9434:	9327      	str	r3, [sp, #156]	; 0x9c
    9436:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9438:	3301      	adds	r3, #1
    943a:	2b07      	cmp	r3, #7
    943c:	9326      	str	r3, [sp, #152]	; 0x98
    943e:	dc01      	bgt.n	9444 <_svfprintf_r+0xe1c>
    9440:	3608      	adds	r6, #8
    9442:	e007      	b.n	9454 <_svfprintf_r+0xe2c>
    9444:	4650      	mov	r0, sl
    9446:	4659      	mov	r1, fp
    9448:	aa25      	add	r2, sp, #148	; 0x94
    944a:	f005 f8b7 	bl	e5bc <__ssprint_r>
    944e:	2800      	cmp	r0, #0
    9450:	d173      	bne.n	953a <_svfprintf_r+0xf12>
    9452:	ae32      	add	r6, sp, #200	; 0xc8
    9454:	3c10      	subs	r4, #16
    9456:	e7e5      	b.n	9424 <_svfprintf_r+0xdfc>
    9458:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    945a:	6074      	str	r4, [r6, #4]
    945c:	441c      	add	r4, r3
    945e:	9427      	str	r4, [sp, #156]	; 0x9c
    9460:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9462:	3301      	adds	r3, #1
    9464:	2b07      	cmp	r3, #7
    9466:	9326      	str	r3, [sp, #152]	; 0x98
    9468:	dd10      	ble.n	948c <_svfprintf_r+0xe64>
    946a:	4650      	mov	r0, sl
    946c:	4659      	mov	r1, fp
    946e:	aa25      	add	r2, sp, #148	; 0x94
    9470:	f005 f8a4 	bl	e5bc <__ssprint_r>
    9474:	2800      	cmp	r0, #0
    9476:	d160      	bne.n	953a <_svfprintf_r+0xf12>
    9478:	ae32      	add	r6, sp, #200	; 0xc8
    947a:	e008      	b.n	948e <_svfprintf_r+0xe66>
    947c:	2301      	movs	r3, #1
    947e:	6073      	str	r3, [r6, #4]
    9480:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9482:	9d07      	ldr	r5, [sp, #28]
    9484:	6035      	str	r5, [r6, #0]
    9486:	3301      	adds	r3, #1
    9488:	9327      	str	r3, [sp, #156]	; 0x9c
    948a:	e7e9      	b.n	9460 <_svfprintf_r+0xe38>
    948c:	3608      	adds	r6, #8
    948e:	ab21      	add	r3, sp, #132	; 0x84
    9490:	6033      	str	r3, [r6, #0]
    9492:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    9494:	e6ac      	b.n	91f0 <_svfprintf_r+0xbc8>
    9496:	3608      	adds	r6, #8
    9498:	077b      	lsls	r3, r7, #29
    949a:	d40d      	bmi.n	94b8 <_svfprintf_r+0xe90>
    949c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    949e:	980a      	ldr	r0, [sp, #40]	; 0x28
    94a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    94a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    94a4:	42a0      	cmp	r0, r4
    94a6:	bfac      	ite	ge
    94a8:	182d      	addge	r5, r5, r0
    94aa:	192d      	addlt	r5, r5, r4
    94ac:	950f      	str	r5, [sp, #60]	; 0x3c
    94ae:	2b00      	cmp	r3, #0
    94b0:	d037      	beq.n	9522 <_svfprintf_r+0xefa>
    94b2:	e030      	b.n	9516 <_svfprintf_r+0xeee>
    94b4:	00010aae 	.word	0x00010aae
    94b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    94ba:	980a      	ldr	r0, [sp, #40]	; 0x28
    94bc:	1a2c      	subs	r4, r5, r0
    94be:	2c00      	cmp	r4, #0
    94c0:	ddec      	ble.n	949c <_svfprintf_r+0xe74>
    94c2:	4b23      	ldr	r3, [pc, #140]	; (9550 <_svfprintf_r+0xf28>)
    94c4:	6033      	str	r3, [r6, #0]
    94c6:	2c10      	cmp	r4, #16
    94c8:	dd14      	ble.n	94f4 <_svfprintf_r+0xecc>
    94ca:	2310      	movs	r3, #16
    94cc:	6073      	str	r3, [r6, #4]
    94ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    94d0:	3310      	adds	r3, #16
    94d2:	9327      	str	r3, [sp, #156]	; 0x9c
    94d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    94d6:	3301      	adds	r3, #1
    94d8:	2b07      	cmp	r3, #7
    94da:	9326      	str	r3, [sp, #152]	; 0x98
    94dc:	dc01      	bgt.n	94e2 <_svfprintf_r+0xeba>
    94de:	3608      	adds	r6, #8
    94e0:	e006      	b.n	94f0 <_svfprintf_r+0xec8>
    94e2:	4650      	mov	r0, sl
    94e4:	4659      	mov	r1, fp
    94e6:	aa25      	add	r2, sp, #148	; 0x94
    94e8:	f005 f868 	bl	e5bc <__ssprint_r>
    94ec:	bb28      	cbnz	r0, 953a <_svfprintf_r+0xf12>
    94ee:	ae32      	add	r6, sp, #200	; 0xc8
    94f0:	3c10      	subs	r4, #16
    94f2:	e7e6      	b.n	94c2 <_svfprintf_r+0xe9a>
    94f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    94f6:	6074      	str	r4, [r6, #4]
    94f8:	441c      	add	r4, r3
    94fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    94fc:	9427      	str	r4, [sp, #156]	; 0x9c
    94fe:	3301      	adds	r3, #1
    9500:	2b07      	cmp	r3, #7
    9502:	9326      	str	r3, [sp, #152]	; 0x98
    9504:	ddca      	ble.n	949c <_svfprintf_r+0xe74>
    9506:	4650      	mov	r0, sl
    9508:	4659      	mov	r1, fp
    950a:	aa25      	add	r2, sp, #148	; 0x94
    950c:	f005 f856 	bl	e5bc <__ssprint_r>
    9510:	2800      	cmp	r0, #0
    9512:	d0c3      	beq.n	949c <_svfprintf_r+0xe74>
    9514:	e011      	b.n	953a <_svfprintf_r+0xf12>
    9516:	4650      	mov	r0, sl
    9518:	4659      	mov	r1, fp
    951a:	aa25      	add	r2, sp, #148	; 0x94
    951c:	f005 f84e 	bl	e5bc <__ssprint_r>
    9520:	b958      	cbnz	r0, 953a <_svfprintf_r+0xf12>
    9522:	2300      	movs	r3, #0
    9524:	9326      	str	r3, [sp, #152]	; 0x98
    9526:	ae32      	add	r6, sp, #200	; 0xc8
    9528:	f7ff b8b3 	b.w	8692 <_svfprintf_r+0x6a>
    952c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    952e:	b123      	cbz	r3, 953a <_svfprintf_r+0xf12>
    9530:	4650      	mov	r0, sl
    9532:	4659      	mov	r1, fp
    9534:	aa25      	add	r2, sp, #148	; 0x94
    9536:	f005 f841 	bl	e5bc <__ssprint_r>
    953a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    953e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9540:	f013 0f40 	tst.w	r3, #64	; 0x40
    9544:	bf18      	it	ne
    9546:	f04f 30ff 	movne.w	r0, #4294967295
    954a:	b043      	add	sp, #268	; 0x10c
    954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9550:	00010a9e 	.word	0x00010a9e

00009554 <__ssvfscanf_r>:
    9554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9558:	461e      	mov	r6, r3
    955a:	898b      	ldrh	r3, [r1, #12]
    955c:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
    9560:	049d      	lsls	r5, r3, #18
    9562:	4681      	mov	r9, r0
    9564:	460c      	mov	r4, r1
    9566:	9209      	str	r2, [sp, #36]	; 0x24
    9568:	d406      	bmi.n	9578 <__ssvfscanf_r+0x24>
    956a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    956e:	818b      	strh	r3, [r1, #12]
    9570:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    9572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9576:	664b      	str	r3, [r1, #100]	; 0x64
    9578:	2500      	movs	r5, #0
    957a:	9508      	str	r5, [sp, #32]
    957c:	9506      	str	r5, [sp, #24]
    957e:	462f      	mov	r7, r5
    9580:	46aa      	mov	sl, r5
    9582:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9584:	f815 3b01 	ldrb.w	r3, [r5], #1
    9588:	9509      	str	r5, [sp, #36]	; 0x24
    958a:	930f      	str	r3, [sp, #60]	; 0x3c
    958c:	2b00      	cmp	r3, #0
    958e:	f000 8567 	beq.w	a060 <__ssvfscanf_r+0xb0c>
    9592:	4da5      	ldr	r5, [pc, #660]	; (9828 <__ssvfscanf_r+0x2d4>)
    9594:	6829      	ldr	r1, [r5, #0]
    9596:	18ca      	adds	r2, r1, r3
    9598:	7852      	ldrb	r2, [r2, #1]
    959a:	f002 0208 	and.w	r2, r2, #8
    959e:	f002 08ff 	and.w	r8, r2, #255	; 0xff
    95a2:	b1ba      	cbz	r2, 95d4 <__ssvfscanf_r+0x80>
    95a4:	6863      	ldr	r3, [r4, #4]
    95a6:	2b00      	cmp	r3, #0
    95a8:	dd0d      	ble.n	95c6 <__ssvfscanf_r+0x72>
    95aa:	6823      	ldr	r3, [r4, #0]
    95ac:	682a      	ldr	r2, [r5, #0]
    95ae:	7819      	ldrb	r1, [r3, #0]
    95b0:	440a      	add	r2, r1
    95b2:	7852      	ldrb	r2, [r2, #1]
    95b4:	0710      	lsls	r0, r2, #28
    95b6:	d5e4      	bpl.n	9582 <__ssvfscanf_r+0x2e>
    95b8:	6862      	ldr	r2, [r4, #4]
    95ba:	3301      	adds	r3, #1
    95bc:	3a01      	subs	r2, #1
    95be:	3701      	adds	r7, #1
    95c0:	6062      	str	r2, [r4, #4]
    95c2:	6023      	str	r3, [r4, #0]
    95c4:	e7ee      	b.n	95a4 <__ssvfscanf_r+0x50>
    95c6:	4648      	mov	r0, r9
    95c8:	4621      	mov	r1, r4
    95ca:	f005 fca2 	bl	ef12 <__ssrefill_r>
    95ce:	2800      	cmp	r0, #0
    95d0:	d0eb      	beq.n	95aa <__ssvfscanf_r+0x56>
    95d2:	e7d6      	b.n	9582 <__ssvfscanf_r+0x2e>
    95d4:	2b25      	cmp	r3, #37	; 0x25
    95d6:	d15c      	bne.n	9692 <__ssvfscanf_r+0x13e>
    95d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    95da:	4645      	mov	r5, r8
    95dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    95de:	7813      	ldrb	r3, [r2, #0]
    95e0:	3001      	adds	r0, #1
    95e2:	2b63      	cmp	r3, #99	; 0x63
    95e4:	9009      	str	r0, [sp, #36]	; 0x24
    95e6:	f000 809b 	beq.w	9720 <__ssvfscanf_r+0x1cc>
    95ea:	d82b      	bhi.n	9644 <__ssvfscanf_r+0xf0>
    95ec:	2b44      	cmp	r3, #68	; 0x44
    95ee:	d07c      	beq.n	96ea <__ssvfscanf_r+0x196>
    95f0:	d813      	bhi.n	961a <__ssvfscanf_r+0xc6>
    95f2:	2b2a      	cmp	r3, #42	; 0x2a
    95f4:	d067      	beq.n	96c6 <__ssvfscanf_r+0x172>
    95f6:	d805      	bhi.n	9604 <__ssvfscanf_r+0xb0>
    95f8:	2b00      	cmp	r3, #0
    95fa:	f000 852e 	beq.w	a05a <__ssvfscanf_r+0xb06>
    95fe:	2b25      	cmp	r3, #37	; 0x25
    9600:	d047      	beq.n	9692 <__ssvfscanf_r+0x13e>
    9602:	e0b4      	b.n	976e <__ssvfscanf_r+0x21a>
    9604:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9608:	2a09      	cmp	r2, #9
    960a:	f200 80b0 	bhi.w	976e <__ssvfscanf_r+0x21a>
    960e:	220a      	movs	r2, #10
    9610:	fb02 3505 	mla	r5, r2, r5, r3
    9614:	3d30      	subs	r5, #48	; 0x30
    9616:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9618:	e7e0      	b.n	95dc <__ssvfscanf_r+0x88>
    961a:	2b4c      	cmp	r3, #76	; 0x4c
    961c:	d05f      	beq.n	96de <__ssvfscanf_r+0x18a>
    961e:	d804      	bhi.n	962a <__ssvfscanf_r+0xd6>
    9620:	2b45      	cmp	r3, #69	; 0x45
    9622:	d070      	beq.n	9706 <__ssvfscanf_r+0x1b2>
    9624:	2b47      	cmp	r3, #71	; 0x47
    9626:	d06e      	beq.n	9706 <__ssvfscanf_r+0x1b2>
    9628:	e0a1      	b.n	976e <__ssvfscanf_r+0x21a>
    962a:	2b58      	cmp	r3, #88	; 0x58
    962c:	d065      	beq.n	96fa <__ssvfscanf_r+0x1a6>
    962e:	2b5b      	cmp	r3, #91	; 0x5b
    9630:	d06c      	beq.n	970c <__ssvfscanf_r+0x1b8>
    9632:	2b4f      	cmp	r3, #79	; 0x4f
    9634:	f040 809b 	bne.w	976e <__ssvfscanf_r+0x21a>
    9638:	4a7c      	ldr	r2, [pc, #496]	; (982c <__ssvfscanf_r+0x2d8>)
    963a:	9208      	str	r2, [sp, #32]
    963c:	f048 0801 	orr.w	r8, r8, #1
    9640:	2308      	movs	r3, #8
    9642:	e0a5      	b.n	9790 <__ssvfscanf_r+0x23c>
    9644:	2b6c      	cmp	r3, #108	; 0x6c
    9646:	d041      	beq.n	96cc <__ssvfscanf_r+0x178>
    9648:	d80e      	bhi.n	9668 <__ssvfscanf_r+0x114>
    964a:	2b67      	cmp	r3, #103	; 0x67
    964c:	d806      	bhi.n	965c <__ssvfscanf_r+0x108>
    964e:	2b65      	cmp	r3, #101	; 0x65
    9650:	d259      	bcs.n	9706 <__ssvfscanf_r+0x1b2>
    9652:	4977      	ldr	r1, [pc, #476]	; (9830 <__ssvfscanf_r+0x2dc>)
    9654:	9108      	str	r1, [sp, #32]
    9656:	220a      	movs	r2, #10
    9658:	9206      	str	r2, [sp, #24]
    965a:	e09a      	b.n	9792 <__ssvfscanf_r+0x23e>
    965c:	2b68      	cmp	r3, #104	; 0x68
    965e:	d041      	beq.n	96e4 <__ssvfscanf_r+0x190>
    9660:	2b69      	cmp	r3, #105	; 0x69
    9662:	f000 808d 	beq.w	9780 <__ssvfscanf_r+0x22c>
    9666:	e082      	b.n	976e <__ssvfscanf_r+0x21a>
    9668:	2b70      	cmp	r3, #112	; 0x70
    966a:	d05e      	beq.n	972a <__ssvfscanf_r+0x1d6>
    966c:	d808      	bhi.n	9680 <__ssvfscanf_r+0x12c>
    966e:	2b6e      	cmp	r3, #110	; 0x6e
    9670:	d061      	beq.n	9736 <__ssvfscanf_r+0x1e2>
    9672:	2b6f      	cmp	r3, #111	; 0x6f
    9674:	d17b      	bne.n	976e <__ssvfscanf_r+0x21a>
    9676:	4b6d      	ldr	r3, [pc, #436]	; (982c <__ssvfscanf_r+0x2d8>)
    9678:	9308      	str	r3, [sp, #32]
    967a:	2008      	movs	r0, #8
    967c:	9006      	str	r0, [sp, #24]
    967e:	e088      	b.n	9792 <__ssvfscanf_r+0x23e>
    9680:	2b75      	cmp	r3, #117	; 0x75
    9682:	d036      	beq.n	96f2 <__ssvfscanf_r+0x19e>
    9684:	2b78      	cmp	r3, #120	; 0x78
    9686:	d038      	beq.n	96fa <__ssvfscanf_r+0x1a6>
    9688:	2b73      	cmp	r3, #115	; 0x73
    968a:	d170      	bne.n	976e <__ssvfscanf_r+0x21a>
    968c:	f04f 0b02 	mov.w	fp, #2
    9690:	e081      	b.n	9796 <__ssvfscanf_r+0x242>
    9692:	6863      	ldr	r3, [r4, #4]
    9694:	2b00      	cmp	r3, #0
    9696:	dd0e      	ble.n	96b6 <__ssvfscanf_r+0x162>
    9698:	6823      	ldr	r3, [r4, #0]
    969a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    969c:	7819      	ldrb	r1, [r3, #0]
    969e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    96a2:	4291      	cmp	r1, r2
    96a4:	f040 84dc 	bne.w	a060 <__ssvfscanf_r+0xb0c>
    96a8:	6862      	ldr	r2, [r4, #4]
    96aa:	3301      	adds	r3, #1
    96ac:	3a01      	subs	r2, #1
    96ae:	6062      	str	r2, [r4, #4]
    96b0:	6023      	str	r3, [r4, #0]
    96b2:	3701      	adds	r7, #1
    96b4:	e765      	b.n	9582 <__ssvfscanf_r+0x2e>
    96b6:	4648      	mov	r0, r9
    96b8:	4621      	mov	r1, r4
    96ba:	f005 fc2a 	bl	ef12 <__ssrefill_r>
    96be:	2800      	cmp	r0, #0
    96c0:	d0ea      	beq.n	9698 <__ssvfscanf_r+0x144>
    96c2:	f000 bcc4 	b.w	a04e <__ssvfscanf_r+0xafa>
    96c6:	f048 0810 	orr.w	r8, r8, #16
    96ca:	e7a4      	b.n	9616 <__ssvfscanf_r+0xc2>
    96cc:	7853      	ldrb	r3, [r2, #1]
    96ce:	2b6c      	cmp	r3, #108	; 0x6c
    96d0:	d102      	bne.n	96d8 <__ssvfscanf_r+0x184>
    96d2:	3202      	adds	r2, #2
    96d4:	9209      	str	r2, [sp, #36]	; 0x24
    96d6:	e002      	b.n	96de <__ssvfscanf_r+0x18a>
    96d8:	f048 0801 	orr.w	r8, r8, #1
    96dc:	e79b      	b.n	9616 <__ssvfscanf_r+0xc2>
    96de:	f048 0802 	orr.w	r8, r8, #2
    96e2:	e798      	b.n	9616 <__ssvfscanf_r+0xc2>
    96e4:	f048 0804 	orr.w	r8, r8, #4
    96e8:	e795      	b.n	9616 <__ssvfscanf_r+0xc2>
    96ea:	f048 0801 	orr.w	r8, r8, #1
    96ee:	4850      	ldr	r0, [pc, #320]	; (9830 <__ssvfscanf_r+0x2dc>)
    96f0:	e000      	b.n	96f4 <__ssvfscanf_r+0x1a0>
    96f2:	484e      	ldr	r0, [pc, #312]	; (982c <__ssvfscanf_r+0x2d8>)
    96f4:	9008      	str	r0, [sp, #32]
    96f6:	210a      	movs	r1, #10
    96f8:	e045      	b.n	9786 <__ssvfscanf_r+0x232>
    96fa:	4a4c      	ldr	r2, [pc, #304]	; (982c <__ssvfscanf_r+0x2d8>)
    96fc:	9208      	str	r2, [sp, #32]
    96fe:	f448 7800 	orr.w	r8, r8, #512	; 0x200
    9702:	2310      	movs	r3, #16
    9704:	e044      	b.n	9790 <__ssvfscanf_r+0x23c>
    9706:	f04f 0b04 	mov.w	fp, #4
    970a:	e044      	b.n	9796 <__ssvfscanf_r+0x242>
    970c:	a812      	add	r0, sp, #72	; 0x48
    970e:	9909      	ldr	r1, [sp, #36]	; 0x24
    9710:	f003 fe2e 	bl	d370 <__sccl>
    9714:	f048 0840 	orr.w	r8, r8, #64	; 0x40
    9718:	9009      	str	r0, [sp, #36]	; 0x24
    971a:	f04f 0b01 	mov.w	fp, #1
    971e:	e03a      	b.n	9796 <__ssvfscanf_r+0x242>
    9720:	f048 0840 	orr.w	r8, r8, #64	; 0x40
    9724:	f04f 0b00 	mov.w	fp, #0
    9728:	e035      	b.n	9796 <__ssvfscanf_r+0x242>
    972a:	4840      	ldr	r0, [pc, #256]	; (982c <__ssvfscanf_r+0x2d8>)
    972c:	9008      	str	r0, [sp, #32]
    972e:	f448 7808 	orr.w	r8, r8, #544	; 0x220
    9732:	2110      	movs	r1, #16
    9734:	e027      	b.n	9786 <__ssvfscanf_r+0x232>
    9736:	f018 0f10 	tst.w	r8, #16
    973a:	f47f af22 	bne.w	9582 <__ssvfscanf_r+0x2e>
    973e:	f018 0f04 	tst.w	r8, #4
    9742:	f106 0104 	add.w	r1, r6, #4
    9746:	d002      	beq.n	974e <__ssvfscanf_r+0x1fa>
    9748:	6833      	ldr	r3, [r6, #0]
    974a:	801f      	strh	r7, [r3, #0]
    974c:	e004      	b.n	9758 <__ssvfscanf_r+0x204>
    974e:	f018 0f01 	tst.w	r8, #1
    9752:	d003      	beq.n	975c <__ssvfscanf_r+0x208>
    9754:	6833      	ldr	r3, [r6, #0]
    9756:	601f      	str	r7, [r3, #0]
    9758:	460e      	mov	r6, r1
    975a:	e712      	b.n	9582 <__ssvfscanf_r+0x2e>
    975c:	f018 0f02 	tst.w	r8, #2
    9760:	d0f8      	beq.n	9754 <__ssvfscanf_r+0x200>
    9762:	6830      	ldr	r0, [r6, #0]
    9764:	463a      	mov	r2, r7
    9766:	17fb      	asrs	r3, r7, #31
    9768:	e9c0 2300 	strd	r2, r3, [r0]
    976c:	e7f4      	b.n	9758 <__ssvfscanf_r+0x204>
    976e:	440b      	add	r3, r1
    9770:	785b      	ldrb	r3, [r3, #1]
    9772:	f003 0303 	and.w	r3, r3, #3
    9776:	2b01      	cmp	r3, #1
    9778:	d107      	bne.n	978a <__ssvfscanf_r+0x236>
    977a:	f048 0801 	orr.w	r8, r8, #1
    977e:	e004      	b.n	978a <__ssvfscanf_r+0x236>
    9780:	482b      	ldr	r0, [pc, #172]	; (9830 <__ssvfscanf_r+0x2dc>)
    9782:	9008      	str	r0, [sp, #32]
    9784:	2100      	movs	r1, #0
    9786:	9106      	str	r1, [sp, #24]
    9788:	e003      	b.n	9792 <__ssvfscanf_r+0x23e>
    978a:	4a29      	ldr	r2, [pc, #164]	; (9830 <__ssvfscanf_r+0x2dc>)
    978c:	9208      	str	r2, [sp, #32]
    978e:	230a      	movs	r3, #10
    9790:	9306      	str	r3, [sp, #24]
    9792:	f04f 0b03 	mov.w	fp, #3
    9796:	6863      	ldr	r3, [r4, #4]
    9798:	2b00      	cmp	r3, #0
    979a:	dd03      	ble.n	97a4 <__ssvfscanf_r+0x250>
    979c:	f018 0f40 	tst.w	r8, #64	; 0x40
    97a0:	d011      	beq.n	97c6 <__ssvfscanf_r+0x272>
    97a2:	e021      	b.n	97e8 <__ssvfscanf_r+0x294>
    97a4:	4648      	mov	r0, r9
    97a6:	4621      	mov	r1, r4
    97a8:	f005 fbb3 	bl	ef12 <__ssrefill_r>
    97ac:	2800      	cmp	r0, #0
    97ae:	d0f5      	beq.n	979c <__ssvfscanf_r+0x248>
    97b0:	f000 bc4d 	b.w	a04e <__ssvfscanf_r+0xafa>
    97b4:	6862      	ldr	r2, [r4, #4]
    97b6:	3a01      	subs	r2, #1
    97b8:	2a00      	cmp	r2, #0
    97ba:	f107 0701 	add.w	r7, r7, #1
    97be:	6062      	str	r2, [r4, #4]
    97c0:	dd0a      	ble.n	97d8 <__ssvfscanf_r+0x284>
    97c2:	3301      	adds	r3, #1
    97c4:	6023      	str	r3, [r4, #0]
    97c6:	6823      	ldr	r3, [r4, #0]
    97c8:	4917      	ldr	r1, [pc, #92]	; (9828 <__ssvfscanf_r+0x2d4>)
    97ca:	781a      	ldrb	r2, [r3, #0]
    97cc:	6809      	ldr	r1, [r1, #0]
    97ce:	440a      	add	r2, r1
    97d0:	7852      	ldrb	r2, [r2, #1]
    97d2:	0711      	lsls	r1, r2, #28
    97d4:	d4ee      	bmi.n	97b4 <__ssvfscanf_r+0x260>
    97d6:	e007      	b.n	97e8 <__ssvfscanf_r+0x294>
    97d8:	4648      	mov	r0, r9
    97da:	4621      	mov	r1, r4
    97dc:	f005 fb99 	bl	ef12 <__ssrefill_r>
    97e0:	2800      	cmp	r0, #0
    97e2:	d0f0      	beq.n	97c6 <__ssvfscanf_r+0x272>
    97e4:	f000 bc33 	b.w	a04e <__ssvfscanf_r+0xafa>
    97e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    97ec:	f1bb 0f03 	cmp.w	fp, #3
    97f0:	d805      	bhi.n	97fe <__ssvfscanf_r+0x2aa>
    97f2:	e8df f01b 	tbh	[pc, fp, lsl #1]
    97f6:	009d      	.short	0x009d
    97f8:	01af00ef 	.word	0x01af00ef
    97fc:	0286      	.short	0x0286
    97fe:	2d00      	cmp	r5, #0
    9800:	bf08      	it	eq
    9802:	2501      	moveq	r5, #1
    9804:	f018 0301 	ands.w	r3, r8, #1
    9808:	f008 0810 	and.w	r8, r8, #16
    980c:	d062      	beq.n	98d4 <__ssvfscanf_r+0x380>
    980e:	a810      	add	r0, sp, #64	; 0x40
    9810:	2100      	movs	r1, #0
    9812:	2208      	movs	r2, #8
    9814:	f7fe fd94 	bl	8340 <memset>
    9818:	f1b8 0f00 	cmp.w	r8, #0
    981c:	d10a      	bne.n	9834 <__ssvfscanf_r+0x2e0>
    981e:	f8d6 b000 	ldr.w	fp, [r6]
    9822:	3604      	adds	r6, #4
    9824:	e008      	b.n	9838 <__ssvfscanf_r+0x2e4>
    9826:	bf00      	nop
    9828:	20000498 	.word	0x20000498
    982c:	0000e369 	.word	0x0000e369
    9830:	0000e0c9 	.word	0x0000e0c9
    9834:	f04f 0b00 	mov.w	fp, #0
    9838:	2300      	movs	r3, #0
    983a:	9304      	str	r3, [sp, #16]
    983c:	f002 fc7a 	bl	c134 <__locale_mb_cur_max>
    9840:	9b04      	ldr	r3, [sp, #16]
    9842:	4283      	cmp	r3, r0
    9844:	f000 8403 	beq.w	a04e <__ssvfscanf_r+0xafa>
    9848:	6821      	ldr	r1, [r4, #0]
    984a:	aa52      	add	r2, sp, #328	; 0x148
    984c:	f811 0b01 	ldrb.w	r0, [r1], #1
    9850:	54d0      	strb	r0, [r2, r3]
    9852:	f103 0c01 	add.w	ip, r3, #1
    9856:	6863      	ldr	r3, [r4, #4]
    9858:	f8cd c014 	str.w	ip, [sp, #20]
    985c:	3b01      	subs	r3, #1
    985e:	e884 000a 	stmia.w	r4, {r1, r3}
    9862:	ab10      	add	r3, sp, #64	; 0x40
    9864:	9300      	str	r3, [sp, #0]
    9866:	4648      	mov	r0, r9
    9868:	4663      	mov	r3, ip
    986a:	4659      	mov	r1, fp
    986c:	f002 ff10 	bl	c690 <_mbrtowc_r>
    9870:	1c42      	adds	r2, r0, #1
    9872:	f8dd c014 	ldr.w	ip, [sp, #20]
    9876:	f000 83ea 	beq.w	a04e <__ssvfscanf_r+0xafa>
    987a:	b928      	cbnz	r0, 9888 <__ssvfscanf_r+0x334>
    987c:	f1b8 0f00 	cmp.w	r8, #0
    9880:	d104      	bne.n	988c <__ssvfscanf_r+0x338>
    9882:	f8cb 8000 	str.w	r8, [fp]
    9886:	e001      	b.n	988c <__ssvfscanf_r+0x338>
    9888:	3002      	adds	r0, #2
    988a:	d00a      	beq.n	98a2 <__ssvfscanf_r+0x34e>
    988c:	4467      	add	r7, ip
    988e:	3d01      	subs	r5, #1
    9890:	f1b8 0f00 	cmp.w	r8, #0
    9894:	d103      	bne.n	989e <__ssvfscanf_r+0x34a>
    9896:	f10b 0b04 	add.w	fp, fp, #4
    989a:	46c4      	mov	ip, r8
    989c:	e001      	b.n	98a2 <__ssvfscanf_r+0x34e>
    989e:	f04f 0c00 	mov.w	ip, #0
    98a2:	6863      	ldr	r3, [r4, #4]
    98a4:	2b00      	cmp	r3, #0
    98a6:	dc11      	bgt.n	98cc <__ssvfscanf_r+0x378>
    98a8:	4648      	mov	r0, r9
    98aa:	4621      	mov	r1, r4
    98ac:	f8cd c014 	str.w	ip, [sp, #20]
    98b0:	f005 fb2f 	bl	ef12 <__ssrefill_r>
    98b4:	f8dd c014 	ldr.w	ip, [sp, #20]
    98b8:	b140      	cbz	r0, 98cc <__ssvfscanf_r+0x378>
    98ba:	f1bc 0f00 	cmp.w	ip, #0
    98be:	f040 83c6 	bne.w	a04e <__ssvfscanf_r+0xafa>
    98c2:	f1b8 0f00 	cmp.w	r8, #0
    98c6:	f000 80f9 	beq.w	9abc <__ssvfscanf_r+0x568>
    98ca:	e65a      	b.n	9582 <__ssvfscanf_r+0x2e>
    98cc:	2d00      	cmp	r5, #0
    98ce:	d0f8      	beq.n	98c2 <__ssvfscanf_r+0x36e>
    98d0:	4663      	mov	r3, ip
    98d2:	e7b2      	b.n	983a <__ssvfscanf_r+0x2e6>
    98d4:	f1b8 0f00 	cmp.w	r8, #0
    98d8:	d019      	beq.n	990e <__ssvfscanf_r+0x3ba>
    98da:	4698      	mov	r8, r3
    98dc:	6863      	ldr	r3, [r4, #4]
    98de:	6822      	ldr	r2, [r4, #0]
    98e0:	42ab      	cmp	r3, r5
    98e2:	da0e      	bge.n	9902 <__ssvfscanf_r+0x3ae>
    98e4:	4498      	add	r8, r3
    98e6:	1aed      	subs	r5, r5, r3
    98e8:	4413      	add	r3, r2
    98ea:	6023      	str	r3, [r4, #0]
    98ec:	4648      	mov	r0, r9
    98ee:	4621      	mov	r1, r4
    98f0:	f005 fb0f 	bl	ef12 <__ssrefill_r>
    98f4:	2800      	cmp	r0, #0
    98f6:	d0f1      	beq.n	98dc <__ssvfscanf_r+0x388>
    98f8:	f1b8 0f00 	cmp.w	r8, #0
    98fc:	f040 80fd 	bne.w	9afa <__ssvfscanf_r+0x5a6>
    9900:	e3a5      	b.n	a04e <__ssvfscanf_r+0xafa>
    9902:	1b5b      	subs	r3, r3, r5
    9904:	44a8      	add	r8, r5
    9906:	4415      	add	r5, r2
    9908:	6063      	str	r3, [r4, #4]
    990a:	6025      	str	r5, [r4, #0]
    990c:	e0f5      	b.n	9afa <__ssvfscanf_r+0x5a6>
    990e:	9400      	str	r4, [sp, #0]
    9910:	4648      	mov	r0, r9
    9912:	6831      	ldr	r1, [r6, #0]
    9914:	2201      	movs	r2, #1
    9916:	462b      	mov	r3, r5
    9918:	f106 0804 	add.w	r8, r6, #4
    991c:	f005 fb16 	bl	ef4c <_sfread_r>
    9920:	2800      	cmp	r0, #0
    9922:	f000 8394 	beq.w	a04e <__ssvfscanf_r+0xafa>
    9926:	4407      	add	r7, r0
    9928:	f10a 0a01 	add.w	sl, sl, #1
    992c:	4646      	mov	r6, r8
    992e:	e628      	b.n	9582 <__ssvfscanf_r+0x2e>
    9930:	2d00      	cmp	r5, #0
    9932:	bf08      	it	eq
    9934:	f04f 35ff 	moveq.w	r5, #4294967295
    9938:	f018 0f10 	tst.w	r8, #16
    993c:	d01e      	beq.n	997c <__ssvfscanf_r+0x428>
    993e:	f04f 0800 	mov.w	r8, #0
    9942:	6823      	ldr	r3, [r4, #0]
    9944:	a912      	add	r1, sp, #72	; 0x48
    9946:	781a      	ldrb	r2, [r3, #0]
    9948:	5c8a      	ldrb	r2, [r1, r2]
    994a:	b192      	cbz	r2, 9972 <__ssvfscanf_r+0x41e>
    994c:	6862      	ldr	r2, [r4, #4]
    994e:	f108 0801 	add.w	r8, r8, #1
    9952:	3a01      	subs	r2, #1
    9954:	3301      	adds	r3, #1
    9956:	4545      	cmp	r5, r8
    9958:	6062      	str	r2, [r4, #4]
    995a:	6023      	str	r3, [r4, #0]
    995c:	f000 80cd 	beq.w	9afa <__ssvfscanf_r+0x5a6>
    9960:	2a00      	cmp	r2, #0
    9962:	dcee      	bgt.n	9942 <__ssvfscanf_r+0x3ee>
    9964:	4648      	mov	r0, r9
    9966:	4621      	mov	r1, r4
    9968:	f005 fad3 	bl	ef12 <__ssrefill_r>
    996c:	2800      	cmp	r0, #0
    996e:	d0e8      	beq.n	9942 <__ssvfscanf_r+0x3ee>
    9970:	e0c3      	b.n	9afa <__ssvfscanf_r+0x5a6>
    9972:	f1b8 0f00 	cmp.w	r8, #0
    9976:	f040 80c0 	bne.w	9afa <__ssvfscanf_r+0x5a6>
    997a:	e371      	b.n	a060 <__ssvfscanf_r+0xb0c>
    997c:	f8d6 8000 	ldr.w	r8, [r6]
    9980:	f106 0b04 	add.w	fp, r6, #4
    9984:	4646      	mov	r6, r8
    9986:	6823      	ldr	r3, [r4, #0]
    9988:	a912      	add	r1, sp, #72	; 0x48
    998a:	781a      	ldrb	r2, [r3, #0]
    998c:	5c8a      	ldrb	r2, [r1, r2]
    998e:	b1ba      	cbz	r2, 99c0 <__ssvfscanf_r+0x46c>
    9990:	6862      	ldr	r2, [r4, #4]
    9992:	3a01      	subs	r2, #1
    9994:	6062      	str	r2, [r4, #4]
    9996:	1c5a      	adds	r2, r3, #1
    9998:	6022      	str	r2, [r4, #0]
    999a:	781b      	ldrb	r3, [r3, #0]
    999c:	f806 3b01 	strb.w	r3, [r6], #1
    99a0:	eb08 0305 	add.w	r3, r8, r5
    99a4:	429e      	cmp	r6, r3
    99a6:	d00b      	beq.n	99c0 <__ssvfscanf_r+0x46c>
    99a8:	6863      	ldr	r3, [r4, #4]
    99aa:	2b00      	cmp	r3, #0
    99ac:	dceb      	bgt.n	9986 <__ssvfscanf_r+0x432>
    99ae:	4648      	mov	r0, r9
    99b0:	4621      	mov	r1, r4
    99b2:	f005 faae 	bl	ef12 <__ssrefill_r>
    99b6:	2800      	cmp	r0, #0
    99b8:	d0e5      	beq.n	9986 <__ssvfscanf_r+0x432>
    99ba:	4546      	cmp	r6, r8
    99bc:	f000 8347 	beq.w	a04e <__ssvfscanf_r+0xafa>
    99c0:	ebb6 0808 	subs.w	r8, r6, r8
    99c4:	f000 834c 	beq.w	a060 <__ssvfscanf_r+0xb0c>
    99c8:	2300      	movs	r3, #0
    99ca:	7033      	strb	r3, [r6, #0]
    99cc:	f10a 0a01 	add.w	sl, sl, #1
    99d0:	465e      	mov	r6, fp
    99d2:	e092      	b.n	9afa <__ssvfscanf_r+0x5a6>
    99d4:	2d00      	cmp	r5, #0
    99d6:	bf08      	it	eq
    99d8:	f04f 35ff 	moveq.w	r5, #4294967295
    99dc:	f008 0010 	and.w	r0, r8, #16
    99e0:	f018 0301 	ands.w	r3, r8, #1
    99e4:	9007      	str	r0, [sp, #28]
    99e6:	d06c      	beq.n	9ac2 <__ssvfscanf_r+0x56e>
    99e8:	2100      	movs	r1, #0
    99ea:	a810      	add	r0, sp, #64	; 0x40
    99ec:	2208      	movs	r2, #8
    99ee:	f7fe fca7 	bl	8340 <memset>
    99f2:	9907      	ldr	r1, [sp, #28]
    99f4:	b919      	cbnz	r1, 99fe <__ssvfscanf_r+0x4aa>
    99f6:	f8d6 b000 	ldr.w	fp, [r6]
    99fa:	3604      	adds	r6, #4
    99fc:	e001      	b.n	9a02 <__ssvfscanf_r+0x4ae>
    99fe:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    9a02:	2300      	movs	r3, #0
    9a04:	6822      	ldr	r2, [r4, #0]
    9a06:	4992      	ldr	r1, [pc, #584]	; (9c50 <__ssvfscanf_r+0x6fc>)
    9a08:	7812      	ldrb	r2, [r2, #0]
    9a0a:	6809      	ldr	r1, [r1, #0]
    9a0c:	440a      	add	r2, r1
    9a0e:	7852      	ldrb	r2, [r2, #1]
    9a10:	0711      	lsls	r1, r2, #28
    9a12:	d44d      	bmi.n	9ab0 <__ssvfscanf_r+0x55c>
    9a14:	2d00      	cmp	r5, #0
    9a16:	d04b      	beq.n	9ab0 <__ssvfscanf_r+0x55c>
    9a18:	9304      	str	r3, [sp, #16]
    9a1a:	f002 fb8b 	bl	c134 <__locale_mb_cur_max>
    9a1e:	9b04      	ldr	r3, [sp, #16]
    9a20:	4283      	cmp	r3, r0
    9a22:	f000 8314 	beq.w	a04e <__ssvfscanf_r+0xafa>
    9a26:	6821      	ldr	r1, [r4, #0]
    9a28:	aa52      	add	r2, sp, #328	; 0x148
    9a2a:	f811 0b01 	ldrb.w	r0, [r1], #1
    9a2e:	54d0      	strb	r0, [r2, r3]
    9a30:	f103 0801 	add.w	r8, r3, #1
    9a34:	6863      	ldr	r3, [r4, #4]
    9a36:	3b01      	subs	r3, #1
    9a38:	e884 000a 	stmia.w	r4, {r1, r3}
    9a3c:	ab10      	add	r3, sp, #64	; 0x40
    9a3e:	9300      	str	r3, [sp, #0]
    9a40:	4648      	mov	r0, r9
    9a42:	4643      	mov	r3, r8
    9a44:	4659      	mov	r1, fp
    9a46:	f002 fe23 	bl	c690 <_mbrtowc_r>
    9a4a:	1c43      	adds	r3, r0, #1
    9a4c:	f000 82ff 	beq.w	a04e <__ssvfscanf_r+0xafa>
    9a50:	b910      	cbnz	r0, 9a58 <__ssvfscanf_r+0x504>
    9a52:	f8cb 0000 	str.w	r0, [fp]
    9a56:	e001      	b.n	9a5c <__ssvfscanf_r+0x508>
    9a58:	3002      	adds	r0, #2
    9a5a:	d01a      	beq.n	9a92 <__ssvfscanf_r+0x53e>
    9a5c:	f8db 0000 	ldr.w	r0, [fp]
    9a60:	f002 fb36 	bl	c0d0 <iswspace>
    9a64:	b160      	cbz	r0, 9a80 <__ssvfscanf_r+0x52c>
    9a66:	f1b8 0f00 	cmp.w	r8, #0
    9a6a:	d021      	beq.n	9ab0 <__ssvfscanf_r+0x55c>
    9a6c:	f108 38ff 	add.w	r8, r8, #4294967295
    9a70:	ab52      	add	r3, sp, #328	; 0x148
    9a72:	4648      	mov	r0, r9
    9a74:	f813 1008 	ldrb.w	r1, [r3, r8]
    9a78:	4622      	mov	r2, r4
    9a7a:	f005 fa0d 	bl	ee98 <_sungetc_r>
    9a7e:	e7f2      	b.n	9a66 <__ssvfscanf_r+0x512>
    9a80:	9a07      	ldr	r2, [sp, #28]
    9a82:	4447      	add	r7, r8
    9a84:	3d01      	subs	r5, #1
    9a86:	b91a      	cbnz	r2, 9a90 <__ssvfscanf_r+0x53c>
    9a88:	f10b 0b04 	add.w	fp, fp, #4
    9a8c:	4690      	mov	r8, r2
    9a8e:	e000      	b.n	9a92 <__ssvfscanf_r+0x53e>
    9a90:	4680      	mov	r8, r0
    9a92:	6863      	ldr	r3, [r4, #4]
    9a94:	2b00      	cmp	r3, #0
    9a96:	dc09      	bgt.n	9aac <__ssvfscanf_r+0x558>
    9a98:	4648      	mov	r0, r9
    9a9a:	4621      	mov	r1, r4
    9a9c:	f005 fa39 	bl	ef12 <__ssrefill_r>
    9aa0:	b120      	cbz	r0, 9aac <__ssvfscanf_r+0x558>
    9aa2:	f1b8 0f00 	cmp.w	r8, #0
    9aa6:	f040 82d2 	bne.w	a04e <__ssvfscanf_r+0xafa>
    9aaa:	e001      	b.n	9ab0 <__ssvfscanf_r+0x55c>
    9aac:	4643      	mov	r3, r8
    9aae:	e7a9      	b.n	9a04 <__ssvfscanf_r+0x4b0>
    9ab0:	9d07      	ldr	r5, [sp, #28]
    9ab2:	2d00      	cmp	r5, #0
    9ab4:	f47f ad65 	bne.w	9582 <__ssvfscanf_r+0x2e>
    9ab8:	f8cb 5000 	str.w	r5, [fp]
    9abc:	f10a 0a01 	add.w	sl, sl, #1
    9ac0:	e55f      	b.n	9582 <__ssvfscanf_r+0x2e>
    9ac2:	9807      	ldr	r0, [sp, #28]
    9ac4:	b1d8      	cbz	r0, 9afe <__ssvfscanf_r+0x5aa>
    9ac6:	4698      	mov	r8, r3
    9ac8:	6823      	ldr	r3, [r4, #0]
    9aca:	4961      	ldr	r1, [pc, #388]	; (9c50 <__ssvfscanf_r+0x6fc>)
    9acc:	781a      	ldrb	r2, [r3, #0]
    9ace:	6809      	ldr	r1, [r1, #0]
    9ad0:	440a      	add	r2, r1
    9ad2:	7852      	ldrb	r2, [r2, #1]
    9ad4:	0712      	lsls	r2, r2, #28
    9ad6:	d410      	bmi.n	9afa <__ssvfscanf_r+0x5a6>
    9ad8:	6862      	ldr	r2, [r4, #4]
    9ada:	f108 0801 	add.w	r8, r8, #1
    9ade:	3a01      	subs	r2, #1
    9ae0:	3301      	adds	r3, #1
    9ae2:	4545      	cmp	r5, r8
    9ae4:	6062      	str	r2, [r4, #4]
    9ae6:	6023      	str	r3, [r4, #0]
    9ae8:	d007      	beq.n	9afa <__ssvfscanf_r+0x5a6>
    9aea:	2a00      	cmp	r2, #0
    9aec:	dcec      	bgt.n	9ac8 <__ssvfscanf_r+0x574>
    9aee:	4648      	mov	r0, r9
    9af0:	4621      	mov	r1, r4
    9af2:	f005 fa0e 	bl	ef12 <__ssrefill_r>
    9af6:	2800      	cmp	r0, #0
    9af8:	d0e6      	beq.n	9ac8 <__ssvfscanf_r+0x574>
    9afa:	4447      	add	r7, r8
    9afc:	e541      	b.n	9582 <__ssvfscanf_r+0x2e>
    9afe:	f8d6 8000 	ldr.w	r8, [r6]
    9b02:	f106 0b04 	add.w	fp, r6, #4
    9b06:	4646      	mov	r6, r8
    9b08:	6823      	ldr	r3, [r4, #0]
    9b0a:	4951      	ldr	r1, [pc, #324]	; (9c50 <__ssvfscanf_r+0x6fc>)
    9b0c:	781a      	ldrb	r2, [r3, #0]
    9b0e:	6809      	ldr	r1, [r1, #0]
    9b10:	440a      	add	r2, r1
    9b12:	7852      	ldrb	r2, [r2, #1]
    9b14:	0710      	lsls	r0, r2, #28
    9b16:	d414      	bmi.n	9b42 <__ssvfscanf_r+0x5ee>
    9b18:	6862      	ldr	r2, [r4, #4]
    9b1a:	3a01      	subs	r2, #1
    9b1c:	6062      	str	r2, [r4, #4]
    9b1e:	1c5a      	adds	r2, r3, #1
    9b20:	6022      	str	r2, [r4, #0]
    9b22:	781b      	ldrb	r3, [r3, #0]
    9b24:	f806 3b01 	strb.w	r3, [r6], #1
    9b28:	eb08 0305 	add.w	r3, r8, r5
    9b2c:	429e      	cmp	r6, r3
    9b2e:	d008      	beq.n	9b42 <__ssvfscanf_r+0x5ee>
    9b30:	6863      	ldr	r3, [r4, #4]
    9b32:	2b00      	cmp	r3, #0
    9b34:	dce8      	bgt.n	9b08 <__ssvfscanf_r+0x5b4>
    9b36:	4648      	mov	r0, r9
    9b38:	4621      	mov	r1, r4
    9b3a:	f005 f9ea 	bl	ef12 <__ssrefill_r>
    9b3e:	2800      	cmp	r0, #0
    9b40:	d0e2      	beq.n	9b08 <__ssvfscanf_r+0x5b4>
    9b42:	2300      	movs	r3, #0
    9b44:	7033      	strb	r3, [r6, #0]
    9b46:	ebc8 0606 	rsb	r6, r8, r6
    9b4a:	4437      	add	r7, r6
    9b4c:	f10a 0a01 	add.w	sl, sl, #1
    9b50:	465e      	mov	r6, fp
    9b52:	e516      	b.n	9582 <__ssvfscanf_r+0x2e>
    9b54:	1e6b      	subs	r3, r5, #1
    9b56:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9b5a:	bf88      	it	hi
    9b5c:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
    9b60:	f04f 0c00 	mov.w	ip, #0
    9b64:	bf8a      	itet	hi
    9b66:	186b      	addhi	r3, r5, r1
    9b68:	2300      	movls	r3, #0
    9b6a:	f240 155d 	movwhi	r5, #349	; 0x15d
    9b6e:	f448 6858 	orr.w	r8, r8, #3456	; 0xd80
    9b72:	f8cd c01c 	str.w	ip, [sp, #28]
    9b76:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
    9b7a:	6821      	ldr	r1, [r4, #0]
    9b7c:	780a      	ldrb	r2, [r1, #0]
    9b7e:	2a39      	cmp	r2, #57	; 0x39
    9b80:	d809      	bhi.n	9b96 <__ssvfscanf_r+0x642>
    9b82:	2a38      	cmp	r2, #56	; 0x38
    9b84:	d238      	bcs.n	9bf8 <__ssvfscanf_r+0x6a4>
    9b86:	2a30      	cmp	r2, #48	; 0x30
    9b88:	d014      	beq.n	9bb4 <__ssvfscanf_r+0x660>
    9b8a:	d82e      	bhi.n	9bea <__ssvfscanf_r+0x696>
    9b8c:	2a2b      	cmp	r2, #43	; 0x2b
    9b8e:	d041      	beq.n	9c14 <__ssvfscanf_r+0x6c0>
    9b90:	2a2d      	cmp	r2, #45	; 0x2d
    9b92:	d03f      	beq.n	9c14 <__ssvfscanf_r+0x6c0>
    9b94:	e069      	b.n	9c6a <__ssvfscanf_r+0x716>
    9b96:	2a58      	cmp	r2, #88	; 0x58
    9b98:	d042      	beq.n	9c20 <__ssvfscanf_r+0x6cc>
    9b9a:	d804      	bhi.n	9ba6 <__ssvfscanf_r+0x652>
    9b9c:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    9ba0:	2805      	cmp	r0, #5
    9ba2:	d931      	bls.n	9c08 <__ssvfscanf_r+0x6b4>
    9ba4:	e061      	b.n	9c6a <__ssvfscanf_r+0x716>
    9ba6:	2a61      	cmp	r2, #97	; 0x61
    9ba8:	d35f      	bcc.n	9c6a <__ssvfscanf_r+0x716>
    9baa:	2a66      	cmp	r2, #102	; 0x66
    9bac:	d92c      	bls.n	9c08 <__ssvfscanf_r+0x6b4>
    9bae:	2a78      	cmp	r2, #120	; 0x78
    9bb0:	d036      	beq.n	9c20 <__ssvfscanf_r+0x6cc>
    9bb2:	e05a      	b.n	9c6a <__ssvfscanf_r+0x716>
    9bb4:	f418 6f00 	tst.w	r8, #2048	; 0x800
    9bb8:	d03d      	beq.n	9c36 <__ssvfscanf_r+0x6e2>
    9bba:	9806      	ldr	r0, [sp, #24]
    9bbc:	b918      	cbnz	r0, 9bc6 <__ssvfscanf_r+0x672>
    9bbe:	2008      	movs	r0, #8
    9bc0:	f448 7800 	orr.w	r8, r8, #512	; 0x200
    9bc4:	9006      	str	r0, [sp, #24]
    9bc6:	f418 6f80 	tst.w	r8, #1024	; 0x400
    9bca:	d002      	beq.n	9bd2 <__ssvfscanf_r+0x67e>
    9bcc:	f428 68b0 	bic.w	r8, r8, #1408	; 0x580
    9bd0:	e031      	b.n	9c36 <__ssvfscanf_r+0x6e2>
    9bd2:	f428 7860 	bic.w	r8, r8, #896	; 0x380
    9bd6:	b10b      	cbz	r3, 9bdc <__ssvfscanf_r+0x688>
    9bd8:	3b01      	subs	r3, #1
    9bda:	3501      	adds	r5, #1
    9bdc:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9be0:	f10c 0c01 	add.w	ip, ip, #1
    9be4:	f8cd c01c 	str.w	ip, [sp, #28]
    9be8:	e029      	b.n	9c3e <__ssvfscanf_r+0x6ea>
    9bea:	f8dd c018 	ldr.w	ip, [sp, #24]
    9bee:	4819      	ldr	r0, [pc, #100]	; (9c54 <__ssvfscanf_r+0x700>)
    9bf0:	f930 001c 	ldrsh.w	r0, [r0, ip, lsl #1]
    9bf4:	9006      	str	r0, [sp, #24]
    9bf6:	e00a      	b.n	9c0e <__ssvfscanf_r+0x6ba>
    9bf8:	f8dd c018 	ldr.w	ip, [sp, #24]
    9bfc:	4815      	ldr	r0, [pc, #84]	; (9c54 <__ssvfscanf_r+0x700>)
    9bfe:	f930 001c 	ldrsh.w	r0, [r0, ip, lsl #1]
    9c02:	9006      	str	r0, [sp, #24]
    9c04:	2808      	cmp	r0, #8
    9c06:	e001      	b.n	9c0c <__ssvfscanf_r+0x6b8>
    9c08:	9806      	ldr	r0, [sp, #24]
    9c0a:	280a      	cmp	r0, #10
    9c0c:	dd2d      	ble.n	9c6a <__ssvfscanf_r+0x716>
    9c0e:	f428 6838 	bic.w	r8, r8, #2944	; 0xb80
    9c12:	e010      	b.n	9c36 <__ssvfscanf_r+0x6e2>
    9c14:	f018 0f80 	tst.w	r8, #128	; 0x80
    9c18:	d027      	beq.n	9c6a <__ssvfscanf_r+0x716>
    9c1a:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9c1e:	e00a      	b.n	9c36 <__ssvfscanf_r+0x6e2>
    9c20:	f408 60c0 	and.w	r0, r8, #1536	; 0x600
    9c24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    9c28:	d11f      	bne.n	9c6a <__ssvfscanf_r+0x716>
    9c2a:	f428 7800 	bic.w	r8, r8, #512	; 0x200
    9c2e:	2010      	movs	r0, #16
    9c30:	f448 68a0 	orr.w	r8, r8, #1280	; 0x500
    9c34:	9006      	str	r0, [sp, #24]
    9c36:	f88b 2000 	strb.w	r2, [fp]
    9c3a:	f10b 0b01 	add.w	fp, fp, #1
    9c3e:	6862      	ldr	r2, [r4, #4]
    9c40:	3a01      	subs	r2, #1
    9c42:	2a00      	cmp	r2, #0
    9c44:	6062      	str	r2, [r4, #4]
    9c46:	dd07      	ble.n	9c58 <__ssvfscanf_r+0x704>
    9c48:	3101      	adds	r1, #1
    9c4a:	6021      	str	r1, [r4, #0]
    9c4c:	e00b      	b.n	9c66 <__ssvfscanf_r+0x712>
    9c4e:	bf00      	nop
    9c50:	20000498 	.word	0x20000498
    9c54:	00010af2 	.word	0x00010af2
    9c58:	4648      	mov	r0, r9
    9c5a:	4621      	mov	r1, r4
    9c5c:	9304      	str	r3, [sp, #16]
    9c5e:	f005 f958 	bl	ef12 <__ssrefill_r>
    9c62:	9b04      	ldr	r3, [sp, #16]
    9c64:	b908      	cbnz	r0, 9c6a <__ssvfscanf_r+0x716>
    9c66:	3d01      	subs	r5, #1
    9c68:	d187      	bne.n	9b7a <__ssvfscanf_r+0x626>
    9c6a:	f418 7f80 	tst.w	r8, #256	; 0x100
    9c6e:	d00f      	beq.n	9c90 <__ssvfscanf_r+0x73c>
    9c70:	ab52      	add	r3, sp, #328	; 0x148
    9c72:	459b      	cmp	fp, r3
    9c74:	d908      	bls.n	9c88 <__ssvfscanf_r+0x734>
    9c76:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    9c7a:	4648      	mov	r0, r9
    9c7c:	4622      	mov	r2, r4
    9c7e:	f005 f90b 	bl	ee98 <_sungetc_r>
    9c82:	f10b 35ff 	add.w	r5, fp, #4294967295
    9c86:	46ab      	mov	fp, r5
    9c88:	ab52      	add	r3, sp, #328	; 0x148
    9c8a:	459b      	cmp	fp, r3
    9c8c:	f000 81e8 	beq.w	a060 <__ssvfscanf_r+0xb0c>
    9c90:	f018 0210 	ands.w	r2, r8, #16
    9c94:	d12d      	bne.n	9cf2 <__ssvfscanf_r+0x79e>
    9c96:	9b06      	ldr	r3, [sp, #24]
    9c98:	9d08      	ldr	r5, [sp, #32]
    9c9a:	f88b 2000 	strb.w	r2, [fp]
    9c9e:	4648      	mov	r0, r9
    9ca0:	a952      	add	r1, sp, #328	; 0x148
    9ca2:	47a8      	blx	r5
    9ca4:	f018 0f20 	tst.w	r8, #32
    9ca8:	f106 0304 	add.w	r3, r6, #4
    9cac:	d11c      	bne.n	9ce8 <__ssvfscanf_r+0x794>
    9cae:	f018 0f04 	tst.w	r8, #4
    9cb2:	d002      	beq.n	9cba <__ssvfscanf_r+0x766>
    9cb4:	6832      	ldr	r2, [r6, #0]
    9cb6:	8010      	strh	r0, [r2, #0]
    9cb8:	e018      	b.n	9cec <__ssvfscanf_r+0x798>
    9cba:	f018 0201 	ands.w	r2, r8, #1
    9cbe:	d113      	bne.n	9ce8 <__ssvfscanf_r+0x794>
    9cc0:	f018 0f02 	tst.w	r8, #2
    9cc4:	d010      	beq.n	9ce8 <__ssvfscanf_r+0x794>
    9cc6:	4baa      	ldr	r3, [pc, #680]	; (9f70 <__ssvfscanf_r+0xa1c>)
    9cc8:	9d08      	ldr	r5, [sp, #32]
    9cca:	429d      	cmp	r5, r3
    9ccc:	4648      	mov	r0, r9
    9cce:	a952      	add	r1, sp, #328	; 0x148
    9cd0:	9b06      	ldr	r3, [sp, #24]
    9cd2:	d102      	bne.n	9cda <__ssvfscanf_r+0x786>
    9cd4:	f004 fbce 	bl	e474 <_strtoull_r>
    9cd8:	e001      	b.n	9cde <__ssvfscanf_r+0x78a>
    9cda:	f004 fa85 	bl	e1e8 <_strtoll_r>
    9cde:	6833      	ldr	r3, [r6, #0]
    9ce0:	3604      	adds	r6, #4
    9ce2:	e9c3 0100 	strd	r0, r1, [r3]
    9ce6:	e002      	b.n	9cee <__ssvfscanf_r+0x79a>
    9ce8:	6832      	ldr	r2, [r6, #0]
    9cea:	6010      	str	r0, [r2, #0]
    9cec:	461e      	mov	r6, r3
    9cee:	f10a 0a01 	add.w	sl, sl, #1
    9cf2:	ab52      	add	r3, sp, #328	; 0x148
    9cf4:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9cf8:	ebc3 0b0b 	rsb	fp, r3, fp
    9cfc:	44e3      	add	fp, ip
    9cfe:	445f      	add	r7, fp
    9d00:	e43f      	b.n	9582 <__ssvfscanf_r+0x2e>
    9d02:	1e6b      	subs	r3, r5, #1
    9d04:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9d08:	d906      	bls.n	9d18 <__ssvfscanf_r+0x7c4>
    9d0a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    9d0e:	4415      	add	r5, r2
    9d10:	9502      	str	r5, [sp, #8]
    9d12:	f240 155d 	movw	r5, #349	; 0x15d
    9d16:	e001      	b.n	9d1c <__ssvfscanf_r+0x7c8>
    9d18:	2200      	movs	r2, #0
    9d1a:	9202      	str	r2, [sp, #8]
    9d1c:	2200      	movs	r2, #0
    9d1e:	f448 68f0 	orr.w	r8, r8, #1920	; 0x780
    9d22:	4613      	mov	r3, r2
    9d24:	920c      	str	r2, [sp, #48]	; 0x30
    9d26:	920b      	str	r2, [sp, #44]	; 0x2c
    9d28:	9207      	str	r2, [sp, #28]
    9d2a:	920a      	str	r2, [sp, #40]	; 0x28
    9d2c:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
    9d30:	6820      	ldr	r0, [r4, #0]
    9d32:	900d      	str	r0, [sp, #52]	; 0x34
    9d34:	7801      	ldrb	r1, [r0, #0]
    9d36:	2949      	cmp	r1, #73	; 0x49
    9d38:	d062      	beq.n	9e00 <__ssvfscanf_r+0x8ac>
    9d3a:	d814      	bhi.n	9d66 <__ssvfscanf_r+0x812>
    9d3c:	2939      	cmp	r1, #57	; 0x39
    9d3e:	d80c      	bhi.n	9d5a <__ssvfscanf_r+0x806>
    9d40:	2931      	cmp	r1, #49	; 0x31
    9d42:	d23a      	bcs.n	9dba <__ssvfscanf_r+0x866>
    9d44:	292d      	cmp	r1, #45	; 0x2d
    9d46:	d03f      	beq.n	9dc8 <__ssvfscanf_r+0x874>
    9d48:	d802      	bhi.n	9d50 <__ssvfscanf_r+0x7fc>
    9d4a:	292b      	cmp	r1, #43	; 0x2b
    9d4c:	d03c      	beq.n	9dc8 <__ssvfscanf_r+0x874>
    9d4e:	e0ba      	b.n	9ec6 <__ssvfscanf_r+0x972>
    9d50:	292e      	cmp	r1, #46	; 0x2e
    9d52:	d075      	beq.n	9e40 <__ssvfscanf_r+0x8ec>
    9d54:	2930      	cmp	r1, #48	; 0x30
    9d56:	d021      	beq.n	9d9c <__ssvfscanf_r+0x848>
    9d58:	e0b5      	b.n	9ec6 <__ssvfscanf_r+0x972>
    9d5a:	2945      	cmp	r1, #69	; 0x45
    9d5c:	d078      	beq.n	9e50 <__ssvfscanf_r+0x8fc>
    9d5e:	2946      	cmp	r1, #70	; 0x46
    9d60:	d062      	beq.n	9e28 <__ssvfscanf_r+0x8d4>
    9d62:	2941      	cmp	r1, #65	; 0x41
    9d64:	e00b      	b.n	9d7e <__ssvfscanf_r+0x82a>
    9d66:	2965      	cmp	r1, #101	; 0x65
    9d68:	d072      	beq.n	9e50 <__ssvfscanf_r+0x8fc>
    9d6a:	d80a      	bhi.n	9d82 <__ssvfscanf_r+0x82e>
    9d6c:	2954      	cmp	r1, #84	; 0x54
    9d6e:	d05f      	beq.n	9e30 <__ssvfscanf_r+0x8dc>
    9d70:	d802      	bhi.n	9d78 <__ssvfscanf_r+0x824>
    9d72:	294e      	cmp	r1, #78	; 0x4e
    9d74:	d02e      	beq.n	9dd4 <__ssvfscanf_r+0x880>
    9d76:	e0a6      	b.n	9ec6 <__ssvfscanf_r+0x972>
    9d78:	2959      	cmp	r1, #89	; 0x59
    9d7a:	d05d      	beq.n	9e38 <__ssvfscanf_r+0x8e4>
    9d7c:	2961      	cmp	r1, #97	; 0x61
    9d7e:	d03b      	beq.n	9df8 <__ssvfscanf_r+0x8a4>
    9d80:	e0a1      	b.n	9ec6 <__ssvfscanf_r+0x972>
    9d82:	296e      	cmp	r1, #110	; 0x6e
    9d84:	d026      	beq.n	9dd4 <__ssvfscanf_r+0x880>
    9d86:	d804      	bhi.n	9d92 <__ssvfscanf_r+0x83e>
    9d88:	2966      	cmp	r1, #102	; 0x66
    9d8a:	d04d      	beq.n	9e28 <__ssvfscanf_r+0x8d4>
    9d8c:	2969      	cmp	r1, #105	; 0x69
    9d8e:	d037      	beq.n	9e00 <__ssvfscanf_r+0x8ac>
    9d90:	e099      	b.n	9ec6 <__ssvfscanf_r+0x972>
    9d92:	2974      	cmp	r1, #116	; 0x74
    9d94:	d04c      	beq.n	9e30 <__ssvfscanf_r+0x8dc>
    9d96:	2979      	cmp	r1, #121	; 0x79
    9d98:	d04e      	beq.n	9e38 <__ssvfscanf_r+0x8e4>
    9d9a:	e094      	b.n	9ec6 <__ssvfscanf_r+0x972>
    9d9c:	f418 7f80 	tst.w	r8, #256	; 0x100
    9da0:	d00b      	beq.n	9dba <__ssvfscanf_r+0x866>
    9da2:	9907      	ldr	r1, [sp, #28]
    9da4:	9802      	ldr	r0, [sp, #8]
    9da6:	3101      	adds	r1, #1
    9da8:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9dac:	9107      	str	r1, [sp, #28]
    9dae:	2800      	cmp	r0, #0
    9db0:	d070      	beq.n	9e94 <__ssvfscanf_r+0x940>
    9db2:	3801      	subs	r0, #1
    9db4:	9002      	str	r0, [sp, #8]
    9db6:	3501      	adds	r5, #1
    9db8:	e06c      	b.n	9e94 <__ssvfscanf_r+0x940>
    9dba:	1898      	adds	r0, r3, r2
    9dbc:	2800      	cmp	r0, #0
    9dbe:	f040 8082 	bne.w	9ec6 <__ssvfscanf_r+0x972>
    9dc2:	f428 78c0 	bic.w	r8, r8, #384	; 0x180
    9dc6:	e061      	b.n	9e8c <__ssvfscanf_r+0x938>
    9dc8:	f018 0f80 	tst.w	r8, #128	; 0x80
    9dcc:	d07b      	beq.n	9ec6 <__ssvfscanf_r+0x972>
    9dce:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9dd2:	e05b      	b.n	9e8c <__ssvfscanf_r+0x938>
    9dd4:	b953      	cbnz	r3, 9dec <__ssvfscanf_r+0x898>
    9dd6:	9807      	ldr	r0, [sp, #28]
    9dd8:	b950      	cbnz	r0, 9df0 <__ssvfscanf_r+0x89c>
    9dda:	f408 60e0 	and.w	r0, r8, #1792	; 0x700
    9dde:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    9de2:	d105      	bne.n	9df0 <__ssvfscanf_r+0x89c>
    9de4:	f428 68f0 	bic.w	r8, r8, #1920	; 0x780
    9de8:	2301      	movs	r3, #1
    9dea:	e04f      	b.n	9e8c <__ssvfscanf_r+0x938>
    9dec:	2b02      	cmp	r3, #2
    9dee:	d04c      	beq.n	9e8a <__ssvfscanf_r+0x936>
    9df0:	2a01      	cmp	r2, #1
    9df2:	d016      	beq.n	9e22 <__ssvfscanf_r+0x8ce>
    9df4:	2a04      	cmp	r2, #4
    9df6:	e013      	b.n	9e20 <__ssvfscanf_r+0x8cc>
    9df8:	2b01      	cmp	r3, #1
    9dfa:	d164      	bne.n	9ec6 <__ssvfscanf_r+0x972>
    9dfc:	2302      	movs	r3, #2
    9dfe:	e045      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e00:	b95a      	cbnz	r2, 9e1a <__ssvfscanf_r+0x8c6>
    9e02:	9807      	ldr	r0, [sp, #28]
    9e04:	2800      	cmp	r0, #0
    9e06:	d160      	bne.n	9eca <__ssvfscanf_r+0x976>
    9e08:	f408 60e0 	and.w	r0, r8, #1792	; 0x700
    9e0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    9e10:	d15d      	bne.n	9ece <__ssvfscanf_r+0x97a>
    9e12:	f428 68f0 	bic.w	r8, r8, #1920	; 0x780
    9e16:	2201      	movs	r2, #1
    9e18:	e038      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e1a:	2a03      	cmp	r2, #3
    9e1c:	d001      	beq.n	9e22 <__ssvfscanf_r+0x8ce>
    9e1e:	2a05      	cmp	r2, #5
    9e20:	d151      	bne.n	9ec6 <__ssvfscanf_r+0x972>
    9e22:	3201      	adds	r2, #1
    9e24:	b2d2      	uxtb	r2, r2
    9e26:	e031      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e28:	2a02      	cmp	r2, #2
    9e2a:	d14c      	bne.n	9ec6 <__ssvfscanf_r+0x972>
    9e2c:	2203      	movs	r2, #3
    9e2e:	e02d      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e30:	2a06      	cmp	r2, #6
    9e32:	d148      	bne.n	9ec6 <__ssvfscanf_r+0x972>
    9e34:	2207      	movs	r2, #7
    9e36:	e029      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e38:	2a07      	cmp	r2, #7
    9e3a:	d144      	bne.n	9ec6 <__ssvfscanf_r+0x972>
    9e3c:	2208      	movs	r2, #8
    9e3e:	e025      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e40:	f418 7f00 	tst.w	r8, #512	; 0x200
    9e44:	d03f      	beq.n	9ec6 <__ssvfscanf_r+0x972>
    9e46:	9807      	ldr	r0, [sp, #28]
    9e48:	900a      	str	r0, [sp, #40]	; 0x28
    9e4a:	f428 7820 	bic.w	r8, r8, #640	; 0x280
    9e4e:	e01d      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e50:	f408 60a0 	and.w	r0, r8, #1280	; 0x500
    9e54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    9e58:	d005      	beq.n	9e66 <__ssvfscanf_r+0x912>
    9e5a:	f418 6f80 	tst.w	r8, #1024	; 0x400
    9e5e:	d032      	beq.n	9ec6 <__ssvfscanf_r+0x972>
    9e60:	9807      	ldr	r0, [sp, #28]
    9e62:	2800      	cmp	r0, #0
    9e64:	d033      	beq.n	9ece <__ssvfscanf_r+0x97a>
    9e66:	f418 7f00 	tst.w	r8, #512	; 0x200
    9e6a:	d107      	bne.n	9e7c <__ssvfscanf_r+0x928>
    9e6c:	9807      	ldr	r0, [sp, #28]
    9e6e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    9e72:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    9e76:	ebcc 0000 	rsb	r0, ip, r0
    9e7a:	900b      	str	r0, [sp, #44]	; 0x2c
    9e7c:	f428 68f0 	bic.w	r8, r8, #1920	; 0x780
    9e80:	2000      	movs	r0, #0
    9e82:	f448 78c0 	orr.w	r8, r8, #384	; 0x180
    9e86:	9007      	str	r0, [sp, #28]
    9e88:	e000      	b.n	9e8c <__ssvfscanf_r+0x938>
    9e8a:	2303      	movs	r3, #3
    9e8c:	f88b 1000 	strb.w	r1, [fp]
    9e90:	f10b 0b01 	add.w	fp, fp, #1
    9e94:	6861      	ldr	r1, [r4, #4]
    9e96:	3901      	subs	r1, #1
    9e98:	2900      	cmp	r1, #0
    9e9a:	f105 35ff 	add.w	r5, r5, #4294967295
    9e9e:	f107 0701 	add.w	r7, r7, #1
    9ea2:	6061      	str	r1, [r4, #4]
    9ea4:	dd03      	ble.n	9eae <__ssvfscanf_r+0x95a>
    9ea6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ea8:	1c41      	adds	r1, r0, #1
    9eaa:	6021      	str	r1, [r4, #0]
    9eac:	e008      	b.n	9ec0 <__ssvfscanf_r+0x96c>
    9eae:	4648      	mov	r0, r9
    9eb0:	4621      	mov	r1, r4
    9eb2:	9205      	str	r2, [sp, #20]
    9eb4:	9304      	str	r3, [sp, #16]
    9eb6:	f005 f82c 	bl	ef12 <__ssrefill_r>
    9eba:	9a05      	ldr	r2, [sp, #20]
    9ebc:	9b04      	ldr	r3, [sp, #16]
    9ebe:	b910      	cbnz	r0, 9ec6 <__ssvfscanf_r+0x972>
    9ec0:	2d00      	cmp	r5, #0
    9ec2:	f47f af35 	bne.w	9d30 <__ssvfscanf_r+0x7dc>
    9ec6:	9d07      	ldr	r5, [sp, #28]
    9ec8:	b10d      	cbz	r5, 9ece <__ssvfscanf_r+0x97a>
    9eca:	f428 7880 	bic.w	r8, r8, #256	; 0x100
    9ece:	3b01      	subs	r3, #1
    9ed0:	2b01      	cmp	r3, #1
    9ed2:	d80d      	bhi.n	9ef0 <__ssvfscanf_r+0x99c>
    9ed4:	aa52      	add	r2, sp, #328	; 0x148
    9ed6:	4593      	cmp	fp, r2
    9ed8:	465b      	mov	r3, fp
    9eda:	f240 80c1 	bls.w	a060 <__ssvfscanf_r+0xb0c>
    9ede:	4648      	mov	r0, r9
    9ee0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    9ee4:	4622      	mov	r2, r4
    9ee6:	f10b 3bff 	add.w	fp, fp, #4294967295
    9eea:	f004 ffd5 	bl	ee98 <_sungetc_r>
    9eee:	e7f1      	b.n	9ed4 <__ssvfscanf_r+0x980>
    9ef0:	1e53      	subs	r3, r2, #1
    9ef2:	2b06      	cmp	r3, #6
    9ef4:	d827      	bhi.n	9f46 <__ssvfscanf_r+0x9f2>
    9ef6:	2a02      	cmp	r2, #2
    9ef8:	d917      	bls.n	9f2a <__ssvfscanf_r+0x9d6>
    9efa:	1ed5      	subs	r5, r2, #3
    9efc:	b2ed      	uxtb	r5, r5
    9efe:	465b      	mov	r3, fp
    9f00:	ebc5 0c0b 	rsb	ip, r5, fp
    9f04:	4563      	cmp	r3, ip
    9f06:	d00c      	beq.n	9f22 <__ssvfscanf_r+0x9ce>
    9f08:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    9f0c:	9304      	str	r3, [sp, #16]
    9f0e:	4648      	mov	r0, r9
    9f10:	4622      	mov	r2, r4
    9f12:	f8cd c014 	str.w	ip, [sp, #20]
    9f16:	f004 ffbf 	bl	ee98 <_sungetc_r>
    9f1a:	f8dd c014 	ldr.w	ip, [sp, #20]
    9f1e:	9b04      	ldr	r3, [sp, #16]
    9f20:	e7f0      	b.n	9f04 <__ssvfscanf_r+0x9b0>
    9f22:	ebc5 0b0b 	rsb	fp, r5, fp
    9f26:	1b7f      	subs	r7, r7, r5
    9f28:	e00d      	b.n	9f46 <__ssvfscanf_r+0x9f2>
    9f2a:	aa52      	add	r2, sp, #328	; 0x148
    9f2c:	4593      	cmp	fp, r2
    9f2e:	465b      	mov	r3, fp
    9f30:	f240 8096 	bls.w	a060 <__ssvfscanf_r+0xb0c>
    9f34:	4648      	mov	r0, r9
    9f36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    9f3a:	4622      	mov	r2, r4
    9f3c:	f10b 3bff 	add.w	fp, fp, #4294967295
    9f40:	f004 ffaa 	bl	ee98 <_sungetc_r>
    9f44:	e7f1      	b.n	9f2a <__ssvfscanf_r+0x9d6>
    9f46:	f418 7f80 	tst.w	r8, #256	; 0x100
    9f4a:	d02e      	beq.n	9faa <__ssvfscanf_r+0xa56>
    9f4c:	f418 6f80 	tst.w	r8, #1024	; 0x400
    9f50:	d010      	beq.n	9f74 <__ssvfscanf_r+0xa20>
    9f52:	aa52      	add	r2, sp, #328	; 0x148
    9f54:	4593      	cmp	fp, r2
    9f56:	465b      	mov	r3, fp
    9f58:	f240 8082 	bls.w	a060 <__ssvfscanf_r+0xb0c>
    9f5c:	4648      	mov	r0, r9
    9f5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    9f62:	4622      	mov	r2, r4
    9f64:	f10b 3bff 	add.w	fp, fp, #4294967295
    9f68:	f004 ff96 	bl	ee98 <_sungetc_r>
    9f6c:	e7f1      	b.n	9f52 <__ssvfscanf_r+0x9fe>
    9f6e:	bf00      	nop
    9f70:	0000e369 	.word	0x0000e369
    9f74:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    9f78:	2965      	cmp	r1, #101	; 0x65
    9f7a:	f10b 35ff 	add.w	r5, fp, #4294967295
    9f7e:	f107 33ff 	add.w	r3, r7, #4294967295
    9f82:	d00a      	beq.n	9f9a <__ssvfscanf_r+0xa46>
    9f84:	2945      	cmp	r1, #69	; 0x45
    9f86:	d008      	beq.n	9f9a <__ssvfscanf_r+0xa46>
    9f88:	4648      	mov	r0, r9
    9f8a:	4622      	mov	r2, r4
    9f8c:	f004 ff84 	bl	ee98 <_sungetc_r>
    9f90:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
    9f94:	f1ab 0502 	sub.w	r5, fp, #2
    9f98:	1ebb      	subs	r3, r7, #2
    9f9a:	4648      	mov	r0, r9
    9f9c:	4622      	mov	r2, r4
    9f9e:	9304      	str	r3, [sp, #16]
    9fa0:	f004 ff7a 	bl	ee98 <_sungetc_r>
    9fa4:	9b04      	ldr	r3, [sp, #16]
    9fa6:	46ab      	mov	fp, r5
    9fa8:	461f      	mov	r7, r3
    9faa:	f018 0210 	ands.w	r2, r8, #16
    9fae:	f47f aae8 	bne.w	9582 <__ssvfscanf_r+0x2e>
    9fb2:	f408 63c0 	and.w	r3, r8, #1536	; 0x600
    9fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9fba:	f88b 2000 	strb.w	r2, [fp]
    9fbe:	d107      	bne.n	9fd0 <__ssvfscanf_r+0xa7c>
    9fc0:	9d07      	ldr	r5, [sp, #28]
    9fc2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    9fc6:	ebcc 0305 	rsb	r3, ip, r5
    9fca:	425a      	negs	r2, r3
    9fcc:	b96b      	cbnz	r3, 9fea <__ssvfscanf_r+0xa96>
    9fce:	e016      	b.n	9ffe <__ssvfscanf_r+0xaaa>
    9fd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9fd2:	b1a5      	cbz	r5, 9ffe <__ssvfscanf_r+0xaaa>
    9fd4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    9fd8:	4648      	mov	r0, r9
    9fda:	f10c 0101 	add.w	r1, ip, #1
    9fde:	230a      	movs	r3, #10
    9fe0:	f004 f872 	bl	e0c8 <_strtol_r>
    9fe4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    9fe8:	1b42      	subs	r2, r0, r5
    9fea:	f20d 239b 	addw	r3, sp, #667	; 0x29b
    9fee:	459b      	cmp	fp, r3
    9ff0:	bf28      	it	cs
    9ff2:	f20d 2b9a 	addwcs	fp, sp, #666	; 0x29a
    9ff6:	4658      	mov	r0, fp
    9ff8:	491c      	ldr	r1, [pc, #112]	; (a06c <__ssvfscanf_r+0xb18>)
    9ffa:	f7fe fa45 	bl	8488 <sprintf>
    9ffe:	2200      	movs	r2, #0
    a000:	4648      	mov	r0, r9
    a002:	a952      	add	r1, sp, #328	; 0x148
    a004:	f003 fa20 	bl	d448 <_strtod_r>
    a008:	f018 0f01 	tst.w	r8, #1
    a00c:	4602      	mov	r2, r0
    a00e:	460b      	mov	r3, r1
    a010:	f106 0504 	add.w	r5, r6, #4
    a014:	d102      	bne.n	a01c <__ssvfscanf_r+0xac8>
    a016:	f018 0f02 	tst.w	r8, #2
    a01a:	d003      	beq.n	a024 <__ssvfscanf_r+0xad0>
    a01c:	6831      	ldr	r1, [r6, #0]
    a01e:	e9c1 2300 	strd	r2, r3, [r1]
    a022:	e00f      	b.n	a044 <__ssvfscanf_r+0xaf0>
    a024:	6836      	ldr	r6, [r6, #0]
    a026:	9005      	str	r0, [sp, #20]
    a028:	9104      	str	r1, [sp, #16]
    a02a:	f003 f96f 	bl	d30c <__fpclassifyd>
    a02e:	9a05      	ldr	r2, [sp, #20]
    a030:	9b04      	ldr	r3, [sp, #16]
    a032:	b910      	cbnz	r0, a03a <__ssvfscanf_r+0xae6>
    a034:	f003 f9ce 	bl	d3d4 <nanf>
    a038:	e003      	b.n	a042 <__ssvfscanf_r+0xaee>
    a03a:	4610      	mov	r0, r2
    a03c:	4619      	mov	r1, r3
    a03e:	f006 f959 	bl	102f4 <__aeabi_d2f>
    a042:	6030      	str	r0, [r6, #0]
    a044:	f10a 0a01 	add.w	sl, sl, #1
    a048:	462e      	mov	r6, r5
    a04a:	f7ff ba9a 	b.w	9582 <__ssvfscanf_r+0x2e>
    a04e:	f1ba 0f00 	cmp.w	sl, #0
    a052:	d002      	beq.n	a05a <__ssvfscanf_r+0xb06>
    a054:	89a3      	ldrh	r3, [r4, #12]
    a056:	065b      	lsls	r3, r3, #25
    a058:	d502      	bpl.n	a060 <__ssvfscanf_r+0xb0c>
    a05a:	f04f 30ff 	mov.w	r0, #4294967295
    a05e:	e000      	b.n	a062 <__ssvfscanf_r+0xb0e>
    a060:	4650      	mov	r0, sl
    a062:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
    a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a06a:	bf00      	nop
    a06c:	00010b14 	.word	0x00010b14

0000a070 <__sprint_r>:
    a070:	6893      	ldr	r3, [r2, #8]
    a072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a076:	4681      	mov	r9, r0
    a078:	460f      	mov	r7, r1
    a07a:	4614      	mov	r4, r2
    a07c:	b91b      	cbnz	r3, a086 <__sprint_r+0x16>
    a07e:	6053      	str	r3, [r2, #4]
    a080:	4618      	mov	r0, r3
    a082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a086:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    a088:	049d      	lsls	r5, r3, #18
    a08a:	d51d      	bpl.n	a0c8 <__sprint_r+0x58>
    a08c:	6815      	ldr	r5, [r2, #0]
    a08e:	68a3      	ldr	r3, [r4, #8]
    a090:	3508      	adds	r5, #8
    a092:	b1bb      	cbz	r3, a0c4 <__sprint_r+0x54>
    a094:	f855 3c04 	ldr.w	r3, [r5, #-4]
    a098:	f855 ac08 	ldr.w	sl, [r5, #-8]
    a09c:	ea4f 0893 	mov.w	r8, r3, lsr #2
    a0a0:	2600      	movs	r6, #0
    a0a2:	4546      	cmp	r6, r8
    a0a4:	da09      	bge.n	a0ba <__sprint_r+0x4a>
    a0a6:	4648      	mov	r0, r9
    a0a8:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    a0ac:	463a      	mov	r2, r7
    a0ae:	f001 fd17 	bl	bae0 <_fputwc_r>
    a0b2:	1c43      	adds	r3, r0, #1
    a0b4:	d00a      	beq.n	a0cc <__sprint_r+0x5c>
    a0b6:	3601      	adds	r6, #1
    a0b8:	e7f3      	b.n	a0a2 <__sprint_r+0x32>
    a0ba:	68a3      	ldr	r3, [r4, #8]
    a0bc:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
    a0c0:	60a3      	str	r3, [r4, #8]
    a0c2:	e7e4      	b.n	a08e <__sprint_r+0x1e>
    a0c4:	4618      	mov	r0, r3
    a0c6:	e001      	b.n	a0cc <__sprint_r+0x5c>
    a0c8:	f001 fe7c 	bl	bdc4 <__sfvwrite_r>
    a0cc:	2300      	movs	r3, #0
    a0ce:	60a3      	str	r3, [r4, #8]
    a0d0:	6063      	str	r3, [r4, #4]
    a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a0d6 <_vfiprintf_r>:
    a0d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0da:	b0ad      	sub	sp, #180	; 0xb4
    a0dc:	4688      	mov	r8, r1
    a0de:	9202      	str	r2, [sp, #8]
    a0e0:	461c      	mov	r4, r3
    a0e2:	461e      	mov	r6, r3
    a0e4:	4683      	mov	fp, r0
    a0e6:	b118      	cbz	r0, a0f0 <_vfiprintf_r+0x1a>
    a0e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a0ea:	b90b      	cbnz	r3, a0f0 <_vfiprintf_r+0x1a>
    a0ec:	f001 fc2e 	bl	b94c <__sinit>
    a0f0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    a0f4:	0498      	lsls	r0, r3, #18
    a0f6:	d409      	bmi.n	a10c <_vfiprintf_r+0x36>
    a0f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a0fc:	f8a8 300c 	strh.w	r3, [r8, #12]
    a100:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
    a104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    a108:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
    a10c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    a110:	0719      	lsls	r1, r3, #28
    a112:	d509      	bpl.n	a128 <_vfiprintf_r+0x52>
    a114:	f8d8 3010 	ldr.w	r3, [r8, #16]
    a118:	b133      	cbz	r3, a128 <_vfiprintf_r+0x52>
    a11a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    a11e:	f003 031a 	and.w	r3, r3, #26
    a122:	2b0a      	cmp	r3, #10
    a124:	d114      	bne.n	a150 <_vfiprintf_r+0x7a>
    a126:	e008      	b.n	a13a <_vfiprintf_r+0x64>
    a128:	4658      	mov	r0, fp
    a12a:	4641      	mov	r1, r8
    a12c:	f000 fc3a 	bl	a9a4 <__swsetup_r>
    a130:	2800      	cmp	r0, #0
    a132:	d0f2      	beq.n	a11a <_vfiprintf_r+0x44>
    a134:	f04f 30ff 	mov.w	r0, #4294967295
    a138:	e3db      	b.n	a8f2 <_vfiprintf_r+0x81c>
    a13a:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
    a13e:	2b00      	cmp	r3, #0
    a140:	db06      	blt.n	a150 <_vfiprintf_r+0x7a>
    a142:	4658      	mov	r0, fp
    a144:	4641      	mov	r1, r8
    a146:	9a02      	ldr	r2, [sp, #8]
    a148:	4623      	mov	r3, r4
    a14a:	f000 fbe3 	bl	a914 <__sbprintf>
    a14e:	e3d0      	b.n	a8f2 <_vfiprintf_r+0x81c>
    a150:	2300      	movs	r3, #0
    a152:	aa1c      	add	r2, sp, #112	; 0x70
    a154:	920f      	str	r2, [sp, #60]	; 0x3c
    a156:	9311      	str	r3, [sp, #68]	; 0x44
    a158:	9310      	str	r3, [sp, #64]	; 0x40
    a15a:	4694      	mov	ip, r2
    a15c:	930a      	str	r3, [sp, #40]	; 0x28
    a15e:	9305      	str	r3, [sp, #20]
    a160:	9b02      	ldr	r3, [sp, #8]
    a162:	461c      	mov	r4, r3
    a164:	f813 2b01 	ldrb.w	r2, [r3], #1
    a168:	b91a      	cbnz	r2, a172 <_vfiprintf_r+0x9c>
    a16a:	9802      	ldr	r0, [sp, #8]
    a16c:	1a25      	subs	r5, r4, r0
    a16e:	d103      	bne.n	a178 <_vfiprintf_r+0xa2>
    a170:	e01d      	b.n	a1ae <_vfiprintf_r+0xd8>
    a172:	2a25      	cmp	r2, #37	; 0x25
    a174:	d1f5      	bne.n	a162 <_vfiprintf_r+0x8c>
    a176:	e7f8      	b.n	a16a <_vfiprintf_r+0x94>
    a178:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a17a:	9902      	ldr	r1, [sp, #8]
    a17c:	442b      	add	r3, r5
    a17e:	9311      	str	r3, [sp, #68]	; 0x44
    a180:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a182:	3301      	adds	r3, #1
    a184:	2b07      	cmp	r3, #7
    a186:	e88c 0022 	stmia.w	ip, {r1, r5}
    a18a:	9310      	str	r3, [sp, #64]	; 0x40
    a18c:	dc02      	bgt.n	a194 <_vfiprintf_r+0xbe>
    a18e:	f10c 0c08 	add.w	ip, ip, #8
    a192:	e009      	b.n	a1a8 <_vfiprintf_r+0xd2>
    a194:	4658      	mov	r0, fp
    a196:	4641      	mov	r1, r8
    a198:	aa0f      	add	r2, sp, #60	; 0x3c
    a19a:	f7ff ff69 	bl	a070 <__sprint_r>
    a19e:	2800      	cmp	r0, #0
    a1a0:	f040 83a1 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a1a4:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a1a8:	9a05      	ldr	r2, [sp, #20]
    a1aa:	442a      	add	r2, r5
    a1ac:	9205      	str	r2, [sp, #20]
    a1ae:	7823      	ldrb	r3, [r4, #0]
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	f000 8391 	beq.w	a8d8 <_vfiprintf_r+0x802>
    a1b6:	2200      	movs	r2, #0
    a1b8:	3401      	adds	r4, #1
    a1ba:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a1be:	f04f 3aff 	mov.w	sl, #4294967295
    a1c2:	9204      	str	r2, [sp, #16]
    a1c4:	4617      	mov	r7, r2
    a1c6:	1c65      	adds	r5, r4, #1
    a1c8:	7823      	ldrb	r3, [r4, #0]
    a1ca:	9502      	str	r5, [sp, #8]
    a1cc:	2b58      	cmp	r3, #88	; 0x58
    a1ce:	d065      	beq.n	a29c <_vfiprintf_r+0x1c6>
    a1d0:	dc2e      	bgt.n	a230 <_vfiprintf_r+0x15a>
    a1d2:	2b2e      	cmp	r3, #46	; 0x2e
    a1d4:	d077      	beq.n	a2c6 <_vfiprintf_r+0x1f0>
    a1d6:	dc12      	bgt.n	a1fe <_vfiprintf_r+0x128>
    a1d8:	2b2a      	cmp	r3, #42	; 0x2a
    a1da:	d067      	beq.n	a2ac <_vfiprintf_r+0x1d6>
    a1dc:	dc08      	bgt.n	a1f0 <_vfiprintf_r+0x11a>
    a1de:	2b20      	cmp	r3, #32
    a1e0:	d060      	beq.n	a2a4 <_vfiprintf_r+0x1ce>
    a1e2:	2b23      	cmp	r3, #35	; 0x23
    a1e4:	f040 8202 	bne.w	a5ec <_vfiprintf_r+0x516>
    a1e8:	f047 0701 	orr.w	r7, r7, #1
    a1ec:	9c02      	ldr	r4, [sp, #8]
    a1ee:	e7ea      	b.n	a1c6 <_vfiprintf_r+0xf0>
    a1f0:	2b2b      	cmp	r3, #43	; 0x2b
    a1f2:	d101      	bne.n	a1f8 <_vfiprintf_r+0x122>
    a1f4:	461a      	mov	r2, r3
    a1f6:	e7f9      	b.n	a1ec <_vfiprintf_r+0x116>
    a1f8:	2b2d      	cmp	r3, #45	; 0x2d
    a1fa:	d061      	beq.n	a2c0 <_vfiprintf_r+0x1ea>
    a1fc:	e1f6      	b.n	a5ec <_vfiprintf_r+0x516>
    a1fe:	2b39      	cmp	r3, #57	; 0x39
    a200:	dc08      	bgt.n	a214 <_vfiprintf_r+0x13e>
    a202:	2b31      	cmp	r3, #49	; 0x31
    a204:	f280 8081 	bge.w	a30a <_vfiprintf_r+0x234>
    a208:	2b30      	cmp	r3, #48	; 0x30
    a20a:	f040 81ef 	bne.w	a5ec <_vfiprintf_r+0x516>
    a20e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    a212:	e7eb      	b.n	a1ec <_vfiprintf_r+0x116>
    a214:	2b4f      	cmp	r3, #79	; 0x4f
    a216:	f000 80e1 	beq.w	a3dc <_vfiprintf_r+0x306>
    a21a:	2b55      	cmp	r3, #85	; 0x55
    a21c:	f000 8121 	beq.w	a462 <_vfiprintf_r+0x38c>
    a220:	2b44      	cmp	r3, #68	; 0x44
    a222:	f040 81e3 	bne.w	a5ec <_vfiprintf_r+0x516>
    a226:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a22a:	f047 0710 	orr.w	r7, r7, #16
    a22e:	e095      	b.n	a35c <_vfiprintf_r+0x286>
    a230:	2b6e      	cmp	r3, #110	; 0x6e
    a232:	f000 80b7 	beq.w	a3a4 <_vfiprintf_r+0x2ce>
    a236:	dc0d      	bgt.n	a254 <_vfiprintf_r+0x17e>
    a238:	2b68      	cmp	r3, #104	; 0x68
    a23a:	d077      	beq.n	a32c <_vfiprintf_r+0x256>
    a23c:	dc05      	bgt.n	a24a <_vfiprintf_r+0x174>
    a23e:	2b63      	cmp	r3, #99	; 0x63
    a240:	f000 8084 	beq.w	a34c <_vfiprintf_r+0x276>
    a244:	2b64      	cmp	r3, #100	; 0x64
    a246:	d026      	beq.n	a296 <_vfiprintf_r+0x1c0>
    a248:	e1d0      	b.n	a5ec <_vfiprintf_r+0x516>
    a24a:	2b69      	cmp	r3, #105	; 0x69
    a24c:	d023      	beq.n	a296 <_vfiprintf_r+0x1c0>
    a24e:	2b6c      	cmp	r3, #108	; 0x6c
    a250:	d06f      	beq.n	a332 <_vfiprintf_r+0x25c>
    a252:	e1cb      	b.n	a5ec <_vfiprintf_r+0x516>
    a254:	2b71      	cmp	r3, #113	; 0x71
    a256:	d076      	beq.n	a346 <_vfiprintf_r+0x270>
    a258:	dc13      	bgt.n	a282 <_vfiprintf_r+0x1ac>
    a25a:	2b6f      	cmp	r3, #111	; 0x6f
    a25c:	f000 80c0 	beq.w	a3e0 <_vfiprintf_r+0x30a>
    a260:	2b70      	cmp	r3, #112	; 0x70
    a262:	f040 81c3 	bne.w	a5ec <_vfiprintf_r+0x516>
    a266:	2330      	movs	r3, #48	; 0x30
    a268:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    a26c:	489f      	ldr	r0, [pc, #636]	; (a4ec <_vfiprintf_r+0x416>)
    a26e:	6834      	ldr	r4, [r6, #0]
    a270:	900a      	str	r0, [sp, #40]	; 0x28
    a272:	2378      	movs	r3, #120	; 0x78
    a274:	2500      	movs	r5, #0
    a276:	f047 0702 	orr.w	r7, r7, #2
    a27a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    a27e:	3604      	adds	r6, #4
    a280:	e12f      	b.n	a4e2 <_vfiprintf_r+0x40c>
    a282:	2b75      	cmp	r3, #117	; 0x75
    a284:	f000 80ef 	beq.w	a466 <_vfiprintf_r+0x390>
    a288:	2b78      	cmp	r3, #120	; 0x78
    a28a:	f000 8104 	beq.w	a496 <_vfiprintf_r+0x3c0>
    a28e:	2b73      	cmp	r3, #115	; 0x73
    a290:	f040 81ac 	bne.w	a5ec <_vfiprintf_r+0x516>
    a294:	e0c0      	b.n	a418 <_vfiprintf_r+0x342>
    a296:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a29a:	e05f      	b.n	a35c <_vfiprintf_r+0x286>
    a29c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a2a0:	4c93      	ldr	r4, [pc, #588]	; (a4f0 <_vfiprintf_r+0x41a>)
    a2a2:	e0fb      	b.n	a49c <_vfiprintf_r+0x3c6>
    a2a4:	2a00      	cmp	r2, #0
    a2a6:	bf08      	it	eq
    a2a8:	2220      	moveq	r2, #32
    a2aa:	e79f      	b.n	a1ec <_vfiprintf_r+0x116>
    a2ac:	1d33      	adds	r3, r6, #4
    a2ae:	6836      	ldr	r6, [r6, #0]
    a2b0:	9604      	str	r6, [sp, #16]
    a2b2:	2e00      	cmp	r6, #0
    a2b4:	db01      	blt.n	a2ba <_vfiprintf_r+0x1e4>
    a2b6:	461e      	mov	r6, r3
    a2b8:	e798      	b.n	a1ec <_vfiprintf_r+0x116>
    a2ba:	4275      	negs	r5, r6
    a2bc:	9504      	str	r5, [sp, #16]
    a2be:	461e      	mov	r6, r3
    a2c0:	f047 0704 	orr.w	r7, r7, #4
    a2c4:	e792      	b.n	a1ec <_vfiprintf_r+0x116>
    a2c6:	9c02      	ldr	r4, [sp, #8]
    a2c8:	7823      	ldrb	r3, [r4, #0]
    a2ca:	2b2a      	cmp	r3, #42	; 0x2a
    a2cc:	f104 0101 	add.w	r1, r4, #1
    a2d0:	d002      	beq.n	a2d8 <_vfiprintf_r+0x202>
    a2d2:	f04f 0a00 	mov.w	sl, #0
    a2d6:	e00a      	b.n	a2ee <_vfiprintf_r+0x218>
    a2d8:	f8d6 a000 	ldr.w	sl, [r6]
    a2dc:	9102      	str	r1, [sp, #8]
    a2de:	1d33      	adds	r3, r6, #4
    a2e0:	f1ba 0f00 	cmp.w	sl, #0
    a2e4:	461e      	mov	r6, r3
    a2e6:	da81      	bge.n	a1ec <_vfiprintf_r+0x116>
    a2e8:	f04f 3aff 	mov.w	sl, #4294967295
    a2ec:	e77e      	b.n	a1ec <_vfiprintf_r+0x116>
    a2ee:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a2f2:	2809      	cmp	r0, #9
    a2f4:	d805      	bhi.n	a302 <_vfiprintf_r+0x22c>
    a2f6:	230a      	movs	r3, #10
    a2f8:	fb03 0a0a 	mla	sl, r3, sl, r0
    a2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
    a300:	e7f5      	b.n	a2ee <_vfiprintf_r+0x218>
    a302:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
    a306:	9102      	str	r1, [sp, #8]
    a308:	e760      	b.n	a1cc <_vfiprintf_r+0xf6>
    a30a:	2500      	movs	r5, #0
    a30c:	9504      	str	r5, [sp, #16]
    a30e:	9c04      	ldr	r4, [sp, #16]
    a310:	3b30      	subs	r3, #48	; 0x30
    a312:	210a      	movs	r1, #10
    a314:	fb01 3404 	mla	r4, r1, r4, r3
    a318:	9902      	ldr	r1, [sp, #8]
    a31a:	9404      	str	r4, [sp, #16]
    a31c:	f811 3b01 	ldrb.w	r3, [r1], #1
    a320:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a324:	2809      	cmp	r0, #9
    a326:	d8ee      	bhi.n	a306 <_vfiprintf_r+0x230>
    a328:	9102      	str	r1, [sp, #8]
    a32a:	e7f0      	b.n	a30e <_vfiprintf_r+0x238>
    a32c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    a330:	e75c      	b.n	a1ec <_vfiprintf_r+0x116>
    a332:	9d02      	ldr	r5, [sp, #8]
    a334:	782b      	ldrb	r3, [r5, #0]
    a336:	2b6c      	cmp	r3, #108	; 0x6c
    a338:	d102      	bne.n	a340 <_vfiprintf_r+0x26a>
    a33a:	3501      	adds	r5, #1
    a33c:	9502      	str	r5, [sp, #8]
    a33e:	e002      	b.n	a346 <_vfiprintf_r+0x270>
    a340:	f047 0710 	orr.w	r7, r7, #16
    a344:	e752      	b.n	a1ec <_vfiprintf_r+0x116>
    a346:	f047 0720 	orr.w	r7, r7, #32
    a34a:	e74f      	b.n	a1ec <_vfiprintf_r+0x116>
    a34c:	6833      	ldr	r3, [r6, #0]
    a34e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    a352:	2500      	movs	r5, #0
    a354:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    a358:	3604      	adds	r6, #4
    a35a:	e151      	b.n	a600 <_vfiprintf_r+0x52a>
    a35c:	06ba      	lsls	r2, r7, #26
    a35e:	d507      	bpl.n	a370 <_vfiprintf_r+0x29a>
    a360:	3607      	adds	r6, #7
    a362:	f026 0307 	bic.w	r3, r6, #7
    a366:	f103 0608 	add.w	r6, r3, #8
    a36a:	e9d3 4500 	ldrd	r4, r5, [r3]
    a36e:	e00d      	b.n	a38c <_vfiprintf_r+0x2b6>
    a370:	f017 0f10 	tst.w	r7, #16
    a374:	f106 0304 	add.w	r3, r6, #4
    a378:	d001      	beq.n	a37e <_vfiprintf_r+0x2a8>
    a37a:	6834      	ldr	r4, [r6, #0]
    a37c:	e004      	b.n	a388 <_vfiprintf_r+0x2b2>
    a37e:	6834      	ldr	r4, [r6, #0]
    a380:	f017 0f40 	tst.w	r7, #64	; 0x40
    a384:	bf18      	it	ne
    a386:	b224      	sxthne	r4, r4
    a388:	17e5      	asrs	r5, r4, #31
    a38a:	461e      	mov	r6, r3
    a38c:	2c00      	cmp	r4, #0
    a38e:	f175 0000 	sbcs.w	r0, r5, #0
    a392:	f280 80af 	bge.w	a4f4 <_vfiprintf_r+0x41e>
    a396:	232d      	movs	r3, #45	; 0x2d
    a398:	4264      	negs	r4, r4
    a39a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    a39e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a3a2:	e0a7      	b.n	a4f4 <_vfiprintf_r+0x41e>
    a3a4:	f017 0f20 	tst.w	r7, #32
    a3a8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a3ac:	f106 0104 	add.w	r1, r6, #4
    a3b0:	d007      	beq.n	a3c2 <_vfiprintf_r+0x2ec>
    a3b2:	9c05      	ldr	r4, [sp, #20]
    a3b4:	6830      	ldr	r0, [r6, #0]
    a3b6:	17e5      	asrs	r5, r4, #31
    a3b8:	4622      	mov	r2, r4
    a3ba:	462b      	mov	r3, r5
    a3bc:	e9c0 2300 	strd	r2, r3, [r0]
    a3c0:	e00a      	b.n	a3d8 <_vfiprintf_r+0x302>
    a3c2:	06fb      	lsls	r3, r7, #27
    a3c4:	d405      	bmi.n	a3d2 <_vfiprintf_r+0x2fc>
    a3c6:	067f      	lsls	r7, r7, #25
    a3c8:	d503      	bpl.n	a3d2 <_vfiprintf_r+0x2fc>
    a3ca:	6833      	ldr	r3, [r6, #0]
    a3cc:	9c05      	ldr	r4, [sp, #20]
    a3ce:	801c      	strh	r4, [r3, #0]
    a3d0:	e002      	b.n	a3d8 <_vfiprintf_r+0x302>
    a3d2:	6833      	ldr	r3, [r6, #0]
    a3d4:	9d05      	ldr	r5, [sp, #20]
    a3d6:	601d      	str	r5, [r3, #0]
    a3d8:	460e      	mov	r6, r1
    a3da:	e6c1      	b.n	a160 <_vfiprintf_r+0x8a>
    a3dc:	f047 0710 	orr.w	r7, r7, #16
    a3e0:	f017 0320 	ands.w	r3, r7, #32
    a3e4:	d008      	beq.n	a3f8 <_vfiprintf_r+0x322>
    a3e6:	3607      	adds	r6, #7
    a3e8:	f026 0307 	bic.w	r3, r6, #7
    a3ec:	e9d3 4500 	ldrd	r4, r5, [r3]
    a3f0:	f103 0608 	add.w	r6, r3, #8
    a3f4:	2300      	movs	r3, #0
    a3f6:	e075      	b.n	a4e4 <_vfiprintf_r+0x40e>
    a3f8:	f017 0110 	ands.w	r1, r7, #16
    a3fc:	f106 0204 	add.w	r2, r6, #4
    a400:	d106      	bne.n	a410 <_vfiprintf_r+0x33a>
    a402:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    a406:	d003      	beq.n	a410 <_vfiprintf_r+0x33a>
    a408:	8834      	ldrh	r4, [r6, #0]
    a40a:	2500      	movs	r5, #0
    a40c:	4616      	mov	r6, r2
    a40e:	e7f1      	b.n	a3f4 <_vfiprintf_r+0x31e>
    a410:	6834      	ldr	r4, [r6, #0]
    a412:	2500      	movs	r5, #0
    a414:	4616      	mov	r6, r2
    a416:	e065      	b.n	a4e4 <_vfiprintf_r+0x40e>
    a418:	f8d6 9000 	ldr.w	r9, [r6]
    a41c:	2300      	movs	r3, #0
    a41e:	459a      	cmp	sl, r3
    a420:	f106 0604 	add.w	r6, r6, #4
    a424:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a428:	4648      	mov	r0, r9
    a42a:	db11      	blt.n	a450 <_vfiprintf_r+0x37a>
    a42c:	4619      	mov	r1, r3
    a42e:	4652      	mov	r2, sl
    a430:	f8cd c004 	str.w	ip, [sp, #4]
    a434:	f002 f990 	bl	c758 <memchr>
    a438:	f8dd c004 	ldr.w	ip, [sp, #4]
    a43c:	2800      	cmp	r0, #0
    a43e:	f000 80e4 	beq.w	a60a <_vfiprintf_r+0x534>
    a442:	ebc9 0000 	rsb	r0, r9, r0
    a446:	4550      	cmp	r0, sl
    a448:	bfb8      	it	lt
    a44a:	4682      	movlt	sl, r0
    a44c:	2500      	movs	r5, #0
    a44e:	e0dd      	b.n	a60c <_vfiprintf_r+0x536>
    a450:	f8cd c004 	str.w	ip, [sp, #4]
    a454:	f7fe f8df 	bl	8616 <strlen>
    a458:	2500      	movs	r5, #0
    a45a:	4682      	mov	sl, r0
    a45c:	f8dd c004 	ldr.w	ip, [sp, #4]
    a460:	e0d4      	b.n	a60c <_vfiprintf_r+0x536>
    a462:	f047 0710 	orr.w	r7, r7, #16
    a466:	06bd      	lsls	r5, r7, #26
    a468:	d507      	bpl.n	a47a <_vfiprintf_r+0x3a4>
    a46a:	3607      	adds	r6, #7
    a46c:	f026 0307 	bic.w	r3, r6, #7
    a470:	f103 0608 	add.w	r6, r3, #8
    a474:	e9d3 4500 	ldrd	r4, r5, [r3]
    a478:	e00b      	b.n	a492 <_vfiprintf_r+0x3bc>
    a47a:	f017 0f10 	tst.w	r7, #16
    a47e:	f106 0304 	add.w	r3, r6, #4
    a482:	d103      	bne.n	a48c <_vfiprintf_r+0x3b6>
    a484:	067c      	lsls	r4, r7, #25
    a486:	d501      	bpl.n	a48c <_vfiprintf_r+0x3b6>
    a488:	8834      	ldrh	r4, [r6, #0]
    a48a:	e000      	b.n	a48e <_vfiprintf_r+0x3b8>
    a48c:	6834      	ldr	r4, [r6, #0]
    a48e:	2500      	movs	r5, #0
    a490:	461e      	mov	r6, r3
    a492:	2301      	movs	r3, #1
    a494:	e026      	b.n	a4e4 <_vfiprintf_r+0x40e>
    a496:	4c15      	ldr	r4, [pc, #84]	; (a4ec <_vfiprintf_r+0x416>)
    a498:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a49c:	06b8      	lsls	r0, r7, #26
    a49e:	940a      	str	r4, [sp, #40]	; 0x28
    a4a0:	d507      	bpl.n	a4b2 <_vfiprintf_r+0x3dc>
    a4a2:	3607      	adds	r6, #7
    a4a4:	f026 0207 	bic.w	r2, r6, #7
    a4a8:	f102 0608 	add.w	r6, r2, #8
    a4ac:	e9d2 4500 	ldrd	r4, r5, [r2]
    a4b0:	e00b      	b.n	a4ca <_vfiprintf_r+0x3f4>
    a4b2:	f017 0f10 	tst.w	r7, #16
    a4b6:	f106 0204 	add.w	r2, r6, #4
    a4ba:	d103      	bne.n	a4c4 <_vfiprintf_r+0x3ee>
    a4bc:	0679      	lsls	r1, r7, #25
    a4be:	d501      	bpl.n	a4c4 <_vfiprintf_r+0x3ee>
    a4c0:	8834      	ldrh	r4, [r6, #0]
    a4c2:	e000      	b.n	a4c6 <_vfiprintf_r+0x3f0>
    a4c4:	6834      	ldr	r4, [r6, #0]
    a4c6:	2500      	movs	r5, #0
    a4c8:	4616      	mov	r6, r2
    a4ca:	07fa      	lsls	r2, r7, #31
    a4cc:	d509      	bpl.n	a4e2 <_vfiprintf_r+0x40c>
    a4ce:	ea54 0005 	orrs.w	r0, r4, r5
    a4d2:	d006      	beq.n	a4e2 <_vfiprintf_r+0x40c>
    a4d4:	2230      	movs	r2, #48	; 0x30
    a4d6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    a4da:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    a4de:	f047 0702 	orr.w	r7, r7, #2
    a4e2:	2302      	movs	r3, #2
    a4e4:	2200      	movs	r2, #0
    a4e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a4ea:	e004      	b.n	a4f6 <_vfiprintf_r+0x420>
    a4ec:	00010adf 	.word	0x00010adf
    a4f0:	00010ace 	.word	0x00010ace
    a4f4:	2301      	movs	r3, #1
    a4f6:	f1ba 0f00 	cmp.w	sl, #0
    a4fa:	bfa8      	it	ge
    a4fc:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    a500:	ea54 0105 	orrs.w	r1, r4, r5
    a504:	d102      	bne.n	a50c <_vfiprintf_r+0x436>
    a506:	f1ba 0f00 	cmp.w	sl, #0
    a50a:	d05e      	beq.n	a5ca <_vfiprintf_r+0x4f4>
    a50c:	2b01      	cmp	r3, #1
    a50e:	d01f      	beq.n	a550 <_vfiprintf_r+0x47a>
    a510:	2b02      	cmp	r3, #2
    a512:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
    a516:	d045      	beq.n	a5a4 <_vfiprintf_r+0x4ce>
    a518:	08e0      	lsrs	r0, r4, #3
    a51a:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
    a51e:	08e8      	lsrs	r0, r5, #3
    a520:	9106      	str	r1, [sp, #24]
    a522:	9007      	str	r0, [sp, #28]
    a524:	f004 0207 	and.w	r2, r4, #7
    a528:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    a52c:	3230      	adds	r2, #48	; 0x30
    a52e:	ea54 0105 	orrs.w	r1, r4, r5
    a532:	4699      	mov	r9, r3
    a534:	701a      	strb	r2, [r3, #0]
    a536:	f103 33ff 	add.w	r3, r3, #4294967295
    a53a:	d1ed      	bne.n	a518 <_vfiprintf_r+0x442>
    a53c:	07f8      	lsls	r0, r7, #31
    a53e:	4649      	mov	r1, r9
    a540:	d54e      	bpl.n	a5e0 <_vfiprintf_r+0x50a>
    a542:	2a30      	cmp	r2, #48	; 0x30
    a544:	d04c      	beq.n	a5e0 <_vfiprintf_r+0x50a>
    a546:	4699      	mov	r9, r3
    a548:	2330      	movs	r3, #48	; 0x30
    a54a:	f801 3c01 	strb.w	r3, [r1, #-1]
    a54e:	e047      	b.n	a5e0 <_vfiprintf_r+0x50a>
    a550:	2d00      	cmp	r5, #0
    a552:	bf08      	it	eq
    a554:	2c0a      	cmpeq	r4, #10
    a556:	d205      	bcs.n	a564 <_vfiprintf_r+0x48e>
    a558:	3430      	adds	r4, #48	; 0x30
    a55a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    a55e:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
    a562:	e03d      	b.n	a5e0 <_vfiprintf_r+0x50a>
    a564:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
    a568:	9203      	str	r2, [sp, #12]
    a56a:	4620      	mov	r0, r4
    a56c:	4629      	mov	r1, r5
    a56e:	220a      	movs	r2, #10
    a570:	2300      	movs	r3, #0
    a572:	f8cd c004 	str.w	ip, [sp, #4]
    a576:	f7fd fbab 	bl	7cd0 <__aeabi_uldivmod>
    a57a:	9b03      	ldr	r3, [sp, #12]
    a57c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    a580:	3230      	adds	r2, #48	; 0x30
    a582:	f803 2901 	strb.w	r2, [r3], #-1
    a586:	4620      	mov	r0, r4
    a588:	9303      	str	r3, [sp, #12]
    a58a:	4629      	mov	r1, r5
    a58c:	220a      	movs	r2, #10
    a58e:	2300      	movs	r3, #0
    a590:	f7fd fb9e 	bl	7cd0 <__aeabi_uldivmod>
    a594:	4604      	mov	r4, r0
    a596:	460d      	mov	r5, r1
    a598:	ea54 0005 	orrs.w	r0, r4, r5
    a59c:	f8dd c004 	ldr.w	ip, [sp, #4]
    a5a0:	d1e3      	bne.n	a56a <_vfiprintf_r+0x494>
    a5a2:	e01d      	b.n	a5e0 <_vfiprintf_r+0x50a>
    a5a4:	f004 020f 	and.w	r2, r4, #15
    a5a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    a5aa:	5c8a      	ldrb	r2, [r1, r2]
    a5ac:	4699      	mov	r9, r3
    a5ae:	f803 2901 	strb.w	r2, [r3], #-1
    a5b2:	0922      	lsrs	r2, r4, #4
    a5b4:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
    a5b8:	0929      	lsrs	r1, r5, #4
    a5ba:	9008      	str	r0, [sp, #32]
    a5bc:	9109      	str	r1, [sp, #36]	; 0x24
    a5be:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    a5c2:	ea54 0205 	orrs.w	r2, r4, r5
    a5c6:	d1ed      	bne.n	a5a4 <_vfiprintf_r+0x4ce>
    a5c8:	e00a      	b.n	a5e0 <_vfiprintf_r+0x50a>
    a5ca:	b93b      	cbnz	r3, a5dc <_vfiprintf_r+0x506>
    a5cc:	07f9      	lsls	r1, r7, #31
    a5ce:	d505      	bpl.n	a5dc <_vfiprintf_r+0x506>
    a5d0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    a5d4:	2330      	movs	r3, #48	; 0x30
    a5d6:	f809 3d41 	strb.w	r3, [r9, #-65]!
    a5da:	e001      	b.n	a5e0 <_vfiprintf_r+0x50a>
    a5dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    a5e0:	4655      	mov	r5, sl
    a5e2:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    a5e6:	ebc9 0a0a 	rsb	sl, r9, sl
    a5ea:	e00f      	b.n	a60c <_vfiprintf_r+0x536>
    a5ec:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	f000 8171 	beq.w	a8d8 <_vfiprintf_r+0x802>
    a5f6:	2500      	movs	r5, #0
    a5f8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    a5fc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    a600:	f04f 0a01 	mov.w	sl, #1
    a604:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    a608:	e000      	b.n	a60c <_vfiprintf_r+0x536>
    a60a:	4605      	mov	r5, r0
    a60c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a610:	45aa      	cmp	sl, r5
    a612:	bfac      	ite	ge
    a614:	4654      	movge	r4, sl
    a616:	462c      	movlt	r4, r5
    a618:	b103      	cbz	r3, a61c <_vfiprintf_r+0x546>
    a61a:	3401      	adds	r4, #1
    a61c:	f017 0302 	ands.w	r3, r7, #2
    a620:	9303      	str	r3, [sp, #12]
    a622:	bf18      	it	ne
    a624:	3402      	addne	r4, #2
    a626:	f017 0384 	ands.w	r3, r7, #132	; 0x84
    a62a:	930b      	str	r3, [sp, #44]	; 0x2c
    a62c:	d13b      	bne.n	a6a6 <_vfiprintf_r+0x5d0>
    a62e:	9804      	ldr	r0, [sp, #16]
    a630:	1b03      	subs	r3, r0, r4
    a632:	2b00      	cmp	r3, #0
    a634:	dd37      	ble.n	a6a6 <_vfiprintf_r+0x5d0>
    a636:	4aa6      	ldr	r2, [pc, #664]	; (a8d0 <_vfiprintf_r+0x7fa>)
    a638:	f8cc 2000 	str.w	r2, [ip]
    a63c:	2b10      	cmp	r3, #16
    a63e:	dd1b      	ble.n	a678 <_vfiprintf_r+0x5a2>
    a640:	2210      	movs	r2, #16
    a642:	f8cc 2004 	str.w	r2, [ip, #4]
    a646:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a648:	3210      	adds	r2, #16
    a64a:	9211      	str	r2, [sp, #68]	; 0x44
    a64c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a64e:	3201      	adds	r2, #1
    a650:	2a07      	cmp	r2, #7
    a652:	9210      	str	r2, [sp, #64]	; 0x40
    a654:	dc02      	bgt.n	a65c <_vfiprintf_r+0x586>
    a656:	f10c 0c08 	add.w	ip, ip, #8
    a65a:	e00b      	b.n	a674 <_vfiprintf_r+0x59e>
    a65c:	4658      	mov	r0, fp
    a65e:	4641      	mov	r1, r8
    a660:	aa0f      	add	r2, sp, #60	; 0x3c
    a662:	9301      	str	r3, [sp, #4]
    a664:	f7ff fd04 	bl	a070 <__sprint_r>
    a668:	9b01      	ldr	r3, [sp, #4]
    a66a:	2800      	cmp	r0, #0
    a66c:	f040 813b 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a670:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a674:	3b10      	subs	r3, #16
    a676:	e7de      	b.n	a636 <_vfiprintf_r+0x560>
    a678:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a67a:	f8cc 3004 	str.w	r3, [ip, #4]
    a67e:	4413      	add	r3, r2
    a680:	9311      	str	r3, [sp, #68]	; 0x44
    a682:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a684:	3301      	adds	r3, #1
    a686:	2b07      	cmp	r3, #7
    a688:	9310      	str	r3, [sp, #64]	; 0x40
    a68a:	dc02      	bgt.n	a692 <_vfiprintf_r+0x5bc>
    a68c:	f10c 0c08 	add.w	ip, ip, #8
    a690:	e009      	b.n	a6a6 <_vfiprintf_r+0x5d0>
    a692:	4658      	mov	r0, fp
    a694:	4641      	mov	r1, r8
    a696:	aa0f      	add	r2, sp, #60	; 0x3c
    a698:	f7ff fcea 	bl	a070 <__sprint_r>
    a69c:	2800      	cmp	r0, #0
    a69e:	f040 8122 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a6a2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a6a6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a6aa:	b1db      	cbz	r3, a6e4 <_vfiprintf_r+0x60e>
    a6ac:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    a6b0:	f8cc 3000 	str.w	r3, [ip]
    a6b4:	2301      	movs	r3, #1
    a6b6:	f8cc 3004 	str.w	r3, [ip, #4]
    a6ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6bc:	3301      	adds	r3, #1
    a6be:	9311      	str	r3, [sp, #68]	; 0x44
    a6c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a6c2:	3301      	adds	r3, #1
    a6c4:	2b07      	cmp	r3, #7
    a6c6:	9310      	str	r3, [sp, #64]	; 0x40
    a6c8:	dc02      	bgt.n	a6d0 <_vfiprintf_r+0x5fa>
    a6ca:	f10c 0c08 	add.w	ip, ip, #8
    a6ce:	e009      	b.n	a6e4 <_vfiprintf_r+0x60e>
    a6d0:	4658      	mov	r0, fp
    a6d2:	4641      	mov	r1, r8
    a6d4:	aa0f      	add	r2, sp, #60	; 0x3c
    a6d6:	f7ff fccb 	bl	a070 <__sprint_r>
    a6da:	2800      	cmp	r0, #0
    a6dc:	f040 8103 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a6e0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a6e4:	9b03      	ldr	r3, [sp, #12]
    a6e6:	b1d3      	cbz	r3, a71e <_vfiprintf_r+0x648>
    a6e8:	ab0e      	add	r3, sp, #56	; 0x38
    a6ea:	f8cc 3000 	str.w	r3, [ip]
    a6ee:	2302      	movs	r3, #2
    a6f0:	f8cc 3004 	str.w	r3, [ip, #4]
    a6f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6f6:	3302      	adds	r3, #2
    a6f8:	9311      	str	r3, [sp, #68]	; 0x44
    a6fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a6fc:	3301      	adds	r3, #1
    a6fe:	2b07      	cmp	r3, #7
    a700:	9310      	str	r3, [sp, #64]	; 0x40
    a702:	dc02      	bgt.n	a70a <_vfiprintf_r+0x634>
    a704:	f10c 0c08 	add.w	ip, ip, #8
    a708:	e009      	b.n	a71e <_vfiprintf_r+0x648>
    a70a:	4658      	mov	r0, fp
    a70c:	4641      	mov	r1, r8
    a70e:	aa0f      	add	r2, sp, #60	; 0x3c
    a710:	f7ff fcae 	bl	a070 <__sprint_r>
    a714:	2800      	cmp	r0, #0
    a716:	f040 80e6 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a71a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a720:	2b80      	cmp	r3, #128	; 0x80
    a722:	d13f      	bne.n	a7a4 <_vfiprintf_r+0x6ce>
    a724:	9b04      	ldr	r3, [sp, #16]
    a726:	1b1b      	subs	r3, r3, r4
    a728:	2b00      	cmp	r3, #0
    a72a:	9303      	str	r3, [sp, #12]
    a72c:	dd3a      	ble.n	a7a4 <_vfiprintf_r+0x6ce>
    a72e:	9b03      	ldr	r3, [sp, #12]
    a730:	2b10      	cmp	r3, #16
    a732:	4b68      	ldr	r3, [pc, #416]	; (a8d4 <_vfiprintf_r+0x7fe>)
    a734:	f8cc 3000 	str.w	r3, [ip]
    a738:	dd1b      	ble.n	a772 <_vfiprintf_r+0x69c>
    a73a:	2310      	movs	r3, #16
    a73c:	f8cc 3004 	str.w	r3, [ip, #4]
    a740:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a742:	3310      	adds	r3, #16
    a744:	9311      	str	r3, [sp, #68]	; 0x44
    a746:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a748:	3301      	adds	r3, #1
    a74a:	2b07      	cmp	r3, #7
    a74c:	9310      	str	r3, [sp, #64]	; 0x40
    a74e:	dc02      	bgt.n	a756 <_vfiprintf_r+0x680>
    a750:	f10c 0c08 	add.w	ip, ip, #8
    a754:	e009      	b.n	a76a <_vfiprintf_r+0x694>
    a756:	4658      	mov	r0, fp
    a758:	4641      	mov	r1, r8
    a75a:	aa0f      	add	r2, sp, #60	; 0x3c
    a75c:	f7ff fc88 	bl	a070 <__sprint_r>
    a760:	2800      	cmp	r0, #0
    a762:	f040 80c0 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a766:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a76a:	9b03      	ldr	r3, [sp, #12]
    a76c:	3b10      	subs	r3, #16
    a76e:	9303      	str	r3, [sp, #12]
    a770:	e7dd      	b.n	a72e <_vfiprintf_r+0x658>
    a772:	9b03      	ldr	r3, [sp, #12]
    a774:	f8cc 3004 	str.w	r3, [ip, #4]
    a778:	9803      	ldr	r0, [sp, #12]
    a77a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a77c:	4403      	add	r3, r0
    a77e:	9311      	str	r3, [sp, #68]	; 0x44
    a780:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a782:	3301      	adds	r3, #1
    a784:	2b07      	cmp	r3, #7
    a786:	9310      	str	r3, [sp, #64]	; 0x40
    a788:	dc02      	bgt.n	a790 <_vfiprintf_r+0x6ba>
    a78a:	f10c 0c08 	add.w	ip, ip, #8
    a78e:	e009      	b.n	a7a4 <_vfiprintf_r+0x6ce>
    a790:	4658      	mov	r0, fp
    a792:	4641      	mov	r1, r8
    a794:	aa0f      	add	r2, sp, #60	; 0x3c
    a796:	f7ff fc6b 	bl	a070 <__sprint_r>
    a79a:	2800      	cmp	r0, #0
    a79c:	f040 80a3 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a7a0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a7a4:	ebca 0505 	rsb	r5, sl, r5
    a7a8:	2d00      	cmp	r5, #0
    a7aa:	dd34      	ble.n	a816 <_vfiprintf_r+0x740>
    a7ac:	4b49      	ldr	r3, [pc, #292]	; (a8d4 <_vfiprintf_r+0x7fe>)
    a7ae:	f8cc 3000 	str.w	r3, [ip]
    a7b2:	2d10      	cmp	r5, #16
    a7b4:	dd19      	ble.n	a7ea <_vfiprintf_r+0x714>
    a7b6:	2310      	movs	r3, #16
    a7b8:	f8cc 3004 	str.w	r3, [ip, #4]
    a7bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a7be:	3310      	adds	r3, #16
    a7c0:	9311      	str	r3, [sp, #68]	; 0x44
    a7c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a7c4:	3301      	adds	r3, #1
    a7c6:	2b07      	cmp	r3, #7
    a7c8:	9310      	str	r3, [sp, #64]	; 0x40
    a7ca:	dc02      	bgt.n	a7d2 <_vfiprintf_r+0x6fc>
    a7cc:	f10c 0c08 	add.w	ip, ip, #8
    a7d0:	e009      	b.n	a7e6 <_vfiprintf_r+0x710>
    a7d2:	4658      	mov	r0, fp
    a7d4:	4641      	mov	r1, r8
    a7d6:	aa0f      	add	r2, sp, #60	; 0x3c
    a7d8:	f7ff fc4a 	bl	a070 <__sprint_r>
    a7dc:	2800      	cmp	r0, #0
    a7de:	f040 8082 	bne.w	a8e6 <_vfiprintf_r+0x810>
    a7e2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a7e6:	3d10      	subs	r5, #16
    a7e8:	e7e0      	b.n	a7ac <_vfiprintf_r+0x6d6>
    a7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a7ec:	f8cc 5004 	str.w	r5, [ip, #4]
    a7f0:	441d      	add	r5, r3
    a7f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a7f4:	9511      	str	r5, [sp, #68]	; 0x44
    a7f6:	3301      	adds	r3, #1
    a7f8:	2b07      	cmp	r3, #7
    a7fa:	9310      	str	r3, [sp, #64]	; 0x40
    a7fc:	dc02      	bgt.n	a804 <_vfiprintf_r+0x72e>
    a7fe:	f10c 0c08 	add.w	ip, ip, #8
    a802:	e008      	b.n	a816 <_vfiprintf_r+0x740>
    a804:	4658      	mov	r0, fp
    a806:	4641      	mov	r1, r8
    a808:	aa0f      	add	r2, sp, #60	; 0x3c
    a80a:	f7ff fc31 	bl	a070 <__sprint_r>
    a80e:	2800      	cmp	r0, #0
    a810:	d169      	bne.n	a8e6 <_vfiprintf_r+0x810>
    a812:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a816:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a818:	4453      	add	r3, sl
    a81a:	9311      	str	r3, [sp, #68]	; 0x44
    a81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a81e:	3301      	adds	r3, #1
    a820:	2b07      	cmp	r3, #7
    a822:	e88c 0600 	stmia.w	ip, {r9, sl}
    a826:	9310      	str	r3, [sp, #64]	; 0x40
    a828:	dc02      	bgt.n	a830 <_vfiprintf_r+0x75a>
    a82a:	f10c 0308 	add.w	r3, ip, #8
    a82e:	e007      	b.n	a840 <_vfiprintf_r+0x76a>
    a830:	4658      	mov	r0, fp
    a832:	4641      	mov	r1, r8
    a834:	aa0f      	add	r2, sp, #60	; 0x3c
    a836:	f7ff fc1b 	bl	a070 <__sprint_r>
    a83a:	2800      	cmp	r0, #0
    a83c:	d153      	bne.n	a8e6 <_vfiprintf_r+0x810>
    a83e:	ab1c      	add	r3, sp, #112	; 0x70
    a840:	077a      	lsls	r2, r7, #29
    a842:	d40a      	bmi.n	a85a <_vfiprintf_r+0x784>
    a844:	9d05      	ldr	r5, [sp, #20]
    a846:	9804      	ldr	r0, [sp, #16]
    a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a84a:	4284      	cmp	r4, r0
    a84c:	bfac      	ite	ge
    a84e:	192d      	addge	r5, r5, r4
    a850:	182d      	addlt	r5, r5, r0
    a852:	9505      	str	r5, [sp, #20]
    a854:	2b00      	cmp	r3, #0
    a856:	d035      	beq.n	a8c4 <_vfiprintf_r+0x7ee>
    a858:	e02e      	b.n	a8b8 <_vfiprintf_r+0x7e2>
    a85a:	9904      	ldr	r1, [sp, #16]
    a85c:	1b0d      	subs	r5, r1, r4
    a85e:	2d00      	cmp	r5, #0
    a860:	ddf0      	ble.n	a844 <_vfiprintf_r+0x76e>
    a862:	4a1b      	ldr	r2, [pc, #108]	; (a8d0 <_vfiprintf_r+0x7fa>)
    a864:	601a      	str	r2, [r3, #0]
    a866:	2d10      	cmp	r5, #16
    a868:	dd15      	ble.n	a896 <_vfiprintf_r+0x7c0>
    a86a:	2210      	movs	r2, #16
    a86c:	605a      	str	r2, [r3, #4]
    a86e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a870:	3210      	adds	r2, #16
    a872:	9211      	str	r2, [sp, #68]	; 0x44
    a874:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a876:	3201      	adds	r2, #1
    a878:	2a07      	cmp	r2, #7
    a87a:	9210      	str	r2, [sp, #64]	; 0x40
    a87c:	dc01      	bgt.n	a882 <_vfiprintf_r+0x7ac>
    a87e:	3308      	adds	r3, #8
    a880:	e007      	b.n	a892 <_vfiprintf_r+0x7bc>
    a882:	4658      	mov	r0, fp
    a884:	4641      	mov	r1, r8
    a886:	aa0f      	add	r2, sp, #60	; 0x3c
    a888:	f7ff fbf2 	bl	a070 <__sprint_r>
    a88c:	2800      	cmp	r0, #0
    a88e:	d12a      	bne.n	a8e6 <_vfiprintf_r+0x810>
    a890:	ab1c      	add	r3, sp, #112	; 0x70
    a892:	3d10      	subs	r5, #16
    a894:	e7e5      	b.n	a862 <_vfiprintf_r+0x78c>
    a896:	605d      	str	r5, [r3, #4]
    a898:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a89a:	441d      	add	r5, r3
    a89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a89e:	9511      	str	r5, [sp, #68]	; 0x44
    a8a0:	3301      	adds	r3, #1
    a8a2:	2b07      	cmp	r3, #7
    a8a4:	9310      	str	r3, [sp, #64]	; 0x40
    a8a6:	ddcd      	ble.n	a844 <_vfiprintf_r+0x76e>
    a8a8:	4658      	mov	r0, fp
    a8aa:	4641      	mov	r1, r8
    a8ac:	aa0f      	add	r2, sp, #60	; 0x3c
    a8ae:	f7ff fbdf 	bl	a070 <__sprint_r>
    a8b2:	2800      	cmp	r0, #0
    a8b4:	d0c6      	beq.n	a844 <_vfiprintf_r+0x76e>
    a8b6:	e016      	b.n	a8e6 <_vfiprintf_r+0x810>
    a8b8:	4658      	mov	r0, fp
    a8ba:	4641      	mov	r1, r8
    a8bc:	aa0f      	add	r2, sp, #60	; 0x3c
    a8be:	f7ff fbd7 	bl	a070 <__sprint_r>
    a8c2:	b980      	cbnz	r0, a8e6 <_vfiprintf_r+0x810>
    a8c4:	2300      	movs	r3, #0
    a8c6:	9310      	str	r3, [sp, #64]	; 0x40
    a8c8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    a8cc:	e448      	b.n	a160 <_vfiprintf_r+0x8a>
    a8ce:	bf00      	nop
    a8d0:	00010b19 	.word	0x00010b19
    a8d4:	00010b29 	.word	0x00010b29
    a8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a8da:	b123      	cbz	r3, a8e6 <_vfiprintf_r+0x810>
    a8dc:	4658      	mov	r0, fp
    a8de:	4641      	mov	r1, r8
    a8e0:	aa0f      	add	r2, sp, #60	; 0x3c
    a8e2:	f7ff fbc5 	bl	a070 <__sprint_r>
    a8e6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    a8ea:	065b      	lsls	r3, r3, #25
    a8ec:	f53f ac22 	bmi.w	a134 <_vfiprintf_r+0x5e>
    a8f0:	9805      	ldr	r0, [sp, #20]
    a8f2:	b02d      	add	sp, #180	; 0xb4
    a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a8f8 <vfiprintf>:
    a8f8:	b530      	push	{r4, r5, lr}
    a8fa:	4613      	mov	r3, r2
    a8fc:	4a04      	ldr	r2, [pc, #16]	; (a910 <vfiprintf+0x18>)
    a8fe:	4605      	mov	r5, r0
    a900:	460c      	mov	r4, r1
    a902:	6810      	ldr	r0, [r2, #0]
    a904:	4629      	mov	r1, r5
    a906:	4622      	mov	r2, r4
    a908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    a90c:	f7ff bbe3 	b.w	a0d6 <_vfiprintf_r>
    a910:	200004a0 	.word	0x200004a0

0000a914 <__sbprintf>:
    a914:	b570      	push	{r4, r5, r6, lr}
    a916:	460c      	mov	r4, r1
    a918:	8989      	ldrh	r1, [r1, #12]
    a91a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    a91e:	f021 0102 	bic.w	r1, r1, #2
    a922:	f8ad 100c 	strh.w	r1, [sp, #12]
    a926:	6e61      	ldr	r1, [r4, #100]	; 0x64
    a928:	9119      	str	r1, [sp, #100]	; 0x64
    a92a:	89e1      	ldrh	r1, [r4, #14]
    a92c:	f8ad 100e 	strh.w	r1, [sp, #14]
    a930:	69e1      	ldr	r1, [r4, #28]
    a932:	9107      	str	r1, [sp, #28]
    a934:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a936:	9109      	str	r1, [sp, #36]	; 0x24
    a938:	a91a      	add	r1, sp, #104	; 0x68
    a93a:	9100      	str	r1, [sp, #0]
    a93c:	9104      	str	r1, [sp, #16]
    a93e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    a942:	9102      	str	r1, [sp, #8]
    a944:	9105      	str	r1, [sp, #20]
    a946:	2100      	movs	r1, #0
    a948:	9106      	str	r1, [sp, #24]
    a94a:	4669      	mov	r1, sp
    a94c:	4606      	mov	r6, r0
    a94e:	f7ff fbc2 	bl	a0d6 <_vfiprintf_r>
    a952:	1e05      	subs	r5, r0, #0
    a954:	db07      	blt.n	a966 <__sbprintf+0x52>
    a956:	4630      	mov	r0, r6
    a958:	4669      	mov	r1, sp
    a95a:	f000 ffad 	bl	b8b8 <_fflush_r>
    a95e:	2800      	cmp	r0, #0
    a960:	bf18      	it	ne
    a962:	f04f 35ff 	movne.w	r5, #4294967295
    a966:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a96a:	065b      	lsls	r3, r3, #25
    a96c:	d503      	bpl.n	a976 <__sbprintf+0x62>
    a96e:	89a3      	ldrh	r3, [r4, #12]
    a970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a974:	81a3      	strh	r3, [r4, #12]
    a976:	4628      	mov	r0, r5
    a978:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    a97c:	bd70      	pop	{r4, r5, r6, pc}
    a97e:	bf00      	nop

0000a980 <_write_r>:
    a980:	b538      	push	{r3, r4, r5, lr}
    a982:	4c07      	ldr	r4, [pc, #28]	; (a9a0 <_write_r+0x20>)
    a984:	4605      	mov	r5, r0
    a986:	2000      	movs	r0, #0
    a988:	6020      	str	r0, [r4, #0]
    a98a:	4608      	mov	r0, r1
    a98c:	4611      	mov	r1, r2
    a98e:	461a      	mov	r2, r3
    a990:	f7f6 f8b2 	bl	af8 <_write>
    a994:	1c43      	adds	r3, r0, #1
    a996:	d102      	bne.n	a99e <_write_r+0x1e>
    a998:	6823      	ldr	r3, [r4, #0]
    a99a:	b103      	cbz	r3, a99e <_write_r+0x1e>
    a99c:	602b      	str	r3, [r5, #0]
    a99e:	bd38      	pop	{r3, r4, r5, pc}
    a9a0:	20000fa8 	.word	0x20000fa8

0000a9a4 <__swsetup_r>:
    a9a4:	b538      	push	{r3, r4, r5, lr}
    a9a6:	4b2b      	ldr	r3, [pc, #172]	; (aa54 <__swsetup_r+0xb0>)
    a9a8:	4605      	mov	r5, r0
    a9aa:	6818      	ldr	r0, [r3, #0]
    a9ac:	460c      	mov	r4, r1
    a9ae:	b118      	cbz	r0, a9b8 <__swsetup_r+0x14>
    a9b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a9b2:	b90b      	cbnz	r3, a9b8 <__swsetup_r+0x14>
    a9b4:	f000 ffca 	bl	b94c <__sinit>
    a9b8:	89a2      	ldrh	r2, [r4, #12]
    a9ba:	b293      	uxth	r3, r2
    a9bc:	0718      	lsls	r0, r3, #28
    a9be:	d420      	bmi.n	aa02 <__swsetup_r+0x5e>
    a9c0:	06d9      	lsls	r1, r3, #27
    a9c2:	d405      	bmi.n	a9d0 <__swsetup_r+0x2c>
    a9c4:	2309      	movs	r3, #9
    a9c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a9ca:	602b      	str	r3, [r5, #0]
    a9cc:	81a2      	strh	r2, [r4, #12]
    a9ce:	e03b      	b.n	aa48 <__swsetup_r+0xa4>
    a9d0:	0758      	lsls	r0, r3, #29
    a9d2:	d512      	bpl.n	a9fa <__swsetup_r+0x56>
    a9d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a9d6:	b141      	cbz	r1, a9ea <__swsetup_r+0x46>
    a9d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a9dc:	4299      	cmp	r1, r3
    a9de:	d002      	beq.n	a9e6 <__swsetup_r+0x42>
    a9e0:	4628      	mov	r0, r5
    a9e2:	f001 f937 	bl	bc54 <_free_r>
    a9e6:	2300      	movs	r3, #0
    a9e8:	6323      	str	r3, [r4, #48]	; 0x30
    a9ea:	89a3      	ldrh	r3, [r4, #12]
    a9ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    a9f0:	81a3      	strh	r3, [r4, #12]
    a9f2:	2300      	movs	r3, #0
    a9f4:	6063      	str	r3, [r4, #4]
    a9f6:	6923      	ldr	r3, [r4, #16]
    a9f8:	6023      	str	r3, [r4, #0]
    a9fa:	89a3      	ldrh	r3, [r4, #12]
    a9fc:	f043 0308 	orr.w	r3, r3, #8
    aa00:	81a3      	strh	r3, [r4, #12]
    aa02:	6923      	ldr	r3, [r4, #16]
    aa04:	b94b      	cbnz	r3, aa1a <__swsetup_r+0x76>
    aa06:	89a3      	ldrh	r3, [r4, #12]
    aa08:	f403 7320 	and.w	r3, r3, #640	; 0x280
    aa0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    aa10:	d003      	beq.n	aa1a <__swsetup_r+0x76>
    aa12:	4628      	mov	r0, r5
    aa14:	4621      	mov	r1, r4
    aa16:	f001 fbbd 	bl	c194 <__smakebuf_r>
    aa1a:	89a3      	ldrh	r3, [r4, #12]
    aa1c:	f013 0201 	ands.w	r2, r3, #1
    aa20:	d005      	beq.n	aa2e <__swsetup_r+0x8a>
    aa22:	2200      	movs	r2, #0
    aa24:	60a2      	str	r2, [r4, #8]
    aa26:	6962      	ldr	r2, [r4, #20]
    aa28:	4252      	negs	r2, r2
    aa2a:	61a2      	str	r2, [r4, #24]
    aa2c:	e003      	b.n	aa36 <__swsetup_r+0x92>
    aa2e:	0799      	lsls	r1, r3, #30
    aa30:	bf58      	it	pl
    aa32:	6962      	ldrpl	r2, [r4, #20]
    aa34:	60a2      	str	r2, [r4, #8]
    aa36:	6922      	ldr	r2, [r4, #16]
    aa38:	b94a      	cbnz	r2, aa4e <__swsetup_r+0xaa>
    aa3a:	f003 0080 	and.w	r0, r3, #128	; 0x80
    aa3e:	b280      	uxth	r0, r0
    aa40:	b130      	cbz	r0, aa50 <__swsetup_r+0xac>
    aa42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa46:	81a3      	strh	r3, [r4, #12]
    aa48:	f04f 30ff 	mov.w	r0, #4294967295
    aa4c:	bd38      	pop	{r3, r4, r5, pc}
    aa4e:	2000      	movs	r0, #0
    aa50:	bd38      	pop	{r3, r4, r5, pc}
    aa52:	bf00      	nop
    aa54:	200004a0 	.word	0x200004a0

0000aa58 <__register_exitproc>:
    aa58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aa5c:	4698      	mov	r8, r3
    aa5e:	4b22      	ldr	r3, [pc, #136]	; (aae8 <__register_exitproc+0x90>)
    aa60:	681c      	ldr	r4, [r3, #0]
    aa62:	4606      	mov	r6, r0
    aa64:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    aa68:	460f      	mov	r7, r1
    aa6a:	4691      	mov	r9, r2
    aa6c:	b918      	cbnz	r0, aa76 <__register_exitproc+0x1e>
    aa6e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    aa72:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    aa76:	6843      	ldr	r3, [r0, #4]
    aa78:	2b1f      	cmp	r3, #31
    aa7a:	dd16      	ble.n	aaaa <__register_exitproc+0x52>
    aa7c:	4b1b      	ldr	r3, [pc, #108]	; (aaec <__register_exitproc+0x94>)
    aa7e:	b91b      	cbnz	r3, aa88 <__register_exitproc+0x30>
    aa80:	f04f 30ff 	mov.w	r0, #4294967295
    aa84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aa88:	f44f 70c8 	mov.w	r0, #400	; 0x190
    aa8c:	f001 fbe6 	bl	c25c <malloc>
    aa90:	2800      	cmp	r0, #0
    aa92:	d0f5      	beq.n	aa80 <__register_exitproc+0x28>
    aa94:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    aa98:	6001      	str	r1, [r0, #0]
    aa9a:	2500      	movs	r5, #0
    aa9c:	6045      	str	r5, [r0, #4]
    aa9e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    aaa2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    aaa6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    aaaa:	6844      	ldr	r4, [r0, #4]
    aaac:	b19e      	cbz	r6, aad6 <__register_exitproc+0x7e>
    aaae:	eb00 0584 	add.w	r5, r0, r4, lsl #2
    aab2:	2201      	movs	r2, #1
    aab4:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
    aab8:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    aabc:	40a2      	lsls	r2, r4
    aabe:	4311      	orrs	r1, r2
    aac0:	2e02      	cmp	r6, #2
    aac2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    aac6:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    aaca:	d104      	bne.n	aad6 <__register_exitproc+0x7e>
    aacc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    aad0:	431a      	orrs	r2, r3
    aad2:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    aad6:	1c63      	adds	r3, r4, #1
    aad8:	3402      	adds	r4, #2
    aada:	6043      	str	r3, [r0, #4]
    aadc:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
    aae0:	2000      	movs	r0, #0
    aae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aae6:	bf00      	nop
    aae8:	00010a98 	.word	0x00010a98
    aaec:	0000c25d 	.word	0x0000c25d

0000aaf0 <register_fini>:
    aaf0:	4b02      	ldr	r3, [pc, #8]	; (aafc <register_fini+0xc>)
    aaf2:	b113      	cbz	r3, aafa <register_fini+0xa>
    aaf4:	4802      	ldr	r0, [pc, #8]	; (ab00 <register_fini+0x10>)
    aaf6:	f7fd bbc1 	b.w	827c <atexit>
    aafa:	4770      	bx	lr
    aafc:	00000000 	.word	0x00000000
    ab00:	00008289 	.word	0x00008289

0000ab04 <_close_r>:
    ab04:	b538      	push	{r3, r4, r5, lr}
    ab06:	4c06      	ldr	r4, [pc, #24]	; (ab20 <_close_r+0x1c>)
    ab08:	2300      	movs	r3, #0
    ab0a:	4605      	mov	r5, r0
    ab0c:	4608      	mov	r0, r1
    ab0e:	6023      	str	r3, [r4, #0]
    ab10:	f7fb fb40 	bl	6194 <_close>
    ab14:	1c43      	adds	r3, r0, #1
    ab16:	d102      	bne.n	ab1e <_close_r+0x1a>
    ab18:	6823      	ldr	r3, [r4, #0]
    ab1a:	b103      	cbz	r3, ab1e <_close_r+0x1a>
    ab1c:	602b      	str	r3, [r5, #0]
    ab1e:	bd38      	pop	{r3, r4, r5, pc}
    ab20:	20000fa8 	.word	0x20000fa8
    ab24:	00000000 	.word	0x00000000

0000ab28 <quorem>:
    ab28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab2c:	6903      	ldr	r3, [r0, #16]
    ab2e:	690c      	ldr	r4, [r1, #16]
    ab30:	42a3      	cmp	r3, r4
    ab32:	4680      	mov	r8, r0
    ab34:	f2c0 8081 	blt.w	ac3a <quorem+0x112>
    ab38:	3c01      	subs	r4, #1
    ab3a:	f101 0714 	add.w	r7, r1, #20
    ab3e:	00a2      	lsls	r2, r4, #2
    ab40:	f100 0514 	add.w	r5, r0, #20
    ab44:	4691      	mov	r9, r2
    ab46:	9200      	str	r2, [sp, #0]
    ab48:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
    ab4c:	442a      	add	r2, r5
    ab4e:	9201      	str	r2, [sp, #4]
    ab50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    ab54:	3601      	adds	r6, #1
    ab56:	fbb2 f6f6 	udiv	r6, r2, r6
    ab5a:	44b9      	add	r9, r7
    ab5c:	2e00      	cmp	r6, #0
    ab5e:	d03a      	beq.n	abd6 <quorem+0xae>
    ab60:	f04f 0e00 	mov.w	lr, #0
    ab64:	463a      	mov	r2, r7
    ab66:	4628      	mov	r0, r5
    ab68:	46f3      	mov	fp, lr
    ab6a:	f852 cb04 	ldr.w	ip, [r2], #4
    ab6e:	6803      	ldr	r3, [r0, #0]
    ab70:	fa1f fa8c 	uxth.w	sl, ip
    ab74:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    ab78:	fb0a ea06 	mla	sl, sl, r6, lr
    ab7c:	fb0c fc06 	mul.w	ip, ip, r6
    ab80:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
    ab84:	fa1f fa8a 	uxth.w	sl, sl
    ab88:	ebca 0a0b 	rsb	sl, sl, fp
    ab8c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    ab90:	fa1f fc8c 	uxth.w	ip, ip
    ab94:	fa1a fa83 	uxtah	sl, sl, r3
    ab98:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
    ab9c:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
    aba0:	fa1f fa8a 	uxth.w	sl, sl
    aba4:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
    aba8:	454a      	cmp	r2, r9
    abaa:	ea4f 4b2c 	mov.w	fp, ip, asr #16
    abae:	f840 ab04 	str.w	sl, [r0], #4
    abb2:	d9da      	bls.n	ab6a <quorem+0x42>
    abb4:	9a00      	ldr	r2, [sp, #0]
    abb6:	58ab      	ldr	r3, [r5, r2]
    abb8:	b96b      	cbnz	r3, abd6 <quorem+0xae>
    abba:	9a01      	ldr	r2, [sp, #4]
    abbc:	1f13      	subs	r3, r2, #4
    abbe:	42ab      	cmp	r3, r5
    abc0:	461a      	mov	r2, r3
    abc2:	d802      	bhi.n	abca <quorem+0xa2>
    abc4:	f8c8 4010 	str.w	r4, [r8, #16]
    abc8:	e005      	b.n	abd6 <quorem+0xae>
    abca:	6812      	ldr	r2, [r2, #0]
    abcc:	3b04      	subs	r3, #4
    abce:	2a00      	cmp	r2, #0
    abd0:	d1f8      	bne.n	abc4 <quorem+0x9c>
    abd2:	3c01      	subs	r4, #1
    abd4:	e7f3      	b.n	abbe <quorem+0x96>
    abd6:	4640      	mov	r0, r8
    abd8:	f002 f81f 	bl	cc1a <__mcmp>
    abdc:	2800      	cmp	r0, #0
    abde:	db2a      	blt.n	ac36 <quorem+0x10e>
    abe0:	3601      	adds	r6, #1
    abe2:	462b      	mov	r3, r5
    abe4:	2000      	movs	r0, #0
    abe6:	f857 cb04 	ldr.w	ip, [r7], #4
    abea:	681a      	ldr	r2, [r3, #0]
    abec:	fa1f f18c 	uxth.w	r1, ip
    abf0:	1a41      	subs	r1, r0, r1
    abf2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    abf6:	fa11 f182 	uxtah	r1, r1, r2
    abfa:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
    abfe:	eb02 4221 	add.w	r2, r2, r1, asr #16
    ac02:	b289      	uxth	r1, r1
    ac04:	1410      	asrs	r0, r2, #16
    ac06:	454f      	cmp	r7, r9
    ac08:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    ac0c:	f843 2b04 	str.w	r2, [r3], #4
    ac10:	d9e9      	bls.n	abe6 <quorem+0xbe>
    ac12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    ac16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    ac1a:	b962      	cbnz	r2, ac36 <quorem+0x10e>
    ac1c:	3b04      	subs	r3, #4
    ac1e:	42ab      	cmp	r3, r5
    ac20:	461a      	mov	r2, r3
    ac22:	d802      	bhi.n	ac2a <quorem+0x102>
    ac24:	f8c8 4010 	str.w	r4, [r8, #16]
    ac28:	e005      	b.n	ac36 <quorem+0x10e>
    ac2a:	6812      	ldr	r2, [r2, #0]
    ac2c:	3b04      	subs	r3, #4
    ac2e:	2a00      	cmp	r2, #0
    ac30:	d1f8      	bne.n	ac24 <quorem+0xfc>
    ac32:	3c01      	subs	r4, #1
    ac34:	e7f3      	b.n	ac1e <quorem+0xf6>
    ac36:	4630      	mov	r0, r6
    ac38:	e000      	b.n	ac3c <quorem+0x114>
    ac3a:	2000      	movs	r0, #0
    ac3c:	b003      	add	sp, #12
    ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ac42 <_dtoa_r>:
    ac42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac46:	6c01      	ldr	r1, [r0, #64]	; 0x40
    ac48:	b09b      	sub	sp, #108	; 0x6c
    ac4a:	4682      	mov	sl, r0
    ac4c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    ac4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ac52:	b151      	cbz	r1, ac6a <_dtoa_r+0x28>
    ac54:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ac56:	604b      	str	r3, [r1, #4]
    ac58:	2201      	movs	r2, #1
    ac5a:	fa02 f303 	lsl.w	r3, r2, r3
    ac5e:	608b      	str	r3, [r1, #8]
    ac60:	f001 fdd6 	bl	c810 <_Bfree>
    ac64:	2300      	movs	r3, #0
    ac66:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    ac6a:	9805      	ldr	r0, [sp, #20]
    ac6c:	2800      	cmp	r0, #0
    ac6e:	da05      	bge.n	ac7c <_dtoa_r+0x3a>
    ac70:	2301      	movs	r3, #1
    ac72:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    ac76:	6023      	str	r3, [r4, #0]
    ac78:	9105      	str	r1, [sp, #20]
    ac7a:	e001      	b.n	ac80 <_dtoa_r+0x3e>
    ac7c:	2300      	movs	r3, #0
    ac7e:	6023      	str	r3, [r4, #0]
    ac80:	9f05      	ldr	r7, [sp, #20]
    ac82:	4a9b      	ldr	r2, [pc, #620]	; (aef0 <_dtoa_r+0x2ae>)
    ac84:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
    ac88:	0d1b      	lsrs	r3, r3, #20
    ac8a:	051b      	lsls	r3, r3, #20
    ac8c:	4293      	cmp	r3, r2
    ac8e:	d11d      	bne.n	accc <_dtoa_r+0x8a>
    ac90:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ac92:	f242 730f 	movw	r3, #9999	; 0x270f
    ac96:	6013      	str	r3, [r2, #0]
    ac98:	9b04      	ldr	r3, [sp, #16]
    ac9a:	b943      	cbnz	r3, acae <_dtoa_r+0x6c>
    ac9c:	4b95      	ldr	r3, [pc, #596]	; (aef4 <_dtoa_r+0x2b2>)
    ac9e:	4a96      	ldr	r2, [pc, #600]	; (aef8 <_dtoa_r+0x2b6>)
    aca0:	f3c7 0013 	ubfx	r0, r7, #0, #20
    aca4:	2800      	cmp	r0, #0
    aca6:	bf0c      	ite	eq
    aca8:	4610      	moveq	r0, r2
    acaa:	4618      	movne	r0, r3
    acac:	e000      	b.n	acb0 <_dtoa_r+0x6e>
    acae:	4891      	ldr	r0, [pc, #580]	; (aef4 <_dtoa_r+0x2b2>)
    acb0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    acb2:	2f00      	cmp	r7, #0
    acb4:	f000 856d 	beq.w	b792 <_dtoa_r+0xb50>
    acb8:	78c3      	ldrb	r3, [r0, #3]
    acba:	b113      	cbz	r3, acc2 <_dtoa_r+0x80>
    acbc:	f100 0308 	add.w	r3, r0, #8
    acc0:	e000      	b.n	acc4 <_dtoa_r+0x82>
    acc2:	1cc3      	adds	r3, r0, #3
    acc4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    acc6:	603b      	str	r3, [r7, #0]
    acc8:	f000 bd63 	b.w	b792 <_dtoa_r+0xb50>
    accc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    acd0:	2200      	movs	r2, #0
    acd2:	4620      	mov	r0, r4
    acd4:	4629      	mov	r1, r5
    acd6:	2300      	movs	r3, #0
    acd8:	f005 fab2 	bl	10240 <__aeabi_dcmpeq>
    acdc:	4680      	mov	r8, r0
    acde:	b158      	cbz	r0, acf8 <_dtoa_r+0xb6>
    ace0:	9f26      	ldr	r7, [sp, #152]	; 0x98
    ace2:	2301      	movs	r3, #1
    ace4:	603b      	str	r3, [r7, #0]
    ace6:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    ace8:	2f00      	cmp	r7, #0
    acea:	f000 854f 	beq.w	b78c <_dtoa_r+0xb4a>
    acee:	4883      	ldr	r0, [pc, #524]	; (aefc <_dtoa_r+0x2ba>)
    acf0:	6038      	str	r0, [r7, #0]
    acf2:	3801      	subs	r0, #1
    acf4:	f000 bd4d 	b.w	b792 <_dtoa_r+0xb50>
    acf8:	ab19      	add	r3, sp, #100	; 0x64
    acfa:	9300      	str	r3, [sp, #0]
    acfc:	ab18      	add	r3, sp, #96	; 0x60
    acfe:	9301      	str	r3, [sp, #4]
    ad00:	4650      	mov	r0, sl
    ad02:	4622      	mov	r2, r4
    ad04:	462b      	mov	r3, r5
    ad06:	f002 f878 	bl	cdfa <__d2b>
    ad0a:	f3c7 560a 	ubfx	r6, r7, #20, #11
    ad0e:	4683      	mov	fp, r0
    ad10:	b15e      	cbz	r6, ad2a <_dtoa_r+0xe8>
    ad12:	f3c5 0313 	ubfx	r3, r5, #0, #20
    ad16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ad1a:	4620      	mov	r0, r4
    ad1c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    ad20:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    ad24:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    ad28:	e01c      	b.n	ad64 <_dtoa_r+0x122>
    ad2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ad2c:	9e18      	ldr	r6, [sp, #96]	; 0x60
    ad2e:	441e      	add	r6, r3
    ad30:	f46f 6382 	mvn.w	r3, #1040	; 0x410
    ad34:	429e      	cmp	r6, r3
    ad36:	db09      	blt.n	ad4c <_dtoa_r+0x10a>
    ad38:	9904      	ldr	r1, [sp, #16]
    ad3a:	331f      	adds	r3, #31
    ad3c:	f206 4012 	addw	r0, r6, #1042	; 0x412
    ad40:	1b9b      	subs	r3, r3, r6
    ad42:	fa21 f000 	lsr.w	r0, r1, r0
    ad46:	409f      	lsls	r7, r3
    ad48:	4338      	orrs	r0, r7
    ad4a:	e004      	b.n	ad56 <_dtoa_r+0x114>
    ad4c:	486c      	ldr	r0, [pc, #432]	; (af00 <_dtoa_r+0x2be>)
    ad4e:	9a04      	ldr	r2, [sp, #16]
    ad50:	1b80      	subs	r0, r0, r6
    ad52:	fa02 f000 	lsl.w	r0, r2, r0
    ad56:	f7fc fab5 	bl	72c4 <__aeabi_ui2d>
    ad5a:	2701      	movs	r7, #1
    ad5c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    ad60:	3e01      	subs	r6, #1
    ad62:	9715      	str	r7, [sp, #84]	; 0x54
    ad64:	2200      	movs	r2, #0
    ad66:	4b67      	ldr	r3, [pc, #412]	; (af04 <_dtoa_r+0x2c2>)
    ad68:	f7fc f96e 	bl	7048 <__aeabi_dsub>
    ad6c:	a35a      	add	r3, pc, #360	; (adr r3, aed8 <_dtoa_r+0x296>)
    ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad72:	f7fc fb1d 	bl	73b0 <__aeabi_dmul>
    ad76:	a35a      	add	r3, pc, #360	; (adr r3, aee0 <_dtoa_r+0x29e>)
    ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad7c:	f7fc f966 	bl	704c <__adddf3>
    ad80:	4604      	mov	r4, r0
    ad82:	4630      	mov	r0, r6
    ad84:	460d      	mov	r5, r1
    ad86:	f7fc faad 	bl	72e4 <__aeabi_i2d>
    ad8a:	a357      	add	r3, pc, #348	; (adr r3, aee8 <_dtoa_r+0x2a6>)
    ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad90:	f7fc fb0e 	bl	73b0 <__aeabi_dmul>
    ad94:	4602      	mov	r2, r0
    ad96:	460b      	mov	r3, r1
    ad98:	4620      	mov	r0, r4
    ad9a:	4629      	mov	r1, r5
    ad9c:	f7fc f956 	bl	704c <__adddf3>
    ada0:	4604      	mov	r4, r0
    ada2:	460d      	mov	r5, r1
    ada4:	f005 fa7e 	bl	102a4 <__aeabi_d2iz>
    ada8:	4629      	mov	r1, r5
    adaa:	4681      	mov	r9, r0
    adac:	2200      	movs	r2, #0
    adae:	4620      	mov	r0, r4
    adb0:	2300      	movs	r3, #0
    adb2:	f005 fa4f 	bl	10254 <__aeabi_dcmplt>
    adb6:	b158      	cbz	r0, add0 <_dtoa_r+0x18e>
    adb8:	4648      	mov	r0, r9
    adba:	f7fc fa93 	bl	72e4 <__aeabi_i2d>
    adbe:	4602      	mov	r2, r0
    adc0:	460b      	mov	r3, r1
    adc2:	4620      	mov	r0, r4
    adc4:	4629      	mov	r1, r5
    adc6:	f005 fa3b 	bl	10240 <__aeabi_dcmpeq>
    adca:	b908      	cbnz	r0, add0 <_dtoa_r+0x18e>
    adcc:	f109 39ff 	add.w	r9, r9, #4294967295
    add0:	f1b9 0f16 	cmp.w	r9, #22
    add4:	d80d      	bhi.n	adf2 <_dtoa_r+0x1b0>
    add6:	4b4c      	ldr	r3, [pc, #304]	; (af08 <_dtoa_r+0x2c6>)
    add8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    addc:	e9d3 0100 	ldrd	r0, r1, [r3]
    ade0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ade4:	f005 fa54 	bl	10290 <__aeabi_dcmpgt>
    ade8:	b130      	cbz	r0, adf8 <_dtoa_r+0x1b6>
    adea:	f109 39ff 	add.w	r9, r9, #4294967295
    adee:	2700      	movs	r7, #0
    adf0:	e000      	b.n	adf4 <_dtoa_r+0x1b2>
    adf2:	2701      	movs	r7, #1
    adf4:	9714      	str	r7, [sp, #80]	; 0x50
    adf6:	e000      	b.n	adfa <_dtoa_r+0x1b8>
    adf8:	9014      	str	r0, [sp, #80]	; 0x50
    adfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    adfc:	1b9e      	subs	r6, r3, r6
    adfe:	3e01      	subs	r6, #1
    ae00:	960a      	str	r6, [sp, #40]	; 0x28
    ae02:	d504      	bpl.n	ae0e <_dtoa_r+0x1cc>
    ae04:	4277      	negs	r7, r6
    ae06:	9708      	str	r7, [sp, #32]
    ae08:	2700      	movs	r7, #0
    ae0a:	970a      	str	r7, [sp, #40]	; 0x28
    ae0c:	e001      	b.n	ae12 <_dtoa_r+0x1d0>
    ae0e:	2700      	movs	r7, #0
    ae10:	9708      	str	r7, [sp, #32]
    ae12:	f1b9 0f00 	cmp.w	r9, #0
    ae16:	db07      	blt.n	ae28 <_dtoa_r+0x1e6>
    ae18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ae1a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    ae1e:	444f      	add	r7, r9
    ae20:	970a      	str	r7, [sp, #40]	; 0x28
    ae22:	2700      	movs	r7, #0
    ae24:	970e      	str	r7, [sp, #56]	; 0x38
    ae26:	e008      	b.n	ae3a <_dtoa_r+0x1f8>
    ae28:	9f08      	ldr	r7, [sp, #32]
    ae2a:	ebc9 0707 	rsb	r7, r9, r7
    ae2e:	9708      	str	r7, [sp, #32]
    ae30:	f1c9 0700 	rsb	r7, r9, #0
    ae34:	970e      	str	r7, [sp, #56]	; 0x38
    ae36:	2700      	movs	r7, #0
    ae38:	9711      	str	r7, [sp, #68]	; 0x44
    ae3a:	9f24      	ldr	r7, [sp, #144]	; 0x90
    ae3c:	2f09      	cmp	r7, #9
    ae3e:	d828      	bhi.n	ae92 <_dtoa_r+0x250>
    ae40:	2f05      	cmp	r7, #5
    ae42:	bfc4      	itt	gt
    ae44:	3f04      	subgt	r7, #4
    ae46:	9724      	strgt	r7, [sp, #144]	; 0x90
    ae48:	9f24      	ldr	r7, [sp, #144]	; 0x90
    ae4a:	f1a7 0302 	sub.w	r3, r7, #2
    ae4e:	bfcc      	ite	gt
    ae50:	2400      	movgt	r4, #0
    ae52:	2401      	movle	r4, #1
    ae54:	2b03      	cmp	r3, #3
    ae56:	d821      	bhi.n	ae9c <_dtoa_r+0x25a>
    ae58:	e8df f003 	tbb	[pc, r3]
    ae5c:	04020f06 	.word	0x04020f06
    ae60:	2701      	movs	r7, #1
    ae62:	e002      	b.n	ae6a <_dtoa_r+0x228>
    ae64:	2701      	movs	r7, #1
    ae66:	e009      	b.n	ae7c <_dtoa_r+0x23a>
    ae68:	2700      	movs	r7, #0
    ae6a:	970f      	str	r7, [sp, #60]	; 0x3c
    ae6c:	9f25      	ldr	r7, [sp, #148]	; 0x94
    ae6e:	2f00      	cmp	r7, #0
    ae70:	dd1e      	ble.n	aeb0 <_dtoa_r+0x26e>
    ae72:	970b      	str	r7, [sp, #44]	; 0x2c
    ae74:	9707      	str	r7, [sp, #28]
    ae76:	463b      	mov	r3, r7
    ae78:	e01f      	b.n	aeba <_dtoa_r+0x278>
    ae7a:	2700      	movs	r7, #0
    ae7c:	970f      	str	r7, [sp, #60]	; 0x3c
    ae7e:	9f25      	ldr	r7, [sp, #148]	; 0x94
    ae80:	444f      	add	r7, r9
    ae82:	970b      	str	r7, [sp, #44]	; 0x2c
    ae84:	3701      	adds	r7, #1
    ae86:	463b      	mov	r3, r7
    ae88:	9707      	str	r7, [sp, #28]
    ae8a:	2b01      	cmp	r3, #1
    ae8c:	bfb8      	it	lt
    ae8e:	2301      	movlt	r3, #1
    ae90:	e013      	b.n	aeba <_dtoa_r+0x278>
    ae92:	2401      	movs	r4, #1
    ae94:	2700      	movs	r7, #0
    ae96:	9724      	str	r7, [sp, #144]	; 0x90
    ae98:	940f      	str	r4, [sp, #60]	; 0x3c
    ae9a:	e001      	b.n	aea0 <_dtoa_r+0x25e>
    ae9c:	2701      	movs	r7, #1
    ae9e:	970f      	str	r7, [sp, #60]	; 0x3c
    aea0:	f04f 37ff 	mov.w	r7, #4294967295
    aea4:	970b      	str	r7, [sp, #44]	; 0x2c
    aea6:	9707      	str	r7, [sp, #28]
    aea8:	2700      	movs	r7, #0
    aeaa:	2312      	movs	r3, #18
    aeac:	9725      	str	r7, [sp, #148]	; 0x94
    aeae:	e004      	b.n	aeba <_dtoa_r+0x278>
    aeb0:	2701      	movs	r7, #1
    aeb2:	970b      	str	r7, [sp, #44]	; 0x2c
    aeb4:	9707      	str	r7, [sp, #28]
    aeb6:	463b      	mov	r3, r7
    aeb8:	9725      	str	r7, [sp, #148]	; 0x94
    aeba:	2200      	movs	r2, #0
    aebc:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
    aec0:	2204      	movs	r2, #4
    aec2:	f102 0114 	add.w	r1, r2, #20
    aec6:	4299      	cmp	r1, r3
    aec8:	d820      	bhi.n	af0c <_dtoa_r+0x2ca>
    aeca:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
    aece:	3101      	adds	r1, #1
    aed0:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
    aed4:	0052      	lsls	r2, r2, #1
    aed6:	e7f4      	b.n	aec2 <_dtoa_r+0x280>
    aed8:	636f4361 	.word	0x636f4361
    aedc:	3fd287a7 	.word	0x3fd287a7
    aee0:	8b60c8b3 	.word	0x8b60c8b3
    aee4:	3fc68a28 	.word	0x3fc68a28
    aee8:	509f79fb 	.word	0x509f79fb
    aeec:	3fd34413 	.word	0x3fd34413
    aef0:	7ff00000 	.word	0x7ff00000
    aef4:	00010b42 	.word	0x00010b42
    aef8:	00010b39 	.word	0x00010b39
    aefc:	00010af1 	.word	0x00010af1
    af00:	fffffbee 	.word	0xfffffbee
    af04:	3ff80000 	.word	0x3ff80000
    af08:	00010b60 	.word	0x00010b60
    af0c:	4650      	mov	r0, sl
    af0e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
    af12:	f001 fc57 	bl	c7c4 <_Balloc>
    af16:	9f07      	ldr	r7, [sp, #28]
    af18:	9009      	str	r0, [sp, #36]	; 0x24
    af1a:	2f0e      	cmp	r7, #14
    af1c:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
    af20:	f200 816a 	bhi.w	b1f8 <_dtoa_r+0x5b6>
    af24:	2c00      	cmp	r4, #0
    af26:	f000 8167 	beq.w	b1f8 <_dtoa_r+0x5b6>
    af2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af2e:	f1b9 0f00 	cmp.w	r9, #0
    af32:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    af36:	dd31      	ble.n	af9c <_dtoa_r+0x35a>
    af38:	4a80      	ldr	r2, [pc, #512]	; (b13c <_dtoa_r+0x4fa>)
    af3a:	f009 030f 	and.w	r3, r9, #15
    af3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    af42:	e9d3 0100 	ldrd	r0, r1, [r3]
    af46:	ea4f 1429 	mov.w	r4, r9, asr #4
    af4a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    af4e:	06e0      	lsls	r0, r4, #27
    af50:	d50c      	bpl.n	af6c <_dtoa_r+0x32a>
    af52:	4b7b      	ldr	r3, [pc, #492]	; (b140 <_dtoa_r+0x4fe>)
    af54:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    af58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    af5c:	f7fc fb52 	bl	7604 <__aeabi_ddiv>
    af60:	f004 040f 	and.w	r4, r4, #15
    af64:	e9cd 0104 	strd	r0, r1, [sp, #16]
    af68:	2703      	movs	r7, #3
    af6a:	e000      	b.n	af6e <_dtoa_r+0x32c>
    af6c:	2702      	movs	r7, #2
    af6e:	4d74      	ldr	r5, [pc, #464]	; (b140 <_dtoa_r+0x4fe>)
    af70:	b16c      	cbz	r4, af8e <_dtoa_r+0x34c>
    af72:	07e1      	lsls	r1, r4, #31
    af74:	d508      	bpl.n	af88 <_dtoa_r+0x346>
    af76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    af7a:	e9d5 2300 	ldrd	r2, r3, [r5]
    af7e:	f7fc fa17 	bl	73b0 <__aeabi_dmul>
    af82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    af86:	3701      	adds	r7, #1
    af88:	1064      	asrs	r4, r4, #1
    af8a:	3508      	adds	r5, #8
    af8c:	e7f0      	b.n	af70 <_dtoa_r+0x32e>
    af8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    af96:	f7fc fb35 	bl	7604 <__aeabi_ddiv>
    af9a:	e01b      	b.n	afd4 <_dtoa_r+0x392>
    af9c:	f1c9 0400 	rsb	r4, r9, #0
    afa0:	b1dc      	cbz	r4, afda <_dtoa_r+0x398>
    afa2:	4b66      	ldr	r3, [pc, #408]	; (b13c <_dtoa_r+0x4fa>)
    afa4:	4d66      	ldr	r5, [pc, #408]	; (b140 <_dtoa_r+0x4fe>)
    afa6:	f004 020f 	and.w	r2, r4, #15
    afaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    afae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    afb6:	f7fc f9fb 	bl	73b0 <__aeabi_dmul>
    afba:	1124      	asrs	r4, r4, #4
    afbc:	2702      	movs	r7, #2
    afbe:	b14c      	cbz	r4, afd4 <_dtoa_r+0x392>
    afc0:	07e2      	lsls	r2, r4, #31
    afc2:	d504      	bpl.n	afce <_dtoa_r+0x38c>
    afc4:	e9d5 2300 	ldrd	r2, r3, [r5]
    afc8:	3701      	adds	r7, #1
    afca:	f7fc f9f1 	bl	73b0 <__aeabi_dmul>
    afce:	1064      	asrs	r4, r4, #1
    afd0:	3508      	adds	r5, #8
    afd2:	e7f4      	b.n	afbe <_dtoa_r+0x37c>
    afd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    afd8:	e000      	b.n	afdc <_dtoa_r+0x39a>
    afda:	2702      	movs	r7, #2
    afdc:	9914      	ldr	r1, [sp, #80]	; 0x50
    afde:	b1e9      	cbz	r1, b01c <_dtoa_r+0x3da>
    afe0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    afe4:	2200      	movs	r2, #0
    afe6:	4620      	mov	r0, r4
    afe8:	4629      	mov	r1, r5
    afea:	4b56      	ldr	r3, [pc, #344]	; (b144 <_dtoa_r+0x502>)
    afec:	f005 f932 	bl	10254 <__aeabi_dcmplt>
    aff0:	b1c8      	cbz	r0, b026 <_dtoa_r+0x3e4>
    aff2:	9a07      	ldr	r2, [sp, #28]
    aff4:	b1e2      	cbz	r2, b030 <_dtoa_r+0x3ee>
    aff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aff8:	2b00      	cmp	r3, #0
    affa:	f340 80f9 	ble.w	b1f0 <_dtoa_r+0x5ae>
    affe:	f109 30ff 	add.w	r0, r9, #4294967295
    b002:	9010      	str	r0, [sp, #64]	; 0x40
    b004:	4629      	mov	r1, r5
    b006:	4620      	mov	r0, r4
    b008:	2200      	movs	r2, #0
    b00a:	4b4f      	ldr	r3, [pc, #316]	; (b148 <_dtoa_r+0x506>)
    b00c:	f7fc f9d0 	bl	73b0 <__aeabi_dmul>
    b010:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b014:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b016:	910c      	str	r1, [sp, #48]	; 0x30
    b018:	3701      	adds	r7, #1
    b01a:	e00d      	b.n	b038 <_dtoa_r+0x3f6>
    b01c:	9a07      	ldr	r2, [sp, #28]
    b01e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    b022:	920c      	str	r2, [sp, #48]	; 0x30
    b024:	e008      	b.n	b038 <_dtoa_r+0x3f6>
    b026:	9b07      	ldr	r3, [sp, #28]
    b028:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    b02c:	930c      	str	r3, [sp, #48]	; 0x30
    b02e:	e003      	b.n	b038 <_dtoa_r+0x3f6>
    b030:	9807      	ldr	r0, [sp, #28]
    b032:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    b036:	900c      	str	r0, [sp, #48]	; 0x30
    b038:	4638      	mov	r0, r7
    b03a:	f7fc f953 	bl	72e4 <__aeabi_i2d>
    b03e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b042:	f7fc f9b5 	bl	73b0 <__aeabi_dmul>
    b046:	2200      	movs	r2, #0
    b048:	4b40      	ldr	r3, [pc, #256]	; (b14c <_dtoa_r+0x50a>)
    b04a:	f7fb ffff 	bl	704c <__adddf3>
    b04e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b050:	4604      	mov	r4, r0
    b052:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    b056:	b9cf      	cbnz	r7, b08c <_dtoa_r+0x44a>
    b058:	2200      	movs	r2, #0
    b05a:	4b3d      	ldr	r3, [pc, #244]	; (b150 <_dtoa_r+0x50e>)
    b05c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b060:	f7fb fff2 	bl	7048 <__aeabi_dsub>
    b064:	4622      	mov	r2, r4
    b066:	462b      	mov	r3, r5
    b068:	4606      	mov	r6, r0
    b06a:	460f      	mov	r7, r1
    b06c:	f005 f910 	bl	10290 <__aeabi_dcmpgt>
    b070:	2800      	cmp	r0, #0
    b072:	f040 8252 	bne.w	b51a <_dtoa_r+0x8d8>
    b076:	4622      	mov	r2, r4
    b078:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    b07c:	4630      	mov	r0, r6
    b07e:	4639      	mov	r1, r7
    b080:	f005 f8e8 	bl	10254 <__aeabi_dcmplt>
    b084:	2800      	cmp	r0, #0
    b086:	f040 823e 	bne.w	b506 <_dtoa_r+0x8c4>
    b08a:	e0b1      	b.n	b1f0 <_dtoa_r+0x5ae>
    b08c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b08e:	4b2b      	ldr	r3, [pc, #172]	; (b13c <_dtoa_r+0x4fa>)
    b090:	1e7a      	subs	r2, r7, #1
    b092:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    b094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b098:	2f00      	cmp	r7, #0
    b09a:	d05d      	beq.n	b158 <_dtoa_r+0x516>
    b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0a0:	2000      	movs	r0, #0
    b0a2:	492c      	ldr	r1, [pc, #176]	; (b154 <_dtoa_r+0x512>)
    b0a4:	f7fc faae 	bl	7604 <__aeabi_ddiv>
    b0a8:	4622      	mov	r2, r4
    b0aa:	462b      	mov	r3, r5
    b0ac:	f7fb ffcc 	bl	7048 <__aeabi_dsub>
    b0b0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    b0b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    b0b8:	4604      	mov	r4, r0
    b0ba:	460d      	mov	r5, r1
    b0bc:	4639      	mov	r1, r7
    b0be:	4630      	mov	r0, r6
    b0c0:	f005 f8f0 	bl	102a4 <__aeabi_d2iz>
    b0c4:	9002      	str	r0, [sp, #8]
    b0c6:	f7fc f90d 	bl	72e4 <__aeabi_i2d>
    b0ca:	4602      	mov	r2, r0
    b0cc:	460b      	mov	r3, r1
    b0ce:	4630      	mov	r0, r6
    b0d0:	4639      	mov	r1, r7
    b0d2:	f7fb ffb9 	bl	7048 <__aeabi_dsub>
    b0d6:	f8dd c008 	ldr.w	ip, [sp, #8]
    b0da:	f10c 0330 	add.w	r3, ip, #48	; 0x30
    b0de:	f808 3b01 	strb.w	r3, [r8], #1
    b0e2:	4622      	mov	r2, r4
    b0e4:	462b      	mov	r3, r5
    b0e6:	4606      	mov	r6, r0
    b0e8:	460f      	mov	r7, r1
    b0ea:	f005 f8b3 	bl	10254 <__aeabi_dcmplt>
    b0ee:	2800      	cmp	r0, #0
    b0f0:	f040 833a 	bne.w	b768 <_dtoa_r+0xb26>
    b0f4:	4632      	mov	r2, r6
    b0f6:	463b      	mov	r3, r7
    b0f8:	2000      	movs	r0, #0
    b0fa:	4912      	ldr	r1, [pc, #72]	; (b144 <_dtoa_r+0x502>)
    b0fc:	f7fb ffa4 	bl	7048 <__aeabi_dsub>
    b100:	4622      	mov	r2, r4
    b102:	462b      	mov	r3, r5
    b104:	f005 f8a6 	bl	10254 <__aeabi_dcmplt>
    b108:	2800      	cmp	r0, #0
    b10a:	f040 80d4 	bne.w	b2b6 <_dtoa_r+0x674>
    b10e:	9809      	ldr	r0, [sp, #36]	; 0x24
    b110:	990c      	ldr	r1, [sp, #48]	; 0x30
    b112:	ebc0 0308 	rsb	r3, r0, r8
    b116:	428b      	cmp	r3, r1
    b118:	da6a      	bge.n	b1f0 <_dtoa_r+0x5ae>
    b11a:	4620      	mov	r0, r4
    b11c:	4629      	mov	r1, r5
    b11e:	2200      	movs	r2, #0
    b120:	4b09      	ldr	r3, [pc, #36]	; (b148 <_dtoa_r+0x506>)
    b122:	f7fc f945 	bl	73b0 <__aeabi_dmul>
    b126:	2200      	movs	r2, #0
    b128:	4604      	mov	r4, r0
    b12a:	460d      	mov	r5, r1
    b12c:	4630      	mov	r0, r6
    b12e:	4639      	mov	r1, r7
    b130:	4b05      	ldr	r3, [pc, #20]	; (b148 <_dtoa_r+0x506>)
    b132:	f7fc f93d 	bl	73b0 <__aeabi_dmul>
    b136:	4606      	mov	r6, r0
    b138:	460f      	mov	r7, r1
    b13a:	e7bf      	b.n	b0bc <_dtoa_r+0x47a>
    b13c:	00010b60 	.word	0x00010b60
    b140:	00010c50 	.word	0x00010c50
    b144:	3ff00000 	.word	0x3ff00000
    b148:	40240000 	.word	0x40240000
    b14c:	401c0000 	.word	0x401c0000
    b150:	40140000 	.word	0x40140000
    b154:	3fe00000 	.word	0x3fe00000
    b158:	4622      	mov	r2, r4
    b15a:	e9d3 0100 	ldrd	r0, r1, [r3]
    b15e:	462b      	mov	r3, r5
    b160:	f7fc f926 	bl	73b0 <__aeabi_dmul>
    b164:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    b168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b16a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b16c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    b170:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    b174:	4490      	add	r8, r2
    b176:	4639      	mov	r1, r7
    b178:	4630      	mov	r0, r6
    b17a:	f005 f893 	bl	102a4 <__aeabi_d2iz>
    b17e:	4605      	mov	r5, r0
    b180:	f7fc f8b0 	bl	72e4 <__aeabi_i2d>
    b184:	3530      	adds	r5, #48	; 0x30
    b186:	4602      	mov	r2, r0
    b188:	460b      	mov	r3, r1
    b18a:	4630      	mov	r0, r6
    b18c:	4639      	mov	r1, r7
    b18e:	f7fb ff5b 	bl	7048 <__aeabi_dsub>
    b192:	f804 5b01 	strb.w	r5, [r4], #1
    b196:	4544      	cmp	r4, r8
    b198:	4606      	mov	r6, r0
    b19a:	460f      	mov	r7, r1
    b19c:	d121      	bne.n	b1e2 <_dtoa_r+0x5a0>
    b19e:	2200      	movs	r2, #0
    b1a0:	4b87      	ldr	r3, [pc, #540]	; (b3c0 <_dtoa_r+0x77e>)
    b1a2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    b1a6:	f7fb ff51 	bl	704c <__adddf3>
    b1aa:	4602      	mov	r2, r0
    b1ac:	460b      	mov	r3, r1
    b1ae:	4630      	mov	r0, r6
    b1b0:	4639      	mov	r1, r7
    b1b2:	f005 f86d 	bl	10290 <__aeabi_dcmpgt>
    b1b6:	2800      	cmp	r0, #0
    b1b8:	d17d      	bne.n	b2b6 <_dtoa_r+0x674>
    b1ba:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    b1be:	2000      	movs	r0, #0
    b1c0:	497f      	ldr	r1, [pc, #508]	; (b3c0 <_dtoa_r+0x77e>)
    b1c2:	f7fb ff41 	bl	7048 <__aeabi_dsub>
    b1c6:	4602      	mov	r2, r0
    b1c8:	460b      	mov	r3, r1
    b1ca:	4630      	mov	r0, r6
    b1cc:	4639      	mov	r1, r7
    b1ce:	f005 f841 	bl	10254 <__aeabi_dcmplt>
    b1d2:	b168      	cbz	r0, b1f0 <_dtoa_r+0x5ae>
    b1d4:	46a0      	mov	r8, r4
    b1d6:	3c01      	subs	r4, #1
    b1d8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    b1dc:	2b30      	cmp	r3, #48	; 0x30
    b1de:	d0f9      	beq.n	b1d4 <_dtoa_r+0x592>
    b1e0:	e2c2      	b.n	b768 <_dtoa_r+0xb26>
    b1e2:	2200      	movs	r2, #0
    b1e4:	4b77      	ldr	r3, [pc, #476]	; (b3c4 <_dtoa_r+0x782>)
    b1e6:	f7fc f8e3 	bl	73b0 <__aeabi_dmul>
    b1ea:	4606      	mov	r6, r0
    b1ec:	460f      	mov	r7, r1
    b1ee:	e7c2      	b.n	b176 <_dtoa_r+0x534>
    b1f0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    b1f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b1f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	db7c      	blt.n	b2f8 <_dtoa_r+0x6b6>
    b1fe:	f1b9 0f0e 	cmp.w	r9, #14
    b202:	dc79      	bgt.n	b2f8 <_dtoa_r+0x6b6>
    b204:	4b70      	ldr	r3, [pc, #448]	; (b3c8 <_dtoa_r+0x786>)
    b206:	9f25      	ldr	r7, [sp, #148]	; 0x94
    b208:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    b20c:	2f00      	cmp	r7, #0
    b20e:	e9d3 4500 	ldrd	r4, r5, [r3]
    b212:	da14      	bge.n	b23e <_dtoa_r+0x5fc>
    b214:	9f07      	ldr	r7, [sp, #28]
    b216:	2f00      	cmp	r7, #0
    b218:	dc11      	bgt.n	b23e <_dtoa_r+0x5fc>
    b21a:	f040 8176 	bne.w	b50a <_dtoa_r+0x8c8>
    b21e:	4620      	mov	r0, r4
    b220:	4629      	mov	r1, r5
    b222:	2200      	movs	r2, #0
    b224:	4b69      	ldr	r3, [pc, #420]	; (b3cc <_dtoa_r+0x78a>)
    b226:	f7fc f8c3 	bl	73b0 <__aeabi_dmul>
    b22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b22e:	f005 f825 	bl	1027c <__aeabi_dcmpge>
    b232:	9d07      	ldr	r5, [sp, #28]
    b234:	462c      	mov	r4, r5
    b236:	2800      	cmp	r0, #0
    b238:	f040 8169 	bne.w	b50e <_dtoa_r+0x8cc>
    b23c:	e171      	b.n	b522 <_dtoa_r+0x8e0>
    b23e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    b242:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    b246:	4622      	mov	r2, r4
    b248:	462b      	mov	r3, r5
    b24a:	4630      	mov	r0, r6
    b24c:	4639      	mov	r1, r7
    b24e:	f7fc f9d9 	bl	7604 <__aeabi_ddiv>
    b252:	f005 f827 	bl	102a4 <__aeabi_d2iz>
    b256:	9004      	str	r0, [sp, #16]
    b258:	f7fc f844 	bl	72e4 <__aeabi_i2d>
    b25c:	4622      	mov	r2, r4
    b25e:	462b      	mov	r3, r5
    b260:	f7fc f8a6 	bl	73b0 <__aeabi_dmul>
    b264:	4602      	mov	r2, r0
    b266:	460b      	mov	r3, r1
    b268:	4630      	mov	r0, r6
    b26a:	4639      	mov	r1, r7
    b26c:	f7fb feec 	bl	7048 <__aeabi_dsub>
    b270:	9f04      	ldr	r7, [sp, #16]
    b272:	f107 0630 	add.w	r6, r7, #48	; 0x30
    b276:	f808 6b01 	strb.w	r6, [r8], #1
    b27a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b27c:	ebc7 0608 	rsb	r6, r7, r8
    b280:	9f07      	ldr	r7, [sp, #28]
    b282:	42be      	cmp	r6, r7
    b284:	4602      	mov	r2, r0
    b286:	460b      	mov	r3, r1
    b288:	d129      	bne.n	b2de <_dtoa_r+0x69c>
    b28a:	f7fb fedf 	bl	704c <__adddf3>
    b28e:	4622      	mov	r2, r4
    b290:	462b      	mov	r3, r5
    b292:	4606      	mov	r6, r0
    b294:	460f      	mov	r7, r1
    b296:	f004 fffb 	bl	10290 <__aeabi_dcmpgt>
    b29a:	b970      	cbnz	r0, b2ba <_dtoa_r+0x678>
    b29c:	4630      	mov	r0, r6
    b29e:	4639      	mov	r1, r7
    b2a0:	4622      	mov	r2, r4
    b2a2:	462b      	mov	r3, r5
    b2a4:	f004 ffcc 	bl	10240 <__aeabi_dcmpeq>
    b2a8:	2800      	cmp	r0, #0
    b2aa:	f000 825f 	beq.w	b76c <_dtoa_r+0xb2a>
    b2ae:	9f04      	ldr	r7, [sp, #16]
    b2b0:	07fb      	lsls	r3, r7, #31
    b2b2:	d402      	bmi.n	b2ba <_dtoa_r+0x678>
    b2b4:	e25a      	b.n	b76c <_dtoa_r+0xb2a>
    b2b6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    b2ba:	4643      	mov	r3, r8
    b2bc:	4698      	mov	r8, r3
    b2be:	3b01      	subs	r3, #1
    b2c0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    b2c4:	2a39      	cmp	r2, #57	; 0x39
    b2c6:	d106      	bne.n	b2d6 <_dtoa_r+0x694>
    b2c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b2ca:	429f      	cmp	r7, r3
    b2cc:	d1f6      	bne.n	b2bc <_dtoa_r+0x67a>
    b2ce:	2230      	movs	r2, #48	; 0x30
    b2d0:	f109 0901 	add.w	r9, r9, #1
    b2d4:	703a      	strb	r2, [r7, #0]
    b2d6:	781a      	ldrb	r2, [r3, #0]
    b2d8:	3201      	adds	r2, #1
    b2da:	701a      	strb	r2, [r3, #0]
    b2dc:	e246      	b.n	b76c <_dtoa_r+0xb2a>
    b2de:	2200      	movs	r2, #0
    b2e0:	4b38      	ldr	r3, [pc, #224]	; (b3c4 <_dtoa_r+0x782>)
    b2e2:	f7fc f865 	bl	73b0 <__aeabi_dmul>
    b2e6:	2200      	movs	r2, #0
    b2e8:	2300      	movs	r3, #0
    b2ea:	4606      	mov	r6, r0
    b2ec:	460f      	mov	r7, r1
    b2ee:	f004 ffa7 	bl	10240 <__aeabi_dcmpeq>
    b2f2:	2800      	cmp	r0, #0
    b2f4:	d0a7      	beq.n	b246 <_dtoa_r+0x604>
    b2f6:	e239      	b.n	b76c <_dtoa_r+0xb2a>
    b2f8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    b2fa:	2f00      	cmp	r7, #0
    b2fc:	d030      	beq.n	b360 <_dtoa_r+0x71e>
    b2fe:	9f24      	ldr	r7, [sp, #144]	; 0x90
    b300:	2f01      	cmp	r7, #1
    b302:	dc0a      	bgt.n	b31a <_dtoa_r+0x6d8>
    b304:	9f15      	ldr	r7, [sp, #84]	; 0x54
    b306:	b117      	cbz	r7, b30e <_dtoa_r+0x6cc>
    b308:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b30c:	e002      	b.n	b314 <_dtoa_r+0x6d2>
    b30e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b310:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b314:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b316:	9e08      	ldr	r6, [sp, #32]
    b318:	e016      	b.n	b348 <_dtoa_r+0x706>
    b31a:	9f07      	ldr	r7, [sp, #28]
    b31c:	1e7d      	subs	r5, r7, #1
    b31e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b320:	42af      	cmp	r7, r5
    b322:	db01      	blt.n	b328 <_dtoa_r+0x6e6>
    b324:	1b7d      	subs	r5, r7, r5
    b326:	e006      	b.n	b336 <_dtoa_r+0x6f4>
    b328:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b32a:	950e      	str	r5, [sp, #56]	; 0x38
    b32c:	1beb      	subs	r3, r5, r7
    b32e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b330:	441f      	add	r7, r3
    b332:	9711      	str	r7, [sp, #68]	; 0x44
    b334:	2500      	movs	r5, #0
    b336:	9f07      	ldr	r7, [sp, #28]
    b338:	2f00      	cmp	r7, #0
    b33a:	da03      	bge.n	b344 <_dtoa_r+0x702>
    b33c:	9808      	ldr	r0, [sp, #32]
    b33e:	2300      	movs	r3, #0
    b340:	1bc6      	subs	r6, r0, r7
    b342:	e001      	b.n	b348 <_dtoa_r+0x706>
    b344:	9e08      	ldr	r6, [sp, #32]
    b346:	9b07      	ldr	r3, [sp, #28]
    b348:	9f08      	ldr	r7, [sp, #32]
    b34a:	441f      	add	r7, r3
    b34c:	9708      	str	r7, [sp, #32]
    b34e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b350:	4650      	mov	r0, sl
    b352:	441f      	add	r7, r3
    b354:	2101      	movs	r1, #1
    b356:	970a      	str	r7, [sp, #40]	; 0x28
    b358:	f001 fb2c 	bl	c9b4 <__i2b>
    b35c:	4604      	mov	r4, r0
    b35e:	e002      	b.n	b366 <_dtoa_r+0x724>
    b360:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b362:	9e08      	ldr	r6, [sp, #32]
    b364:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    b366:	b16e      	cbz	r6, b384 <_dtoa_r+0x742>
    b368:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b36a:	2f00      	cmp	r7, #0
    b36c:	dd0a      	ble.n	b384 <_dtoa_r+0x742>
    b36e:	463b      	mov	r3, r7
    b370:	9f08      	ldr	r7, [sp, #32]
    b372:	42b3      	cmp	r3, r6
    b374:	bfa8      	it	ge
    b376:	4633      	movge	r3, r6
    b378:	1aff      	subs	r7, r7, r3
    b37a:	9708      	str	r7, [sp, #32]
    b37c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b37e:	1aff      	subs	r7, r7, r3
    b380:	1af6      	subs	r6, r6, r3
    b382:	970a      	str	r7, [sp, #40]	; 0x28
    b384:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b386:	2f00      	cmp	r7, #0
    b388:	dd28      	ble.n	b3dc <_dtoa_r+0x79a>
    b38a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    b38c:	b307      	cbz	r7, b3d0 <_dtoa_r+0x78e>
    b38e:	2d00      	cmp	r5, #0
    b390:	dd10      	ble.n	b3b4 <_dtoa_r+0x772>
    b392:	4621      	mov	r1, r4
    b394:	462a      	mov	r2, r5
    b396:	4650      	mov	r0, sl
    b398:	f001 fbad 	bl	caf6 <__pow5mult>
    b39c:	4604      	mov	r4, r0
    b39e:	465a      	mov	r2, fp
    b3a0:	4621      	mov	r1, r4
    b3a2:	4650      	mov	r0, sl
    b3a4:	f001 fb0f 	bl	c9c6 <__multiply>
    b3a8:	4659      	mov	r1, fp
    b3aa:	4607      	mov	r7, r0
    b3ac:	4650      	mov	r0, sl
    b3ae:	f001 fa2f 	bl	c810 <_Bfree>
    b3b2:	46bb      	mov	fp, r7
    b3b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b3b6:	1b7a      	subs	r2, r7, r5
    b3b8:	d010      	beq.n	b3dc <_dtoa_r+0x79a>
    b3ba:	4650      	mov	r0, sl
    b3bc:	4659      	mov	r1, fp
    b3be:	e00a      	b.n	b3d6 <_dtoa_r+0x794>
    b3c0:	3fe00000 	.word	0x3fe00000
    b3c4:	40240000 	.word	0x40240000
    b3c8:	00010b60 	.word	0x00010b60
    b3cc:	40140000 	.word	0x40140000
    b3d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b3d2:	4650      	mov	r0, sl
    b3d4:	4659      	mov	r1, fp
    b3d6:	f001 fb8e 	bl	caf6 <__pow5mult>
    b3da:	4683      	mov	fp, r0
    b3dc:	4650      	mov	r0, sl
    b3de:	2101      	movs	r1, #1
    b3e0:	f001 fae8 	bl	c9b4 <__i2b>
    b3e4:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b3e6:	2f00      	cmp	r7, #0
    b3e8:	4605      	mov	r5, r0
    b3ea:	dd05      	ble.n	b3f8 <_dtoa_r+0x7b6>
    b3ec:	4629      	mov	r1, r5
    b3ee:	4650      	mov	r0, sl
    b3f0:	463a      	mov	r2, r7
    b3f2:	f001 fb80 	bl	caf6 <__pow5mult>
    b3f6:	4605      	mov	r5, r0
    b3f8:	9f24      	ldr	r7, [sp, #144]	; 0x90
    b3fa:	2f01      	cmp	r7, #1
    b3fc:	dc12      	bgt.n	b424 <_dtoa_r+0x7e2>
    b3fe:	9804      	ldr	r0, [sp, #16]
    b400:	b980      	cbnz	r0, b424 <_dtoa_r+0x7e2>
    b402:	9905      	ldr	r1, [sp, #20]
    b404:	f3c1 0313 	ubfx	r3, r1, #0, #20
    b408:	b973      	cbnz	r3, b428 <_dtoa_r+0x7e6>
    b40a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    b40e:	0d3f      	lsrs	r7, r7, #20
    b410:	053f      	lsls	r7, r7, #20
    b412:	b157      	cbz	r7, b42a <_dtoa_r+0x7e8>
    b414:	9f08      	ldr	r7, [sp, #32]
    b416:	3701      	adds	r7, #1
    b418:	9708      	str	r7, [sp, #32]
    b41a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b41c:	3701      	adds	r7, #1
    b41e:	970a      	str	r7, [sp, #40]	; 0x28
    b420:	2701      	movs	r7, #1
    b422:	e002      	b.n	b42a <_dtoa_r+0x7e8>
    b424:	2700      	movs	r7, #0
    b426:	e000      	b.n	b42a <_dtoa_r+0x7e8>
    b428:	9f04      	ldr	r7, [sp, #16]
    b42a:	9811      	ldr	r0, [sp, #68]	; 0x44
    b42c:	b140      	cbz	r0, b440 <_dtoa_r+0x7fe>
    b42e:	692b      	ldr	r3, [r5, #16]
    b430:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    b434:	6918      	ldr	r0, [r3, #16]
    b436:	f001 fa70 	bl	c91a <__hi0bits>
    b43a:	f1c0 0020 	rsb	r0, r0, #32
    b43e:	e000      	b.n	b442 <_dtoa_r+0x800>
    b440:	2001      	movs	r0, #1
    b442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b444:	4403      	add	r3, r0
    b446:	f013 031f 	ands.w	r3, r3, #31
    b44a:	d00f      	beq.n	b46c <_dtoa_r+0x82a>
    b44c:	f1c3 0220 	rsb	r2, r3, #32
    b450:	2a04      	cmp	r2, #4
    b452:	dd09      	ble.n	b468 <_dtoa_r+0x826>
    b454:	9908      	ldr	r1, [sp, #32]
    b456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b458:	f1c3 031c 	rsb	r3, r3, #28
    b45c:	4419      	add	r1, r3
    b45e:	441a      	add	r2, r3
    b460:	9108      	str	r1, [sp, #32]
    b462:	441e      	add	r6, r3
    b464:	920a      	str	r2, [sp, #40]	; 0x28
    b466:	e009      	b.n	b47c <_dtoa_r+0x83a>
    b468:	d008      	beq.n	b47c <_dtoa_r+0x83a>
    b46a:	4613      	mov	r3, r2
    b46c:	9808      	ldr	r0, [sp, #32]
    b46e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b470:	331c      	adds	r3, #28
    b472:	4418      	add	r0, r3
    b474:	4419      	add	r1, r3
    b476:	9008      	str	r0, [sp, #32]
    b478:	441e      	add	r6, r3
    b47a:	910a      	str	r1, [sp, #40]	; 0x28
    b47c:	9a08      	ldr	r2, [sp, #32]
    b47e:	2a00      	cmp	r2, #0
    b480:	dd04      	ble.n	b48c <_dtoa_r+0x84a>
    b482:	4659      	mov	r1, fp
    b484:	4650      	mov	r0, sl
    b486:	f001 fb75 	bl	cb74 <__lshift>
    b48a:	4683      	mov	fp, r0
    b48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b48e:	2b00      	cmp	r3, #0
    b490:	dd05      	ble.n	b49e <_dtoa_r+0x85c>
    b492:	4629      	mov	r1, r5
    b494:	4650      	mov	r0, sl
    b496:	461a      	mov	r2, r3
    b498:	f001 fb6c 	bl	cb74 <__lshift>
    b49c:	4605      	mov	r5, r0
    b49e:	9814      	ldr	r0, [sp, #80]	; 0x50
    b4a0:	b1e0      	cbz	r0, b4dc <_dtoa_r+0x89a>
    b4a2:	4658      	mov	r0, fp
    b4a4:	4629      	mov	r1, r5
    b4a6:	f001 fbb8 	bl	cc1a <__mcmp>
    b4aa:	2800      	cmp	r0, #0
    b4ac:	da16      	bge.n	b4dc <_dtoa_r+0x89a>
    b4ae:	4659      	mov	r1, fp
    b4b0:	4650      	mov	r0, sl
    b4b2:	220a      	movs	r2, #10
    b4b4:	2300      	movs	r3, #0
    b4b6:	f001 f9b4 	bl	c822 <__multadd>
    b4ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b4bc:	f109 39ff 	add.w	r9, r9, #4294967295
    b4c0:	4683      	mov	fp, r0
    b4c2:	b149      	cbz	r1, b4d8 <_dtoa_r+0x896>
    b4c4:	4621      	mov	r1, r4
    b4c6:	220a      	movs	r2, #10
    b4c8:	4650      	mov	r0, sl
    b4ca:	2300      	movs	r3, #0
    b4cc:	f001 f9a9 	bl	c822 <__multadd>
    b4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b4d2:	9207      	str	r2, [sp, #28]
    b4d4:	4604      	mov	r4, r0
    b4d6:	e001      	b.n	b4dc <_dtoa_r+0x89a>
    b4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4da:	9307      	str	r3, [sp, #28]
    b4dc:	9807      	ldr	r0, [sp, #28]
    b4de:	2800      	cmp	r0, #0
    b4e0:	dc29      	bgt.n	b536 <_dtoa_r+0x8f4>
    b4e2:	9924      	ldr	r1, [sp, #144]	; 0x90
    b4e4:	2902      	cmp	r1, #2
    b4e6:	dd26      	ble.n	b536 <_dtoa_r+0x8f4>
    b4e8:	b988      	cbnz	r0, b50e <_dtoa_r+0x8cc>
    b4ea:	4629      	mov	r1, r5
    b4ec:	2205      	movs	r2, #5
    b4ee:	9b07      	ldr	r3, [sp, #28]
    b4f0:	4650      	mov	r0, sl
    b4f2:	f001 f996 	bl	c822 <__multadd>
    b4f6:	4605      	mov	r5, r0
    b4f8:	4629      	mov	r1, r5
    b4fa:	4658      	mov	r0, fp
    b4fc:	f001 fb8d 	bl	cc1a <__mcmp>
    b500:	2800      	cmp	r0, #0
    b502:	dc0e      	bgt.n	b522 <_dtoa_r+0x8e0>
    b504:	e003      	b.n	b50e <_dtoa_r+0x8cc>
    b506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b508:	e000      	b.n	b50c <_dtoa_r+0x8ca>
    b50a:	2500      	movs	r5, #0
    b50c:	462c      	mov	r4, r5
    b50e:	9f25      	ldr	r7, [sp, #148]	; 0x94
    b510:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    b514:	ea6f 0907 	mvn.w	r9, r7
    b518:	e00a      	b.n	b530 <_dtoa_r+0x8ee>
    b51a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b51c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    b520:	462c      	mov	r4, r5
    b522:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b524:	2331      	movs	r3, #49	; 0x31
    b526:	f107 0801 	add.w	r8, r7, #1
    b52a:	703b      	strb	r3, [r7, #0]
    b52c:	f109 0901 	add.w	r9, r9, #1
    b530:	4627      	mov	r7, r4
    b532:	2400      	movs	r4, #0
    b534:	e107      	b.n	b746 <_dtoa_r+0xb04>
    b536:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b538:	2800      	cmp	r0, #0
    b53a:	f000 80bb 	beq.w	b6b4 <_dtoa_r+0xa72>
    b53e:	2e00      	cmp	r6, #0
    b540:	dd05      	ble.n	b54e <_dtoa_r+0x90c>
    b542:	4621      	mov	r1, r4
    b544:	4650      	mov	r0, sl
    b546:	4632      	mov	r2, r6
    b548:	f001 fb14 	bl	cb74 <__lshift>
    b54c:	4604      	mov	r4, r0
    b54e:	b19f      	cbz	r7, b578 <_dtoa_r+0x936>
    b550:	6861      	ldr	r1, [r4, #4]
    b552:	4650      	mov	r0, sl
    b554:	f001 f936 	bl	c7c4 <_Balloc>
    b558:	6922      	ldr	r2, [r4, #16]
    b55a:	3202      	adds	r2, #2
    b55c:	4606      	mov	r6, r0
    b55e:	f104 010c 	add.w	r1, r4, #12
    b562:	0092      	lsls	r2, r2, #2
    b564:	300c      	adds	r0, #12
    b566:	f001 f906 	bl	c776 <memcpy>
    b56a:	4650      	mov	r0, sl
    b56c:	4631      	mov	r1, r6
    b56e:	2201      	movs	r2, #1
    b570:	f001 fb00 	bl	cb74 <__lshift>
    b574:	4607      	mov	r7, r0
    b576:	e000      	b.n	b57a <_dtoa_r+0x938>
    b578:	4627      	mov	r7, r4
    b57a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b57c:	4629      	mov	r1, r5
    b57e:	4658      	mov	r0, fp
    b580:	f7ff fad2 	bl	ab28 <quorem>
    b584:	4621      	mov	r1, r4
    b586:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    b58a:	4680      	mov	r8, r0
    b58c:	4658      	mov	r0, fp
    b58e:	f8cd c008 	str.w	ip, [sp, #8]
    b592:	f001 fb42 	bl	cc1a <__mcmp>
    b596:	463a      	mov	r2, r7
    b598:	9008      	str	r0, [sp, #32]
    b59a:	4629      	mov	r1, r5
    b59c:	4650      	mov	r0, sl
    b59e:	f001 fb59 	bl	cc54 <__mdiff>
    b5a2:	68c3      	ldr	r3, [r0, #12]
    b5a4:	f8dd c008 	ldr.w	ip, [sp, #8]
    b5a8:	4602      	mov	r2, r0
    b5aa:	b94b      	cbnz	r3, b5c0 <_dtoa_r+0x97e>
    b5ac:	4611      	mov	r1, r2
    b5ae:	4658      	mov	r0, fp
    b5b0:	9203      	str	r2, [sp, #12]
    b5b2:	f001 fb32 	bl	cc1a <__mcmp>
    b5b6:	9a03      	ldr	r2, [sp, #12]
    b5b8:	f8dd c008 	ldr.w	ip, [sp, #8]
    b5bc:	4603      	mov	r3, r0
    b5be:	e000      	b.n	b5c2 <_dtoa_r+0x980>
    b5c0:	2301      	movs	r3, #1
    b5c2:	4650      	mov	r0, sl
    b5c4:	4611      	mov	r1, r2
    b5c6:	9303      	str	r3, [sp, #12]
    b5c8:	f8cd c008 	str.w	ip, [sp, #8]
    b5cc:	f001 f920 	bl	c810 <_Bfree>
    b5d0:	9b03      	ldr	r3, [sp, #12]
    b5d2:	f8dd c008 	ldr.w	ip, [sp, #8]
    b5d6:	b963      	cbnz	r3, b5f2 <_dtoa_r+0x9b0>
    b5d8:	9924      	ldr	r1, [sp, #144]	; 0x90
    b5da:	b951      	cbnz	r1, b5f2 <_dtoa_r+0x9b0>
    b5dc:	9804      	ldr	r0, [sp, #16]
    b5de:	f000 0201 	and.w	r2, r0, #1
    b5e2:	b932      	cbnz	r2, b5f2 <_dtoa_r+0x9b0>
    b5e4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
    b5e8:	d035      	beq.n	b656 <_dtoa_r+0xa14>
    b5ea:	9b08      	ldr	r3, [sp, #32]
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	dc24      	bgt.n	b63a <_dtoa_r+0x9f8>
    b5f0:	e025      	b.n	b63e <_dtoa_r+0x9fc>
    b5f2:	9808      	ldr	r0, [sp, #32]
    b5f4:	2800      	cmp	r0, #0
    b5f6:	da02      	bge.n	b5fe <_dtoa_r+0x9bc>
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	dc08      	bgt.n	b60e <_dtoa_r+0x9cc>
    b5fc:	e01f      	b.n	b63e <_dtoa_r+0x9fc>
    b5fe:	d123      	bne.n	b648 <_dtoa_r+0xa06>
    b600:	9924      	ldr	r1, [sp, #144]	; 0x90
    b602:	bb09      	cbnz	r1, b648 <_dtoa_r+0xa06>
    b604:	9804      	ldr	r0, [sp, #16]
    b606:	f000 0201 	and.w	r2, r0, #1
    b60a:	b9ea      	cbnz	r2, b648 <_dtoa_r+0xa06>
    b60c:	e7f4      	b.n	b5f8 <_dtoa_r+0x9b6>
    b60e:	4659      	mov	r1, fp
    b610:	2201      	movs	r2, #1
    b612:	4650      	mov	r0, sl
    b614:	f8cd c008 	str.w	ip, [sp, #8]
    b618:	f001 faac 	bl	cb74 <__lshift>
    b61c:	4629      	mov	r1, r5
    b61e:	4683      	mov	fp, r0
    b620:	f001 fafb 	bl	cc1a <__mcmp>
    b624:	2800      	cmp	r0, #0
    b626:	f8dd c008 	ldr.w	ip, [sp, #8]
    b62a:	dc03      	bgt.n	b634 <_dtoa_r+0x9f2>
    b62c:	d107      	bne.n	b63e <_dtoa_r+0x9fc>
    b62e:	f01c 0f01 	tst.w	ip, #1
    b632:	d004      	beq.n	b63e <_dtoa_r+0x9fc>
    b634:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
    b638:	d00d      	beq.n	b656 <_dtoa_r+0xa14>
    b63a:	f108 0c31 	add.w	ip, r8, #49	; 0x31
    b63e:	f106 0801 	add.w	r8, r6, #1
    b642:	f886 c000 	strb.w	ip, [r6]
    b646:	e07e      	b.n	b746 <_dtoa_r+0xb04>
    b648:	2b00      	cmp	r3, #0
    b64a:	f106 0801 	add.w	r8, r6, #1
    b64e:	dd09      	ble.n	b664 <_dtoa_r+0xa22>
    b650:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
    b654:	d103      	bne.n	b65e <_dtoa_r+0xa1c>
    b656:	2339      	movs	r3, #57	; 0x39
    b658:	7033      	strb	r3, [r6, #0]
    b65a:	3601      	adds	r6, #1
    b65c:	e05b      	b.n	b716 <_dtoa_r+0xad4>
    b65e:	f10c 0301 	add.w	r3, ip, #1
    b662:	e068      	b.n	b736 <_dtoa_r+0xaf4>
    b664:	9909      	ldr	r1, [sp, #36]	; 0x24
    b666:	9a07      	ldr	r2, [sp, #28]
    b668:	4646      	mov	r6, r8
    b66a:	ebc1 0308 	rsb	r3, r1, r8
    b66e:	4293      	cmp	r3, r2
    b670:	f806 cc01 	strb.w	ip, [r6, #-1]
    b674:	d03c      	beq.n	b6f0 <_dtoa_r+0xaae>
    b676:	4659      	mov	r1, fp
    b678:	220a      	movs	r2, #10
    b67a:	2300      	movs	r3, #0
    b67c:	4650      	mov	r0, sl
    b67e:	f001 f8d0 	bl	c822 <__multadd>
    b682:	42bc      	cmp	r4, r7
    b684:	4683      	mov	fp, r0
    b686:	4621      	mov	r1, r4
    b688:	4650      	mov	r0, sl
    b68a:	f04f 020a 	mov.w	r2, #10
    b68e:	f04f 0300 	mov.w	r3, #0
    b692:	d104      	bne.n	b69e <_dtoa_r+0xa5c>
    b694:	f001 f8c5 	bl	c822 <__multadd>
    b698:	4604      	mov	r4, r0
    b69a:	4607      	mov	r7, r0
    b69c:	e76e      	b.n	b57c <_dtoa_r+0x93a>
    b69e:	f001 f8c0 	bl	c822 <__multadd>
    b6a2:	4639      	mov	r1, r7
    b6a4:	4604      	mov	r4, r0
    b6a6:	220a      	movs	r2, #10
    b6a8:	4650      	mov	r0, sl
    b6aa:	2300      	movs	r3, #0
    b6ac:	f001 f8b9 	bl	c822 <__multadd>
    b6b0:	4607      	mov	r7, r0
    b6b2:	e763      	b.n	b57c <_dtoa_r+0x93a>
    b6b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    b6b6:	4658      	mov	r0, fp
    b6b8:	4629      	mov	r1, r5
    b6ba:	f7ff fa35 	bl	ab28 <quorem>
    b6be:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b6c0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    b6c4:	f807 c006 	strb.w	ip, [r7, r6]
    b6c8:	9f07      	ldr	r7, [sp, #28]
    b6ca:	3601      	adds	r6, #1
    b6cc:	42be      	cmp	r6, r7
    b6ce:	db07      	blt.n	b6e0 <_dtoa_r+0xa9e>
    b6d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b6d2:	2f01      	cmp	r7, #1
    b6d4:	bfac      	ite	ge
    b6d6:	19f6      	addge	r6, r6, r7
    b6d8:	3601      	addlt	r6, #1
    b6da:	4627      	mov	r7, r4
    b6dc:	2400      	movs	r4, #0
    b6de:	e007      	b.n	b6f0 <_dtoa_r+0xaae>
    b6e0:	4659      	mov	r1, fp
    b6e2:	4650      	mov	r0, sl
    b6e4:	220a      	movs	r2, #10
    b6e6:	2300      	movs	r3, #0
    b6e8:	f001 f89b 	bl	c822 <__multadd>
    b6ec:	4683      	mov	fp, r0
    b6ee:	e7e2      	b.n	b6b6 <_dtoa_r+0xa74>
    b6f0:	4659      	mov	r1, fp
    b6f2:	2201      	movs	r2, #1
    b6f4:	4650      	mov	r0, sl
    b6f6:	f8cd c008 	str.w	ip, [sp, #8]
    b6fa:	f001 fa3b 	bl	cb74 <__lshift>
    b6fe:	4629      	mov	r1, r5
    b700:	4683      	mov	fp, r0
    b702:	f001 fa8a 	bl	cc1a <__mcmp>
    b706:	2800      	cmp	r0, #0
    b708:	f8dd c008 	ldr.w	ip, [sp, #8]
    b70c:	dc03      	bgt.n	b716 <_dtoa_r+0xad4>
    b70e:	d114      	bne.n	b73a <_dtoa_r+0xaf8>
    b710:	f01c 0f01 	tst.w	ip, #1
    b714:	d011      	beq.n	b73a <_dtoa_r+0xaf8>
    b716:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    b71a:	2b39      	cmp	r3, #57	; 0x39
    b71c:	46b0      	mov	r8, r6
    b71e:	f106 36ff 	add.w	r6, r6, #4294967295
    b722:	d107      	bne.n	b734 <_dtoa_r+0xaf2>
    b724:	9809      	ldr	r0, [sp, #36]	; 0x24
    b726:	42b0      	cmp	r0, r6
    b728:	d1f5      	bne.n	b716 <_dtoa_r+0xad4>
    b72a:	2331      	movs	r3, #49	; 0x31
    b72c:	f109 0901 	add.w	r9, r9, #1
    b730:	7003      	strb	r3, [r0, #0]
    b732:	e008      	b.n	b746 <_dtoa_r+0xb04>
    b734:	3301      	adds	r3, #1
    b736:	7033      	strb	r3, [r6, #0]
    b738:	e005      	b.n	b746 <_dtoa_r+0xb04>
    b73a:	46b0      	mov	r8, r6
    b73c:	3e01      	subs	r6, #1
    b73e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    b742:	2b30      	cmp	r3, #48	; 0x30
    b744:	d0f9      	beq.n	b73a <_dtoa_r+0xaf8>
    b746:	4650      	mov	r0, sl
    b748:	4629      	mov	r1, r5
    b74a:	f001 f861 	bl	c810 <_Bfree>
    b74e:	b16f      	cbz	r7, b76c <_dtoa_r+0xb2a>
    b750:	b12c      	cbz	r4, b75e <_dtoa_r+0xb1c>
    b752:	42bc      	cmp	r4, r7
    b754:	d003      	beq.n	b75e <_dtoa_r+0xb1c>
    b756:	4650      	mov	r0, sl
    b758:	4621      	mov	r1, r4
    b75a:	f001 f859 	bl	c810 <_Bfree>
    b75e:	4650      	mov	r0, sl
    b760:	4639      	mov	r1, r7
    b762:	f001 f855 	bl	c810 <_Bfree>
    b766:	e001      	b.n	b76c <_dtoa_r+0xb2a>
    b768:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    b76c:	4650      	mov	r0, sl
    b76e:	4659      	mov	r1, fp
    b770:	f001 f84e 	bl	c810 <_Bfree>
    b774:	2300      	movs	r3, #0
    b776:	9f26      	ldr	r7, [sp, #152]	; 0x98
    b778:	f888 3000 	strb.w	r3, [r8]
    b77c:	f109 0301 	add.w	r3, r9, #1
    b780:	603b      	str	r3, [r7, #0]
    b782:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    b784:	b127      	cbz	r7, b790 <_dtoa_r+0xb4e>
    b786:	f8c7 8000 	str.w	r8, [r7]
    b78a:	e001      	b.n	b790 <_dtoa_r+0xb4e>
    b78c:	4802      	ldr	r0, [pc, #8]	; (b798 <_dtoa_r+0xb56>)
    b78e:	e000      	b.n	b792 <_dtoa_r+0xb50>
    b790:	9809      	ldr	r0, [sp, #36]	; 0x24
    b792:	b01b      	add	sp, #108	; 0x6c
    b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b798:	00010af0 	.word	0x00010af0
    b79c:	f3af 8000 	nop.w

0000b7a0 <__sflush_r>:
    b7a0:	898a      	ldrh	r2, [r1, #12]
    b7a2:	b293      	uxth	r3, r2
    b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7a8:	4605      	mov	r5, r0
    b7aa:	0718      	lsls	r0, r3, #28
    b7ac:	460c      	mov	r4, r1
    b7ae:	d45e      	bmi.n	b86e <__sflush_r+0xce>
    b7b0:	684b      	ldr	r3, [r1, #4]
    b7b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	818a      	strh	r2, [r1, #12]
    b7ba:	dc02      	bgt.n	b7c2 <__sflush_r+0x22>
    b7bc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b7be:	2b00      	cmp	r3, #0
    b7c0:	dd18      	ble.n	b7f4 <__sflush_r+0x54>
    b7c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b7c4:	b1b6      	cbz	r6, b7f4 <__sflush_r+0x54>
    b7c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    b7ca:	2300      	movs	r3, #0
    b7cc:	b292      	uxth	r2, r2
    b7ce:	682f      	ldr	r7, [r5, #0]
    b7d0:	602b      	str	r3, [r5, #0]
    b7d2:	b10a      	cbz	r2, b7d8 <__sflush_r+0x38>
    b7d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    b7d6:	e010      	b.n	b7fa <__sflush_r+0x5a>
    b7d8:	69e1      	ldr	r1, [r4, #28]
    b7da:	4628      	mov	r0, r5
    b7dc:	2301      	movs	r3, #1
    b7de:	47b0      	blx	r6
    b7e0:	1c41      	adds	r1, r0, #1
    b7e2:	4602      	mov	r2, r0
    b7e4:	d109      	bne.n	b7fa <__sflush_r+0x5a>
    b7e6:	682b      	ldr	r3, [r5, #0]
    b7e8:	b13b      	cbz	r3, b7fa <__sflush_r+0x5a>
    b7ea:	2b1d      	cmp	r3, #29
    b7ec:	d001      	beq.n	b7f2 <__sflush_r+0x52>
    b7ee:	2b16      	cmp	r3, #22
    b7f0:	d14b      	bne.n	b88a <__sflush_r+0xea>
    b7f2:	602f      	str	r7, [r5, #0]
    b7f4:	2000      	movs	r0, #0
    b7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7fa:	89a3      	ldrh	r3, [r4, #12]
    b7fc:	075b      	lsls	r3, r3, #29
    b7fe:	d505      	bpl.n	b80c <__sflush_r+0x6c>
    b800:	6863      	ldr	r3, [r4, #4]
    b802:	1ad2      	subs	r2, r2, r3
    b804:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b806:	b10b      	cbz	r3, b80c <__sflush_r+0x6c>
    b808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b80a:	1ad2      	subs	r2, r2, r3
    b80c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b80e:	69e1      	ldr	r1, [r4, #28]
    b810:	4628      	mov	r0, r5
    b812:	2300      	movs	r3, #0
    b814:	47b0      	blx	r6
    b816:	1c46      	adds	r6, r0, #1
    b818:	89a2      	ldrh	r2, [r4, #12]
    b81a:	d105      	bne.n	b828 <__sflush_r+0x88>
    b81c:	682b      	ldr	r3, [r5, #0]
    b81e:	b11b      	cbz	r3, b828 <__sflush_r+0x88>
    b820:	2b1d      	cmp	r3, #29
    b822:	d001      	beq.n	b828 <__sflush_r+0x88>
    b824:	2b16      	cmp	r3, #22
    b826:	d11d      	bne.n	b864 <__sflush_r+0xc4>
    b828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    b82c:	b292      	uxth	r2, r2
    b82e:	2300      	movs	r3, #0
    b830:	6063      	str	r3, [r4, #4]
    b832:	04d1      	lsls	r1, r2, #19
    b834:	6923      	ldr	r3, [r4, #16]
    b836:	81a2      	strh	r2, [r4, #12]
    b838:	6023      	str	r3, [r4, #0]
    b83a:	d504      	bpl.n	b846 <__sflush_r+0xa6>
    b83c:	1c42      	adds	r2, r0, #1
    b83e:	d101      	bne.n	b844 <__sflush_r+0xa4>
    b840:	682b      	ldr	r3, [r5, #0]
    b842:	b903      	cbnz	r3, b846 <__sflush_r+0xa6>
    b844:	6520      	str	r0, [r4, #80]	; 0x50
    b846:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b848:	602f      	str	r7, [r5, #0]
    b84a:	2900      	cmp	r1, #0
    b84c:	d0d2      	beq.n	b7f4 <__sflush_r+0x54>
    b84e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b852:	4299      	cmp	r1, r3
    b854:	d002      	beq.n	b85c <__sflush_r+0xbc>
    b856:	4628      	mov	r0, r5
    b858:	f000 f9fc 	bl	bc54 <_free_r>
    b85c:	2000      	movs	r0, #0
    b85e:	6320      	str	r0, [r4, #48]	; 0x30
    b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    b868:	81a2      	strh	r2, [r4, #12]
    b86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b86e:	690e      	ldr	r6, [r1, #16]
    b870:	2e00      	cmp	r6, #0
    b872:	d0bf      	beq.n	b7f4 <__sflush_r+0x54>
    b874:	079b      	lsls	r3, r3, #30
    b876:	680a      	ldr	r2, [r1, #0]
    b878:	bf08      	it	eq
    b87a:	694b      	ldreq	r3, [r1, #20]
    b87c:	600e      	str	r6, [r1, #0]
    b87e:	bf18      	it	ne
    b880:	2300      	movne	r3, #0
    b882:	ebc6 0802 	rsb	r8, r6, r2
    b886:	608b      	str	r3, [r1, #8]
    b888:	e012      	b.n	b8b0 <__sflush_r+0x110>
    b88a:	89a3      	ldrh	r3, [r4, #12]
    b88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b890:	81a3      	strh	r3, [r4, #12]
    b892:	f04f 30ff 	mov.w	r0, #4294967295
    b896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b89a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b89c:	69e1      	ldr	r1, [r4, #28]
    b89e:	4628      	mov	r0, r5
    b8a0:	4632      	mov	r2, r6
    b8a2:	4643      	mov	r3, r8
    b8a4:	47b8      	blx	r7
    b8a6:	2800      	cmp	r0, #0
    b8a8:	ddef      	ble.n	b88a <__sflush_r+0xea>
    b8aa:	4406      	add	r6, r0
    b8ac:	ebc0 0808 	rsb	r8, r0, r8
    b8b0:	f1b8 0f00 	cmp.w	r8, #0
    b8b4:	dcf1      	bgt.n	b89a <__sflush_r+0xfa>
    b8b6:	e79d      	b.n	b7f4 <__sflush_r+0x54>

0000b8b8 <_fflush_r>:
    b8b8:	b538      	push	{r3, r4, r5, lr}
    b8ba:	460c      	mov	r4, r1
    b8bc:	4605      	mov	r5, r0
    b8be:	b118      	cbz	r0, b8c8 <_fflush_r+0x10>
    b8c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b8c2:	b90b      	cbnz	r3, b8c8 <_fflush_r+0x10>
    b8c4:	f000 f842 	bl	b94c <__sinit>
    b8c8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    b8cc:	b128      	cbz	r0, b8da <_fflush_r+0x22>
    b8ce:	4628      	mov	r0, r5
    b8d0:	4621      	mov	r1, r4
    b8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b8d6:	f7ff bf63 	b.w	b7a0 <__sflush_r>
    b8da:	bd38      	pop	{r3, r4, r5, pc}

0000b8dc <fflush>:
    b8dc:	4601      	mov	r1, r0
    b8de:	b920      	cbnz	r0, b8ea <fflush+0xe>
    b8e0:	4b04      	ldr	r3, [pc, #16]	; (b8f4 <fflush+0x18>)
    b8e2:	4905      	ldr	r1, [pc, #20]	; (b8f8 <fflush+0x1c>)
    b8e4:	6818      	ldr	r0, [r3, #0]
    b8e6:	f000 bbd5 	b.w	c094 <_fwalk_reent>
    b8ea:	4b04      	ldr	r3, [pc, #16]	; (b8fc <fflush+0x20>)
    b8ec:	6818      	ldr	r0, [r3, #0]
    b8ee:	f7ff bfe3 	b.w	b8b8 <_fflush_r>
    b8f2:	bf00      	nop
    b8f4:	00010a98 	.word	0x00010a98
    b8f8:	0000b8b9 	.word	0x0000b8b9
    b8fc:	200004a0 	.word	0x200004a0

0000b900 <__fp_lock>:
    b900:	2000      	movs	r0, #0
    b902:	4770      	bx	lr

0000b904 <__fp_unlock>:
    b904:	2000      	movs	r0, #0
    b906:	4770      	bx	lr

0000b908 <_cleanup_r>:
    b908:	4901      	ldr	r1, [pc, #4]	; (b910 <_cleanup_r+0x8>)
    b90a:	f000 bba7 	b.w	c05c <_fwalk>
    b90e:	bf00      	nop
    b910:	0000fad1 	.word	0x0000fad1

0000b914 <__sfmoreglue>:
    b914:	b570      	push	{r4, r5, r6, lr}
    b916:	1e4b      	subs	r3, r1, #1
    b918:	2568      	movs	r5, #104	; 0x68
    b91a:	435d      	muls	r5, r3
    b91c:	460e      	mov	r6, r1
    b91e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    b922:	f000 fcab 	bl	c27c <_malloc_r>
    b926:	4604      	mov	r4, r0
    b928:	b140      	cbz	r0, b93c <__sfmoreglue+0x28>
    b92a:	2100      	movs	r1, #0
    b92c:	e880 0042 	stmia.w	r0, {r1, r6}
    b930:	300c      	adds	r0, #12
    b932:	60a0      	str	r0, [r4, #8]
    b934:	f105 0268 	add.w	r2, r5, #104	; 0x68
    b938:	f7fc fd02 	bl	8340 <memset>
    b93c:	4620      	mov	r0, r4
    b93e:	bd70      	pop	{r4, r5, r6, pc}

0000b940 <_cleanup>:
    b940:	4b01      	ldr	r3, [pc, #4]	; (b948 <_cleanup+0x8>)
    b942:	6818      	ldr	r0, [r3, #0]
    b944:	f7ff bfe0 	b.w	b908 <_cleanup_r>
    b948:	00010a98 	.word	0x00010a98

0000b94c <__sinit>:
    b94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b950:	6b84      	ldr	r4, [r0, #56]	; 0x38
    b952:	4606      	mov	r6, r0
    b954:	2c00      	cmp	r4, #0
    b956:	d162      	bne.n	ba1e <__sinit+0xd2>
    b958:	4b32      	ldr	r3, [pc, #200]	; (ba24 <__sinit+0xd8>)
    b95a:	63c3      	str	r3, [r0, #60]	; 0x3c
    b95c:	2303      	movs	r3, #3
    b95e:	6845      	ldr	r5, [r0, #4]
    b960:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
    b964:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
    b968:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
    b96c:	2304      	movs	r3, #4
    b96e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
    b972:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ba2c <__sinit+0xe0>
    b976:	81ab      	strh	r3, [r5, #12]
    b978:	f8df 90b4 	ldr.w	r9, [pc, #180]	; ba30 <__sinit+0xe4>
    b97c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ba34 <__sinit+0xe8>
    b980:	4f29      	ldr	r7, [pc, #164]	; (ba28 <__sinit+0xdc>)
    b982:	602c      	str	r4, [r5, #0]
    b984:	606c      	str	r4, [r5, #4]
    b986:	60ac      	str	r4, [r5, #8]
    b988:	666c      	str	r4, [r5, #100]	; 0x64
    b98a:	81ec      	strh	r4, [r5, #14]
    b98c:	612c      	str	r4, [r5, #16]
    b98e:	616c      	str	r4, [r5, #20]
    b990:	61ac      	str	r4, [r5, #24]
    b992:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    b996:	4621      	mov	r1, r4
    b998:	2208      	movs	r2, #8
    b99a:	f7fc fcd1 	bl	8340 <memset>
    b99e:	61ed      	str	r5, [r5, #28]
    b9a0:	f8c5 a020 	str.w	sl, [r5, #32]
    b9a4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    b9a8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    b9ac:	62ef      	str	r7, [r5, #44]	; 0x2c
    b9ae:	68b5      	ldr	r5, [r6, #8]
    b9b0:	2309      	movs	r3, #9
    b9b2:	f04f 0b01 	mov.w	fp, #1
    b9b6:	81ab      	strh	r3, [r5, #12]
    b9b8:	602c      	str	r4, [r5, #0]
    b9ba:	606c      	str	r4, [r5, #4]
    b9bc:	60ac      	str	r4, [r5, #8]
    b9be:	666c      	str	r4, [r5, #100]	; 0x64
    b9c0:	f8a5 b00e 	strh.w	fp, [r5, #14]
    b9c4:	612c      	str	r4, [r5, #16]
    b9c6:	616c      	str	r4, [r5, #20]
    b9c8:	61ac      	str	r4, [r5, #24]
    b9ca:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    b9ce:	4621      	mov	r1, r4
    b9d0:	2208      	movs	r2, #8
    b9d2:	f7fc fcb5 	bl	8340 <memset>
    b9d6:	61ed      	str	r5, [r5, #28]
    b9d8:	f8c5 a020 	str.w	sl, [r5, #32]
    b9dc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    b9e0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    b9e4:	62ef      	str	r7, [r5, #44]	; 0x2c
    b9e6:	68f5      	ldr	r5, [r6, #12]
    b9e8:	2312      	movs	r3, #18
    b9ea:	81ab      	strh	r3, [r5, #12]
    b9ec:	2302      	movs	r3, #2
    b9ee:	602c      	str	r4, [r5, #0]
    b9f0:	606c      	str	r4, [r5, #4]
    b9f2:	60ac      	str	r4, [r5, #8]
    b9f4:	666c      	str	r4, [r5, #100]	; 0x64
    b9f6:	81eb      	strh	r3, [r5, #14]
    b9f8:	612c      	str	r4, [r5, #16]
    b9fa:	616c      	str	r4, [r5, #20]
    b9fc:	61ac      	str	r4, [r5, #24]
    b9fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    ba02:	4621      	mov	r1, r4
    ba04:	2208      	movs	r2, #8
    ba06:	f7fc fc9b 	bl	8340 <memset>
    ba0a:	61ed      	str	r5, [r5, #28]
    ba0c:	f8c5 a020 	str.w	sl, [r5, #32]
    ba10:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    ba14:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    ba18:	62ef      	str	r7, [r5, #44]	; 0x2c
    ba1a:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
    ba1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba22:	bf00      	nop
    ba24:	0000b909 	.word	0x0000b909
    ba28:	000085fb 	.word	0x000085fb
    ba2c:	00008579 	.word	0x00008579
    ba30:	0000859f 	.word	0x0000859f
    ba34:	000085d7 	.word	0x000085d7

0000ba38 <__sfp>:
    ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba3a:	4b1c      	ldr	r3, [pc, #112]	; (baac <__sfp+0x74>)
    ba3c:	681e      	ldr	r6, [r3, #0]
    ba3e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    ba40:	4607      	mov	r7, r0
    ba42:	b913      	cbnz	r3, ba4a <__sfp+0x12>
    ba44:	4630      	mov	r0, r6
    ba46:	f7ff ff81 	bl	b94c <__sinit>
    ba4a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    ba4e:	68b4      	ldr	r4, [r6, #8]
    ba50:	6873      	ldr	r3, [r6, #4]
    ba52:	3b01      	subs	r3, #1
    ba54:	d404      	bmi.n	ba60 <__sfp+0x28>
    ba56:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    ba5a:	b175      	cbz	r5, ba7a <__sfp+0x42>
    ba5c:	3468      	adds	r4, #104	; 0x68
    ba5e:	e7f8      	b.n	ba52 <__sfp+0x1a>
    ba60:	6833      	ldr	r3, [r6, #0]
    ba62:	b92b      	cbnz	r3, ba70 <__sfp+0x38>
    ba64:	4638      	mov	r0, r7
    ba66:	2104      	movs	r1, #4
    ba68:	f7ff ff54 	bl	b914 <__sfmoreglue>
    ba6c:	6030      	str	r0, [r6, #0]
    ba6e:	b108      	cbz	r0, ba74 <__sfp+0x3c>
    ba70:	6836      	ldr	r6, [r6, #0]
    ba72:	e7ec      	b.n	ba4e <__sfp+0x16>
    ba74:	230c      	movs	r3, #12
    ba76:	603b      	str	r3, [r7, #0]
    ba78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ba7e:	81e3      	strh	r3, [r4, #14]
    ba80:	2301      	movs	r3, #1
    ba82:	81a3      	strh	r3, [r4, #12]
    ba84:	6665      	str	r5, [r4, #100]	; 0x64
    ba86:	6025      	str	r5, [r4, #0]
    ba88:	60a5      	str	r5, [r4, #8]
    ba8a:	6065      	str	r5, [r4, #4]
    ba8c:	6125      	str	r5, [r4, #16]
    ba8e:	6165      	str	r5, [r4, #20]
    ba90:	61a5      	str	r5, [r4, #24]
    ba92:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    ba96:	4629      	mov	r1, r5
    ba98:	2208      	movs	r2, #8
    ba9a:	f7fc fc51 	bl	8340 <memset>
    ba9e:	6325      	str	r5, [r4, #48]	; 0x30
    baa0:	6365      	str	r5, [r4, #52]	; 0x34
    baa2:	6465      	str	r5, [r4, #68]	; 0x44
    baa4:	64a5      	str	r5, [r4, #72]	; 0x48
    baa6:	4620      	mov	r0, r4
    baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    baaa:	bf00      	nop
    baac:	00010a98 	.word	0x00010a98

0000bab0 <__sfp_lock_acquire>:
    bab0:	4770      	bx	lr

0000bab2 <__sfp_lock_release>:
    bab2:	4770      	bx	lr

0000bab4 <__sinit_lock_acquire>:
    bab4:	4770      	bx	lr

0000bab6 <__sinit_lock_release>:
    bab6:	4770      	bx	lr

0000bab8 <__fp_lock_all>:
    bab8:	4b02      	ldr	r3, [pc, #8]	; (bac4 <__fp_lock_all+0xc>)
    baba:	4903      	ldr	r1, [pc, #12]	; (bac8 <__fp_lock_all+0x10>)
    babc:	6818      	ldr	r0, [r3, #0]
    babe:	f000 bacd 	b.w	c05c <_fwalk>
    bac2:	bf00      	nop
    bac4:	200004a0 	.word	0x200004a0
    bac8:	0000b901 	.word	0x0000b901

0000bacc <__fp_unlock_all>:
    bacc:	4b02      	ldr	r3, [pc, #8]	; (bad8 <__fp_unlock_all+0xc>)
    bace:	4903      	ldr	r1, [pc, #12]	; (badc <__fp_unlock_all+0x10>)
    bad0:	6818      	ldr	r0, [r3, #0]
    bad2:	f000 bac3 	b.w	c05c <_fwalk>
    bad6:	bf00      	nop
    bad8:	200004a0 	.word	0x200004a0
    badc:	0000b905 	.word	0x0000b905

0000bae0 <_fputwc_r>:
    bae0:	8993      	ldrh	r3, [r2, #12]
    bae2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bae6:	460e      	mov	r6, r1
    bae8:	0499      	lsls	r1, r3, #18
    baea:	4680      	mov	r8, r0
    baec:	4614      	mov	r4, r2
    baee:	d406      	bmi.n	bafe <_fputwc_r+0x1e>
    baf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    baf4:	8193      	strh	r3, [r2, #12]
    baf6:	6e53      	ldr	r3, [r2, #100]	; 0x64
    baf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bafc:	6653      	str	r3, [r2, #100]	; 0x64
    bafe:	f000 fb19 	bl	c134 <__locale_mb_cur_max>
    bb02:	2801      	cmp	r0, #1
    bb04:	d106      	bne.n	bb14 <_fputwc_r+0x34>
    bb06:	1e73      	subs	r3, r6, #1
    bb08:	2bfe      	cmp	r3, #254	; 0xfe
    bb0a:	d803      	bhi.n	bb14 <_fputwc_r+0x34>
    bb0c:	f88d 6004 	strb.w	r6, [sp, #4]
    bb10:	4607      	mov	r7, r0
    bb12:	e00e      	b.n	bb32 <_fputwc_r+0x52>
    bb14:	4632      	mov	r2, r6
    bb16:	4640      	mov	r0, r8
    bb18:	a901      	add	r1, sp, #4
    bb1a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    bb1e:	f003 ff13 	bl	f948 <_wcrtomb_r>
    bb22:	1c42      	adds	r2, r0, #1
    bb24:	4607      	mov	r7, r0
    bb26:	d104      	bne.n	bb32 <_fputwc_r+0x52>
    bb28:	89a3      	ldrh	r3, [r4, #12]
    bb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb2e:	81a3      	strh	r3, [r4, #12]
    bb30:	e02b      	b.n	bb8a <_fputwc_r+0xaa>
    bb32:	2500      	movs	r5, #0
    bb34:	42bd      	cmp	r5, r7
    bb36:	d024      	beq.n	bb82 <_fputwc_r+0xa2>
    bb38:	68a2      	ldr	r2, [r4, #8]
    bb3a:	3a01      	subs	r2, #1
    bb3c:	2a00      	cmp	r2, #0
    bb3e:	60a2      	str	r2, [r4, #8]
    bb40:	ab01      	add	r3, sp, #4
    bb42:	da16      	bge.n	bb72 <_fputwc_r+0x92>
    bb44:	69a1      	ldr	r1, [r4, #24]
    bb46:	428a      	cmp	r2, r1
    bb48:	db08      	blt.n	bb5c <_fputwc_r+0x7c>
    bb4a:	6822      	ldr	r2, [r4, #0]
    bb4c:	5d5b      	ldrb	r3, [r3, r5]
    bb4e:	7013      	strb	r3, [r2, #0]
    bb50:	6823      	ldr	r3, [r4, #0]
    bb52:	7819      	ldrb	r1, [r3, #0]
    bb54:	290a      	cmp	r1, #10
    bb56:	d110      	bne.n	bb7a <_fputwc_r+0x9a>
    bb58:	4640      	mov	r0, r8
    bb5a:	e001      	b.n	bb60 <_fputwc_r+0x80>
    bb5c:	5d59      	ldrb	r1, [r3, r5]
    bb5e:	4640      	mov	r0, r8
    bb60:	4622      	mov	r2, r4
    bb62:	f003 fe9f 	bl	f8a4 <__swbuf_r>
    bb66:	f1b0 33ff 	subs.w	r3, r0, #4294967295
    bb6a:	4258      	negs	r0, r3
    bb6c:	4158      	adcs	r0, r3
    bb6e:	b130      	cbz	r0, bb7e <_fputwc_r+0x9e>
    bb70:	e009      	b.n	bb86 <_fputwc_r+0xa6>
    bb72:	6822      	ldr	r2, [r4, #0]
    bb74:	5d5b      	ldrb	r3, [r3, r5]
    bb76:	7013      	strb	r3, [r2, #0]
    bb78:	6823      	ldr	r3, [r4, #0]
    bb7a:	3301      	adds	r3, #1
    bb7c:	6023      	str	r3, [r4, #0]
    bb7e:	3501      	adds	r5, #1
    bb80:	e7d8      	b.n	bb34 <_fputwc_r+0x54>
    bb82:	4630      	mov	r0, r6
    bb84:	e001      	b.n	bb8a <_fputwc_r+0xaa>
    bb86:	f04f 30ff 	mov.w	r0, #4294967295
    bb8a:	b002      	add	sp, #8
    bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bb90 <fputwc>:
    bb90:	4b08      	ldr	r3, [pc, #32]	; (bbb4 <fputwc+0x24>)
    bb92:	b570      	push	{r4, r5, r6, lr}
    bb94:	681c      	ldr	r4, [r3, #0]
    bb96:	4606      	mov	r6, r0
    bb98:	460d      	mov	r5, r1
    bb9a:	b124      	cbz	r4, bba6 <fputwc+0x16>
    bb9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    bb9e:	b913      	cbnz	r3, bba6 <fputwc+0x16>
    bba0:	4620      	mov	r0, r4
    bba2:	f7ff fed3 	bl	b94c <__sinit>
    bba6:	4620      	mov	r0, r4
    bba8:	4631      	mov	r1, r6
    bbaa:	462a      	mov	r2, r5
    bbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbb0:	f7ff bf96 	b.w	bae0 <_fputwc_r>
    bbb4:	200004a0 	.word	0x200004a0

0000bbb8 <_malloc_trim_r>:
    bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbba:	4d23      	ldr	r5, [pc, #140]	; (bc48 <_malloc_trim_r+0x90>)
    bbbc:	460e      	mov	r6, r1
    bbbe:	4604      	mov	r4, r0
    bbc0:	f000 fdfd 	bl	c7be <__malloc_lock>
    bbc4:	68ab      	ldr	r3, [r5, #8]
    bbc6:	685f      	ldr	r7, [r3, #4]
    bbc8:	f027 0703 	bic.w	r7, r7, #3
    bbcc:	1bbe      	subs	r6, r7, r6
    bbce:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
    bbd2:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
    bbd6:	f026 060f 	bic.w	r6, r6, #15
    bbda:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    bbde:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    bbe2:	da04      	bge.n	bbee <_malloc_trim_r+0x36>
    bbe4:	4620      	mov	r0, r4
    bbe6:	f000 fdeb 	bl	c7c0 <__malloc_unlock>
    bbea:	2000      	movs	r0, #0
    bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bbee:	4620      	mov	r0, r4
    bbf0:	2100      	movs	r1, #0
    bbf2:	f001 fbad 	bl	d350 <_sbrk_r>
    bbf6:	68ab      	ldr	r3, [r5, #8]
    bbf8:	443b      	add	r3, r7
    bbfa:	4298      	cmp	r0, r3
    bbfc:	d1f2      	bne.n	bbe4 <_malloc_trim_r+0x2c>
    bbfe:	4620      	mov	r0, r4
    bc00:	4271      	negs	r1, r6
    bc02:	f001 fba5 	bl	d350 <_sbrk_r>
    bc06:	3001      	adds	r0, #1
    bc08:	d110      	bne.n	bc2c <_malloc_trim_r+0x74>
    bc0a:	4620      	mov	r0, r4
    bc0c:	2100      	movs	r1, #0
    bc0e:	f001 fb9f 	bl	d350 <_sbrk_r>
    bc12:	68ab      	ldr	r3, [r5, #8]
    bc14:	1ac2      	subs	r2, r0, r3
    bc16:	2a0f      	cmp	r2, #15
    bc18:	dde4      	ble.n	bbe4 <_malloc_trim_r+0x2c>
    bc1a:	490c      	ldr	r1, [pc, #48]	; (bc4c <_malloc_trim_r+0x94>)
    bc1c:	6809      	ldr	r1, [r1, #0]
    bc1e:	1a40      	subs	r0, r0, r1
    bc20:	490b      	ldr	r1, [pc, #44]	; (bc50 <_malloc_trim_r+0x98>)
    bc22:	f042 0201 	orr.w	r2, r2, #1
    bc26:	6008      	str	r0, [r1, #0]
    bc28:	605a      	str	r2, [r3, #4]
    bc2a:	e7db      	b.n	bbe4 <_malloc_trim_r+0x2c>
    bc2c:	68ab      	ldr	r3, [r5, #8]
    bc2e:	1bbf      	subs	r7, r7, r6
    bc30:	f047 0701 	orr.w	r7, r7, #1
    bc34:	605f      	str	r7, [r3, #4]
    bc36:	4b06      	ldr	r3, [pc, #24]	; (bc50 <_malloc_trim_r+0x98>)
    bc38:	681a      	ldr	r2, [r3, #0]
    bc3a:	4620      	mov	r0, r4
    bc3c:	1b96      	subs	r6, r2, r6
    bc3e:	601e      	str	r6, [r3, #0]
    bc40:	f000 fdbe 	bl	c7c0 <__malloc_unlock>
    bc44:	2001      	movs	r0, #1
    bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc48:	2000094c 	.word	0x2000094c
    bc4c:	20000d54 	.word	0x20000d54
    bc50:	20000dd4 	.word	0x20000dd4

0000bc54 <_free_r>:
    bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc56:	4606      	mov	r6, r0
    bc58:	460d      	mov	r5, r1
    bc5a:	2900      	cmp	r1, #0
    bc5c:	f000 80a9 	beq.w	bdb2 <_free_r+0x15e>
    bc60:	f000 fdad 	bl	c7be <__malloc_lock>
    bc64:	f855 cc04 	ldr.w	ip, [r5, #-4]
    bc68:	4c52      	ldr	r4, [pc, #328]	; (bdb4 <_free_r+0x160>)
    bc6a:	f1a5 0308 	sub.w	r3, r5, #8
    bc6e:	f02c 0201 	bic.w	r2, ip, #1
    bc72:	1898      	adds	r0, r3, r2
    bc74:	68a1      	ldr	r1, [r4, #8]
    bc76:	6847      	ldr	r7, [r0, #4]
    bc78:	4288      	cmp	r0, r1
    bc7a:	f027 0703 	bic.w	r7, r7, #3
    bc7e:	f00c 0101 	and.w	r1, ip, #1
    bc82:	d11b      	bne.n	bcbc <_free_r+0x68>
    bc84:	443a      	add	r2, r7
    bc86:	b939      	cbnz	r1, bc98 <_free_r+0x44>
    bc88:	f855 1c08 	ldr.w	r1, [r5, #-8]
    bc8c:	1a5b      	subs	r3, r3, r1
    bc8e:	440a      	add	r2, r1
    bc90:	6898      	ldr	r0, [r3, #8]
    bc92:	68d9      	ldr	r1, [r3, #12]
    bc94:	60c1      	str	r1, [r0, #12]
    bc96:	6088      	str	r0, [r1, #8]
    bc98:	f042 0101 	orr.w	r1, r2, #1
    bc9c:	6059      	str	r1, [r3, #4]
    bc9e:	60a3      	str	r3, [r4, #8]
    bca0:	4b45      	ldr	r3, [pc, #276]	; (bdb8 <_free_r+0x164>)
    bca2:	681b      	ldr	r3, [r3, #0]
    bca4:	429a      	cmp	r2, r3
    bca6:	d304      	bcc.n	bcb2 <_free_r+0x5e>
    bca8:	4b44      	ldr	r3, [pc, #272]	; (bdbc <_free_r+0x168>)
    bcaa:	4630      	mov	r0, r6
    bcac:	6819      	ldr	r1, [r3, #0]
    bcae:	f7ff ff83 	bl	bbb8 <_malloc_trim_r>
    bcb2:	4630      	mov	r0, r6
    bcb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bcb8:	f000 bd82 	b.w	c7c0 <__malloc_unlock>
    bcbc:	6047      	str	r7, [r0, #4]
    bcbe:	b979      	cbnz	r1, bce0 <_free_r+0x8c>
    bcc0:	f855 5c08 	ldr.w	r5, [r5, #-8]
    bcc4:	1b5b      	subs	r3, r3, r5
    bcc6:	442a      	add	r2, r5
    bcc8:	689d      	ldr	r5, [r3, #8]
    bcca:	f104 0c08 	add.w	ip, r4, #8
    bcce:	4565      	cmp	r5, ip
    bcd0:	d008      	beq.n	bce4 <_free_r+0x90>
    bcd2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    bcd6:	f8c5 c00c 	str.w	ip, [r5, #12]
    bcda:	f8cc 5008 	str.w	r5, [ip, #8]
    bcde:	e002      	b.n	bce6 <_free_r+0x92>
    bce0:	2100      	movs	r1, #0
    bce2:	e000      	b.n	bce6 <_free_r+0x92>
    bce4:	2101      	movs	r1, #1
    bce6:	19c5      	adds	r5, r0, r7
    bce8:	686d      	ldr	r5, [r5, #4]
    bcea:	07ed      	lsls	r5, r5, #31
    bcec:	d40e      	bmi.n	bd0c <_free_r+0xb8>
    bcee:	443a      	add	r2, r7
    bcf0:	6885      	ldr	r5, [r0, #8]
    bcf2:	b941      	cbnz	r1, bd06 <_free_r+0xb2>
    bcf4:	4f32      	ldr	r7, [pc, #200]	; (bdc0 <_free_r+0x16c>)
    bcf6:	42bd      	cmp	r5, r7
    bcf8:	d105      	bne.n	bd06 <_free_r+0xb2>
    bcfa:	6163      	str	r3, [r4, #20]
    bcfc:	6123      	str	r3, [r4, #16]
    bcfe:	2101      	movs	r1, #1
    bd00:	60dd      	str	r5, [r3, #12]
    bd02:	609d      	str	r5, [r3, #8]
    bd04:	e002      	b.n	bd0c <_free_r+0xb8>
    bd06:	68c0      	ldr	r0, [r0, #12]
    bd08:	60e8      	str	r0, [r5, #12]
    bd0a:	6085      	str	r5, [r0, #8]
    bd0c:	f042 0001 	orr.w	r0, r2, #1
    bd10:	6058      	str	r0, [r3, #4]
    bd12:	509a      	str	r2, [r3, r2]
    bd14:	2900      	cmp	r1, #0
    bd16:	d1cc      	bne.n	bcb2 <_free_r+0x5e>
    bd18:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    bd1c:	d20e      	bcs.n	bd3c <_free_r+0xe8>
    bd1e:	08d2      	lsrs	r2, r2, #3
    bd20:	1091      	asrs	r1, r2, #2
    bd22:	2001      	movs	r0, #1
    bd24:	4088      	lsls	r0, r1
    bd26:	6861      	ldr	r1, [r4, #4]
    bd28:	4301      	orrs	r1, r0
    bd2a:	6061      	str	r1, [r4, #4]
    bd2c:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    bd30:	68a2      	ldr	r2, [r4, #8]
    bd32:	609a      	str	r2, [r3, #8]
    bd34:	60dc      	str	r4, [r3, #12]
    bd36:	60a3      	str	r3, [r4, #8]
    bd38:	60d3      	str	r3, [r2, #12]
    bd3a:	e7ba      	b.n	bcb2 <_free_r+0x5e>
    bd3c:	0a51      	lsrs	r1, r2, #9
    bd3e:	2904      	cmp	r1, #4
    bd40:	d802      	bhi.n	bd48 <_free_r+0xf4>
    bd42:	0991      	lsrs	r1, r2, #6
    bd44:	3138      	adds	r1, #56	; 0x38
    bd46:	e015      	b.n	bd74 <_free_r+0x120>
    bd48:	2914      	cmp	r1, #20
    bd4a:	d801      	bhi.n	bd50 <_free_r+0xfc>
    bd4c:	315b      	adds	r1, #91	; 0x5b
    bd4e:	e011      	b.n	bd74 <_free_r+0x120>
    bd50:	2954      	cmp	r1, #84	; 0x54
    bd52:	d802      	bhi.n	bd5a <_free_r+0x106>
    bd54:	0b11      	lsrs	r1, r2, #12
    bd56:	316e      	adds	r1, #110	; 0x6e
    bd58:	e00c      	b.n	bd74 <_free_r+0x120>
    bd5a:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
    bd5e:	d802      	bhi.n	bd66 <_free_r+0x112>
    bd60:	0bd1      	lsrs	r1, r2, #15
    bd62:	3177      	adds	r1, #119	; 0x77
    bd64:	e006      	b.n	bd74 <_free_r+0x120>
    bd66:	f240 5054 	movw	r0, #1364	; 0x554
    bd6a:	4281      	cmp	r1, r0
    bd6c:	bf9a      	itte	ls
    bd6e:	0c91      	lsrls	r1, r2, #18
    bd70:	317c      	addls	r1, #124	; 0x7c
    bd72:	217e      	movhi	r1, #126	; 0x7e
    bd74:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    bd78:	480e      	ldr	r0, [pc, #56]	; (bdb4 <_free_r+0x160>)
    bd7a:	68a5      	ldr	r5, [r4, #8]
    bd7c:	42a5      	cmp	r5, r4
    bd7e:	d001      	beq.n	bd84 <_free_r+0x130>
    bd80:	4629      	mov	r1, r5
    bd82:	e00b      	b.n	bd9c <_free_r+0x148>
    bd84:	2201      	movs	r2, #1
    bd86:	1089      	asrs	r1, r1, #2
    bd88:	fa02 f101 	lsl.w	r1, r2, r1
    bd8c:	6842      	ldr	r2, [r0, #4]
    bd8e:	430a      	orrs	r2, r1
    bd90:	6042      	str	r2, [r0, #4]
    bd92:	4629      	mov	r1, r5
    bd94:	e008      	b.n	bda8 <_free_r+0x154>
    bd96:	6889      	ldr	r1, [r1, #8]
    bd98:	42a1      	cmp	r1, r4
    bd9a:	d004      	beq.n	bda6 <_free_r+0x152>
    bd9c:	6848      	ldr	r0, [r1, #4]
    bd9e:	f020 0003 	bic.w	r0, r0, #3
    bda2:	4282      	cmp	r2, r0
    bda4:	d3f7      	bcc.n	bd96 <_free_r+0x142>
    bda6:	68cd      	ldr	r5, [r1, #12]
    bda8:	60dd      	str	r5, [r3, #12]
    bdaa:	6099      	str	r1, [r3, #8]
    bdac:	60ab      	str	r3, [r5, #8]
    bdae:	60cb      	str	r3, [r1, #12]
    bdb0:	e77f      	b.n	bcb2 <_free_r+0x5e>
    bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdb4:	2000094c 	.word	0x2000094c
    bdb8:	20000d58 	.word	0x20000d58
    bdbc:	20000dd0 	.word	0x20000dd0
    bdc0:	20000954 	.word	0x20000954

0000bdc4 <__sfvwrite_r>:
    bdc4:	6893      	ldr	r3, [r2, #8]
    bdc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bdca:	4680      	mov	r8, r0
    bdcc:	460c      	mov	r4, r1
    bdce:	4691      	mov	r9, r2
    bdd0:	b90b      	cbnz	r3, bdd6 <__sfvwrite_r+0x12>
    bdd2:	2000      	movs	r0, #0
    bdd4:	e13c      	b.n	c050 <__sfvwrite_r+0x28c>
    bdd6:	898b      	ldrh	r3, [r1, #12]
    bdd8:	0718      	lsls	r0, r3, #28
    bdda:	d50e      	bpl.n	bdfa <__sfvwrite_r+0x36>
    bddc:	690b      	ldr	r3, [r1, #16]
    bdde:	b163      	cbz	r3, bdfa <__sfvwrite_r+0x36>
    bde0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    bde4:	f8d9 6000 	ldr.w	r6, [r9]
    bde8:	f00a 0c02 	and.w	ip, sl, #2
    bdec:	fa1f f38c 	uxth.w	r3, ip
    bdf0:	b333      	cbz	r3, be40 <__sfvwrite_r+0x7c>
    bdf2:	f04f 0a00 	mov.w	sl, #0
    bdf6:	4657      	mov	r7, sl
    bdf8:	e01b      	b.n	be32 <__sfvwrite_r+0x6e>
    bdfa:	4640      	mov	r0, r8
    bdfc:	4621      	mov	r1, r4
    bdfe:	f7fe fdd1 	bl	a9a4 <__swsetup_r>
    be02:	2800      	cmp	r0, #0
    be04:	d0ec      	beq.n	bde0 <__sfvwrite_r+0x1c>
    be06:	e121      	b.n	c04c <__sfvwrite_r+0x288>
    be08:	4b93      	ldr	r3, [pc, #588]	; (c058 <__sfvwrite_r+0x294>)
    be0a:	69e1      	ldr	r1, [r4, #28]
    be0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    be0e:	429f      	cmp	r7, r3
    be10:	bf38      	it	cc
    be12:	463b      	movcc	r3, r7
    be14:	4640      	mov	r0, r8
    be16:	4652      	mov	r2, sl
    be18:	47a8      	blx	r5
    be1a:	2800      	cmp	r0, #0
    be1c:	f340 8112 	ble.w	c044 <__sfvwrite_r+0x280>
    be20:	f8d9 3008 	ldr.w	r3, [r9, #8]
    be24:	4482      	add	sl, r0
    be26:	1a3f      	subs	r7, r7, r0
    be28:	1a18      	subs	r0, r3, r0
    be2a:	f8c9 0008 	str.w	r0, [r9, #8]
    be2e:	2800      	cmp	r0, #0
    be30:	d0cf      	beq.n	bdd2 <__sfvwrite_r+0xe>
    be32:	2f00      	cmp	r7, #0
    be34:	d1e8      	bne.n	be08 <__sfvwrite_r+0x44>
    be36:	f8d6 a000 	ldr.w	sl, [r6]
    be3a:	6877      	ldr	r7, [r6, #4]
    be3c:	3608      	adds	r6, #8
    be3e:	e7f8      	b.n	be32 <__sfvwrite_r+0x6e>
    be40:	f01a 0a01 	ands.w	sl, sl, #1
    be44:	d004      	beq.n	be50 <__sfvwrite_r+0x8c>
    be46:	469b      	mov	fp, r3
    be48:	9301      	str	r3, [sp, #4]
    be4a:	461f      	mov	r7, r3
    be4c:	469a      	mov	sl, r3
    be4e:	e0bf      	b.n	bfd0 <__sfvwrite_r+0x20c>
    be50:	4655      	mov	r5, sl
    be52:	b925      	cbnz	r5, be5e <__sfvwrite_r+0x9a>
    be54:	f8d6 a000 	ldr.w	sl, [r6]
    be58:	6875      	ldr	r5, [r6, #4]
    be5a:	3608      	adds	r6, #8
    be5c:	e7f9      	b.n	be52 <__sfvwrite_r+0x8e>
    be5e:	89a2      	ldrh	r2, [r4, #12]
    be60:	68a7      	ldr	r7, [r4, #8]
    be62:	0591      	lsls	r1, r2, #22
    be64:	d552      	bpl.n	bf0c <__sfvwrite_r+0x148>
    be66:	42bd      	cmp	r5, r7
    be68:	d342      	bcc.n	bef0 <__sfvwrite_r+0x12c>
    be6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
    be6e:	d03d      	beq.n	beec <__sfvwrite_r+0x128>
    be70:	6921      	ldr	r1, [r4, #16]
    be72:	6823      	ldr	r3, [r4, #0]
    be74:	1a5b      	subs	r3, r3, r1
    be76:	9301      	str	r3, [sp, #4]
    be78:	6963      	ldr	r3, [r4, #20]
    be7a:	2002      	movs	r0, #2
    be7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    be80:	fb93 fbf0 	sdiv	fp, r3, r0
    be84:	9b01      	ldr	r3, [sp, #4]
    be86:	1c58      	adds	r0, r3, #1
    be88:	4428      	add	r0, r5
    be8a:	4583      	cmp	fp, r0
    be8c:	bf38      	it	cc
    be8e:	4683      	movcc	fp, r0
    be90:	0553      	lsls	r3, r2, #21
    be92:	4640      	mov	r0, r8
    be94:	d50f      	bpl.n	beb6 <__sfvwrite_r+0xf2>
    be96:	4659      	mov	r1, fp
    be98:	f000 f9f0 	bl	c27c <_malloc_r>
    be9c:	4607      	mov	r7, r0
    be9e:	b1b8      	cbz	r0, bed0 <__sfvwrite_r+0x10c>
    bea0:	9a01      	ldr	r2, [sp, #4]
    bea2:	6921      	ldr	r1, [r4, #16]
    bea4:	f000 fc67 	bl	c776 <memcpy>
    bea8:	89a2      	ldrh	r2, [r4, #12]
    beaa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    beae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    beb2:	81a2      	strh	r2, [r4, #12]
    beb4:	e010      	b.n	bed8 <__sfvwrite_r+0x114>
    beb6:	465a      	mov	r2, fp
    beb8:	f001 f880 	bl	cfbc <_realloc_r>
    bebc:	4607      	mov	r7, r0
    bebe:	b958      	cbnz	r0, bed8 <__sfvwrite_r+0x114>
    bec0:	4640      	mov	r0, r8
    bec2:	6921      	ldr	r1, [r4, #16]
    bec4:	f7ff fec6 	bl	bc54 <_free_r>
    bec8:	89a3      	ldrh	r3, [r4, #12]
    beca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bece:	81a3      	strh	r3, [r4, #12]
    bed0:	230c      	movs	r3, #12
    bed2:	f8c8 3000 	str.w	r3, [r8]
    bed6:	e0b5      	b.n	c044 <__sfvwrite_r+0x280>
    bed8:	9b01      	ldr	r3, [sp, #4]
    beda:	6127      	str	r7, [r4, #16]
    bedc:	441f      	add	r7, r3
    bede:	ebc3 030b 	rsb	r3, r3, fp
    bee2:	6027      	str	r7, [r4, #0]
    bee4:	f8c4 b014 	str.w	fp, [r4, #20]
    bee8:	462f      	mov	r7, r5
    beea:	60a3      	str	r3, [r4, #8]
    beec:	42bd      	cmp	r5, r7
    beee:	d200      	bcs.n	bef2 <__sfvwrite_r+0x12e>
    bef0:	462f      	mov	r7, r5
    bef2:	463a      	mov	r2, r7
    bef4:	6820      	ldr	r0, [r4, #0]
    bef6:	4651      	mov	r1, sl
    bef8:	f000 fc46 	bl	c788 <memmove>
    befc:	68a3      	ldr	r3, [r4, #8]
    befe:	1bdb      	subs	r3, r3, r7
    bf00:	60a3      	str	r3, [r4, #8]
    bf02:	6823      	ldr	r3, [r4, #0]
    bf04:	441f      	add	r7, r3
    bf06:	6027      	str	r7, [r4, #0]
    bf08:	462f      	mov	r7, r5
    bf0a:	e02a      	b.n	bf62 <__sfvwrite_r+0x19e>
    bf0c:	6820      	ldr	r0, [r4, #0]
    bf0e:	6923      	ldr	r3, [r4, #16]
    bf10:	4298      	cmp	r0, r3
    bf12:	d802      	bhi.n	bf1a <__sfvwrite_r+0x156>
    bf14:	6963      	ldr	r3, [r4, #20]
    bf16:	429d      	cmp	r5, r3
    bf18:	d213      	bcs.n	bf42 <__sfvwrite_r+0x17e>
    bf1a:	42bd      	cmp	r5, r7
    bf1c:	bf38      	it	cc
    bf1e:	462f      	movcc	r7, r5
    bf20:	463a      	mov	r2, r7
    bf22:	4651      	mov	r1, sl
    bf24:	f000 fc30 	bl	c788 <memmove>
    bf28:	68a3      	ldr	r3, [r4, #8]
    bf2a:	6822      	ldr	r2, [r4, #0]
    bf2c:	1bdb      	subs	r3, r3, r7
    bf2e:	443a      	add	r2, r7
    bf30:	60a3      	str	r3, [r4, #8]
    bf32:	6022      	str	r2, [r4, #0]
    bf34:	b9ab      	cbnz	r3, bf62 <__sfvwrite_r+0x19e>
    bf36:	4640      	mov	r0, r8
    bf38:	4621      	mov	r1, r4
    bf3a:	f7ff fcbd 	bl	b8b8 <_fflush_r>
    bf3e:	b180      	cbz	r0, bf62 <__sfvwrite_r+0x19e>
    bf40:	e080      	b.n	c044 <__sfvwrite_r+0x280>
    bf42:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    bf46:	4575      	cmp	r5, lr
    bf48:	bf38      	it	cc
    bf4a:	46ae      	movcc	lr, r5
    bf4c:	fb9e fef3 	sdiv	lr, lr, r3
    bf50:	6a67      	ldr	r7, [r4, #36]	; 0x24
    bf52:	69e1      	ldr	r1, [r4, #28]
    bf54:	4640      	mov	r0, r8
    bf56:	4652      	mov	r2, sl
    bf58:	fb03 f30e 	mul.w	r3, r3, lr
    bf5c:	47b8      	blx	r7
    bf5e:	1e07      	subs	r7, r0, #0
    bf60:	dd70      	ble.n	c044 <__sfvwrite_r+0x280>
    bf62:	f8d9 3008 	ldr.w	r3, [r9, #8]
    bf66:	44ba      	add	sl, r7
    bf68:	1bed      	subs	r5, r5, r7
    bf6a:	1bdf      	subs	r7, r3, r7
    bf6c:	f8c9 7008 	str.w	r7, [r9, #8]
    bf70:	2f00      	cmp	r7, #0
    bf72:	f47f af6e 	bne.w	be52 <__sfvwrite_r+0x8e>
    bf76:	e72c      	b.n	bdd2 <__sfvwrite_r+0xe>
    bf78:	9d01      	ldr	r5, [sp, #4]
    bf7a:	2d00      	cmp	r5, #0
    bf7c:	d031      	beq.n	bfe2 <__sfvwrite_r+0x21e>
    bf7e:	6820      	ldr	r0, [r4, #0]
    bf80:	6922      	ldr	r2, [r4, #16]
    bf82:	68a5      	ldr	r5, [r4, #8]
    bf84:	f8d4 e014 	ldr.w	lr, [r4, #20]
    bf88:	45d3      	cmp	fp, sl
    bf8a:	bf34      	ite	cc
    bf8c:	465b      	movcc	r3, fp
    bf8e:	4653      	movcs	r3, sl
    bf90:	4290      	cmp	r0, r2
    bf92:	d936      	bls.n	c002 <__sfvwrite_r+0x23e>
    bf94:	4475      	add	r5, lr
    bf96:	42ab      	cmp	r3, r5
    bf98:	dd33      	ble.n	c002 <__sfvwrite_r+0x23e>
    bf9a:	4639      	mov	r1, r7
    bf9c:	462a      	mov	r2, r5
    bf9e:	f000 fbf3 	bl	c788 <memmove>
    bfa2:	6823      	ldr	r3, [r4, #0]
    bfa4:	442b      	add	r3, r5
    bfa6:	6023      	str	r3, [r4, #0]
    bfa8:	4640      	mov	r0, r8
    bfaa:	4621      	mov	r1, r4
    bfac:	f7ff fc84 	bl	b8b8 <_fflush_r>
    bfb0:	2800      	cmp	r0, #0
    bfb2:	d147      	bne.n	c044 <__sfvwrite_r+0x280>
    bfb4:	ebbb 0b05 	subs.w	fp, fp, r5
    bfb8:	d03c      	beq.n	c034 <__sfvwrite_r+0x270>
    bfba:	f8d9 3008 	ldr.w	r3, [r9, #8]
    bfbe:	442f      	add	r7, r5
    bfc0:	ebc5 0a0a 	rsb	sl, r5, sl
    bfc4:	1b5d      	subs	r5, r3, r5
    bfc6:	f8c9 5008 	str.w	r5, [r9, #8]
    bfca:	2d00      	cmp	r5, #0
    bfcc:	f43f af01 	beq.w	bdd2 <__sfvwrite_r+0xe>
    bfd0:	f1ba 0f00 	cmp.w	sl, #0
    bfd4:	d1d0      	bne.n	bf78 <__sfvwrite_r+0x1b4>
    bfd6:	2500      	movs	r5, #0
    bfd8:	e896 0480 	ldmia.w	r6, {r7, sl}
    bfdc:	9501      	str	r5, [sp, #4]
    bfde:	3608      	adds	r6, #8
    bfe0:	e7f6      	b.n	bfd0 <__sfvwrite_r+0x20c>
    bfe2:	4638      	mov	r0, r7
    bfe4:	210a      	movs	r1, #10
    bfe6:	4652      	mov	r2, sl
    bfe8:	f000 fbb6 	bl	c758 <memchr>
    bfec:	b120      	cbz	r0, bff8 <__sfvwrite_r+0x234>
    bfee:	f100 0c01 	add.w	ip, r0, #1
    bff2:	ebc7 0b0c 	rsb	fp, r7, ip
    bff6:	e001      	b.n	bffc <__sfvwrite_r+0x238>
    bff8:	f10a 0b01 	add.w	fp, sl, #1
    bffc:	2501      	movs	r5, #1
    bffe:	9501      	str	r5, [sp, #4]
    c000:	e7bd      	b.n	bf7e <__sfvwrite_r+0x1ba>
    c002:	4573      	cmp	r3, lr
    c004:	db08      	blt.n	c018 <__sfvwrite_r+0x254>
    c006:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c008:	69e1      	ldr	r1, [r4, #28]
    c00a:	4640      	mov	r0, r8
    c00c:	463a      	mov	r2, r7
    c00e:	4673      	mov	r3, lr
    c010:	47a8      	blx	r5
    c012:	1e05      	subs	r5, r0, #0
    c014:	dcce      	bgt.n	bfb4 <__sfvwrite_r+0x1f0>
    c016:	e015      	b.n	c044 <__sfvwrite_r+0x280>
    c018:	461a      	mov	r2, r3
    c01a:	4639      	mov	r1, r7
    c01c:	9300      	str	r3, [sp, #0]
    c01e:	f000 fbb3 	bl	c788 <memmove>
    c022:	9b00      	ldr	r3, [sp, #0]
    c024:	68a2      	ldr	r2, [r4, #8]
    c026:	1ad2      	subs	r2, r2, r3
    c028:	60a2      	str	r2, [r4, #8]
    c02a:	6822      	ldr	r2, [r4, #0]
    c02c:	441a      	add	r2, r3
    c02e:	6022      	str	r2, [r4, #0]
    c030:	461d      	mov	r5, r3
    c032:	e7bf      	b.n	bfb4 <__sfvwrite_r+0x1f0>
    c034:	4640      	mov	r0, r8
    c036:	4621      	mov	r1, r4
    c038:	f7ff fc3e 	bl	b8b8 <_fflush_r>
    c03c:	b910      	cbnz	r0, c044 <__sfvwrite_r+0x280>
    c03e:	f8cd b004 	str.w	fp, [sp, #4]
    c042:	e7ba      	b.n	bfba <__sfvwrite_r+0x1f6>
    c044:	89a3      	ldrh	r3, [r4, #12]
    c046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c04a:	81a3      	strh	r3, [r4, #12]
    c04c:	f04f 30ff 	mov.w	r0, #4294967295
    c050:	b003      	add	sp, #12
    c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c056:	bf00      	nop
    c058:	7ffffc00 	.word	0x7ffffc00

0000c05c <_fwalk>:
    c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c060:	4688      	mov	r8, r1
    c062:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
    c066:	2600      	movs	r6, #0
    c068:	b18c      	cbz	r4, c08e <_fwalk+0x32>
    c06a:	68a5      	ldr	r5, [r4, #8]
    c06c:	6867      	ldr	r7, [r4, #4]
    c06e:	3f01      	subs	r7, #1
    c070:	d40b      	bmi.n	c08a <_fwalk+0x2e>
    c072:	89ab      	ldrh	r3, [r5, #12]
    c074:	2b01      	cmp	r3, #1
    c076:	d906      	bls.n	c086 <_fwalk+0x2a>
    c078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c07c:	3301      	adds	r3, #1
    c07e:	d002      	beq.n	c086 <_fwalk+0x2a>
    c080:	4628      	mov	r0, r5
    c082:	47c0      	blx	r8
    c084:	4306      	orrs	r6, r0
    c086:	3568      	adds	r5, #104	; 0x68
    c088:	e7f1      	b.n	c06e <_fwalk+0x12>
    c08a:	6824      	ldr	r4, [r4, #0]
    c08c:	e7ec      	b.n	c068 <_fwalk+0xc>
    c08e:	4630      	mov	r0, r6
    c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c094 <_fwalk_reent>:
    c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c098:	4680      	mov	r8, r0
    c09a:	4689      	mov	r9, r1
    c09c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
    c0a0:	2600      	movs	r6, #0
    c0a2:	b194      	cbz	r4, c0ca <_fwalk_reent+0x36>
    c0a4:	68a5      	ldr	r5, [r4, #8]
    c0a6:	6867      	ldr	r7, [r4, #4]
    c0a8:	3f01      	subs	r7, #1
    c0aa:	d40c      	bmi.n	c0c6 <_fwalk_reent+0x32>
    c0ac:	89ab      	ldrh	r3, [r5, #12]
    c0ae:	2b01      	cmp	r3, #1
    c0b0:	d907      	bls.n	c0c2 <_fwalk_reent+0x2e>
    c0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c0b6:	3301      	adds	r3, #1
    c0b8:	d003      	beq.n	c0c2 <_fwalk_reent+0x2e>
    c0ba:	4640      	mov	r0, r8
    c0bc:	4629      	mov	r1, r5
    c0be:	47c8      	blx	r9
    c0c0:	4306      	orrs	r6, r0
    c0c2:	3568      	adds	r5, #104	; 0x68
    c0c4:	e7f0      	b.n	c0a8 <_fwalk_reent+0x14>
    c0c6:	6824      	ldr	r4, [r4, #0]
    c0c8:	e7eb      	b.n	c0a2 <_fwalk_reent+0xe>
    c0ca:	4630      	mov	r0, r6
    c0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c0d0 <iswspace>:
    c0d0:	28ff      	cmp	r0, #255	; 0xff
    c0d2:	d807      	bhi.n	c0e4 <iswspace+0x14>
    c0d4:	4b04      	ldr	r3, [pc, #16]	; (c0e8 <iswspace+0x18>)
    c0d6:	681b      	ldr	r3, [r3, #0]
    c0d8:	4418      	add	r0, r3
    c0da:	7840      	ldrb	r0, [r0, #1]
    c0dc:	f000 0008 	and.w	r0, r0, #8
    c0e0:	b2c0      	uxtb	r0, r0
    c0e2:	4770      	bx	lr
    c0e4:	2000      	movs	r0, #0
    c0e6:	4770      	bx	lr
    c0e8:	20000498 	.word	0x20000498

0000c0ec <_setlocale_r>:
    c0ec:	b510      	push	{r4, lr}
    c0ee:	4614      	mov	r4, r2
    c0f0:	b90a      	cbnz	r2, c0f6 <_setlocale_r+0xa>
    c0f2:	480b      	ldr	r0, [pc, #44]	; (c120 <_setlocale_r+0x34>)
    c0f4:	bd10      	pop	{r4, pc}
    c0f6:	4610      	mov	r0, r2
    c0f8:	490a      	ldr	r1, [pc, #40]	; (c124 <_setlocale_r+0x38>)
    c0fa:	f7fc fa82 	bl	8602 <strcmp>
    c0fe:	2800      	cmp	r0, #0
    c100:	d0f7      	beq.n	c0f2 <_setlocale_r+0x6>
    c102:	4620      	mov	r0, r4
    c104:	4906      	ldr	r1, [pc, #24]	; (c120 <_setlocale_r+0x34>)
    c106:	f7fc fa7c 	bl	8602 <strcmp>
    c10a:	2800      	cmp	r0, #0
    c10c:	d0f1      	beq.n	c0f2 <_setlocale_r+0x6>
    c10e:	4620      	mov	r0, r4
    c110:	4905      	ldr	r1, [pc, #20]	; (c128 <_setlocale_r+0x3c>)
    c112:	f7fc fa76 	bl	8602 <strcmp>
    c116:	2800      	cmp	r0, #0
    c118:	4801      	ldr	r0, [pc, #4]	; (c120 <_setlocale_r+0x34>)
    c11a:	bf18      	it	ne
    c11c:	2000      	movne	r0, #0
    c11e:	bd10      	pop	{r4, pc}
    c120:	00010a9c 	.word	0x00010a9c
    c124:	00010b46 	.word	0x00010b46
    c128:	00010b4d 	.word	0x00010b4d

0000c12c <__locale_charset>:
    c12c:	4800      	ldr	r0, [pc, #0]	; (c130 <__locale_charset+0x4>)
    c12e:	4770      	bx	lr
    c130:	200008d0 	.word	0x200008d0

0000c134 <__locale_mb_cur_max>:
    c134:	4b01      	ldr	r3, [pc, #4]	; (c13c <__locale_mb_cur_max+0x8>)
    c136:	6a18      	ldr	r0, [r3, #32]
    c138:	4770      	bx	lr
    c13a:	bf00      	nop
    c13c:	200008d0 	.word	0x200008d0

0000c140 <__locale_msgcharset>:
    c140:	4800      	ldr	r0, [pc, #0]	; (c144 <__locale_msgcharset+0x4>)
    c142:	4770      	bx	lr
    c144:	200008f4 	.word	0x200008f4

0000c148 <__locale_cjk_lang>:
    c148:	2000      	movs	r0, #0
    c14a:	4770      	bx	lr

0000c14c <_localeconv_r>:
    c14c:	4800      	ldr	r0, [pc, #0]	; (c150 <_localeconv_r+0x4>)
    c14e:	4770      	bx	lr
    c150:	20000914 	.word	0x20000914

0000c154 <setlocale>:
    c154:	460a      	mov	r2, r1
    c156:	4903      	ldr	r1, [pc, #12]	; (c164 <setlocale+0x10>)
    c158:	4603      	mov	r3, r0
    c15a:	6808      	ldr	r0, [r1, #0]
    c15c:	4619      	mov	r1, r3
    c15e:	f7ff bfc5 	b.w	c0ec <_setlocale_r>
    c162:	bf00      	nop
    c164:	200004a0 	.word	0x200004a0

0000c168 <localeconv>:
    c168:	4800      	ldr	r0, [pc, #0]	; (c16c <localeconv+0x4>)
    c16a:	4770      	bx	lr
    c16c:	20000914 	.word	0x20000914

0000c170 <_lseek_r>:
    c170:	b538      	push	{r3, r4, r5, lr}
    c172:	4c07      	ldr	r4, [pc, #28]	; (c190 <_lseek_r+0x20>)
    c174:	4605      	mov	r5, r0
    c176:	2000      	movs	r0, #0
    c178:	6020      	str	r0, [r4, #0]
    c17a:	4608      	mov	r0, r1
    c17c:	4611      	mov	r1, r2
    c17e:	461a      	mov	r2, r3
    c180:	f7fa f830 	bl	61e4 <_lseek>
    c184:	1c43      	adds	r3, r0, #1
    c186:	d102      	bne.n	c18e <_lseek_r+0x1e>
    c188:	6823      	ldr	r3, [r4, #0]
    c18a:	b103      	cbz	r3, c18e <_lseek_r+0x1e>
    c18c:	602b      	str	r3, [r5, #0]
    c18e:	bd38      	pop	{r3, r4, r5, pc}
    c190:	20000fa8 	.word	0x20000fa8

0000c194 <__smakebuf_r>:
    c194:	b5f0      	push	{r4, r5, r6, r7, lr}
    c196:	898b      	ldrh	r3, [r1, #12]
    c198:	079d      	lsls	r5, r3, #30
    c19a:	b091      	sub	sp, #68	; 0x44
    c19c:	4606      	mov	r6, r0
    c19e:	460c      	mov	r4, r1
    c1a0:	d43a      	bmi.n	c218 <__smakebuf_r+0x84>
    c1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c1a6:	2900      	cmp	r1, #0
    c1a8:	da0b      	bge.n	c1c2 <__smakebuf_r+0x2e>
    c1aa:	89a3      	ldrh	r3, [r4, #12]
    c1ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    c1b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    c1b4:	bf0c      	ite	eq
    c1b6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    c1ba:	2540      	movne	r5, #64	; 0x40
    c1bc:	81a3      	strh	r3, [r4, #12]
    c1be:	2700      	movs	r7, #0
    c1c0:	e01f      	b.n	c202 <__smakebuf_r+0x6e>
    c1c2:	aa01      	add	r2, sp, #4
    c1c4:	f003 fc8c 	bl	fae0 <_fstat_r>
    c1c8:	2800      	cmp	r0, #0
    c1ca:	dbee      	blt.n	c1aa <__smakebuf_r+0x16>
    c1cc:	9b02      	ldr	r3, [sp, #8]
    c1ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    c1d2:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
    c1d6:	424f      	negs	r7, r1
    c1d8:	414f      	adcs	r7, r1
    c1da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1de:	89a3      	ldrh	r3, [r4, #12]
    c1e0:	d10a      	bne.n	c1f8 <__smakebuf_r+0x64>
    c1e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c1e4:	491b      	ldr	r1, [pc, #108]	; (c254 <__smakebuf_r+0xc0>)
    c1e6:	428a      	cmp	r2, r1
    c1e8:	d106      	bne.n	c1f8 <__smakebuf_r+0x64>
    c1ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    c1ee:	f44f 6580 	mov.w	r5, #1024	; 0x400
    c1f2:	81a3      	strh	r3, [r4, #12]
    c1f4:	64e5      	str	r5, [r4, #76]	; 0x4c
    c1f6:	e004      	b.n	c202 <__smakebuf_r+0x6e>
    c1f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    c1fc:	81a3      	strh	r3, [r4, #12]
    c1fe:	f44f 6580 	mov.w	r5, #1024	; 0x400
    c202:	4630      	mov	r0, r6
    c204:	4629      	mov	r1, r5
    c206:	f000 f839 	bl	c27c <_malloc_r>
    c20a:	b960      	cbnz	r0, c226 <__smakebuf_r+0x92>
    c20c:	89a3      	ldrh	r3, [r4, #12]
    c20e:	059a      	lsls	r2, r3, #22
    c210:	d41d      	bmi.n	c24e <__smakebuf_r+0xba>
    c212:	f043 0302 	orr.w	r3, r3, #2
    c216:	81a3      	strh	r3, [r4, #12]
    c218:	f104 0343 	add.w	r3, r4, #67	; 0x43
    c21c:	6023      	str	r3, [r4, #0]
    c21e:	6123      	str	r3, [r4, #16]
    c220:	2301      	movs	r3, #1
    c222:	6163      	str	r3, [r4, #20]
    c224:	e013      	b.n	c24e <__smakebuf_r+0xba>
    c226:	4b0c      	ldr	r3, [pc, #48]	; (c258 <__smakebuf_r+0xc4>)
    c228:	63f3      	str	r3, [r6, #60]	; 0x3c
    c22a:	89a3      	ldrh	r3, [r4, #12]
    c22c:	6020      	str	r0, [r4, #0]
    c22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c232:	81a3      	strh	r3, [r4, #12]
    c234:	6120      	str	r0, [r4, #16]
    c236:	6165      	str	r5, [r4, #20]
    c238:	b14f      	cbz	r7, c24e <__smakebuf_r+0xba>
    c23a:	4630      	mov	r0, r6
    c23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c240:	f003 ff80 	bl	10144 <_isatty_r>
    c244:	b118      	cbz	r0, c24e <__smakebuf_r+0xba>
    c246:	89a3      	ldrh	r3, [r4, #12]
    c248:	f043 0301 	orr.w	r3, r3, #1
    c24c:	81a3      	strh	r3, [r4, #12]
    c24e:	b011      	add	sp, #68	; 0x44
    c250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c252:	bf00      	nop
    c254:	000085d7 	.word	0x000085d7
    c258:	0000b909 	.word	0x0000b909

0000c25c <malloc>:
    c25c:	4b02      	ldr	r3, [pc, #8]	; (c268 <malloc+0xc>)
    c25e:	4601      	mov	r1, r0
    c260:	6818      	ldr	r0, [r3, #0]
    c262:	f000 b80b 	b.w	c27c <_malloc_r>
    c266:	bf00      	nop
    c268:	200004a0 	.word	0x200004a0

0000c26c <free>:
    c26c:	4b02      	ldr	r3, [pc, #8]	; (c278 <free+0xc>)
    c26e:	4601      	mov	r1, r0
    c270:	6818      	ldr	r0, [r3, #0]
    c272:	f7ff bcef 	b.w	bc54 <_free_r>
    c276:	bf00      	nop
    c278:	200004a0 	.word	0x200004a0

0000c27c <_malloc_r>:
    c27c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c280:	f101 040b 	add.w	r4, r1, #11
    c284:	2c16      	cmp	r4, #22
    c286:	4607      	mov	r7, r0
    c288:	d903      	bls.n	c292 <_malloc_r+0x16>
    c28a:	f034 0407 	bics.w	r4, r4, #7
    c28e:	d501      	bpl.n	c294 <_malloc_r+0x18>
    c290:	e002      	b.n	c298 <_malloc_r+0x1c>
    c292:	2410      	movs	r4, #16
    c294:	428c      	cmp	r4, r1
    c296:	d202      	bcs.n	c29e <_malloc_r+0x22>
    c298:	230c      	movs	r3, #12
    c29a:	603b      	str	r3, [r7, #0]
    c29c:	e1e0      	b.n	c660 <_malloc_r+0x3e4>
    c29e:	4638      	mov	r0, r7
    c2a0:	f000 fa8d 	bl	c7be <__malloc_lock>
    c2a4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    c2a8:	4da4      	ldr	r5, [pc, #656]	; (c53c <_malloc_r+0x2c0>)
    c2aa:	d214      	bcs.n	c2d6 <_malloc_r+0x5a>
    c2ac:	08e2      	lsrs	r2, r4, #3
    c2ae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    c2b2:	68de      	ldr	r6, [r3, #12]
    c2b4:	429e      	cmp	r6, r3
    c2b6:	d106      	bne.n	c2c6 <_malloc_r+0x4a>
    c2b8:	f106 0308 	add.w	r3, r6, #8
    c2bc:	6976      	ldr	r6, [r6, #20]
    c2be:	429e      	cmp	r6, r3
    c2c0:	bf08      	it	eq
    c2c2:	3202      	addeq	r2, #2
    c2c4:	d043      	beq.n	c34e <_malloc_r+0xd2>
    c2c6:	6873      	ldr	r3, [r6, #4]
    c2c8:	68f2      	ldr	r2, [r6, #12]
    c2ca:	68b1      	ldr	r1, [r6, #8]
    c2cc:	f023 0303 	bic.w	r3, r3, #3
    c2d0:	60ca      	str	r2, [r1, #12]
    c2d2:	6091      	str	r1, [r2, #8]
    c2d4:	e05d      	b.n	c392 <_malloc_r+0x116>
    c2d6:	0a62      	lsrs	r2, r4, #9
    c2d8:	d01a      	beq.n	c310 <_malloc_r+0x94>
    c2da:	2a04      	cmp	r2, #4
    c2dc:	d802      	bhi.n	c2e4 <_malloc_r+0x68>
    c2de:	09a2      	lsrs	r2, r4, #6
    c2e0:	3238      	adds	r2, #56	; 0x38
    c2e2:	e018      	b.n	c316 <_malloc_r+0x9a>
    c2e4:	2a14      	cmp	r2, #20
    c2e6:	d801      	bhi.n	c2ec <_malloc_r+0x70>
    c2e8:	325b      	adds	r2, #91	; 0x5b
    c2ea:	e014      	b.n	c316 <_malloc_r+0x9a>
    c2ec:	2a54      	cmp	r2, #84	; 0x54
    c2ee:	d802      	bhi.n	c2f6 <_malloc_r+0x7a>
    c2f0:	0b22      	lsrs	r2, r4, #12
    c2f2:	326e      	adds	r2, #110	; 0x6e
    c2f4:	e00f      	b.n	c316 <_malloc_r+0x9a>
    c2f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    c2fa:	d802      	bhi.n	c302 <_malloc_r+0x86>
    c2fc:	0be2      	lsrs	r2, r4, #15
    c2fe:	3277      	adds	r2, #119	; 0x77
    c300:	e009      	b.n	c316 <_malloc_r+0x9a>
    c302:	f240 5354 	movw	r3, #1364	; 0x554
    c306:	429a      	cmp	r2, r3
    c308:	d804      	bhi.n	c314 <_malloc_r+0x98>
    c30a:	0ca2      	lsrs	r2, r4, #18
    c30c:	327c      	adds	r2, #124	; 0x7c
    c30e:	e002      	b.n	c316 <_malloc_r+0x9a>
    c310:	223f      	movs	r2, #63	; 0x3f
    c312:	e000      	b.n	c316 <_malloc_r+0x9a>
    c314:	227e      	movs	r2, #126	; 0x7e
    c316:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    c31a:	68de      	ldr	r6, [r3, #12]
    c31c:	429e      	cmp	r6, r3
    c31e:	d015      	beq.n	c34c <_malloc_r+0xd0>
    c320:	6871      	ldr	r1, [r6, #4]
    c322:	f021 0103 	bic.w	r1, r1, #3
    c326:	1b08      	subs	r0, r1, r4
    c328:	280f      	cmp	r0, #15
    c32a:	dd01      	ble.n	c330 <_malloc_r+0xb4>
    c32c:	3a01      	subs	r2, #1
    c32e:	e00d      	b.n	c34c <_malloc_r+0xd0>
    c330:	2800      	cmp	r0, #0
    c332:	db09      	blt.n	c348 <_malloc_r+0xcc>
    c334:	68f3      	ldr	r3, [r6, #12]
    c336:	68b2      	ldr	r2, [r6, #8]
    c338:	60d3      	str	r3, [r2, #12]
    c33a:	609a      	str	r2, [r3, #8]
    c33c:	1873      	adds	r3, r6, r1
    c33e:	685a      	ldr	r2, [r3, #4]
    c340:	f042 0201 	orr.w	r2, r2, #1
    c344:	605a      	str	r2, [r3, #4]
    c346:	e196      	b.n	c676 <_malloc_r+0x3fa>
    c348:	68f6      	ldr	r6, [r6, #12]
    c34a:	e7e7      	b.n	c31c <_malloc_r+0xa0>
    c34c:	3201      	adds	r2, #1
    c34e:	497b      	ldr	r1, [pc, #492]	; (c53c <_malloc_r+0x2c0>)
    c350:	692e      	ldr	r6, [r5, #16]
    c352:	f101 0008 	add.w	r0, r1, #8
    c356:	4286      	cmp	r6, r0
    c358:	4686      	mov	lr, r0
    c35a:	d06d      	beq.n	c438 <_malloc_r+0x1bc>
    c35c:	6873      	ldr	r3, [r6, #4]
    c35e:	f023 0303 	bic.w	r3, r3, #3
    c362:	ebc4 0c03 	rsb	ip, r4, r3
    c366:	f1bc 0f0f 	cmp.w	ip, #15
    c36a:	dd0d      	ble.n	c388 <_malloc_r+0x10c>
    c36c:	1933      	adds	r3, r6, r4
    c36e:	f04c 0201 	orr.w	r2, ip, #1
    c372:	f044 0401 	orr.w	r4, r4, #1
    c376:	6074      	str	r4, [r6, #4]
    c378:	614b      	str	r3, [r1, #20]
    c37a:	610b      	str	r3, [r1, #16]
    c37c:	60d8      	str	r0, [r3, #12]
    c37e:	6098      	str	r0, [r3, #8]
    c380:	605a      	str	r2, [r3, #4]
    c382:	f843 c00c 	str.w	ip, [r3, ip]
    c386:	e176      	b.n	c676 <_malloc_r+0x3fa>
    c388:	f1bc 0f00 	cmp.w	ip, #0
    c38c:	6148      	str	r0, [r1, #20]
    c38e:	6108      	str	r0, [r1, #16]
    c390:	db01      	blt.n	c396 <_malloc_r+0x11a>
    c392:	4433      	add	r3, r6
    c394:	e7d3      	b.n	c33e <_malloc_r+0xc2>
    c396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c39a:	d211      	bcs.n	c3c0 <_malloc_r+0x144>
    c39c:	08db      	lsrs	r3, r3, #3
    c39e:	1098      	asrs	r0, r3, #2
    c3a0:	f04f 0c01 	mov.w	ip, #1
    c3a4:	fa0c fc00 	lsl.w	ip, ip, r0
    c3a8:	6848      	ldr	r0, [r1, #4]
    c3aa:	ea4c 0000 	orr.w	r0, ip, r0
    c3ae:	6048      	str	r0, [r1, #4]
    c3b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    c3b4:	688b      	ldr	r3, [r1, #8]
    c3b6:	60b3      	str	r3, [r6, #8]
    c3b8:	60f1      	str	r1, [r6, #12]
    c3ba:	608e      	str	r6, [r1, #8]
    c3bc:	60de      	str	r6, [r3, #12]
    c3be:	e03b      	b.n	c438 <_malloc_r+0x1bc>
    c3c0:	0a58      	lsrs	r0, r3, #9
    c3c2:	2804      	cmp	r0, #4
    c3c4:	d802      	bhi.n	c3cc <_malloc_r+0x150>
    c3c6:	0998      	lsrs	r0, r3, #6
    c3c8:	3038      	adds	r0, #56	; 0x38
    c3ca:	e015      	b.n	c3f8 <_malloc_r+0x17c>
    c3cc:	2814      	cmp	r0, #20
    c3ce:	d801      	bhi.n	c3d4 <_malloc_r+0x158>
    c3d0:	305b      	adds	r0, #91	; 0x5b
    c3d2:	e011      	b.n	c3f8 <_malloc_r+0x17c>
    c3d4:	2854      	cmp	r0, #84	; 0x54
    c3d6:	d802      	bhi.n	c3de <_malloc_r+0x162>
    c3d8:	0b18      	lsrs	r0, r3, #12
    c3da:	306e      	adds	r0, #110	; 0x6e
    c3dc:	e00c      	b.n	c3f8 <_malloc_r+0x17c>
    c3de:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    c3e2:	d802      	bhi.n	c3ea <_malloc_r+0x16e>
    c3e4:	0bd8      	lsrs	r0, r3, #15
    c3e6:	3077      	adds	r0, #119	; 0x77
    c3e8:	e006      	b.n	c3f8 <_malloc_r+0x17c>
    c3ea:	f240 5154 	movw	r1, #1364	; 0x554
    c3ee:	4288      	cmp	r0, r1
    c3f0:	bf9a      	itte	ls
    c3f2:	0c98      	lsrls	r0, r3, #18
    c3f4:	307c      	addls	r0, #124	; 0x7c
    c3f6:	207e      	movhi	r0, #126	; 0x7e
    c3f8:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
    c3fc:	f8df 813c 	ldr.w	r8, [pc, #316]	; c53c <_malloc_r+0x2c0>
    c400:	f8dc 1008 	ldr.w	r1, [ip, #8]
    c404:	4561      	cmp	r1, ip
    c406:	d10d      	bne.n	c424 <_malloc_r+0x1a8>
    c408:	2301      	movs	r3, #1
    c40a:	1080      	asrs	r0, r0, #2
    c40c:	fa03 f000 	lsl.w	r0, r3, r0
    c410:	f8d8 3004 	ldr.w	r3, [r8, #4]
    c414:	4303      	orrs	r3, r0
    c416:	f8c8 3004 	str.w	r3, [r8, #4]
    c41a:	460b      	mov	r3, r1
    c41c:	e008      	b.n	c430 <_malloc_r+0x1b4>
    c41e:	6889      	ldr	r1, [r1, #8]
    c420:	4561      	cmp	r1, ip
    c422:	d004      	beq.n	c42e <_malloc_r+0x1b2>
    c424:	6848      	ldr	r0, [r1, #4]
    c426:	f020 0003 	bic.w	r0, r0, #3
    c42a:	4283      	cmp	r3, r0
    c42c:	d3f7      	bcc.n	c41e <_malloc_r+0x1a2>
    c42e:	68cb      	ldr	r3, [r1, #12]
    c430:	60f3      	str	r3, [r6, #12]
    c432:	60b1      	str	r1, [r6, #8]
    c434:	609e      	str	r6, [r3, #8]
    c436:	60ce      	str	r6, [r1, #12]
    c438:	2101      	movs	r1, #1
    c43a:	1093      	asrs	r3, r2, #2
    c43c:	fa01 f303 	lsl.w	r3, r1, r3
    c440:	6869      	ldr	r1, [r5, #4]
    c442:	428b      	cmp	r3, r1
    c444:	d85e      	bhi.n	c504 <_malloc_r+0x288>
    c446:	420b      	tst	r3, r1
    c448:	d106      	bne.n	c458 <_malloc_r+0x1dc>
    c44a:	f022 0203 	bic.w	r2, r2, #3
    c44e:	005b      	lsls	r3, r3, #1
    c450:	420b      	tst	r3, r1
    c452:	f102 0204 	add.w	r2, r2, #4
    c456:	d0fa      	beq.n	c44e <_malloc_r+0x1d2>
    c458:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
    c45c:	4680      	mov	r8, r0
    c45e:	4694      	mov	ip, r2
    c460:	f8d8 600c 	ldr.w	r6, [r8, #12]
    c464:	4546      	cmp	r6, r8
    c466:	d02d      	beq.n	c4c4 <_malloc_r+0x248>
    c468:	6871      	ldr	r1, [r6, #4]
    c46a:	f021 0903 	bic.w	r9, r1, #3
    c46e:	ebc4 0109 	rsb	r1, r4, r9
    c472:	290f      	cmp	r1, #15
    c474:	dd13      	ble.n	c49e <_malloc_r+0x222>
    c476:	1933      	adds	r3, r6, r4
    c478:	f044 0401 	orr.w	r4, r4, #1
    c47c:	68f2      	ldr	r2, [r6, #12]
    c47e:	6074      	str	r4, [r6, #4]
    c480:	f856 0f08 	ldr.w	r0, [r6, #8]!
    c484:	60c2      	str	r2, [r0, #12]
    c486:	6090      	str	r0, [r2, #8]
    c488:	f041 0201 	orr.w	r2, r1, #1
    c48c:	616b      	str	r3, [r5, #20]
    c48e:	612b      	str	r3, [r5, #16]
    c490:	f8c3 e00c 	str.w	lr, [r3, #12]
    c494:	f8c3 e008 	str.w	lr, [r3, #8]
    c498:	605a      	str	r2, [r3, #4]
    c49a:	5059      	str	r1, [r3, r1]
    c49c:	e00c      	b.n	c4b8 <_malloc_r+0x23c>
    c49e:	2900      	cmp	r1, #0
    c4a0:	db0e      	blt.n	c4c0 <_malloc_r+0x244>
    c4a2:	eb06 0109 	add.w	r1, r6, r9
    c4a6:	684b      	ldr	r3, [r1, #4]
    c4a8:	f043 0301 	orr.w	r3, r3, #1
    c4ac:	604b      	str	r3, [r1, #4]
    c4ae:	68f3      	ldr	r3, [r6, #12]
    c4b0:	f856 2f08 	ldr.w	r2, [r6, #8]!
    c4b4:	60d3      	str	r3, [r2, #12]
    c4b6:	609a      	str	r2, [r3, #8]
    c4b8:	4638      	mov	r0, r7
    c4ba:	f000 f981 	bl	c7c0 <__malloc_unlock>
    c4be:	e0de      	b.n	c67e <_malloc_r+0x402>
    c4c0:	68f6      	ldr	r6, [r6, #12]
    c4c2:	e7cf      	b.n	c464 <_malloc_r+0x1e8>
    c4c4:	f10c 0c01 	add.w	ip, ip, #1
    c4c8:	f01c 0f03 	tst.w	ip, #3
    c4cc:	f108 0808 	add.w	r8, r8, #8
    c4d0:	d1c6      	bne.n	c460 <_malloc_r+0x1e4>
    c4d2:	0791      	lsls	r1, r2, #30
    c4d4:	d104      	bne.n	c4e0 <_malloc_r+0x264>
    c4d6:	686a      	ldr	r2, [r5, #4]
    c4d8:	ea22 0203 	bic.w	r2, r2, r3
    c4dc:	606a      	str	r2, [r5, #4]
    c4de:	e006      	b.n	c4ee <_malloc_r+0x272>
    c4e0:	f1a0 0108 	sub.w	r1, r0, #8
    c4e4:	6800      	ldr	r0, [r0, #0]
    c4e6:	4288      	cmp	r0, r1
    c4e8:	f102 32ff 	add.w	r2, r2, #4294967295
    c4ec:	d0f1      	beq.n	c4d2 <_malloc_r+0x256>
    c4ee:	6869      	ldr	r1, [r5, #4]
    c4f0:	005b      	lsls	r3, r3, #1
    c4f2:	428b      	cmp	r3, r1
    c4f4:	d806      	bhi.n	c504 <_malloc_r+0x288>
    c4f6:	b12b      	cbz	r3, c504 <_malloc_r+0x288>
    c4f8:	4662      	mov	r2, ip
    c4fa:	420b      	tst	r3, r1
    c4fc:	d1ac      	bne.n	c458 <_malloc_r+0x1dc>
    c4fe:	3204      	adds	r2, #4
    c500:	005b      	lsls	r3, r3, #1
    c502:	e7fa      	b.n	c4fa <_malloc_r+0x27e>
    c504:	f8d5 9008 	ldr.w	r9, [r5, #8]
    c508:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c50c:	f023 0b03 	bic.w	fp, r3, #3
    c510:	45a3      	cmp	fp, r4
    c512:	d304      	bcc.n	c51e <_malloc_r+0x2a2>
    c514:	ebc4 030b 	rsb	r3, r4, fp
    c518:	2b0f      	cmp	r3, #15
    c51a:	f300 80a3 	bgt.w	c664 <_malloc_r+0x3e8>
    c51e:	4908      	ldr	r1, [pc, #32]	; (c540 <_malloc_r+0x2c4>)
    c520:	680a      	ldr	r2, [r1, #0]
    c522:	eb04 0a02 	add.w	sl, r4, r2
    c526:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
    c52a:	3201      	adds	r2, #1
    c52c:	eb09 030b 	add.w	r3, r9, fp
    c530:	4688      	mov	r8, r1
    c532:	d107      	bne.n	c544 <_malloc_r+0x2c8>
    c534:	f10a 0a10 	add.w	sl, sl, #16
    c538:	e00c      	b.n	c554 <_malloc_r+0x2d8>
    c53a:	bf00      	nop
    c53c:	2000094c 	.word	0x2000094c
    c540:	20000dd0 	.word	0x20000dd0
    c544:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    c548:	f10a 0a0f 	add.w	sl, sl, #15
    c54c:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    c550:	f02a 0a0f 	bic.w	sl, sl, #15
    c554:	4638      	mov	r0, r7
    c556:	4651      	mov	r1, sl
    c558:	9301      	str	r3, [sp, #4]
    c55a:	f000 fef9 	bl	d350 <_sbrk_r>
    c55e:	1c42      	adds	r2, r0, #1
    c560:	4606      	mov	r6, r0
    c562:	9b01      	ldr	r3, [sp, #4]
    c564:	d06f      	beq.n	c646 <_malloc_r+0x3ca>
    c566:	4298      	cmp	r0, r3
    c568:	d201      	bcs.n	c56e <_malloc_r+0x2f2>
    c56a:	45a9      	cmp	r9, r5
    c56c:	d16b      	bne.n	c646 <_malloc_r+0x3ca>
    c56e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c572:	429e      	cmp	r6, r3
    c574:	4452      	add	r2, sl
    c576:	f8c8 2004 	str.w	r2, [r8, #4]
    c57a:	d108      	bne.n	c58e <_malloc_r+0x312>
    c57c:	f3c6 010b 	ubfx	r1, r6, #0, #12
    c580:	b929      	cbnz	r1, c58e <_malloc_r+0x312>
    c582:	68ab      	ldr	r3, [r5, #8]
    c584:	44da      	add	sl, fp
    c586:	f04a 0201 	orr.w	r2, sl, #1
    c58a:	605a      	str	r2, [r3, #4]
    c58c:	e04d      	b.n	c62a <_malloc_r+0x3ae>
    c58e:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
    c592:	3101      	adds	r1, #1
    c594:	d103      	bne.n	c59e <_malloc_r+0x322>
    c596:	4b3c      	ldr	r3, [pc, #240]	; (c688 <_malloc_r+0x40c>)
    c598:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
    c59c:	e003      	b.n	c5a6 <_malloc_r+0x32a>
    c59e:	1af3      	subs	r3, r6, r3
    c5a0:	441a      	add	r2, r3
    c5a2:	f8c8 2004 	str.w	r2, [r8, #4]
    c5a6:	f016 0307 	ands.w	r3, r6, #7
    c5aa:	bf1c      	itt	ne
    c5ac:	f1c3 0308 	rsbne	r3, r3, #8
    c5b0:	18f6      	addne	r6, r6, r3
    c5b2:	44b2      	add	sl, r6
    c5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c5b8:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    c5bc:	ebca 0a03 	rsb	sl, sl, r3
    c5c0:	4651      	mov	r1, sl
    c5c2:	4638      	mov	r0, r7
    c5c4:	f000 fec4 	bl	d350 <_sbrk_r>
    c5c8:	1c43      	adds	r3, r0, #1
    c5ca:	bf04      	itt	eq
    c5cc:	4630      	moveq	r0, r6
    c5ce:	f04f 0a00 	moveq.w	sl, #0
    c5d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    c5d6:	60ae      	str	r6, [r5, #8]
    c5d8:	1b80      	subs	r0, r0, r6
    c5da:	4450      	add	r0, sl
    c5dc:	4453      	add	r3, sl
    c5de:	f040 0001 	orr.w	r0, r0, #1
    c5e2:	45a9      	cmp	r9, r5
    c5e4:	f8c8 3004 	str.w	r3, [r8, #4]
    c5e8:	6070      	str	r0, [r6, #4]
    c5ea:	d01e      	beq.n	c62a <_malloc_r+0x3ae>
    c5ec:	f1bb 0f0f 	cmp.w	fp, #15
    c5f0:	d802      	bhi.n	c5f8 <_malloc_r+0x37c>
    c5f2:	2301      	movs	r3, #1
    c5f4:	6073      	str	r3, [r6, #4]
    c5f6:	e026      	b.n	c646 <_malloc_r+0x3ca>
    c5f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c5fc:	f1ab 0b0c 	sub.w	fp, fp, #12
    c600:	f02b 0b07 	bic.w	fp, fp, #7
    c604:	f003 0301 	and.w	r3, r3, #1
    c608:	ea4b 0303 	orr.w	r3, fp, r3
    c60c:	f8c9 3004 	str.w	r3, [r9, #4]
    c610:	eb09 030b 	add.w	r3, r9, fp
    c614:	2205      	movs	r2, #5
    c616:	f1bb 0f0f 	cmp.w	fp, #15
    c61a:	605a      	str	r2, [r3, #4]
    c61c:	609a      	str	r2, [r3, #8]
    c61e:	d904      	bls.n	c62a <_malloc_r+0x3ae>
    c620:	4638      	mov	r0, r7
    c622:	f109 0108 	add.w	r1, r9, #8
    c626:	f7ff fb15 	bl	bc54 <_free_r>
    c62a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    c62e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    c632:	4293      	cmp	r3, r2
    c634:	bf84      	itt	hi
    c636:	4a15      	ldrhi	r2, [pc, #84]	; (c68c <_malloc_r+0x410>)
    c638:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    c63a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    c63e:	4293      	cmp	r3, r2
    c640:	bf84      	itt	hi
    c642:	4a12      	ldrhi	r2, [pc, #72]	; (c68c <_malloc_r+0x410>)
    c644:	6313      	strhi	r3, [r2, #48]	; 0x30
    c646:	68ab      	ldr	r3, [r5, #8]
    c648:	685a      	ldr	r2, [r3, #4]
    c64a:	f022 0203 	bic.w	r2, r2, #3
    c64e:	42a2      	cmp	r2, r4
    c650:	ebc4 0302 	rsb	r3, r4, r2
    c654:	d301      	bcc.n	c65a <_malloc_r+0x3de>
    c656:	2b0f      	cmp	r3, #15
    c658:	dc04      	bgt.n	c664 <_malloc_r+0x3e8>
    c65a:	4638      	mov	r0, r7
    c65c:	f000 f8b0 	bl	c7c0 <__malloc_unlock>
    c660:	2600      	movs	r6, #0
    c662:	e00c      	b.n	c67e <_malloc_r+0x402>
    c664:	68ae      	ldr	r6, [r5, #8]
    c666:	f044 0201 	orr.w	r2, r4, #1
    c66a:	4434      	add	r4, r6
    c66c:	f043 0301 	orr.w	r3, r3, #1
    c670:	6072      	str	r2, [r6, #4]
    c672:	60ac      	str	r4, [r5, #8]
    c674:	6063      	str	r3, [r4, #4]
    c676:	4638      	mov	r0, r7
    c678:	f000 f8a2 	bl	c7c0 <__malloc_unlock>
    c67c:	3608      	adds	r6, #8
    c67e:	4630      	mov	r0, r6
    c680:	b003      	add	sp, #12
    c682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c686:	bf00      	nop
    c688:	2000094c 	.word	0x2000094c
    c68c:	20000dd0 	.word	0x20000dd0

0000c690 <_mbrtowc_r>:
    c690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c694:	4616      	mov	r6, r2
    c696:	4a11      	ldr	r2, [pc, #68]	; (c6dc <_mbrtowc_r+0x4c>)
    c698:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c69a:	6817      	ldr	r7, [r2, #0]
    c69c:	4604      	mov	r4, r0
    c69e:	4689      	mov	r9, r1
    c6a0:	4698      	mov	r8, r3
    c6a2:	b946      	cbnz	r6, c6b6 <_mbrtowc_r+0x26>
    c6a4:	f7ff fd42 	bl	c12c <__locale_charset>
    c6a8:	4631      	mov	r1, r6
    c6aa:	e88d 0021 	stmia.w	sp, {r0, r5}
    c6ae:	4a0c      	ldr	r2, [pc, #48]	; (c6e0 <_mbrtowc_r+0x50>)
    c6b0:	4620      	mov	r0, r4
    c6b2:	2301      	movs	r3, #1
    c6b4:	e007      	b.n	c6c6 <_mbrtowc_r+0x36>
    c6b6:	f7ff fd39 	bl	c12c <__locale_charset>
    c6ba:	4649      	mov	r1, r9
    c6bc:	e88d 0021 	stmia.w	sp, {r0, r5}
    c6c0:	4632      	mov	r2, r6
    c6c2:	4620      	mov	r0, r4
    c6c4:	4643      	mov	r3, r8
    c6c6:	47b8      	blx	r7
    c6c8:	1c43      	adds	r3, r0, #1
    c6ca:	d103      	bne.n	c6d4 <_mbrtowc_r+0x44>
    c6cc:	2300      	movs	r3, #0
    c6ce:	602b      	str	r3, [r5, #0]
    c6d0:	238a      	movs	r3, #138	; 0x8a
    c6d2:	6023      	str	r3, [r4, #0]
    c6d4:	b003      	add	sp, #12
    c6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c6da:	bf00      	nop
    c6dc:	20000d5c 	.word	0x20000d5c
    c6e0:	00010b4d 	.word	0x00010b4d

0000c6e4 <mbrtowc>:
    c6e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c6e6:	9300      	str	r3, [sp, #0]
    c6e8:	4b05      	ldr	r3, [pc, #20]	; (c700 <mbrtowc+0x1c>)
    c6ea:	4606      	mov	r6, r0
    c6ec:	460d      	mov	r5, r1
    c6ee:	4614      	mov	r4, r2
    c6f0:	6818      	ldr	r0, [r3, #0]
    c6f2:	4631      	mov	r1, r6
    c6f4:	462a      	mov	r2, r5
    c6f6:	4623      	mov	r3, r4
    c6f8:	f7ff ffca 	bl	c690 <_mbrtowc_r>
    c6fc:	b002      	add	sp, #8
    c6fe:	bd70      	pop	{r4, r5, r6, pc}
    c700:	200004a0 	.word	0x200004a0

0000c704 <__ascii_mbtowc>:
    c704:	b082      	sub	sp, #8
    c706:	b901      	cbnz	r1, c70a <__ascii_mbtowc+0x6>
    c708:	a901      	add	r1, sp, #4
    c70a:	b13a      	cbz	r2, c71c <__ascii_mbtowc+0x18>
    c70c:	b143      	cbz	r3, c720 <__ascii_mbtowc+0x1c>
    c70e:	7813      	ldrb	r3, [r2, #0]
    c710:	600b      	str	r3, [r1, #0]
    c712:	7810      	ldrb	r0, [r2, #0]
    c714:	3000      	adds	r0, #0
    c716:	bf18      	it	ne
    c718:	2001      	movne	r0, #1
    c71a:	e003      	b.n	c724 <__ascii_mbtowc+0x20>
    c71c:	4610      	mov	r0, r2
    c71e:	e001      	b.n	c724 <__ascii_mbtowc+0x20>
    c720:	f06f 0001 	mvn.w	r0, #1
    c724:	b002      	add	sp, #8
    c726:	4770      	bx	lr

0000c728 <_mbtowc_r>:
    c728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c72c:	461f      	mov	r7, r3
    c72e:	4b09      	ldr	r3, [pc, #36]	; (c754 <_mbtowc_r+0x2c>)
    c730:	4606      	mov	r6, r0
    c732:	681c      	ldr	r4, [r3, #0]
    c734:	4689      	mov	r9, r1
    c736:	4690      	mov	r8, r2
    c738:	f7ff fcf8 	bl	c12c <__locale_charset>
    c73c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c73e:	9000      	str	r0, [sp, #0]
    c740:	9501      	str	r5, [sp, #4]
    c742:	4630      	mov	r0, r6
    c744:	4649      	mov	r1, r9
    c746:	4642      	mov	r2, r8
    c748:	463b      	mov	r3, r7
    c74a:	47a0      	blx	r4
    c74c:	b003      	add	sp, #12
    c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c752:	bf00      	nop
    c754:	20000d5c 	.word	0x20000d5c

0000c758 <memchr>:
    c758:	b510      	push	{r4, lr}
    c75a:	b2c9      	uxtb	r1, r1
    c75c:	4402      	add	r2, r0
    c75e:	4290      	cmp	r0, r2
    c760:	4603      	mov	r3, r0
    c762:	d006      	beq.n	c772 <memchr+0x1a>
    c764:	781c      	ldrb	r4, [r3, #0]
    c766:	428c      	cmp	r4, r1
    c768:	f100 0001 	add.w	r0, r0, #1
    c76c:	d1f7      	bne.n	c75e <memchr+0x6>
    c76e:	4618      	mov	r0, r3
    c770:	bd10      	pop	{r4, pc}
    c772:	2000      	movs	r0, #0
    c774:	bd10      	pop	{r4, pc}

0000c776 <memcpy>:
    c776:	b510      	push	{r4, lr}
    c778:	2300      	movs	r3, #0
    c77a:	4293      	cmp	r3, r2
    c77c:	d003      	beq.n	c786 <memcpy+0x10>
    c77e:	5ccc      	ldrb	r4, [r1, r3]
    c780:	54c4      	strb	r4, [r0, r3]
    c782:	3301      	adds	r3, #1
    c784:	e7f9      	b.n	c77a <memcpy+0x4>
    c786:	bd10      	pop	{r4, pc}

0000c788 <memmove>:
    c788:	4281      	cmp	r1, r0
    c78a:	b570      	push	{r4, r5, r6, lr}
    c78c:	d301      	bcc.n	c792 <memmove+0xa>
    c78e:	2300      	movs	r3, #0
    c790:	e00e      	b.n	c7b0 <memmove+0x28>
    c792:	188c      	adds	r4, r1, r2
    c794:	42a0      	cmp	r0, r4
    c796:	d2fa      	bcs.n	c78e <memmove+0x6>
    c798:	1885      	adds	r5, r0, r2
    c79a:	4613      	mov	r3, r2
    c79c:	f113 33ff 	adds.w	r3, r3, #4294967295
    c7a0:	d305      	bcc.n	c7ae <memmove+0x26>
    c7a2:	4251      	negs	r1, r2
    c7a4:	1866      	adds	r6, r4, r1
    c7a6:	4429      	add	r1, r5
    c7a8:	5cf6      	ldrb	r6, [r6, r3]
    c7aa:	54ce      	strb	r6, [r1, r3]
    c7ac:	e7f6      	b.n	c79c <memmove+0x14>
    c7ae:	bd70      	pop	{r4, r5, r6, pc}
    c7b0:	4293      	cmp	r3, r2
    c7b2:	d003      	beq.n	c7bc <memmove+0x34>
    c7b4:	5ccc      	ldrb	r4, [r1, r3]
    c7b6:	54c4      	strb	r4, [r0, r3]
    c7b8:	3301      	adds	r3, #1
    c7ba:	e7f9      	b.n	c7b0 <memmove+0x28>
    c7bc:	bd70      	pop	{r4, r5, r6, pc}

0000c7be <__malloc_lock>:
    c7be:	4770      	bx	lr

0000c7c0 <__malloc_unlock>:
    c7c0:	4770      	bx	lr
	...

0000c7c4 <_Balloc>:
    c7c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c7c6:	b570      	push	{r4, r5, r6, lr}
    c7c8:	4605      	mov	r5, r0
    c7ca:	460c      	mov	r4, r1
    c7cc:	b13b      	cbz	r3, c7de <_Balloc+0x1a>
    c7ce:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    c7d0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    c7d4:	b160      	cbz	r0, c7f0 <_Balloc+0x2c>
    c7d6:	6801      	ldr	r1, [r0, #0]
    c7d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    c7dc:	e014      	b.n	c808 <_Balloc+0x44>
    c7de:	2104      	movs	r1, #4
    c7e0:	2221      	movs	r2, #33	; 0x21
    c7e2:	f003 f909 	bl	f9f8 <_calloc_r>
    c7e6:	64e8      	str	r0, [r5, #76]	; 0x4c
    c7e8:	2800      	cmp	r0, #0
    c7ea:	d1f0      	bne.n	c7ce <_Balloc+0xa>
    c7ec:	2000      	movs	r0, #0
    c7ee:	bd70      	pop	{r4, r5, r6, pc}
    c7f0:	2101      	movs	r1, #1
    c7f2:	fa01 f604 	lsl.w	r6, r1, r4
    c7f6:	1d72      	adds	r2, r6, #5
    c7f8:	4628      	mov	r0, r5
    c7fa:	0092      	lsls	r2, r2, #2
    c7fc:	f003 f8fc 	bl	f9f8 <_calloc_r>
    c800:	2800      	cmp	r0, #0
    c802:	d0f3      	beq.n	c7ec <_Balloc+0x28>
    c804:	6044      	str	r4, [r0, #4]
    c806:	6086      	str	r6, [r0, #8]
    c808:	2200      	movs	r2, #0
    c80a:	6102      	str	r2, [r0, #16]
    c80c:	60c2      	str	r2, [r0, #12]
    c80e:	bd70      	pop	{r4, r5, r6, pc}

0000c810 <_Bfree>:
    c810:	b131      	cbz	r1, c820 <_Bfree+0x10>
    c812:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c814:	684a      	ldr	r2, [r1, #4]
    c816:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c81a:	6008      	str	r0, [r1, #0]
    c81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c820:	4770      	bx	lr

0000c822 <__multadd>:
    c822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c826:	460c      	mov	r4, r1
    c828:	461e      	mov	r6, r3
    c82a:	690d      	ldr	r5, [r1, #16]
    c82c:	4607      	mov	r7, r0
    c82e:	3114      	adds	r1, #20
    c830:	2300      	movs	r3, #0
    c832:	6808      	ldr	r0, [r1, #0]
    c834:	fa1f fc80 	uxth.w	ip, r0
    c838:	0c00      	lsrs	r0, r0, #16
    c83a:	fb02 6c0c 	mla	ip, r2, ip, r6
    c83e:	4350      	muls	r0, r2
    c840:	eb00 401c 	add.w	r0, r0, ip, lsr #16
    c844:	3301      	adds	r3, #1
    c846:	fa1f fc8c 	uxth.w	ip, ip
    c84a:	0c06      	lsrs	r6, r0, #16
    c84c:	42ab      	cmp	r3, r5
    c84e:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
    c852:	f841 0b04 	str.w	r0, [r1], #4
    c856:	dbec      	blt.n	c832 <__multadd+0x10>
    c858:	b1d6      	cbz	r6, c890 <__multadd+0x6e>
    c85a:	68a3      	ldr	r3, [r4, #8]
    c85c:	429d      	cmp	r5, r3
    c85e:	db12      	blt.n	c886 <__multadd+0x64>
    c860:	6861      	ldr	r1, [r4, #4]
    c862:	4638      	mov	r0, r7
    c864:	3101      	adds	r1, #1
    c866:	f7ff ffad 	bl	c7c4 <_Balloc>
    c86a:	6922      	ldr	r2, [r4, #16]
    c86c:	3202      	adds	r2, #2
    c86e:	f104 010c 	add.w	r1, r4, #12
    c872:	4680      	mov	r8, r0
    c874:	0092      	lsls	r2, r2, #2
    c876:	300c      	adds	r0, #12
    c878:	f7ff ff7d 	bl	c776 <memcpy>
    c87c:	4621      	mov	r1, r4
    c87e:	4638      	mov	r0, r7
    c880:	f7ff ffc6 	bl	c810 <_Bfree>
    c884:	4644      	mov	r4, r8
    c886:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    c88a:	3501      	adds	r5, #1
    c88c:	615e      	str	r6, [r3, #20]
    c88e:	6125      	str	r5, [r4, #16]
    c890:	4620      	mov	r0, r4
    c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c896 <__s2b>:
    c896:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c89a:	4614      	mov	r4, r2
    c89c:	4698      	mov	r8, r3
    c89e:	f103 0208 	add.w	r2, r3, #8
    c8a2:	2309      	movs	r3, #9
    c8a4:	460d      	mov	r5, r1
    c8a6:	fb92 f2f3 	sdiv	r2, r2, r3
    c8aa:	4606      	mov	r6, r0
    c8ac:	2301      	movs	r3, #1
    c8ae:	2100      	movs	r1, #0
    c8b0:	429a      	cmp	r2, r3
    c8b2:	dd02      	ble.n	c8ba <__s2b+0x24>
    c8b4:	005b      	lsls	r3, r3, #1
    c8b6:	3101      	adds	r1, #1
    c8b8:	e7fa      	b.n	c8b0 <__s2b+0x1a>
    c8ba:	4630      	mov	r0, r6
    c8bc:	f7ff ff82 	bl	c7c4 <_Balloc>
    c8c0:	9b08      	ldr	r3, [sp, #32]
    c8c2:	6143      	str	r3, [r0, #20]
    c8c4:	2c09      	cmp	r4, #9
    c8c6:	f04f 0301 	mov.w	r3, #1
    c8ca:	4601      	mov	r1, r0
    c8cc:	6103      	str	r3, [r0, #16]
    c8ce:	dd11      	ble.n	c8f4 <__s2b+0x5e>
    c8d0:	f105 0909 	add.w	r9, r5, #9
    c8d4:	464f      	mov	r7, r9
    c8d6:	4425      	add	r5, r4
    c8d8:	f817 3b01 	ldrb.w	r3, [r7], #1
    c8dc:	4630      	mov	r0, r6
    c8de:	220a      	movs	r2, #10
    c8e0:	3b30      	subs	r3, #48	; 0x30
    c8e2:	f7ff ff9e 	bl	c822 <__multadd>
    c8e6:	42af      	cmp	r7, r5
    c8e8:	4601      	mov	r1, r0
    c8ea:	d1f5      	bne.n	c8d8 <__s2b+0x42>
    c8ec:	eb09 0704 	add.w	r7, r9, r4
    c8f0:	3f08      	subs	r7, #8
    c8f2:	e002      	b.n	c8fa <__s2b+0x64>
    c8f4:	f105 070a 	add.w	r7, r5, #10
    c8f8:	2409      	movs	r4, #9
    c8fa:	4625      	mov	r5, r4
    c8fc:	4545      	cmp	r5, r8
    c8fe:	da09      	bge.n	c914 <__s2b+0x7e>
    c900:	1b3b      	subs	r3, r7, r4
    c902:	4630      	mov	r0, r6
    c904:	5d5b      	ldrb	r3, [r3, r5]
    c906:	220a      	movs	r2, #10
    c908:	3b30      	subs	r3, #48	; 0x30
    c90a:	f7ff ff8a 	bl	c822 <__multadd>
    c90e:	3501      	adds	r5, #1
    c910:	4601      	mov	r1, r0
    c912:	e7f3      	b.n	c8fc <__s2b+0x66>
    c914:	4608      	mov	r0, r1
    c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c91a <__hi0bits>:
    c91a:	0c03      	lsrs	r3, r0, #16
    c91c:	041b      	lsls	r3, r3, #16
    c91e:	b913      	cbnz	r3, c926 <__hi0bits+0xc>
    c920:	0400      	lsls	r0, r0, #16
    c922:	2310      	movs	r3, #16
    c924:	e000      	b.n	c928 <__hi0bits+0xe>
    c926:	2300      	movs	r3, #0
    c928:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c92c:	bf04      	itt	eq
    c92e:	0200      	lsleq	r0, r0, #8
    c930:	3308      	addeq	r3, #8
    c932:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c936:	bf04      	itt	eq
    c938:	0100      	lsleq	r0, r0, #4
    c93a:	3304      	addeq	r3, #4
    c93c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c940:	bf04      	itt	eq
    c942:	0080      	lsleq	r0, r0, #2
    c944:	3302      	addeq	r3, #2
    c946:	2800      	cmp	r0, #0
    c948:	db03      	blt.n	c952 <__hi0bits+0x38>
    c94a:	0042      	lsls	r2, r0, #1
    c94c:	d503      	bpl.n	c956 <__hi0bits+0x3c>
    c94e:	1c58      	adds	r0, r3, #1
    c950:	4770      	bx	lr
    c952:	4618      	mov	r0, r3
    c954:	4770      	bx	lr
    c956:	2020      	movs	r0, #32
    c958:	4770      	bx	lr

0000c95a <__lo0bits>:
    c95a:	6803      	ldr	r3, [r0, #0]
    c95c:	f013 0207 	ands.w	r2, r3, #7
    c960:	d00b      	beq.n	c97a <__lo0bits+0x20>
    c962:	07d9      	lsls	r1, r3, #31
    c964:	d422      	bmi.n	c9ac <__lo0bits+0x52>
    c966:	079a      	lsls	r2, r3, #30
    c968:	d503      	bpl.n	c972 <__lo0bits+0x18>
    c96a:	085b      	lsrs	r3, r3, #1
    c96c:	6003      	str	r3, [r0, #0]
    c96e:	2001      	movs	r0, #1
    c970:	4770      	bx	lr
    c972:	089b      	lsrs	r3, r3, #2
    c974:	6003      	str	r3, [r0, #0]
    c976:	2002      	movs	r0, #2
    c978:	4770      	bx	lr
    c97a:	b299      	uxth	r1, r3
    c97c:	b909      	cbnz	r1, c982 <__lo0bits+0x28>
    c97e:	0c1b      	lsrs	r3, r3, #16
    c980:	2210      	movs	r2, #16
    c982:	f013 0fff 	tst.w	r3, #255	; 0xff
    c986:	bf04      	itt	eq
    c988:	0a1b      	lsreq	r3, r3, #8
    c98a:	3208      	addeq	r2, #8
    c98c:	0719      	lsls	r1, r3, #28
    c98e:	bf04      	itt	eq
    c990:	091b      	lsreq	r3, r3, #4
    c992:	3204      	addeq	r2, #4
    c994:	0799      	lsls	r1, r3, #30
    c996:	bf04      	itt	eq
    c998:	089b      	lsreq	r3, r3, #2
    c99a:	3202      	addeq	r2, #2
    c99c:	07d9      	lsls	r1, r3, #31
    c99e:	d402      	bmi.n	c9a6 <__lo0bits+0x4c>
    c9a0:	085b      	lsrs	r3, r3, #1
    c9a2:	d005      	beq.n	c9b0 <__lo0bits+0x56>
    c9a4:	3201      	adds	r2, #1
    c9a6:	6003      	str	r3, [r0, #0]
    c9a8:	4610      	mov	r0, r2
    c9aa:	4770      	bx	lr
    c9ac:	2000      	movs	r0, #0
    c9ae:	4770      	bx	lr
    c9b0:	2020      	movs	r0, #32
    c9b2:	4770      	bx	lr

0000c9b4 <__i2b>:
    c9b4:	b510      	push	{r4, lr}
    c9b6:	460c      	mov	r4, r1
    c9b8:	2101      	movs	r1, #1
    c9ba:	f7ff ff03 	bl	c7c4 <_Balloc>
    c9be:	2201      	movs	r2, #1
    c9c0:	6144      	str	r4, [r0, #20]
    c9c2:	6102      	str	r2, [r0, #16]
    c9c4:	bd10      	pop	{r4, pc}

0000c9c6 <__multiply>:
    c9c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9ca:	4616      	mov	r6, r2
    c9cc:	690a      	ldr	r2, [r1, #16]
    c9ce:	6933      	ldr	r3, [r6, #16]
    c9d0:	429a      	cmp	r2, r3
    c9d2:	b085      	sub	sp, #20
    c9d4:	460d      	mov	r5, r1
    c9d6:	da01      	bge.n	c9dc <__multiply+0x16>
    c9d8:	4635      	mov	r5, r6
    c9da:	460e      	mov	r6, r1
    c9dc:	f8d5 8010 	ldr.w	r8, [r5, #16]
    c9e0:	6937      	ldr	r7, [r6, #16]
    c9e2:	68ab      	ldr	r3, [r5, #8]
    c9e4:	6869      	ldr	r1, [r5, #4]
    c9e6:	eb08 0407 	add.w	r4, r8, r7
    c9ea:	429c      	cmp	r4, r3
    c9ec:	bfc8      	it	gt
    c9ee:	3101      	addgt	r1, #1
    c9f0:	f7ff fee8 	bl	c7c4 <_Balloc>
    c9f4:	f100 0314 	add.w	r3, r0, #20
    c9f8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
    c9fc:	9101      	str	r1, [sp, #4]
    c9fe:	461a      	mov	r2, r3
    ca00:	f8dd a004 	ldr.w	sl, [sp, #4]
    ca04:	4552      	cmp	r2, sl
    ca06:	d203      	bcs.n	ca10 <__multiply+0x4a>
    ca08:	2100      	movs	r1, #0
    ca0a:	f842 1b04 	str.w	r1, [r2], #4
    ca0e:	e7f7      	b.n	ca00 <__multiply+0x3a>
    ca10:	f105 0114 	add.w	r1, r5, #20
    ca14:	f106 0214 	add.w	r2, r6, #20
    ca18:	eb01 0888 	add.w	r8, r1, r8, lsl #2
    ca1c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    ca20:	f8cd 8008 	str.w	r8, [sp, #8]
    ca24:	9703      	str	r7, [sp, #12]
    ca26:	9e03      	ldr	r6, [sp, #12]
    ca28:	42b2      	cmp	r2, r6
    ca2a:	4615      	mov	r5, r2
    ca2c:	d256      	bcs.n	cadc <__multiply+0x116>
    ca2e:	f8b5 c000 	ldrh.w	ip, [r5]
    ca32:	3204      	adds	r2, #4
    ca34:	f1bc 0f00 	cmp.w	ip, #0
    ca38:	d025      	beq.n	ca86 <__multiply+0xc0>
    ca3a:	460f      	mov	r7, r1
    ca3c:	461d      	mov	r5, r3
    ca3e:	2600      	movs	r6, #0
    ca40:	f857 9b04 	ldr.w	r9, [r7], #4
    ca44:	f8d5 8000 	ldr.w	r8, [r5]
    ca48:	fa1f fb89 	uxth.w	fp, r9
    ca4c:	fa1f fa88 	uxth.w	sl, r8
    ca50:	fb0c aa0b 	mla	sl, ip, fp, sl
    ca54:	ea4f 4919 	mov.w	r9, r9, lsr #16
    ca58:	ea4f 4818 	mov.w	r8, r8, lsr #16
    ca5c:	44b2      	add	sl, r6
    ca5e:	fb0c 8809 	mla	r8, ip, r9, r8
    ca62:	eb08 481a 	add.w	r8, r8, sl, lsr #16
    ca66:	fa1f fa8a 	uxth.w	sl, sl
    ca6a:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
    ca6e:	ea4f 4618 	mov.w	r6, r8, lsr #16
    ca72:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ca76:	46ab      	mov	fp, r5
    ca78:	45b8      	cmp	r8, r7
    ca7a:	f84b ab04 	str.w	sl, [fp], #4
    ca7e:	d901      	bls.n	ca84 <__multiply+0xbe>
    ca80:	465d      	mov	r5, fp
    ca82:	e7dd      	b.n	ca40 <__multiply+0x7a>
    ca84:	606e      	str	r6, [r5, #4]
    ca86:	f832 8c02 	ldrh.w	r8, [r2, #-2]
    ca8a:	f1b8 0f00 	cmp.w	r8, #0
    ca8e:	d023      	beq.n	cad8 <__multiply+0x112>
    ca90:	681e      	ldr	r6, [r3, #0]
    ca92:	460f      	mov	r7, r1
    ca94:	461d      	mov	r5, r3
    ca96:	f04f 0900 	mov.w	r9, #0
    ca9a:	f8b7 a000 	ldrh.w	sl, [r7]
    ca9e:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    caa2:	fb08 cc0a 	mla	ip, r8, sl, ip
    caa6:	44e1      	add	r9, ip
    caa8:	b2b6      	uxth	r6, r6
    caaa:	46ac      	mov	ip, r5
    caac:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    cab0:	f84c 6b04 	str.w	r6, [ip], #4
    cab4:	f857 6b04 	ldr.w	r6, [r7], #4
    cab8:	f8b5 a004 	ldrh.w	sl, [r5, #4]
    cabc:	0c36      	lsrs	r6, r6, #16
    cabe:	fb08 a606 	mla	r6, r8, r6, sl
    cac2:	f8dd a008 	ldr.w	sl, [sp, #8]
    cac6:	eb06 4619 	add.w	r6, r6, r9, lsr #16
    caca:	4557      	cmp	r7, sl
    cacc:	ea4f 4916 	mov.w	r9, r6, lsr #16
    cad0:	d201      	bcs.n	cad6 <__multiply+0x110>
    cad2:	4665      	mov	r5, ip
    cad4:	e7e1      	b.n	ca9a <__multiply+0xd4>
    cad6:	606e      	str	r6, [r5, #4]
    cad8:	3304      	adds	r3, #4
    cada:	e7a4      	b.n	ca26 <__multiply+0x60>
    cadc:	9b01      	ldr	r3, [sp, #4]
    cade:	2c00      	cmp	r4, #0
    cae0:	dc03      	bgt.n	caea <__multiply+0x124>
    cae2:	6104      	str	r4, [r0, #16]
    cae4:	b005      	add	sp, #20
    cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    caea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    caee:	2a00      	cmp	r2, #0
    caf0:	d1f7      	bne.n	cae2 <__multiply+0x11c>
    caf2:	3c01      	subs	r4, #1
    caf4:	e7f3      	b.n	cade <__multiply+0x118>

0000caf6 <__pow5mult>:
    caf6:	f012 0303 	ands.w	r3, r2, #3
    cafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cafe:	4605      	mov	r5, r0
    cb00:	460e      	mov	r6, r1
    cb02:	4617      	mov	r7, r2
    cb04:	d007      	beq.n	cb16 <__pow5mult+0x20>
    cb06:	3b01      	subs	r3, #1
    cb08:	4a19      	ldr	r2, [pc, #100]	; (cb70 <__pow5mult+0x7a>)
    cb0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    cb0e:	2300      	movs	r3, #0
    cb10:	f7ff fe87 	bl	c822 <__multadd>
    cb14:	4606      	mov	r6, r0
    cb16:	10bf      	asrs	r7, r7, #2
    cb18:	d027      	beq.n	cb6a <__pow5mult+0x74>
    cb1a:	6cac      	ldr	r4, [r5, #72]	; 0x48
    cb1c:	b974      	cbnz	r4, cb3c <__pow5mult+0x46>
    cb1e:	4628      	mov	r0, r5
    cb20:	f240 2171 	movw	r1, #625	; 0x271
    cb24:	f7ff ff46 	bl	c9b4 <__i2b>
    cb28:	2300      	movs	r3, #0
    cb2a:	64a8      	str	r0, [r5, #72]	; 0x48
    cb2c:	4604      	mov	r4, r0
    cb2e:	6003      	str	r3, [r0, #0]
    cb30:	e004      	b.n	cb3c <__pow5mult+0x46>
    cb32:	107f      	asrs	r7, r7, #1
    cb34:	d019      	beq.n	cb6a <__pow5mult+0x74>
    cb36:	6820      	ldr	r0, [r4, #0]
    cb38:	b170      	cbz	r0, cb58 <__pow5mult+0x62>
    cb3a:	4604      	mov	r4, r0
    cb3c:	07fb      	lsls	r3, r7, #31
    cb3e:	d5f8      	bpl.n	cb32 <__pow5mult+0x3c>
    cb40:	4631      	mov	r1, r6
    cb42:	4622      	mov	r2, r4
    cb44:	4628      	mov	r0, r5
    cb46:	f7ff ff3e 	bl	c9c6 <__multiply>
    cb4a:	4631      	mov	r1, r6
    cb4c:	4680      	mov	r8, r0
    cb4e:	4628      	mov	r0, r5
    cb50:	f7ff fe5e 	bl	c810 <_Bfree>
    cb54:	4646      	mov	r6, r8
    cb56:	e7ec      	b.n	cb32 <__pow5mult+0x3c>
    cb58:	4628      	mov	r0, r5
    cb5a:	4621      	mov	r1, r4
    cb5c:	4622      	mov	r2, r4
    cb5e:	f7ff ff32 	bl	c9c6 <__multiply>
    cb62:	2300      	movs	r3, #0
    cb64:	6020      	str	r0, [r4, #0]
    cb66:	6003      	str	r3, [r0, #0]
    cb68:	e7e7      	b.n	cb3a <__pow5mult+0x44>
    cb6a:	4630      	mov	r0, r6
    cb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb70:	00010b50 	.word	0x00010b50

0000cb74 <__lshift>:
    cb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb78:	460c      	mov	r4, r1
    cb7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
    cb7e:	6923      	ldr	r3, [r4, #16]
    cb80:	6849      	ldr	r1, [r1, #4]
    cb82:	eb0a 0903 	add.w	r9, sl, r3
    cb86:	68a3      	ldr	r3, [r4, #8]
    cb88:	4680      	mov	r8, r0
    cb8a:	4615      	mov	r5, r2
    cb8c:	f109 0701 	add.w	r7, r9, #1
    cb90:	429f      	cmp	r7, r3
    cb92:	dd02      	ble.n	cb9a <__lshift+0x26>
    cb94:	3101      	adds	r1, #1
    cb96:	005b      	lsls	r3, r3, #1
    cb98:	e7fa      	b.n	cb90 <__lshift+0x1c>
    cb9a:	4640      	mov	r0, r8
    cb9c:	f7ff fe12 	bl	c7c4 <_Balloc>
    cba0:	2300      	movs	r3, #0
    cba2:	4606      	mov	r6, r0
    cba4:	f100 0214 	add.w	r2, r0, #20
    cba8:	4553      	cmp	r3, sl
    cbaa:	da04      	bge.n	cbb6 <__lshift+0x42>
    cbac:	2100      	movs	r1, #0
    cbae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    cbb2:	3301      	adds	r3, #1
    cbb4:	e7f8      	b.n	cba8 <__lshift+0x34>
    cbb6:	6920      	ldr	r0, [r4, #16]
    cbb8:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
    cbbc:	f104 0314 	add.w	r3, r4, #20
    cbc0:	f015 0c1f 	ands.w	ip, r5, #31
    cbc4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    cbc8:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
    cbcc:	d016      	beq.n	cbfc <__lshift+0x88>
    cbce:	f1cc 0a20 	rsb	sl, ip, #32
    cbd2:	2500      	movs	r5, #0
    cbd4:	6818      	ldr	r0, [r3, #0]
    cbd6:	460a      	mov	r2, r1
    cbd8:	fa00 f00c 	lsl.w	r0, r0, ip
    cbdc:	4305      	orrs	r5, r0
    cbde:	f842 5b04 	str.w	r5, [r2], #4
    cbe2:	f853 5b04 	ldr.w	r5, [r3], #4
    cbe6:	4573      	cmp	r3, lr
    cbe8:	fa25 f50a 	lsr.w	r5, r5, sl
    cbec:	d201      	bcs.n	cbf2 <__lshift+0x7e>
    cbee:	4611      	mov	r1, r2
    cbf0:	e7f0      	b.n	cbd4 <__lshift+0x60>
    cbf2:	604d      	str	r5, [r1, #4]
    cbf4:	b145      	cbz	r5, cc08 <__lshift+0x94>
    cbf6:	f109 0702 	add.w	r7, r9, #2
    cbfa:	e005      	b.n	cc08 <__lshift+0x94>
    cbfc:	f853 2b04 	ldr.w	r2, [r3], #4
    cc00:	f841 2b04 	str.w	r2, [r1], #4
    cc04:	4573      	cmp	r3, lr
    cc06:	d3f9      	bcc.n	cbfc <__lshift+0x88>
    cc08:	3f01      	subs	r7, #1
    cc0a:	4640      	mov	r0, r8
    cc0c:	6137      	str	r7, [r6, #16]
    cc0e:	4621      	mov	r1, r4
    cc10:	f7ff fdfe 	bl	c810 <_Bfree>
    cc14:	4630      	mov	r0, r6
    cc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cc1a <__mcmp>:
    cc1a:	6902      	ldr	r2, [r0, #16]
    cc1c:	690b      	ldr	r3, [r1, #16]
    cc1e:	1ad2      	subs	r2, r2, r3
    cc20:	b510      	push	{r4, lr}
    cc22:	d113      	bne.n	cc4c <__mcmp+0x32>
    cc24:	009c      	lsls	r4, r3, #2
    cc26:	3014      	adds	r0, #20
    cc28:	f101 0214 	add.w	r2, r1, #20
    cc2c:	1903      	adds	r3, r0, r4
    cc2e:	4422      	add	r2, r4
    cc30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    cc34:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    cc38:	428c      	cmp	r4, r1
    cc3a:	d003      	beq.n	cc44 <__mcmp+0x2a>
    cc3c:	d208      	bcs.n	cc50 <__mcmp+0x36>
    cc3e:	f04f 30ff 	mov.w	r0, #4294967295
    cc42:	bd10      	pop	{r4, pc}
    cc44:	4298      	cmp	r0, r3
    cc46:	d3f3      	bcc.n	cc30 <__mcmp+0x16>
    cc48:	2000      	movs	r0, #0
    cc4a:	bd10      	pop	{r4, pc}
    cc4c:	4610      	mov	r0, r2
    cc4e:	bd10      	pop	{r4, pc}
    cc50:	2001      	movs	r0, #1
    cc52:	bd10      	pop	{r4, pc}

0000cc54 <__mdiff>:
    cc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc58:	4606      	mov	r6, r0
    cc5a:	460c      	mov	r4, r1
    cc5c:	4608      	mov	r0, r1
    cc5e:	4611      	mov	r1, r2
    cc60:	4615      	mov	r5, r2
    cc62:	f7ff ffda 	bl	cc1a <__mcmp>
    cc66:	1e07      	subs	r7, r0, #0
    cc68:	d108      	bne.n	cc7c <__mdiff+0x28>
    cc6a:	4630      	mov	r0, r6
    cc6c:	4639      	mov	r1, r7
    cc6e:	f7ff fda9 	bl	c7c4 <_Balloc>
    cc72:	2301      	movs	r3, #1
    cc74:	6103      	str	r3, [r0, #16]
    cc76:	6147      	str	r7, [r0, #20]
    cc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc7c:	db01      	blt.n	cc82 <__mdiff+0x2e>
    cc7e:	2700      	movs	r7, #0
    cc80:	e003      	b.n	cc8a <__mdiff+0x36>
    cc82:	4623      	mov	r3, r4
    cc84:	2701      	movs	r7, #1
    cc86:	462c      	mov	r4, r5
    cc88:	461d      	mov	r5, r3
    cc8a:	6861      	ldr	r1, [r4, #4]
    cc8c:	4630      	mov	r0, r6
    cc8e:	f7ff fd99 	bl	c7c4 <_Balloc>
    cc92:	6922      	ldr	r2, [r4, #16]
    cc94:	692b      	ldr	r3, [r5, #16]
    cc96:	60c7      	str	r7, [r0, #12]
    cc98:	3414      	adds	r4, #20
    cc9a:	f105 0614 	add.w	r6, r5, #20
    cc9e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
    cca2:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
    cca6:	f100 0314 	add.w	r3, r0, #20
    ccaa:	2100      	movs	r1, #0
    ccac:	f854 7b04 	ldr.w	r7, [r4], #4
    ccb0:	f856 9b04 	ldr.w	r9, [r6], #4
    ccb4:	fa11 f187 	uxtah	r1, r1, r7
    ccb8:	fa1f f589 	uxth.w	r5, r9
    ccbc:	ea4f 4919 	mov.w	r9, r9, lsr #16
    ccc0:	ebc5 0801 	rsb	r8, r5, r1
    ccc4:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
    ccc8:	eb07 4728 	add.w	r7, r7, r8, asr #16
    cccc:	fa1f f888 	uxth.w	r8, r8
    ccd0:	1439      	asrs	r1, r7, #16
    ccd2:	45b2      	cmp	sl, r6
    ccd4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
    ccd8:	4625      	mov	r5, r4
    ccda:	f843 7b04 	str.w	r7, [r3], #4
    ccde:	d8e5      	bhi.n	ccac <__mdiff+0x58>
    cce0:	4565      	cmp	r5, ip
    cce2:	d20d      	bcs.n	cd00 <__mdiff+0xac>
    cce4:	f855 4b04 	ldr.w	r4, [r5], #4
    cce8:	fa11 f684 	uxtah	r6, r1, r4
    ccec:	0c24      	lsrs	r4, r4, #16
    ccee:	eb04 4426 	add.w	r4, r4, r6, asr #16
    ccf2:	b2b6      	uxth	r6, r6
    ccf4:	1421      	asrs	r1, r4, #16
    ccf6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
    ccfa:	f843 4b04 	str.w	r4, [r3], #4
    ccfe:	e7ef      	b.n	cce0 <__mdiff+0x8c>
    cd00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cd04:	b909      	cbnz	r1, cd0a <__mdiff+0xb6>
    cd06:	3a01      	subs	r2, #1
    cd08:	e7fa      	b.n	cd00 <__mdiff+0xac>
    cd0a:	6102      	str	r2, [r0, #16]
    cd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cd10 <__ulp>:
    cd10:	4b0f      	ldr	r3, [pc, #60]	; (cd50 <__ulp+0x40>)
    cd12:	400b      	ands	r3, r1
    cd14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    cd18:	2b00      	cmp	r3, #0
    cd1a:	dd01      	ble.n	cd20 <__ulp+0x10>
    cd1c:	4619      	mov	r1, r3
    cd1e:	e009      	b.n	cd34 <__ulp+0x24>
    cd20:	425b      	negs	r3, r3
    cd22:	151b      	asrs	r3, r3, #20
    cd24:	2b13      	cmp	r3, #19
    cd26:	f04f 0100 	mov.w	r1, #0
    cd2a:	dc05      	bgt.n	cd38 <__ulp+0x28>
    cd2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    cd30:	fa42 f103 	asr.w	r1, r2, r3
    cd34:	2000      	movs	r0, #0
    cd36:	4770      	bx	lr
    cd38:	2b32      	cmp	r3, #50	; 0x32
    cd3a:	f04f 0201 	mov.w	r2, #1
    cd3e:	bfda      	itte	le
    cd40:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
    cd44:	fa02 f303 	lslle.w	r3, r2, r3
    cd48:	4613      	movgt	r3, r2
    cd4a:	4618      	mov	r0, r3
    cd4c:	4770      	bx	lr
    cd4e:	bf00      	nop
    cd50:	7ff00000 	.word	0x7ff00000

0000cd54 <__b2d>:
    cd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd58:	6906      	ldr	r6, [r0, #16]
    cd5a:	f100 0714 	add.w	r7, r0, #20
    cd5e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    cd62:	4688      	mov	r8, r1
    cd64:	f856 4c04 	ldr.w	r4, [r6, #-4]
    cd68:	4620      	mov	r0, r4
    cd6a:	f7ff fdd6 	bl	c91a <__hi0bits>
    cd6e:	f1c0 0320 	rsb	r3, r0, #32
    cd72:	280a      	cmp	r0, #10
    cd74:	f1a6 0504 	sub.w	r5, r6, #4
    cd78:	f8c8 3000 	str.w	r3, [r8]
    cd7c:	dc14      	bgt.n	cda8 <__b2d+0x54>
    cd7e:	42bd      	cmp	r5, r7
    cd80:	f1c0 010b 	rsb	r1, r0, #11
    cd84:	bf88      	it	hi
    cd86:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
    cd8a:	fa24 fc01 	lsr.w	ip, r4, r1
    cd8e:	bf98      	it	ls
    cd90:	2500      	movls	r5, #0
    cd92:	3015      	adds	r0, #21
    cd94:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
    cd98:	fa25 f101 	lsr.w	r1, r5, r1
    cd9c:	4084      	lsls	r4, r0
    cd9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    cda2:	ea41 0204 	orr.w	r2, r1, r4
    cda6:	e024      	b.n	cdf2 <__b2d+0x9e>
    cda8:	42bd      	cmp	r5, r7
    cdaa:	bf86      	itte	hi
    cdac:	f1a6 0508 	subhi.w	r5, r6, #8
    cdb0:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
    cdb4:	2100      	movls	r1, #0
    cdb6:	f1b0 060b 	subs.w	r6, r0, #11
    cdba:	d015      	beq.n	cde8 <__b2d+0x94>
    cdbc:	40b4      	lsls	r4, r6
    cdbe:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
    cdc2:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
    cdc6:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
    cdca:	fa21 fc00 	lsr.w	ip, r1, r0
    cdce:	42bd      	cmp	r5, r7
    cdd0:	ea44 030c 	orr.w	r3, r4, ip
    cdd4:	bf8c      	ite	hi
    cdd6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
    cdda:	2400      	movls	r4, #0
    cddc:	fa24 f000 	lsr.w	r0, r4, r0
    cde0:	40b1      	lsls	r1, r6
    cde2:	ea40 0201 	orr.w	r2, r0, r1
    cde6:	e004      	b.n	cdf2 <__b2d+0x9e>
    cde8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
    cdec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    cdf0:	460a      	mov	r2, r1
    cdf2:	4610      	mov	r0, r2
    cdf4:	4619      	mov	r1, r3
    cdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cdfa <__d2b>:
    cdfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    cdfe:	2101      	movs	r1, #1
    ce00:	461d      	mov	r5, r3
    ce02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    ce06:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    ce0a:	4614      	mov	r4, r2
    ce0c:	f7ff fcda 	bl	c7c4 <_Balloc>
    ce10:	f3c5 570a 	ubfx	r7, r5, #20, #11
    ce14:	4606      	mov	r6, r0
    ce16:	f3c5 0313 	ubfx	r3, r5, #0, #20
    ce1a:	b10f      	cbz	r7, ce20 <__d2b+0x26>
    ce1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ce20:	9301      	str	r3, [sp, #4]
    ce22:	b1d4      	cbz	r4, ce5a <__d2b+0x60>
    ce24:	a802      	add	r0, sp, #8
    ce26:	f840 4d08 	str.w	r4, [r0, #-8]!
    ce2a:	4668      	mov	r0, sp
    ce2c:	f7ff fd95 	bl	c95a <__lo0bits>
    ce30:	9b00      	ldr	r3, [sp, #0]
    ce32:	b148      	cbz	r0, ce48 <__d2b+0x4e>
    ce34:	9a01      	ldr	r2, [sp, #4]
    ce36:	f1c0 0120 	rsb	r1, r0, #32
    ce3a:	fa02 f101 	lsl.w	r1, r2, r1
    ce3e:	430b      	orrs	r3, r1
    ce40:	40c2      	lsrs	r2, r0
    ce42:	6173      	str	r3, [r6, #20]
    ce44:	9201      	str	r2, [sp, #4]
    ce46:	e000      	b.n	ce4a <__d2b+0x50>
    ce48:	6173      	str	r3, [r6, #20]
    ce4a:	9b01      	ldr	r3, [sp, #4]
    ce4c:	61b3      	str	r3, [r6, #24]
    ce4e:	2b00      	cmp	r3, #0
    ce50:	bf0c      	ite	eq
    ce52:	2401      	moveq	r4, #1
    ce54:	2402      	movne	r4, #2
    ce56:	6134      	str	r4, [r6, #16]
    ce58:	e007      	b.n	ce6a <__d2b+0x70>
    ce5a:	a801      	add	r0, sp, #4
    ce5c:	f7ff fd7d 	bl	c95a <__lo0bits>
    ce60:	2401      	movs	r4, #1
    ce62:	9b01      	ldr	r3, [sp, #4]
    ce64:	6173      	str	r3, [r6, #20]
    ce66:	6134      	str	r4, [r6, #16]
    ce68:	3020      	adds	r0, #32
    ce6a:	b13f      	cbz	r7, ce7c <__d2b+0x82>
    ce6c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
    ce70:	4407      	add	r7, r0
    ce72:	f8c9 7000 	str.w	r7, [r9]
    ce76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    ce7a:	e00a      	b.n	ce92 <__d2b+0x98>
    ce7c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    ce80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    ce84:	f8c9 0000 	str.w	r0, [r9]
    ce88:	6918      	ldr	r0, [r3, #16]
    ce8a:	f7ff fd46 	bl	c91a <__hi0bits>
    ce8e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
    ce92:	f8c8 0000 	str.w	r0, [r8]
    ce96:	4630      	mov	r0, r6
    ce98:	b003      	add	sp, #12
    ce9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000ce9e <__ratio>:
    ce9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cea2:	460e      	mov	r6, r1
    cea4:	4669      	mov	r1, sp
    cea6:	4680      	mov	r8, r0
    cea8:	f7ff ff54 	bl	cd54 <__b2d>
    ceac:	460d      	mov	r5, r1
    ceae:	4604      	mov	r4, r0
    ceb0:	a901      	add	r1, sp, #4
    ceb2:	4630      	mov	r0, r6
    ceb4:	f7ff ff4e 	bl	cd54 <__b2d>
    ceb8:	9f00      	ldr	r7, [sp, #0]
    ceba:	460b      	mov	r3, r1
    cebc:	9901      	ldr	r1, [sp, #4]
    cebe:	4602      	mov	r2, r0
    cec0:	1a7f      	subs	r7, r7, r1
    cec2:	f8d8 0010 	ldr.w	r0, [r8, #16]
    cec6:	6931      	ldr	r1, [r6, #16]
    cec8:	1a41      	subs	r1, r0, r1
    ceca:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    cece:	2900      	cmp	r1, #0
    ced0:	bfcc      	ite	gt
    ced2:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
    ced6:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
    ceda:	4620      	mov	r0, r4
    cedc:	4629      	mov	r1, r5
    cede:	f7fa fb91 	bl	7604 <__aeabi_ddiv>
    cee2:	b002      	add	sp, #8
    cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cee8 <_mprec_log10>:
    cee8:	2817      	cmp	r0, #23
    ceea:	b510      	push	{r4, lr}
    ceec:	4604      	mov	r4, r0
    ceee:	dc05      	bgt.n	cefc <_mprec_log10+0x14>
    cef0:	4b07      	ldr	r3, [pc, #28]	; (cf10 <_mprec_log10+0x28>)
    cef2:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    cef6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    cefa:	bd10      	pop	{r4, pc}
    cefc:	4905      	ldr	r1, [pc, #20]	; (cf14 <_mprec_log10+0x2c>)
    cefe:	2000      	movs	r0, #0
    cf00:	2200      	movs	r2, #0
    cf02:	4b05      	ldr	r3, [pc, #20]	; (cf18 <_mprec_log10+0x30>)
    cf04:	f7fa fa54 	bl	73b0 <__aeabi_dmul>
    cf08:	3c01      	subs	r4, #1
    cf0a:	d1f9      	bne.n	cf00 <_mprec_log10+0x18>
    cf0c:	bd10      	pop	{r4, pc}
    cf0e:	bf00      	nop
    cf10:	00010b50 	.word	0x00010b50
    cf14:	3ff00000 	.word	0x3ff00000
    cf18:	40240000 	.word	0x40240000

0000cf1c <__copybits>:
    cf1c:	b510      	push	{r4, lr}
    cf1e:	3901      	subs	r1, #1
    cf20:	f102 0314 	add.w	r3, r2, #20
    cf24:	1149      	asrs	r1, r1, #5
    cf26:	6912      	ldr	r2, [r2, #16]
    cf28:	3101      	adds	r1, #1
    cf2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    cf2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    cf32:	4293      	cmp	r3, r2
    cf34:	d204      	bcs.n	cf40 <__copybits+0x24>
    cf36:	f853 4b04 	ldr.w	r4, [r3], #4
    cf3a:	f840 4b04 	str.w	r4, [r0], #4
    cf3e:	e7f8      	b.n	cf32 <__copybits+0x16>
    cf40:	4288      	cmp	r0, r1
    cf42:	d203      	bcs.n	cf4c <__copybits+0x30>
    cf44:	2300      	movs	r3, #0
    cf46:	f840 3b04 	str.w	r3, [r0], #4
    cf4a:	e7f9      	b.n	cf40 <__copybits+0x24>
    cf4c:	bd10      	pop	{r4, pc}

0000cf4e <__any_on>:
    cf4e:	f100 0214 	add.w	r2, r0, #20
    cf52:	6900      	ldr	r0, [r0, #16]
    cf54:	114b      	asrs	r3, r1, #5
    cf56:	4283      	cmp	r3, r0
    cf58:	b510      	push	{r4, lr}
    cf5a:	dc0c      	bgt.n	cf76 <__any_on+0x28>
    cf5c:	da0c      	bge.n	cf78 <__any_on+0x2a>
    cf5e:	f011 011f 	ands.w	r1, r1, #31
    cf62:	d009      	beq.n	cf78 <__any_on+0x2a>
    cf64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    cf68:	fa20 f401 	lsr.w	r4, r0, r1
    cf6c:	fa04 f101 	lsl.w	r1, r4, r1
    cf70:	4281      	cmp	r1, r0
    cf72:	d10e      	bne.n	cf92 <__any_on+0x44>
    cf74:	e000      	b.n	cf78 <__any_on+0x2a>
    cf76:	4603      	mov	r3, r0
    cf78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cf7c:	4293      	cmp	r3, r2
    cf7e:	4619      	mov	r1, r3
    cf80:	d905      	bls.n	cf8e <__any_on+0x40>
    cf82:	f851 1c04 	ldr.w	r1, [r1, #-4]
    cf86:	3b04      	subs	r3, #4
    cf88:	2900      	cmp	r1, #0
    cf8a:	d0f7      	beq.n	cf7c <__any_on+0x2e>
    cf8c:	e001      	b.n	cf92 <__any_on+0x44>
    cf8e:	2000      	movs	r0, #0
    cf90:	bd10      	pop	{r4, pc}
    cf92:	2001      	movs	r0, #1
    cf94:	bd10      	pop	{r4, pc}
    cf96:	bf00      	nop

0000cf98 <_read_r>:
    cf98:	b538      	push	{r3, r4, r5, lr}
    cf9a:	4c07      	ldr	r4, [pc, #28]	; (cfb8 <_read_r+0x20>)
    cf9c:	4605      	mov	r5, r0
    cf9e:	2000      	movs	r0, #0
    cfa0:	6020      	str	r0, [r4, #0]
    cfa2:	4608      	mov	r0, r1
    cfa4:	4611      	mov	r1, r2
    cfa6:	461a      	mov	r2, r3
    cfa8:	f7f3 fd7a 	bl	aa0 <_read>
    cfac:	1c43      	adds	r3, r0, #1
    cfae:	d102      	bne.n	cfb6 <_read_r+0x1e>
    cfb0:	6823      	ldr	r3, [r4, #0]
    cfb2:	b103      	cbz	r3, cfb6 <_read_r+0x1e>
    cfb4:	602b      	str	r3, [r5, #0]
    cfb6:	bd38      	pop	{r3, r4, r5, pc}
    cfb8:	20000fa8 	.word	0x20000fa8

0000cfbc <_realloc_r>:
    cfbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfc0:	4681      	mov	r9, r0
    cfc2:	460c      	mov	r4, r1
    cfc4:	b929      	cbnz	r1, cfd2 <_realloc_r+0x16>
    cfc6:	4611      	mov	r1, r2
    cfc8:	b003      	add	sp, #12
    cfca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfce:	f7ff b955 	b.w	c27c <_malloc_r>
    cfd2:	9201      	str	r2, [sp, #4]
    cfd4:	f7ff fbf3 	bl	c7be <__malloc_lock>
    cfd8:	9a01      	ldr	r2, [sp, #4]
    cfda:	f854 5c04 	ldr.w	r5, [r4, #-4]
    cfde:	f102 070b 	add.w	r7, r2, #11
    cfe2:	2f16      	cmp	r7, #22
    cfe4:	f1a4 0808 	sub.w	r8, r4, #8
    cfe8:	f025 0603 	bic.w	r6, r5, #3
    cfec:	d903      	bls.n	cff6 <_realloc_r+0x3a>
    cfee:	f037 0707 	bics.w	r7, r7, #7
    cff2:	d501      	bpl.n	cff8 <_realloc_r+0x3c>
    cff4:	e002      	b.n	cffc <_realloc_r+0x40>
    cff6:	2710      	movs	r7, #16
    cff8:	4297      	cmp	r7, r2
    cffa:	d204      	bcs.n	d006 <_realloc_r+0x4a>
    cffc:	230c      	movs	r3, #12
    cffe:	f8c9 3000 	str.w	r3, [r9]
    d002:	2000      	movs	r0, #0
    d004:	e17e      	b.n	d304 <_realloc_r+0x348>
    d006:	42be      	cmp	r6, r7
    d008:	f280 8154 	bge.w	d2b4 <_realloc_r+0x2f8>
    d00c:	49a2      	ldr	r1, [pc, #648]	; (d298 <_realloc_r+0x2dc>)
    d00e:	f8d1 e008 	ldr.w	lr, [r1, #8]
    d012:	eb08 0306 	add.w	r3, r8, r6
    d016:	4573      	cmp	r3, lr
    d018:	468b      	mov	fp, r1
    d01a:	6858      	ldr	r0, [r3, #4]
    d01c:	d005      	beq.n	d02a <_realloc_r+0x6e>
    d01e:	f020 0101 	bic.w	r1, r0, #1
    d022:	4419      	add	r1, r3
    d024:	6849      	ldr	r1, [r1, #4]
    d026:	07c9      	lsls	r1, r1, #31
    d028:	d425      	bmi.n	d076 <_realloc_r+0xba>
    d02a:	f020 0003 	bic.w	r0, r0, #3
    d02e:	4573      	cmp	r3, lr
    d030:	eb00 0106 	add.w	r1, r0, r6
    d034:	d117      	bne.n	d066 <_realloc_r+0xaa>
    d036:	f107 0c10 	add.w	ip, r7, #16
    d03a:	4561      	cmp	r1, ip
    d03c:	db1d      	blt.n	d07a <_realloc_r+0xbe>
    d03e:	eb08 0507 	add.w	r5, r8, r7
    d042:	1bc9      	subs	r1, r1, r7
    d044:	f041 0101 	orr.w	r1, r1, #1
    d048:	f8cb 5008 	str.w	r5, [fp, #8]
    d04c:	6069      	str	r1, [r5, #4]
    d04e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d052:	f003 0301 	and.w	r3, r3, #1
    d056:	431f      	orrs	r7, r3
    d058:	4648      	mov	r0, r9
    d05a:	f844 7c04 	str.w	r7, [r4, #-4]
    d05e:	f7ff fbaf 	bl	c7c0 <__malloc_unlock>
    d062:	4620      	mov	r0, r4
    d064:	e14e      	b.n	d304 <_realloc_r+0x348>
    d066:	42b9      	cmp	r1, r7
    d068:	db07      	blt.n	d07a <_realloc_r+0xbe>
    d06a:	68da      	ldr	r2, [r3, #12]
    d06c:	689b      	ldr	r3, [r3, #8]
    d06e:	460e      	mov	r6, r1
    d070:	60da      	str	r2, [r3, #12]
    d072:	6093      	str	r3, [r2, #8]
    d074:	e11e      	b.n	d2b4 <_realloc_r+0x2f8>
    d076:	2000      	movs	r0, #0
    d078:	4603      	mov	r3, r0
    d07a:	07e9      	lsls	r1, r5, #31
    d07c:	f100 80c9 	bmi.w	d212 <_realloc_r+0x256>
    d080:	f854 5c08 	ldr.w	r5, [r4, #-8]
    d084:	ebc5 0508 	rsb	r5, r5, r8
    d088:	6869      	ldr	r1, [r5, #4]
    d08a:	f021 0103 	bic.w	r1, r1, #3
    d08e:	eb01 0a06 	add.w	sl, r1, r6
    d092:	2b00      	cmp	r3, #0
    d094:	f000 8088 	beq.w	d1a8 <_realloc_r+0x1ec>
    d098:	4573      	cmp	r3, lr
    d09a:	d14b      	bne.n	d134 <_realloc_r+0x178>
    d09c:	eb0a 0300 	add.w	r3, sl, r0
    d0a0:	f107 0110 	add.w	r1, r7, #16
    d0a4:	428b      	cmp	r3, r1
    d0a6:	db7f      	blt.n	d1a8 <_realloc_r+0x1ec>
    d0a8:	46a8      	mov	r8, r5
    d0aa:	68ea      	ldr	r2, [r5, #12]
    d0ac:	f858 1f08 	ldr.w	r1, [r8, #8]!
    d0b0:	60ca      	str	r2, [r1, #12]
    d0b2:	6091      	str	r1, [r2, #8]
    d0b4:	1f32      	subs	r2, r6, #4
    d0b6:	2a24      	cmp	r2, #36	; 0x24
    d0b8:	d825      	bhi.n	d106 <_realloc_r+0x14a>
    d0ba:	2a13      	cmp	r2, #19
    d0bc:	d91b      	bls.n	d0f6 <_realloc_r+0x13a>
    d0be:	6821      	ldr	r1, [r4, #0]
    d0c0:	60a9      	str	r1, [r5, #8]
    d0c2:	6861      	ldr	r1, [r4, #4]
    d0c4:	60e9      	str	r1, [r5, #12]
    d0c6:	2a1b      	cmp	r2, #27
    d0c8:	d803      	bhi.n	d0d2 <_realloc_r+0x116>
    d0ca:	f105 0210 	add.w	r2, r5, #16
    d0ce:	3408      	adds	r4, #8
    d0d0:	e012      	b.n	d0f8 <_realloc_r+0x13c>
    d0d2:	68a1      	ldr	r1, [r4, #8]
    d0d4:	6129      	str	r1, [r5, #16]
    d0d6:	68e1      	ldr	r1, [r4, #12]
    d0d8:	6169      	str	r1, [r5, #20]
    d0da:	2a24      	cmp	r2, #36	; 0x24
    d0dc:	d003      	beq.n	d0e6 <_realloc_r+0x12a>
    d0de:	f105 0218 	add.w	r2, r5, #24
    d0e2:	3410      	adds	r4, #16
    d0e4:	e008      	b.n	d0f8 <_realloc_r+0x13c>
    d0e6:	6922      	ldr	r2, [r4, #16]
    d0e8:	61aa      	str	r2, [r5, #24]
    d0ea:	6961      	ldr	r1, [r4, #20]
    d0ec:	61e9      	str	r1, [r5, #28]
    d0ee:	f105 0220 	add.w	r2, r5, #32
    d0f2:	3418      	adds	r4, #24
    d0f4:	e000      	b.n	d0f8 <_realloc_r+0x13c>
    d0f6:	4642      	mov	r2, r8
    d0f8:	6821      	ldr	r1, [r4, #0]
    d0fa:	6011      	str	r1, [r2, #0]
    d0fc:	6861      	ldr	r1, [r4, #4]
    d0fe:	6051      	str	r1, [r2, #4]
    d100:	68a1      	ldr	r1, [r4, #8]
    d102:	6091      	str	r1, [r2, #8]
    d104:	e005      	b.n	d112 <_realloc_r+0x156>
    d106:	4640      	mov	r0, r8
    d108:	4621      	mov	r1, r4
    d10a:	9301      	str	r3, [sp, #4]
    d10c:	f7ff fb3c 	bl	c788 <memmove>
    d110:	9b01      	ldr	r3, [sp, #4]
    d112:	19ea      	adds	r2, r5, r7
    d114:	1bdb      	subs	r3, r3, r7
    d116:	f043 0301 	orr.w	r3, r3, #1
    d11a:	f8cb 2008 	str.w	r2, [fp, #8]
    d11e:	6053      	str	r3, [r2, #4]
    d120:	686b      	ldr	r3, [r5, #4]
    d122:	f003 0301 	and.w	r3, r3, #1
    d126:	431f      	orrs	r7, r3
    d128:	4648      	mov	r0, r9
    d12a:	606f      	str	r7, [r5, #4]
    d12c:	f7ff fb48 	bl	c7c0 <__malloc_unlock>
    d130:	4640      	mov	r0, r8
    d132:	e0e7      	b.n	d304 <_realloc_r+0x348>
    d134:	eb0a 0b00 	add.w	fp, sl, r0
    d138:	45bb      	cmp	fp, r7
    d13a:	db35      	blt.n	d1a8 <_realloc_r+0x1ec>
    d13c:	68da      	ldr	r2, [r3, #12]
    d13e:	689b      	ldr	r3, [r3, #8]
    d140:	4628      	mov	r0, r5
    d142:	60da      	str	r2, [r3, #12]
    d144:	6093      	str	r3, [r2, #8]
    d146:	f850 2f08 	ldr.w	r2, [r0, #8]!
    d14a:	68eb      	ldr	r3, [r5, #12]
    d14c:	60d3      	str	r3, [r2, #12]
    d14e:	609a      	str	r2, [r3, #8]
    d150:	1f32      	subs	r2, r6, #4
    d152:	2a24      	cmp	r2, #36	; 0x24
    d154:	d823      	bhi.n	d19e <_realloc_r+0x1e2>
    d156:	2a13      	cmp	r2, #19
    d158:	d91a      	bls.n	d190 <_realloc_r+0x1d4>
    d15a:	6823      	ldr	r3, [r4, #0]
    d15c:	60ab      	str	r3, [r5, #8]
    d15e:	6863      	ldr	r3, [r4, #4]
    d160:	60eb      	str	r3, [r5, #12]
    d162:	2a1b      	cmp	r2, #27
    d164:	d803      	bhi.n	d16e <_realloc_r+0x1b2>
    d166:	f105 0010 	add.w	r0, r5, #16
    d16a:	3408      	adds	r4, #8
    d16c:	e010      	b.n	d190 <_realloc_r+0x1d4>
    d16e:	68a3      	ldr	r3, [r4, #8]
    d170:	612b      	str	r3, [r5, #16]
    d172:	68e3      	ldr	r3, [r4, #12]
    d174:	616b      	str	r3, [r5, #20]
    d176:	2a24      	cmp	r2, #36	; 0x24
    d178:	d003      	beq.n	d182 <_realloc_r+0x1c6>
    d17a:	f105 0018 	add.w	r0, r5, #24
    d17e:	3410      	adds	r4, #16
    d180:	e006      	b.n	d190 <_realloc_r+0x1d4>
    d182:	6923      	ldr	r3, [r4, #16]
    d184:	61ab      	str	r3, [r5, #24]
    d186:	6963      	ldr	r3, [r4, #20]
    d188:	61eb      	str	r3, [r5, #28]
    d18a:	f105 0020 	add.w	r0, r5, #32
    d18e:	3418      	adds	r4, #24
    d190:	6823      	ldr	r3, [r4, #0]
    d192:	6003      	str	r3, [r0, #0]
    d194:	6863      	ldr	r3, [r4, #4]
    d196:	6043      	str	r3, [r0, #4]
    d198:	68a3      	ldr	r3, [r4, #8]
    d19a:	6083      	str	r3, [r0, #8]
    d19c:	e002      	b.n	d1a4 <_realloc_r+0x1e8>
    d19e:	4621      	mov	r1, r4
    d1a0:	f7ff faf2 	bl	c788 <memmove>
    d1a4:	465e      	mov	r6, fp
    d1a6:	e02e      	b.n	d206 <_realloc_r+0x24a>
    d1a8:	45ba      	cmp	sl, r7
    d1aa:	db32      	blt.n	d212 <_realloc_r+0x256>
    d1ac:	4628      	mov	r0, r5
    d1ae:	68eb      	ldr	r3, [r5, #12]
    d1b0:	f850 2f08 	ldr.w	r2, [r0, #8]!
    d1b4:	60d3      	str	r3, [r2, #12]
    d1b6:	609a      	str	r2, [r3, #8]
    d1b8:	1f32      	subs	r2, r6, #4
    d1ba:	2a24      	cmp	r2, #36	; 0x24
    d1bc:	d825      	bhi.n	d20a <_realloc_r+0x24e>
    d1be:	2a13      	cmp	r2, #19
    d1c0:	d91a      	bls.n	d1f8 <_realloc_r+0x23c>
    d1c2:	6823      	ldr	r3, [r4, #0]
    d1c4:	60ab      	str	r3, [r5, #8]
    d1c6:	6863      	ldr	r3, [r4, #4]
    d1c8:	60eb      	str	r3, [r5, #12]
    d1ca:	2a1b      	cmp	r2, #27
    d1cc:	d803      	bhi.n	d1d6 <_realloc_r+0x21a>
    d1ce:	f105 0010 	add.w	r0, r5, #16
    d1d2:	3408      	adds	r4, #8
    d1d4:	e010      	b.n	d1f8 <_realloc_r+0x23c>
    d1d6:	68a3      	ldr	r3, [r4, #8]
    d1d8:	612b      	str	r3, [r5, #16]
    d1da:	68e3      	ldr	r3, [r4, #12]
    d1dc:	616b      	str	r3, [r5, #20]
    d1de:	2a24      	cmp	r2, #36	; 0x24
    d1e0:	d003      	beq.n	d1ea <_realloc_r+0x22e>
    d1e2:	f105 0018 	add.w	r0, r5, #24
    d1e6:	3410      	adds	r4, #16
    d1e8:	e006      	b.n	d1f8 <_realloc_r+0x23c>
    d1ea:	6923      	ldr	r3, [r4, #16]
    d1ec:	61ab      	str	r3, [r5, #24]
    d1ee:	6963      	ldr	r3, [r4, #20]
    d1f0:	61eb      	str	r3, [r5, #28]
    d1f2:	f105 0020 	add.w	r0, r5, #32
    d1f6:	3418      	adds	r4, #24
    d1f8:	6823      	ldr	r3, [r4, #0]
    d1fa:	6003      	str	r3, [r0, #0]
    d1fc:	6863      	ldr	r3, [r4, #4]
    d1fe:	6043      	str	r3, [r0, #4]
    d200:	68a3      	ldr	r3, [r4, #8]
    d202:	6083      	str	r3, [r0, #8]
    d204:	4656      	mov	r6, sl
    d206:	46a8      	mov	r8, r5
    d208:	e054      	b.n	d2b4 <_realloc_r+0x2f8>
    d20a:	4621      	mov	r1, r4
    d20c:	f7ff fabc 	bl	c788 <memmove>
    d210:	e7f8      	b.n	d204 <_realloc_r+0x248>
    d212:	4648      	mov	r0, r9
    d214:	4611      	mov	r1, r2
    d216:	f7ff f831 	bl	c27c <_malloc_r>
    d21a:	4605      	mov	r5, r0
    d21c:	2800      	cmp	r0, #0
    d21e:	d044      	beq.n	d2aa <_realloc_r+0x2ee>
    d220:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d224:	f023 0301 	bic.w	r3, r3, #1
    d228:	f1a0 0208 	sub.w	r2, r0, #8
    d22c:	4443      	add	r3, r8
    d22e:	429a      	cmp	r2, r3
    d230:	d105      	bne.n	d23e <_realloc_r+0x282>
    d232:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d236:	f023 0303 	bic.w	r3, r3, #3
    d23a:	441e      	add	r6, r3
    d23c:	e03a      	b.n	d2b4 <_realloc_r+0x2f8>
    d23e:	1f32      	subs	r2, r6, #4
    d240:	2a24      	cmp	r2, #36	; 0x24
    d242:	d82b      	bhi.n	d29c <_realloc_r+0x2e0>
    d244:	2a13      	cmp	r2, #19
    d246:	d91e      	bls.n	d286 <_realloc_r+0x2ca>
    d248:	6823      	ldr	r3, [r4, #0]
    d24a:	6003      	str	r3, [r0, #0]
    d24c:	6863      	ldr	r3, [r4, #4]
    d24e:	6043      	str	r3, [r0, #4]
    d250:	2a1b      	cmp	r2, #27
    d252:	d804      	bhi.n	d25e <_realloc_r+0x2a2>
    d254:	f100 0308 	add.w	r3, r0, #8
    d258:	f104 0208 	add.w	r2, r4, #8
    d25c:	e015      	b.n	d28a <_realloc_r+0x2ce>
    d25e:	68a3      	ldr	r3, [r4, #8]
    d260:	6083      	str	r3, [r0, #8]
    d262:	68e3      	ldr	r3, [r4, #12]
    d264:	60c3      	str	r3, [r0, #12]
    d266:	2a24      	cmp	r2, #36	; 0x24
    d268:	d004      	beq.n	d274 <_realloc_r+0x2b8>
    d26a:	f100 0310 	add.w	r3, r0, #16
    d26e:	f104 0210 	add.w	r2, r4, #16
    d272:	e00a      	b.n	d28a <_realloc_r+0x2ce>
    d274:	6923      	ldr	r3, [r4, #16]
    d276:	6103      	str	r3, [r0, #16]
    d278:	6961      	ldr	r1, [r4, #20]
    d27a:	6141      	str	r1, [r0, #20]
    d27c:	f100 0318 	add.w	r3, r0, #24
    d280:	f104 0218 	add.w	r2, r4, #24
    d284:	e001      	b.n	d28a <_realloc_r+0x2ce>
    d286:	4603      	mov	r3, r0
    d288:	4622      	mov	r2, r4
    d28a:	6811      	ldr	r1, [r2, #0]
    d28c:	6019      	str	r1, [r3, #0]
    d28e:	6851      	ldr	r1, [r2, #4]
    d290:	6059      	str	r1, [r3, #4]
    d292:	6892      	ldr	r2, [r2, #8]
    d294:	609a      	str	r2, [r3, #8]
    d296:	e004      	b.n	d2a2 <_realloc_r+0x2e6>
    d298:	2000094c 	.word	0x2000094c
    d29c:	4621      	mov	r1, r4
    d29e:	f7ff fa73 	bl	c788 <memmove>
    d2a2:	4648      	mov	r0, r9
    d2a4:	4621      	mov	r1, r4
    d2a6:	f7fe fcd5 	bl	bc54 <_free_r>
    d2aa:	4648      	mov	r0, r9
    d2ac:	f7ff fa88 	bl	c7c0 <__malloc_unlock>
    d2b0:	4628      	mov	r0, r5
    d2b2:	e027      	b.n	d304 <_realloc_r+0x348>
    d2b4:	1bf3      	subs	r3, r6, r7
    d2b6:	2b0f      	cmp	r3, #15
    d2b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d2bc:	d913      	bls.n	d2e6 <_realloc_r+0x32a>
    d2be:	eb08 0107 	add.w	r1, r8, r7
    d2c2:	f002 0201 	and.w	r2, r2, #1
    d2c6:	4317      	orrs	r7, r2
    d2c8:	f043 0201 	orr.w	r2, r3, #1
    d2cc:	440b      	add	r3, r1
    d2ce:	f8c8 7004 	str.w	r7, [r8, #4]
    d2d2:	604a      	str	r2, [r1, #4]
    d2d4:	685a      	ldr	r2, [r3, #4]
    d2d6:	f042 0201 	orr.w	r2, r2, #1
    d2da:	605a      	str	r2, [r3, #4]
    d2dc:	4648      	mov	r0, r9
    d2de:	3108      	adds	r1, #8
    d2e0:	f7fe fcb8 	bl	bc54 <_free_r>
    d2e4:	e009      	b.n	d2fa <_realloc_r+0x33e>
    d2e6:	f002 0201 	and.w	r2, r2, #1
    d2ea:	4332      	orrs	r2, r6
    d2ec:	4446      	add	r6, r8
    d2ee:	f8c8 2004 	str.w	r2, [r8, #4]
    d2f2:	6873      	ldr	r3, [r6, #4]
    d2f4:	f043 0301 	orr.w	r3, r3, #1
    d2f8:	6073      	str	r3, [r6, #4]
    d2fa:	4648      	mov	r0, r9
    d2fc:	f7ff fa60 	bl	c7c0 <__malloc_unlock>
    d300:	f108 0008 	add.w	r0, r8, #8
    d304:	b003      	add	sp, #12
    d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d30a:	bf00      	nop

0000d30c <__fpclassifyd>:
    d30c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    d310:	b510      	push	{r4, lr}
    d312:	d100      	bne.n	d316 <__fpclassifyd+0xa>
    d314:	b178      	cbz	r0, d336 <__fpclassifyd+0x2a>
    d316:	4a0c      	ldr	r2, [pc, #48]	; (d348 <__fpclassifyd+0x3c>)
    d318:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    d31c:	4294      	cmp	r4, r2
    d31e:	d90c      	bls.n	d33a <__fpclassifyd+0x2e>
    d320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d324:	d30b      	bcc.n	d33e <__fpclassifyd+0x32>
    d326:	4a09      	ldr	r2, [pc, #36]	; (d34c <__fpclassifyd+0x40>)
    d328:	4293      	cmp	r3, r2
    d32a:	d10a      	bne.n	d342 <__fpclassifyd+0x36>
    d32c:	f1d0 0001 	rsbs	r0, r0, #1
    d330:	bf38      	it	cc
    d332:	2000      	movcc	r0, #0
    d334:	bd10      	pop	{r4, pc}
    d336:	2002      	movs	r0, #2
    d338:	bd10      	pop	{r4, pc}
    d33a:	2004      	movs	r0, #4
    d33c:	bd10      	pop	{r4, pc}
    d33e:	2003      	movs	r0, #3
    d340:	bd10      	pop	{r4, pc}
    d342:	2000      	movs	r0, #0
    d344:	bd10      	pop	{r4, pc}
    d346:	bf00      	nop
    d348:	7fdfffff 	.word	0x7fdfffff
    d34c:	7ff00000 	.word	0x7ff00000

0000d350 <_sbrk_r>:
    d350:	b538      	push	{r3, r4, r5, lr}
    d352:	4c06      	ldr	r4, [pc, #24]	; (d36c <_sbrk_r+0x1c>)
    d354:	2300      	movs	r3, #0
    d356:	4605      	mov	r5, r0
    d358:	4608      	mov	r0, r1
    d35a:	6023      	str	r3, [r4, #0]
    d35c:	f7f8 feee 	bl	613c <_sbrk>
    d360:	1c43      	adds	r3, r0, #1
    d362:	d102      	bne.n	d36a <_sbrk_r+0x1a>
    d364:	6823      	ldr	r3, [r4, #0]
    d366:	b103      	cbz	r3, d36a <_sbrk_r+0x1a>
    d368:	602b      	str	r3, [r5, #0]
    d36a:	bd38      	pop	{r3, r4, r5, pc}
    d36c:	20000fa8 	.word	0x20000fa8

0000d370 <__sccl>:
    d370:	b5f0      	push	{r4, r5, r6, r7, lr}
    d372:	780b      	ldrb	r3, [r1, #0]
    d374:	2b5e      	cmp	r3, #94	; 0x5e
    d376:	d002      	beq.n	d37e <__sccl+0xe>
    d378:	1c4c      	adds	r4, r1, #1
    d37a:	2100      	movs	r1, #0
    d37c:	e002      	b.n	d384 <__sccl+0x14>
    d37e:	1c8c      	adds	r4, r1, #2
    d380:	784b      	ldrb	r3, [r1, #1]
    d382:	2101      	movs	r1, #1
    d384:	2200      	movs	r2, #0
    d386:	5481      	strb	r1, [r0, r2]
    d388:	3201      	adds	r2, #1
    d38a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    d38e:	d1fa      	bne.n	d386 <__sccl+0x16>
    d390:	b90b      	cbnz	r3, d396 <__sccl+0x26>
    d392:	1e65      	subs	r5, r4, #1
    d394:	e01c      	b.n	d3d0 <__sccl+0x60>
    d396:	f1c1 0701 	rsb	r7, r1, #1
    d39a:	b2fe      	uxtb	r6, r7
    d39c:	54c6      	strb	r6, [r0, r3]
    d39e:	1c62      	adds	r2, r4, #1
    d3a0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    d3a4:	292d      	cmp	r1, #45	; 0x2d
    d3a6:	f102 35ff 	add.w	r5, r2, #4294967295
    d3aa:	4614      	mov	r4, r2
    d3ac:	d004      	beq.n	d3b8 <__sccl+0x48>
    d3ae:	295d      	cmp	r1, #93	; 0x5d
    d3b0:	d00d      	beq.n	d3ce <__sccl+0x5e>
    d3b2:	b169      	cbz	r1, d3d0 <__sccl+0x60>
    d3b4:	460b      	mov	r3, r1
    d3b6:	e7f0      	b.n	d39a <__sccl+0x2a>
    d3b8:	7815      	ldrb	r5, [r2, #0]
    d3ba:	2d5d      	cmp	r5, #93	; 0x5d
    d3bc:	d0fa      	beq.n	d3b4 <__sccl+0x44>
    d3be:	429d      	cmp	r5, r3
    d3c0:	dbf8      	blt.n	d3b4 <__sccl+0x44>
    d3c2:	3301      	adds	r3, #1
    d3c4:	42ab      	cmp	r3, r5
    d3c6:	54c6      	strb	r6, [r0, r3]
    d3c8:	dbfb      	blt.n	d3c2 <__sccl+0x52>
    d3ca:	3202      	adds	r2, #2
    d3cc:	e7e8      	b.n	d3a0 <__sccl+0x30>
    d3ce:	4615      	mov	r5, r2
    d3d0:	4628      	mov	r0, r5
    d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d3d4 <nanf>:
    d3d4:	4800      	ldr	r0, [pc, #0]	; (d3d8 <nanf+0x4>)
    d3d6:	4770      	bx	lr
    d3d8:	7fc00000 	.word	0x7fc00000
    d3dc:	00000000 	.word	0x00000000

0000d3e0 <match>:
    d3e0:	b530      	push	{r4, r5, lr}
    d3e2:	6802      	ldr	r2, [r0, #0]
    d3e4:	f811 5b01 	ldrb.w	r5, [r1], #1
    d3e8:	1c54      	adds	r4, r2, #1
    d3ea:	b15d      	cbz	r5, d404 <match+0x24>
    d3ec:	7853      	ldrb	r3, [r2, #1]
    d3ee:	4622      	mov	r2, r4
    d3f0:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
    d3f4:	b2e4      	uxtb	r4, r4
    d3f6:	2c19      	cmp	r4, #25
    d3f8:	bf98      	it	ls
    d3fa:	3320      	addls	r3, #32
    d3fc:	42ab      	cmp	r3, r5
    d3fe:	d0f1      	beq.n	d3e4 <match+0x4>
    d400:	2000      	movs	r0, #0
    d402:	bd30      	pop	{r4, r5, pc}
    d404:	6004      	str	r4, [r0, #0]
    d406:	2001      	movs	r0, #1
    d408:	bd30      	pop	{r4, r5, pc}

0000d40a <sulp>:
    d40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d40e:	460d      	mov	r5, r1
    d410:	4690      	mov	r8, r2
    d412:	f7ff fc7d 	bl	cd10 <__ulp>
    d416:	4606      	mov	r6, r0
    d418:	460f      	mov	r7, r1
    d41a:	f1b8 0f00 	cmp.w	r8, #0
    d41e:	d00f      	beq.n	d440 <sulp+0x36>
    d420:	f3c5 530a 	ubfx	r3, r5, #20, #11
    d424:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    d428:	2b00      	cmp	r3, #0
    d42a:	dd09      	ble.n	d440 <sulp+0x36>
    d42c:	051c      	lsls	r4, r3, #20
    d42e:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
    d432:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
    d436:	2200      	movs	r2, #0
    d438:	f7f9 ffba 	bl	73b0 <__aeabi_dmul>
    d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d440:	4630      	mov	r0, r6
    d442:	4639      	mov	r1, r7
    d444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d448 <_strtod_r>:
    d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d44c:	b09f      	sub	sp, #124	; 0x7c
    d44e:	2300      	movs	r3, #0
    d450:	4681      	mov	r9, r0
    d452:	9104      	str	r1, [sp, #16]
    d454:	9215      	str	r2, [sp, #84]	; 0x54
    d456:	931a      	str	r3, [sp, #104]	; 0x68
    d458:	f04f 0a00 	mov.w	sl, #0
    d45c:	f04f 0b00 	mov.w	fp, #0
    d460:	9119      	str	r1, [sp, #100]	; 0x64
    d462:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d464:	7813      	ldrb	r3, [r2, #0]
    d466:	2b0d      	cmp	r3, #13
    d468:	d805      	bhi.n	d476 <_strtod_r+0x2e>
    d46a:	2b09      	cmp	r3, #9
    d46c:	d214      	bcs.n	d498 <_strtod_r+0x50>
    d46e:	2b00      	cmp	r3, #0
    d470:	f000 81b3 	beq.w	d7da <_strtod_r+0x392>
    d474:	e013      	b.n	d49e <_strtod_r+0x56>
    d476:	2b2b      	cmp	r3, #43	; 0x2b
    d478:	d007      	beq.n	d48a <_strtod_r+0x42>
    d47a:	2b2d      	cmp	r3, #45	; 0x2d
    d47c:	d002      	beq.n	d484 <_strtod_r+0x3c>
    d47e:	2b20      	cmp	r3, #32
    d480:	d10d      	bne.n	d49e <_strtod_r+0x56>
    d482:	e009      	b.n	d498 <_strtod_r+0x50>
    d484:	2601      	movs	r6, #1
    d486:	9609      	str	r6, [sp, #36]	; 0x24
    d488:	e001      	b.n	d48e <_strtod_r+0x46>
    d48a:	2700      	movs	r7, #0
    d48c:	9709      	str	r7, [sp, #36]	; 0x24
    d48e:	1c53      	adds	r3, r2, #1
    d490:	9319      	str	r3, [sp, #100]	; 0x64
    d492:	7853      	ldrb	r3, [r2, #1]
    d494:	b92b      	cbnz	r3, d4a2 <_strtod_r+0x5a>
    d496:	e1a0      	b.n	d7da <_strtod_r+0x392>
    d498:	3201      	adds	r2, #1
    d49a:	9219      	str	r2, [sp, #100]	; 0x64
    d49c:	e7e1      	b.n	d462 <_strtod_r+0x1a>
    d49e:	2600      	movs	r6, #0
    d4a0:	9609      	str	r6, [sp, #36]	; 0x24
    d4a2:	9c19      	ldr	r4, [sp, #100]	; 0x64
    d4a4:	7823      	ldrb	r3, [r4, #0]
    d4a6:	2b30      	cmp	r3, #48	; 0x30
    d4a8:	d15a      	bne.n	d560 <_strtod_r+0x118>
    d4aa:	7863      	ldrb	r3, [r4, #1]
    d4ac:	2b58      	cmp	r3, #88	; 0x58
    d4ae:	d001      	beq.n	d4b4 <_strtod_r+0x6c>
    d4b0:	2b78      	cmp	r3, #120	; 0x78
    d4b2:	d149      	bne.n	d548 <_strtod_r+0x100>
    d4b4:	ab1a      	add	r3, sp, #104	; 0x68
    d4b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    d4b8:	9300      	str	r3, [sp, #0]
    d4ba:	9701      	str	r7, [sp, #4]
    d4bc:	4648      	mov	r0, r9
    d4be:	a919      	add	r1, sp, #100	; 0x64
    d4c0:	4a9d      	ldr	r2, [pc, #628]	; (d738 <_strtod_r+0x2f0>)
    d4c2:	ab1b      	add	r3, sp, #108	; 0x6c
    d4c4:	f002 fb6b 	bl	fb9e <__gethex>
    d4c8:	f010 0607 	ands.w	r6, r0, #7
    d4cc:	4605      	mov	r5, r0
    d4ce:	f000 85af 	beq.w	e030 <_strtod_r+0xbe8>
    d4d2:	2e06      	cmp	r6, #6
    d4d4:	d102      	bne.n	d4dc <_strtod_r+0x94>
    d4d6:	3401      	adds	r4, #1
    d4d8:	9419      	str	r4, [sp, #100]	; 0x64
    d4da:	e180      	b.n	d7de <_strtod_r+0x396>
    d4dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    d4de:	b13a      	cbz	r2, d4f0 <_strtod_r+0xa8>
    d4e0:	a81c      	add	r0, sp, #112	; 0x70
    d4e2:	2135      	movs	r1, #53	; 0x35
    d4e4:	f7ff fd1a 	bl	cf1c <__copybits>
    d4e8:	4648      	mov	r0, r9
    d4ea:	991a      	ldr	r1, [sp, #104]	; 0x68
    d4ec:	f7ff f990 	bl	c810 <_Bfree>
    d4f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d4f2:	2e06      	cmp	r6, #6
    d4f4:	d821      	bhi.n	d53a <_strtod_r+0xf2>
    d4f6:	e8df f006 	tbb	[pc, r6]
    d4fa:	0d04      	.short	0x0d04
    d4fc:	0d1c1708 	.word	0x0d1c1708
    d500:	04          	.byte	0x04
    d501:	00          	.byte	0x00
    d502:	f04f 0b00 	mov.w	fp, #0
    d506:	46da      	mov	sl, fp
    d508:	e017      	b.n	d53a <_strtod_r+0xf2>
    d50a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    d50e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    d512:	e012      	b.n	d53a <_strtod_r+0xf2>
    d514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d516:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    d51a:	f202 4233 	addw	r2, r2, #1075	; 0x433
    d51e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    d522:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
    d526:	e008      	b.n	d53a <_strtod_r+0xf2>
    d528:	f8df b210 	ldr.w	fp, [pc, #528]	; d73c <_strtod_r+0x2f4>
    d52c:	f04f 0a00 	mov.w	sl, #0
    d530:	e003      	b.n	d53a <_strtod_r+0xf2>
    d532:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    d536:	f04f 3aff 	mov.w	sl, #4294967295
    d53a:	072b      	lsls	r3, r5, #28
    d53c:	f140 8578 	bpl.w	e030 <_strtod_r+0xbe8>
    d540:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
    d544:	f000 bd74 	b.w	e030 <_strtod_r+0xbe8>
    d548:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d54a:	1c5a      	adds	r2, r3, #1
    d54c:	9219      	str	r2, [sp, #100]	; 0x64
    d54e:	785b      	ldrb	r3, [r3, #1]
    d550:	2b30      	cmp	r3, #48	; 0x30
    d552:	d0f9      	beq.n	d548 <_strtod_r+0x100>
    d554:	2b00      	cmp	r3, #0
    d556:	f000 856b 	beq.w	e030 <_strtod_r+0xbe8>
    d55a:	2301      	movs	r3, #1
    d55c:	9305      	str	r3, [sp, #20]
    d55e:	e001      	b.n	d564 <_strtod_r+0x11c>
    d560:	2600      	movs	r6, #0
    d562:	9605      	str	r6, [sp, #20]
    d564:	f04f 0800 	mov.w	r8, #0
    d568:	9f19      	ldr	r7, [sp, #100]	; 0x64
    d56a:	9707      	str	r7, [sp, #28]
    d56c:	f8cd 800c 	str.w	r8, [sp, #12]
    d570:	4644      	mov	r4, r8
    d572:	9e19      	ldr	r6, [sp, #100]	; 0x64
    d574:	7835      	ldrb	r5, [r6, #0]
    d576:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    d57a:	b2da      	uxtb	r2, r3
    d57c:	2a09      	cmp	r2, #9
    d57e:	d810      	bhi.n	d5a2 <_strtod_r+0x15a>
    d580:	2c08      	cmp	r4, #8
    d582:	bfd8      	it	le
    d584:	9f03      	ldrle	r7, [sp, #12]
    d586:	f04f 020a 	mov.w	r2, #10
    d58a:	bfd8      	it	le
    d58c:	fb02 3707 	mlale	r7, r2, r7, r3
    d590:	f106 0601 	add.w	r6, r6, #1
    d594:	bfd4      	ite	le
    d596:	9703      	strle	r7, [sp, #12]
    d598:	fb02 3808 	mlagt	r8, r2, r8, r3
    d59c:	3401      	adds	r4, #1
    d59e:	9619      	str	r6, [sp, #100]	; 0x64
    d5a0:	e7e7      	b.n	d572 <_strtod_r+0x12a>
    d5a2:	4648      	mov	r0, r9
    d5a4:	f7fe fdd2 	bl	c14c <_localeconv_r>
    d5a8:	6807      	ldr	r7, [r0, #0]
    d5aa:	4648      	mov	r0, r9
    d5ac:	f7fe fdce 	bl	c14c <_localeconv_r>
    d5b0:	6800      	ldr	r0, [r0, #0]
    d5b2:	f7fb f830 	bl	8616 <strlen>
    d5b6:	4639      	mov	r1, r7
    d5b8:	4602      	mov	r2, r0
    d5ba:	4630      	mov	r0, r6
    d5bc:	f002 fdd2 	bl	10164 <strncmp>
    d5c0:	4606      	mov	r6, r0
    d5c2:	b128      	cbz	r0, d5d0 <_strtod_r+0x188>
    d5c4:	2300      	movs	r3, #0
    d5c6:	462a      	mov	r2, r5
    d5c8:	4619      	mov	r1, r3
    d5ca:	4625      	mov	r5, r4
    d5cc:	930a      	str	r3, [sp, #40]	; 0x28
    d5ce:	e05f      	b.n	d690 <_strtod_r+0x248>
    d5d0:	4648      	mov	r0, r9
    d5d2:	9d19      	ldr	r5, [sp, #100]	; 0x64
    d5d4:	f7fe fdba 	bl	c14c <_localeconv_r>
    d5d8:	6800      	ldr	r0, [r0, #0]
    d5da:	f7fb f81c 	bl	8616 <strlen>
    d5de:	182b      	adds	r3, r5, r0
    d5e0:	9319      	str	r3, [sp, #100]	; 0x64
    d5e2:	5c2a      	ldrb	r2, [r5, r0]
    d5e4:	2c00      	cmp	r4, #0
    d5e6:	d145      	bne.n	d674 <_strtod_r+0x22c>
    d5e8:	4623      	mov	r3, r4
    d5ea:	2a30      	cmp	r2, #48	; 0x30
    d5ec:	d105      	bne.n	d5fa <_strtod_r+0x1b2>
    d5ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d5f0:	1c51      	adds	r1, r2, #1
    d5f2:	9119      	str	r1, [sp, #100]	; 0x64
    d5f4:	3301      	adds	r3, #1
    d5f6:	7852      	ldrb	r2, [r2, #1]
    d5f8:	e7f7      	b.n	d5ea <_strtod_r+0x1a2>
    d5fa:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    d5fe:	2908      	cmp	r1, #8
    d600:	d842      	bhi.n	d688 <_strtod_r+0x240>
    d602:	9e19      	ldr	r6, [sp, #100]	; 0x64
    d604:	9607      	str	r6, [sp, #28]
    d606:	4619      	mov	r1, r3
    d608:	2300      	movs	r3, #0
    d60a:	461d      	mov	r5, r3
    d60c:	3a30      	subs	r2, #48	; 0x30
    d60e:	f103 0001 	add.w	r0, r3, #1
    d612:	d029      	beq.n	d668 <_strtod_r+0x220>
    d614:	4401      	add	r1, r0
    d616:	1c6e      	adds	r6, r5, #1
    d618:	1b77      	subs	r7, r6, r5
    d61a:	4287      	cmp	r7, r0
    d61c:	da10      	bge.n	d640 <_strtod_r+0x1f8>
    d61e:	1e77      	subs	r7, r6, #1
    d620:	2f08      	cmp	r7, #8
    d622:	dc06      	bgt.n	d632 <_strtod_r+0x1ea>
    d624:	9f03      	ldr	r7, [sp, #12]
    d626:	f04f 0c0a 	mov.w	ip, #10
    d62a:	fb0c f707 	mul.w	r7, ip, r7
    d62e:	9703      	str	r7, [sp, #12]
    d630:	e004      	b.n	d63c <_strtod_r+0x1f4>
    d632:	2e10      	cmp	r6, #16
    d634:	bfdc      	itt	le
    d636:	270a      	movle	r7, #10
    d638:	fb07 f808 	mulle.w	r8, r7, r8
    d63c:	3601      	adds	r6, #1
    d63e:	e7eb      	b.n	d618 <_strtod_r+0x1d0>
    d640:	2b00      	cmp	r3, #0
    d642:	bfac      	ite	ge
    d644:	18eb      	addge	r3, r5, r3
    d646:	1c2b      	addlt	r3, r5, #0
    d648:	2b08      	cmp	r3, #8
    d64a:	f103 0501 	add.w	r5, r3, #1
    d64e:	dc05      	bgt.n	d65c <_strtod_r+0x214>
    d650:	9e03      	ldr	r6, [sp, #12]
    d652:	230a      	movs	r3, #10
    d654:	fb03 2606 	mla	r6, r3, r6, r2
    d658:	9603      	str	r6, [sp, #12]
    d65a:	e004      	b.n	d666 <_strtod_r+0x21e>
    d65c:	2d10      	cmp	r5, #16
    d65e:	bfdc      	itt	le
    d660:	230a      	movle	r3, #10
    d662:	fb03 2808 	mlale	r8, r3, r8, r2
    d666:	2000      	movs	r0, #0
    d668:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d66a:	1c5a      	adds	r2, r3, #1
    d66c:	9219      	str	r2, [sp, #100]	; 0x64
    d66e:	785a      	ldrb	r2, [r3, #1]
    d670:	4603      	mov	r3, r0
    d672:	e002      	b.n	d67a <_strtod_r+0x232>
    d674:	4625      	mov	r5, r4
    d676:	4633      	mov	r3, r6
    d678:	4631      	mov	r1, r6
    d67a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    d67e:	2809      	cmp	r0, #9
    d680:	d9c4      	bls.n	d60c <_strtod_r+0x1c4>
    d682:	2701      	movs	r7, #1
    d684:	970a      	str	r7, [sp, #40]	; 0x28
    d686:	e003      	b.n	d690 <_strtod_r+0x248>
    d688:	2500      	movs	r5, #0
    d68a:	2001      	movs	r0, #1
    d68c:	4629      	mov	r1, r5
    d68e:	900a      	str	r0, [sp, #40]	; 0x28
    d690:	f022 0620 	bic.w	r6, r2, #32
    d694:	2e45      	cmp	r6, #69	; 0x45
    d696:	d155      	bne.n	d744 <_strtod_r+0x2fc>
    d698:	b925      	cbnz	r5, d6a4 <_strtod_r+0x25c>
    d69a:	b91b      	cbnz	r3, d6a4 <_strtod_r+0x25c>
    d69c:	9e05      	ldr	r6, [sp, #20]
    d69e:	2e00      	cmp	r6, #0
    d6a0:	f000 809b 	beq.w	d7da <_strtod_r+0x392>
    d6a4:	9f19      	ldr	r7, [sp, #100]	; 0x64
    d6a6:	9704      	str	r7, [sp, #16]
    d6a8:	1c7a      	adds	r2, r7, #1
    d6aa:	9219      	str	r2, [sp, #100]	; 0x64
    d6ac:	787a      	ldrb	r2, [r7, #1]
    d6ae:	2a2b      	cmp	r2, #43	; 0x2b
    d6b0:	d004      	beq.n	d6bc <_strtod_r+0x274>
    d6b2:	2a2d      	cmp	r2, #45	; 0x2d
    d6b4:	d005      	beq.n	d6c2 <_strtod_r+0x27a>
    d6b6:	2600      	movs	r6, #0
    d6b8:	960f      	str	r6, [sp, #60]	; 0x3c
    d6ba:	e008      	b.n	d6ce <_strtod_r+0x286>
    d6bc:	2000      	movs	r0, #0
    d6be:	900f      	str	r0, [sp, #60]	; 0x3c
    d6c0:	e001      	b.n	d6c6 <_strtod_r+0x27e>
    d6c2:	2701      	movs	r7, #1
    d6c4:	970f      	str	r7, [sp, #60]	; 0x3c
    d6c6:	9e04      	ldr	r6, [sp, #16]
    d6c8:	1cb2      	adds	r2, r6, #2
    d6ca:	9219      	str	r2, [sp, #100]	; 0x64
    d6cc:	78b2      	ldrb	r2, [r6, #2]
    d6ce:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    d6d2:	2f09      	cmp	r7, #9
    d6d4:	d834      	bhi.n	d740 <_strtod_r+0x2f8>
    d6d6:	2a30      	cmp	r2, #48	; 0x30
    d6d8:	d104      	bne.n	d6e4 <_strtod_r+0x29c>
    d6da:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d6dc:	1c57      	adds	r7, r2, #1
    d6de:	9719      	str	r7, [sp, #100]	; 0x64
    d6e0:	7852      	ldrb	r2, [r2, #1]
    d6e2:	e7f8      	b.n	d6d6 <_strtod_r+0x28e>
    d6e4:	f1a2 0731 	sub.w	r7, r2, #49	; 0x31
    d6e8:	2f08      	cmp	r7, #8
    d6ea:	d82b      	bhi.n	d744 <_strtod_r+0x2fc>
    d6ec:	9819      	ldr	r0, [sp, #100]	; 0x64
    d6ee:	9006      	str	r0, [sp, #24]
    d6f0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    d6f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d6f6:	1c56      	adds	r6, r2, #1
    d6f8:	9619      	str	r6, [sp, #100]	; 0x64
    d6fa:	7852      	ldrb	r2, [r2, #1]
    d6fc:	960e      	str	r6, [sp, #56]	; 0x38
    d6fe:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    d702:	b2c6      	uxtb	r6, r0
    d704:	2e09      	cmp	r6, #9
    d706:	d805      	bhi.n	d714 <_strtod_r+0x2cc>
    d708:	f04f 0c0a 	mov.w	ip, #10
    d70c:	fb0c 2707 	mla	r7, ip, r7, r2
    d710:	3f30      	subs	r7, #48	; 0x30
    d712:	e7ef      	b.n	d6f4 <_strtod_r+0x2ac>
    d714:	980e      	ldr	r0, [sp, #56]	; 0x38
    d716:	9e06      	ldr	r6, [sp, #24]
    d718:	ebc6 0c00 	rsb	ip, r6, r0
    d71c:	f1bc 0f08 	cmp.w	ip, #8
    d720:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
    d724:	dc02      	bgt.n	d72c <_strtod_r+0x2e4>
    d726:	4567      	cmp	r7, ip
    d728:	bfb8      	it	lt
    d72a:	46bc      	movlt	ip, r7
    d72c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    d72e:	b15f      	cbz	r7, d748 <_strtod_r+0x300>
    d730:	f1cc 0c00 	rsb	ip, ip, #0
    d734:	e008      	b.n	d748 <_strtod_r+0x300>
    d736:	bf00      	nop
    d738:	00010c78 	.word	0x00010c78
    d73c:	7ff00000 	.word	0x7ff00000
    d740:	9e04      	ldr	r6, [sp, #16]
    d742:	9619      	str	r6, [sp, #100]	; 0x64
    d744:	f04f 0c00 	mov.w	ip, #0
    d748:	2d00      	cmp	r5, #0
    d74a:	d14c      	bne.n	d7e6 <_strtod_r+0x39e>
    d74c:	2b00      	cmp	r3, #0
    d74e:	f040 846f 	bne.w	e030 <_strtod_r+0xbe8>
    d752:	9f05      	ldr	r7, [sp, #20]
    d754:	2f00      	cmp	r7, #0
    d756:	f040 846b 	bne.w	e030 <_strtod_r+0xbe8>
    d75a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d75c:	2800      	cmp	r0, #0
    d75e:	d13c      	bne.n	d7da <_strtod_r+0x392>
    d760:	2a4e      	cmp	r2, #78	; 0x4e
    d762:	d01b      	beq.n	d79c <_strtod_r+0x354>
    d764:	dc02      	bgt.n	d76c <_strtod_r+0x324>
    d766:	2a49      	cmp	r2, #73	; 0x49
    d768:	d005      	beq.n	d776 <_strtod_r+0x32e>
    d76a:	e036      	b.n	d7da <_strtod_r+0x392>
    d76c:	2a69      	cmp	r2, #105	; 0x69
    d76e:	d002      	beq.n	d776 <_strtod_r+0x32e>
    d770:	2a6e      	cmp	r2, #110	; 0x6e
    d772:	d013      	beq.n	d79c <_strtod_r+0x354>
    d774:	e031      	b.n	d7da <_strtod_r+0x392>
    d776:	a819      	add	r0, sp, #100	; 0x64
    d778:	49ac      	ldr	r1, [pc, #688]	; (da2c <_strtod_r+0x5e4>)
    d77a:	f7ff fe31 	bl	d3e0 <match>
    d77e:	b360      	cbz	r0, d7da <_strtod_r+0x392>
    d780:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d782:	49ab      	ldr	r1, [pc, #684]	; (da30 <_strtod_r+0x5e8>)
    d784:	3b01      	subs	r3, #1
    d786:	a819      	add	r0, sp, #100	; 0x64
    d788:	9319      	str	r3, [sp, #100]	; 0x64
    d78a:	f7ff fe29 	bl	d3e0 <match>
    d78e:	b910      	cbnz	r0, d796 <_strtod_r+0x34e>
    d790:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d792:	3301      	adds	r3, #1
    d794:	9319      	str	r3, [sp, #100]	; 0x64
    d796:	f8df b2b4 	ldr.w	fp, [pc, #692]	; da4c <_strtod_r+0x604>
    d79a:	e01a      	b.n	d7d2 <_strtod_r+0x38a>
    d79c:	a819      	add	r0, sp, #100	; 0x64
    d79e:	49a5      	ldr	r1, [pc, #660]	; (da34 <_strtod_r+0x5ec>)
    d7a0:	f7ff fe1e 	bl	d3e0 <match>
    d7a4:	b1c8      	cbz	r0, d7da <_strtod_r+0x392>
    d7a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d7a8:	781b      	ldrb	r3, [r3, #0]
    d7aa:	2b28      	cmp	r3, #40	; 0x28
    d7ac:	d10f      	bne.n	d7ce <_strtod_r+0x386>
    d7ae:	a819      	add	r0, sp, #100	; 0x64
    d7b0:	49a1      	ldr	r1, [pc, #644]	; (da38 <_strtod_r+0x5f0>)
    d7b2:	aa1c      	add	r2, sp, #112	; 0x70
    d7b4:	f002 fc35 	bl	10022 <__hexnan>
    d7b8:	2805      	cmp	r0, #5
    d7ba:	d108      	bne.n	d7ce <_strtod_r+0x386>
    d7bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d7be:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    d7c2:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
    d7c6:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
    d7ca:	f000 bc31 	b.w	e030 <_strtod_r+0xbe8>
    d7ce:	f8df b280 	ldr.w	fp, [pc, #640]	; da50 <_strtod_r+0x608>
    d7d2:	f04f 0a00 	mov.w	sl, #0
    d7d6:	f000 bc2b 	b.w	e030 <_strtod_r+0xbe8>
    d7da:	9b04      	ldr	r3, [sp, #16]
    d7dc:	9319      	str	r3, [sp, #100]	; 0x64
    d7de:	2600      	movs	r6, #0
    d7e0:	9609      	str	r6, [sp, #36]	; 0x24
    d7e2:	f000 bc25 	b.w	e030 <_strtod_r+0xbe8>
    d7e6:	ebc1 010c 	rsb	r1, r1, ip
    d7ea:	9803      	ldr	r0, [sp, #12]
    d7ec:	9106      	str	r1, [sp, #24]
    d7ee:	2d10      	cmp	r5, #16
    d7f0:	bfb4      	ite	lt
    d7f2:	46ac      	movlt	ip, r5
    d7f4:	f04f 0c10 	movge.w	ip, #16
    d7f8:	f8cd c008 	str.w	ip, [sp, #8]
    d7fc:	f7f9 fd62 	bl	72c4 <__aeabi_ui2d>
    d800:	f8dd c008 	ldr.w	ip, [sp, #8]
    d804:	2c00      	cmp	r4, #0
    d806:	bf08      	it	eq
    d808:	462c      	moveq	r4, r5
    d80a:	f1bc 0f09 	cmp.w	ip, #9
    d80e:	4682      	mov	sl, r0
    d810:	468b      	mov	fp, r1
    d812:	dd15      	ble.n	d840 <_strtod_r+0x3f8>
    d814:	4b89      	ldr	r3, [pc, #548]	; (da3c <_strtod_r+0x5f4>)
    d816:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    d81a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    d81e:	f7f9 fdc7 	bl	73b0 <__aeabi_dmul>
    d822:	4606      	mov	r6, r0
    d824:	4640      	mov	r0, r8
    d826:	460f      	mov	r7, r1
    d828:	f7f9 fd4c 	bl	72c4 <__aeabi_ui2d>
    d82c:	4602      	mov	r2, r0
    d82e:	460b      	mov	r3, r1
    d830:	4630      	mov	r0, r6
    d832:	4639      	mov	r1, r7
    d834:	f7f9 fc0a 	bl	704c <__adddf3>
    d838:	f8dd c008 	ldr.w	ip, [sp, #8]
    d83c:	4682      	mov	sl, r0
    d83e:	468b      	mov	fp, r1
    d840:	2d0f      	cmp	r5, #15
    d842:	dc37      	bgt.n	d8b4 <_strtod_r+0x46c>
    d844:	9f06      	ldr	r7, [sp, #24]
    d846:	2f00      	cmp	r7, #0
    d848:	f000 83f2 	beq.w	e030 <_strtod_r+0xbe8>
    d84c:	dd23      	ble.n	d896 <_strtod_r+0x44e>
    d84e:	2f16      	cmp	r7, #22
    d850:	dc07      	bgt.n	d862 <_strtod_r+0x41a>
    d852:	497a      	ldr	r1, [pc, #488]	; (da3c <_strtod_r+0x5f4>)
    d854:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
    d858:	e9d1 0100 	ldrd	r0, r1, [r1]
    d85c:	4652      	mov	r2, sl
    d85e:	465b      	mov	r3, fp
    d860:	e014      	b.n	d88c <_strtod_r+0x444>
    d862:	9e06      	ldr	r6, [sp, #24]
    d864:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    d868:	429e      	cmp	r6, r3
    d86a:	dc23      	bgt.n	d8b4 <_strtod_r+0x46c>
    d86c:	4c73      	ldr	r4, [pc, #460]	; (da3c <_strtod_r+0x5f4>)
    d86e:	f1c5 050f 	rsb	r5, r5, #15
    d872:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    d876:	1b75      	subs	r5, r6, r5
    d878:	e9d3 0100 	ldrd	r0, r1, [r3]
    d87c:	4652      	mov	r2, sl
    d87e:	465b      	mov	r3, fp
    d880:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    d884:	f7f9 fd94 	bl	73b0 <__aeabi_dmul>
    d888:	e9d4 2300 	ldrd	r2, r3, [r4]
    d88c:	f7f9 fd90 	bl	73b0 <__aeabi_dmul>
    d890:	4682      	mov	sl, r0
    d892:	468b      	mov	fp, r1
    d894:	e3cc      	b.n	e030 <_strtod_r+0xbe8>
    d896:	9f06      	ldr	r7, [sp, #24]
    d898:	3716      	adds	r7, #22
    d89a:	db0b      	blt.n	d8b4 <_strtod_r+0x46c>
    d89c:	f8dd c018 	ldr.w	ip, [sp, #24]
    d8a0:	4f66      	ldr	r7, [pc, #408]	; (da3c <_strtod_r+0x5f4>)
    d8a2:	eba7 07cc 	sub.w	r7, r7, ip, lsl #3
    d8a6:	4650      	mov	r0, sl
    d8a8:	4659      	mov	r1, fp
    d8aa:	e9d7 2300 	ldrd	r2, r3, [r7]
    d8ae:	f7f9 fea9 	bl	7604 <__aeabi_ddiv>
    d8b2:	e7ed      	b.n	d890 <_strtod_r+0x448>
    d8b4:	9e06      	ldr	r6, [sp, #24]
    d8b6:	ebcc 0805 	rsb	r8, ip, r5
    d8ba:	44b0      	add	r8, r6
    d8bc:	f1b8 0f00 	cmp.w	r8, #0
    d8c0:	dd61      	ble.n	d986 <_strtod_r+0x53e>
    d8c2:	f018 030f 	ands.w	r3, r8, #15
    d8c6:	d00a      	beq.n	d8de <_strtod_r+0x496>
    d8c8:	4a5c      	ldr	r2, [pc, #368]	; (da3c <_strtod_r+0x5f4>)
    d8ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d8ce:	e9d3 0100 	ldrd	r0, r1, [r3]
    d8d2:	4652      	mov	r2, sl
    d8d4:	465b      	mov	r3, fp
    d8d6:	f7f9 fd6b 	bl	73b0 <__aeabi_dmul>
    d8da:	4682      	mov	sl, r0
    d8dc:	468b      	mov	fp, r1
    d8de:	f038 080f 	bics.w	r8, r8, #15
    d8e2:	f000 80c8 	beq.w	da76 <_strtod_r+0x62e>
    d8e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
    d8ea:	dd13      	ble.n	d914 <_strtod_r+0x4cc>
    d8ec:	f04f 0800 	mov.w	r8, #0
    d8f0:	f8cd 800c 	str.w	r8, [sp, #12]
    d8f4:	f8cd 801c 	str.w	r8, [sp, #28]
    d8f8:	f8cd 8014 	str.w	r8, [sp, #20]
    d8fc:	9f07      	ldr	r7, [sp, #28]
    d8fe:	f8df b14c 	ldr.w	fp, [pc, #332]	; da4c <_strtod_r+0x604>
    d902:	2322      	movs	r3, #34	; 0x22
    d904:	f8c9 3000 	str.w	r3, [r9]
    d908:	f04f 0a00 	mov.w	sl, #0
    d90c:	2f00      	cmp	r7, #0
    d90e:	f040 837b 	bne.w	e008 <_strtod_r+0xbc0>
    d912:	e38d      	b.n	e030 <_strtod_r+0xbe8>
    d914:	ea4f 1828 	mov.w	r8, r8, asr #4
    d918:	4650      	mov	r0, sl
    d91a:	4659      	mov	r1, fp
    d91c:	2600      	movs	r6, #0
    d91e:	f1b8 0f01 	cmp.w	r8, #1
    d922:	dd0d      	ble.n	d940 <_strtod_r+0x4f8>
    d924:	f018 0f01 	tst.w	r8, #1
    d928:	d006      	beq.n	d938 <_strtod_r+0x4f0>
    d92a:	4b45      	ldr	r3, [pc, #276]	; (da40 <_strtod_r+0x5f8>)
    d92c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    d930:	e9d3 2300 	ldrd	r2, r3, [r3]
    d934:	f7f9 fd3c 	bl	73b0 <__aeabi_dmul>
    d938:	3601      	adds	r6, #1
    d93a:	ea4f 0868 	mov.w	r8, r8, asr #1
    d93e:	e7ee      	b.n	d91e <_strtod_r+0x4d6>
    d940:	4b3f      	ldr	r3, [pc, #252]	; (da40 <_strtod_r+0x5f8>)
    d942:	4682      	mov	sl, r0
    d944:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
    d948:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    d94c:	4652      	mov	r2, sl
    d94e:	465b      	mov	r3, fp
    d950:	e9d6 0100 	ldrd	r0, r1, [r6]
    d954:	f7f9 fd2c 	bl	73b0 <__aeabi_dmul>
    d958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    d95c:	468b      	mov	fp, r1
    d95e:	0d1b      	lsrs	r3, r3, #20
    d960:	4938      	ldr	r1, [pc, #224]	; (da44 <_strtod_r+0x5fc>)
    d962:	051b      	lsls	r3, r3, #20
    d964:	428b      	cmp	r3, r1
    d966:	4682      	mov	sl, r0
    d968:	d8c0      	bhi.n	d8ec <_strtod_r+0x4a4>
    d96a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    d96e:	428b      	cmp	r3, r1
    d970:	d906      	bls.n	d980 <_strtod_r+0x538>
    d972:	2600      	movs	r6, #0
    d974:	f8df b0dc 	ldr.w	fp, [pc, #220]	; da54 <_strtod_r+0x60c>
    d978:	9604      	str	r6, [sp, #16]
    d97a:	f04f 3aff 	mov.w	sl, #4294967295
    d97e:	e07c      	b.n	da7a <_strtod_r+0x632>
    d980:	f10b 7b54 	add.w	fp, fp, #55574528	; 0x3500000
    d984:	e077      	b.n	da76 <_strtod_r+0x62e>
    d986:	d076      	beq.n	da76 <_strtod_r+0x62e>
    d988:	f1c8 0800 	rsb	r8, r8, #0
    d98c:	f018 030f 	ands.w	r3, r8, #15
    d990:	d00a      	beq.n	d9a8 <_strtod_r+0x560>
    d992:	4a2a      	ldr	r2, [pc, #168]	; (da3c <_strtod_r+0x5f4>)
    d994:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d998:	4650      	mov	r0, sl
    d99a:	4659      	mov	r1, fp
    d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9a0:	f7f9 fe30 	bl	7604 <__aeabi_ddiv>
    d9a4:	4682      	mov	sl, r0
    d9a6:	468b      	mov	fp, r1
    d9a8:	ea5f 1828 	movs.w	r8, r8, asr #4
    d9ac:	d063      	beq.n	da76 <_strtod_r+0x62e>
    d9ae:	f1b8 0f1f 	cmp.w	r8, #31
    d9b2:	dd08      	ble.n	d9c6 <_strtod_r+0x57e>
    d9b4:	f04f 0800 	mov.w	r8, #0
    d9b8:	f8cd 800c 	str.w	r8, [sp, #12]
    d9bc:	f8cd 801c 	str.w	r8, [sp, #28]
    d9c0:	f8cd 8014 	str.w	r8, [sp, #20]
    d9c4:	e11e      	b.n	dc04 <_strtod_r+0x7bc>
    d9c6:	f018 0f10 	tst.w	r8, #16
    d9ca:	bf14      	ite	ne
    d9cc:	266a      	movne	r6, #106	; 0x6a
    d9ce:	2600      	moveq	r6, #0
    d9d0:	9604      	str	r6, [sp, #16]
    d9d2:	4e1d      	ldr	r6, [pc, #116]	; (da48 <_strtod_r+0x600>)
    d9d4:	4650      	mov	r0, sl
    d9d6:	4659      	mov	r1, fp
    d9d8:	f1b8 0f00 	cmp.w	r8, #0
    d9dc:	dd0a      	ble.n	d9f4 <_strtod_r+0x5ac>
    d9de:	f018 0f01 	tst.w	r8, #1
    d9e2:	d003      	beq.n	d9ec <_strtod_r+0x5a4>
    d9e4:	e9d6 2300 	ldrd	r2, r3, [r6]
    d9e8:	f7f9 fce2 	bl	73b0 <__aeabi_dmul>
    d9ec:	ea4f 0868 	mov.w	r8, r8, asr #1
    d9f0:	3608      	adds	r6, #8
    d9f2:	e7f1      	b.n	d9d8 <_strtod_r+0x590>
    d9f4:	9f04      	ldr	r7, [sp, #16]
    d9f6:	4682      	mov	sl, r0
    d9f8:	468b      	mov	fp, r1
    d9fa:	b39f      	cbz	r7, da64 <_strtod_r+0x61c>
    d9fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
    da00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    da04:	2b00      	cmp	r3, #0
    da06:	dd2d      	ble.n	da64 <_strtod_r+0x61c>
    da08:	2b1f      	cmp	r3, #31
    da0a:	dd25      	ble.n	da58 <_strtod_r+0x610>
    da0c:	2b34      	cmp	r3, #52	; 0x34
    da0e:	f04f 0a00 	mov.w	sl, #0
    da12:	dd02      	ble.n	da1a <_strtod_r+0x5d2>
    da14:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
    da18:	e024      	b.n	da64 <_strtod_r+0x61c>
    da1a:	3b20      	subs	r3, #32
    da1c:	f04f 31ff 	mov.w	r1, #4294967295
    da20:	fa01 f303 	lsl.w	r3, r1, r3
    da24:	ea03 0b0b 	and.w	fp, r3, fp
    da28:	e01c      	b.n	da64 <_strtod_r+0x61c>
    da2a:	bf00      	nop
    da2c:	00010ac3 	.word	0x00010ac3
    da30:	00010b3c 	.word	0x00010b3c
    da34:	00010acb 	.word	0x00010acb
    da38:	00010c8c 	.word	0x00010c8c
    da3c:	00010b60 	.word	0x00010b60
    da40:	00010c50 	.word	0x00010c50
    da44:	7ca00000 	.word	0x7ca00000
    da48:	00010ca0 	.word	0x00010ca0
    da4c:	7ff00000 	.word	0x7ff00000
    da50:	fff80000 	.word	0xfff80000
    da54:	7fefffff 	.word	0x7fefffff
    da58:	f04f 32ff 	mov.w	r2, #4294967295
    da5c:	fa02 f303 	lsl.w	r3, r2, r3
    da60:	ea03 0a00 	and.w	sl, r3, r0
    da64:	4650      	mov	r0, sl
    da66:	4659      	mov	r1, fp
    da68:	2200      	movs	r2, #0
    da6a:	2300      	movs	r3, #0
    da6c:	f002 fbe8 	bl	10240 <__aeabi_dcmpeq>
    da70:	2800      	cmp	r0, #0
    da72:	d19f      	bne.n	d9b4 <_strtod_r+0x56c>
    da74:	e001      	b.n	da7a <_strtod_r+0x632>
    da76:	2700      	movs	r7, #0
    da78:	9704      	str	r7, [sp, #16]
    da7a:	9e03      	ldr	r6, [sp, #12]
    da7c:	9600      	str	r6, [sp, #0]
    da7e:	4648      	mov	r0, r9
    da80:	9907      	ldr	r1, [sp, #28]
    da82:	4622      	mov	r2, r4
    da84:	462b      	mov	r3, r5
    da86:	f7fe ff06 	bl	c896 <__s2b>
    da8a:	9007      	str	r0, [sp, #28]
    da8c:	2800      	cmp	r0, #0
    da8e:	f43f af2d 	beq.w	d8ec <_strtod_r+0x4a4>
    da92:	9f06      	ldr	r7, [sp, #24]
    da94:	427b      	negs	r3, r7
    da96:	2f00      	cmp	r7, #0
    da98:	bfa8      	it	ge
    da9a:	2300      	movge	r3, #0
    da9c:	f04f 0800 	mov.w	r8, #0
    daa0:	930e      	str	r3, [sp, #56]	; 0x38
    daa2:	f8cd 800c 	str.w	r8, [sp, #12]
    daa6:	9e07      	ldr	r6, [sp, #28]
    daa8:	4648      	mov	r0, r9
    daaa:	6871      	ldr	r1, [r6, #4]
    daac:	f7fe fe8a 	bl	c7c4 <_Balloc>
    dab0:	9005      	str	r0, [sp, #20]
    dab2:	2800      	cmp	r0, #0
    dab4:	f43f af22 	beq.w	d8fc <_strtod_r+0x4b4>
    dab8:	6932      	ldr	r2, [r6, #16]
    daba:	3202      	adds	r2, #2
    dabc:	f106 010c 	add.w	r1, r6, #12
    dac0:	0092      	lsls	r2, r2, #2
    dac2:	300c      	adds	r0, #12
    dac4:	f7fe fe57 	bl	c776 <memcpy>
    dac8:	ab1b      	add	r3, sp, #108	; 0x6c
    daca:	9300      	str	r3, [sp, #0]
    dacc:	ab1c      	add	r3, sp, #112	; 0x70
    dace:	9301      	str	r3, [sp, #4]
    dad0:	4648      	mov	r0, r9
    dad2:	4652      	mov	r2, sl
    dad4:	465b      	mov	r3, fp
    dad6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
    dada:	f7ff f98e 	bl	cdfa <__d2b>
    dade:	901a      	str	r0, [sp, #104]	; 0x68
    dae0:	2800      	cmp	r0, #0
    dae2:	f43f af0b 	beq.w	d8fc <_strtod_r+0x4b4>
    dae6:	4648      	mov	r0, r9
    dae8:	2101      	movs	r1, #1
    daea:	f7fe ff63 	bl	c9b4 <__i2b>
    daee:	9003      	str	r0, [sp, #12]
    daf0:	2800      	cmp	r0, #0
    daf2:	f43f af03 	beq.w	d8fc <_strtod_r+0x4b4>
    daf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    daf8:	f8dd c018 	ldr.w	ip, [sp, #24]
    dafc:	2b00      	cmp	r3, #0
    dafe:	ea2c 77ec 	bic.w	r7, ip, ip, asr #31
    db02:	f2c0 808b 	blt.w	dc1c <_strtod_r+0x7d4>
    db06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    db08:	463a      	mov	r2, r7
    db0a:	441c      	add	r4, r3
    db0c:	9e04      	ldr	r6, [sp, #16]
    db0e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    db10:	1b9b      	subs	r3, r3, r6
    db12:	1959      	adds	r1, r3, r5
    db14:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
    db18:	4299      	cmp	r1, r3
    db1a:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    db1e:	f280 8087 	bge.w	dc30 <_strtod_r+0x7e8>
    db22:	1a5b      	subs	r3, r3, r1
    db24:	2b1f      	cmp	r3, #31
    db26:	ebc3 0505 	rsb	r5, r3, r5
    db2a:	f04f 0001 	mov.w	r0, #1
    db2e:	dc78      	bgt.n	dc22 <_strtod_r+0x7da>
    db30:	4098      	lsls	r0, r3
    db32:	2300      	movs	r3, #0
    db34:	9014      	str	r0, [sp, #80]	; 0x50
    db36:	930f      	str	r3, [sp, #60]	; 0x3c
    db38:	9804      	ldr	r0, [sp, #16]
    db3a:	1966      	adds	r6, r4, r5
    db3c:	4415      	add	r5, r2
    db3e:	42a6      	cmp	r6, r4
    db40:	bfb4      	ite	lt
    db42:	4633      	movlt	r3, r6
    db44:	4623      	movge	r3, r4
    db46:	4405      	add	r5, r0
    db48:	42ab      	cmp	r3, r5
    db4a:	bfa8      	it	ge
    db4c:	462b      	movge	r3, r5
    db4e:	2b00      	cmp	r3, #0
    db50:	dd02      	ble.n	db58 <_strtod_r+0x710>
    db52:	1af6      	subs	r6, r6, r3
    db54:	1aed      	subs	r5, r5, r3
    db56:	1ae4      	subs	r4, r4, r3
    db58:	990e      	ldr	r1, [sp, #56]	; 0x38
    db5a:	2900      	cmp	r1, #0
    db5c:	d16f      	bne.n	dc3e <_strtod_r+0x7f6>
    db5e:	2e00      	cmp	r6, #0
    db60:	f300 8087 	bgt.w	dc72 <_strtod_r+0x82a>
    db64:	2f00      	cmp	r7, #0
    db66:	f040 808e 	bne.w	dc86 <_strtod_r+0x83e>
    db6a:	2d00      	cmp	r5, #0
    db6c:	f300 8095 	bgt.w	dc9a <_strtod_r+0x852>
    db70:	2c00      	cmp	r4, #0
    db72:	f300 809c 	bgt.w	dcae <_strtod_r+0x866>
    db76:	4648      	mov	r0, r9
    db78:	991a      	ldr	r1, [sp, #104]	; 0x68
    db7a:	9a05      	ldr	r2, [sp, #20]
    db7c:	f7ff f86a 	bl	cc54 <__mdiff>
    db80:	4680      	mov	r8, r0
    db82:	2800      	cmp	r0, #0
    db84:	f43f aeba 	beq.w	d8fc <_strtod_r+0x4b4>
    db88:	2300      	movs	r3, #0
    db8a:	68c6      	ldr	r6, [r0, #12]
    db8c:	9903      	ldr	r1, [sp, #12]
    db8e:	60c3      	str	r3, [r0, #12]
    db90:	9608      	str	r6, [sp, #32]
    db92:	f7ff f842 	bl	cc1a <__mcmp>
    db96:	2800      	cmp	r0, #0
    db98:	f280 8098 	bge.w	dccc <_strtod_r+0x884>
    db9c:	2e00      	cmp	r6, #0
    db9e:	f040 8220 	bne.w	dfe2 <_strtod_r+0xb9a>
    dba2:	f1ba 0f00 	cmp.w	sl, #0
    dba6:	f040 821c 	bne.w	dfe2 <_strtod_r+0xb9a>
    dbaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
    dbae:	2b00      	cmp	r3, #0
    dbb0:	f040 8217 	bne.w	dfe2 <_strtod_r+0xb9a>
    dbb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    dbb8:	0d1b      	lsrs	r3, r3, #20
    dbba:	051b      	lsls	r3, r3, #20
    dbbc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    dbc0:	f240 820f 	bls.w	dfe2 <_strtod_r+0xb9a>
    dbc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
    dbc8:	2b00      	cmp	r3, #0
    dbca:	d07a      	beq.n	dcc2 <_strtod_r+0x87a>
    dbcc:	4641      	mov	r1, r8
    dbce:	2201      	movs	r2, #1
    dbd0:	4648      	mov	r0, r9
    dbd2:	f7fe ffcf 	bl	cb74 <__lshift>
    dbd6:	9903      	ldr	r1, [sp, #12]
    dbd8:	4680      	mov	r8, r0
    dbda:	f7ff f81e 	bl	cc1a <__mcmp>
    dbde:	2800      	cmp	r0, #0
    dbe0:	f340 81ff 	ble.w	dfe2 <_strtod_r+0xb9a>
    dbe4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    dbe8:	9f04      	ldr	r7, [sp, #16]
    dbea:	0d1b      	lsrs	r3, r3, #20
    dbec:	051b      	lsls	r3, r3, #20
    dbee:	2f00      	cmp	r7, #0
    dbf0:	f000 809c 	beq.w	dd2c <_strtod_r+0x8e4>
    dbf4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    dbf8:	f200 8098 	bhi.w	dd2c <_strtod_r+0x8e4>
    dbfc:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    dc00:	f200 81f1 	bhi.w	dfe6 <_strtod_r+0xb9e>
    dc04:	9e07      	ldr	r6, [sp, #28]
    dc06:	2322      	movs	r3, #34	; 0x22
    dc08:	f04f 0a00 	mov.w	sl, #0
    dc0c:	f04f 0b00 	mov.w	fp, #0
    dc10:	f8c9 3000 	str.w	r3, [r9]
    dc14:	2e00      	cmp	r6, #0
    dc16:	f040 81f7 	bne.w	e008 <_strtod_r+0xbc0>
    dc1a:	e209      	b.n	e030 <_strtod_r+0xbe8>
    dc1c:	1afa      	subs	r2, r7, r3
    dc1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    dc20:	e774      	b.n	db0c <_strtod_r+0x6c4>
    dc22:	4e84      	ldr	r6, [pc, #528]	; (de34 <_strtod_r+0x9ec>)
    dc24:	9014      	str	r0, [sp, #80]	; 0x50
    dc26:	1a76      	subs	r6, r6, r1
    dc28:	fa00 f606 	lsl.w	r6, r0, r6
    dc2c:	960f      	str	r6, [sp, #60]	; 0x3c
    dc2e:	e783      	b.n	db38 <_strtod_r+0x6f0>
    dc30:	2600      	movs	r6, #0
    dc32:	f04f 0c01 	mov.w	ip, #1
    dc36:	960f      	str	r6, [sp, #60]	; 0x3c
    dc38:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
    dc3c:	e77c      	b.n	db38 <_strtod_r+0x6f0>
    dc3e:	4648      	mov	r0, r9
    dc40:	9903      	ldr	r1, [sp, #12]
    dc42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dc44:	f7fe ff57 	bl	caf6 <__pow5mult>
    dc48:	9003      	str	r0, [sp, #12]
    dc4a:	2800      	cmp	r0, #0
    dc4c:	f43f ae56 	beq.w	d8fc <_strtod_r+0x4b4>
    dc50:	4648      	mov	r0, r9
    dc52:	9903      	ldr	r1, [sp, #12]
    dc54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dc56:	f7fe feb6 	bl	c9c6 <__multiply>
    dc5a:	4603      	mov	r3, r0
    dc5c:	2800      	cmp	r0, #0
    dc5e:	f43f ae4d 	beq.w	d8fc <_strtod_r+0x4b4>
    dc62:	4648      	mov	r0, r9
    dc64:	991a      	ldr	r1, [sp, #104]	; 0x68
    dc66:	9302      	str	r3, [sp, #8]
    dc68:	f7fe fdd2 	bl	c810 <_Bfree>
    dc6c:	9b02      	ldr	r3, [sp, #8]
    dc6e:	931a      	str	r3, [sp, #104]	; 0x68
    dc70:	e775      	b.n	db5e <_strtod_r+0x716>
    dc72:	4648      	mov	r0, r9
    dc74:	991a      	ldr	r1, [sp, #104]	; 0x68
    dc76:	4632      	mov	r2, r6
    dc78:	f7fe ff7c 	bl	cb74 <__lshift>
    dc7c:	901a      	str	r0, [sp, #104]	; 0x68
    dc7e:	2800      	cmp	r0, #0
    dc80:	f47f af70 	bne.w	db64 <_strtod_r+0x71c>
    dc84:	e63a      	b.n	d8fc <_strtod_r+0x4b4>
    dc86:	4648      	mov	r0, r9
    dc88:	9905      	ldr	r1, [sp, #20]
    dc8a:	463a      	mov	r2, r7
    dc8c:	f7fe ff33 	bl	caf6 <__pow5mult>
    dc90:	9005      	str	r0, [sp, #20]
    dc92:	2800      	cmp	r0, #0
    dc94:	f47f af69 	bne.w	db6a <_strtod_r+0x722>
    dc98:	e630      	b.n	d8fc <_strtod_r+0x4b4>
    dc9a:	4648      	mov	r0, r9
    dc9c:	9905      	ldr	r1, [sp, #20]
    dc9e:	462a      	mov	r2, r5
    dca0:	f7fe ff68 	bl	cb74 <__lshift>
    dca4:	9005      	str	r0, [sp, #20]
    dca6:	2800      	cmp	r0, #0
    dca8:	f47f af62 	bne.w	db70 <_strtod_r+0x728>
    dcac:	e626      	b.n	d8fc <_strtod_r+0x4b4>
    dcae:	4648      	mov	r0, r9
    dcb0:	9903      	ldr	r1, [sp, #12]
    dcb2:	4622      	mov	r2, r4
    dcb4:	f7fe ff5e 	bl	cb74 <__lshift>
    dcb8:	9003      	str	r0, [sp, #12]
    dcba:	2800      	cmp	r0, #0
    dcbc:	f47f af5b 	bne.w	db76 <_strtod_r+0x72e>
    dcc0:	e61c      	b.n	d8fc <_strtod_r+0x4b4>
    dcc2:	f8d8 3010 	ldr.w	r3, [r8, #16]
    dcc6:	2b01      	cmp	r3, #1
    dcc8:	dc80      	bgt.n	dbcc <_strtod_r+0x784>
    dcca:	e18a      	b.n	dfe2 <_strtod_r+0xb9a>
    dccc:	d163      	bne.n	dd96 <_strtod_r+0x94e>
    dcce:	9f08      	ldr	r7, [sp, #32]
    dcd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
    dcd4:	b32f      	cbz	r7, dd22 <_strtod_r+0x8da>
    dcd6:	4958      	ldr	r1, [pc, #352]	; (de38 <_strtod_r+0x9f0>)
    dcd8:	428b      	cmp	r3, r1
    dcda:	465a      	mov	r2, fp
    dcdc:	d12f      	bne.n	dd3e <_strtod_r+0x8f6>
    dcde:	9e04      	ldr	r6, [sp, #16]
    dce0:	4651      	mov	r1, sl
    dce2:	b16e      	cbz	r6, dd00 <_strtod_r+0x8b8>
    dce4:	4b55      	ldr	r3, [pc, #340]	; (de3c <_strtod_r+0x9f4>)
    dce6:	ea0b 0303 	and.w	r3, fp, r3
    dcea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    dcee:	d807      	bhi.n	dd00 <_strtod_r+0x8b8>
    dcf0:	0d1b      	lsrs	r3, r3, #20
    dcf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    dcf6:	f04f 30ff 	mov.w	r0, #4294967295
    dcfa:	fa00 f303 	lsl.w	r3, r0, r3
    dcfe:	e001      	b.n	dd04 <_strtod_r+0x8bc>
    dd00:	f04f 33ff 	mov.w	r3, #4294967295
    dd04:	4299      	cmp	r1, r3
    dd06:	d11a      	bne.n	dd3e <_strtod_r+0x8f6>
    dd08:	4b4d      	ldr	r3, [pc, #308]	; (de40 <_strtod_r+0x9f8>)
    dd0a:	429a      	cmp	r2, r3
    dd0c:	d102      	bne.n	dd14 <_strtod_r+0x8cc>
    dd0e:	3101      	adds	r1, #1
    dd10:	f43f adf4 	beq.w	d8fc <_strtod_r+0x4b4>
    dd14:	4b49      	ldr	r3, [pc, #292]	; (de3c <_strtod_r+0x9f4>)
    dd16:	4013      	ands	r3, r2
    dd18:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
    dd1c:	f04f 0a00 	mov.w	sl, #0
    dd20:	e15f      	b.n	dfe2 <_strtod_r+0xb9a>
    dd22:	b963      	cbnz	r3, dd3e <_strtod_r+0x8f6>
    dd24:	f1ba 0f00 	cmp.w	sl, #0
    dd28:	d109      	bne.n	dd3e <_strtod_r+0x8f6>
    dd2a:	e75b      	b.n	dbe4 <_strtod_r+0x79c>
    dd2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    dd30:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
    dd34:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
    dd38:	f04f 3aff 	mov.w	sl, #4294967295
    dd3c:	e151      	b.n	dfe2 <_strtod_r+0xb9a>
    dd3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dd40:	b113      	cbz	r3, dd48 <_strtod_r+0x900>
    dd42:	ea13 0f0b 	tst.w	r3, fp
    dd46:	e002      	b.n	dd4e <_strtod_r+0x906>
    dd48:	9e14      	ldr	r6, [sp, #80]	; 0x50
    dd4a:	ea16 0f0a 	tst.w	r6, sl
    dd4e:	f000 8148 	beq.w	dfe2 <_strtod_r+0xb9a>
    dd52:	9f08      	ldr	r7, [sp, #32]
    dd54:	9a04      	ldr	r2, [sp, #16]
    dd56:	4650      	mov	r0, sl
    dd58:	4659      	mov	r1, fp
    dd5a:	b157      	cbz	r7, dd72 <_strtod_r+0x92a>
    dd5c:	f7ff fb55 	bl	d40a <sulp>
    dd60:	4602      	mov	r2, r0
    dd62:	460b      	mov	r3, r1
    dd64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    dd68:	f7f9 f970 	bl	704c <__adddf3>
    dd6c:	4682      	mov	sl, r0
    dd6e:	468b      	mov	fp, r1
    dd70:	e137      	b.n	dfe2 <_strtod_r+0xb9a>
    dd72:	f7ff fb4a 	bl	d40a <sulp>
    dd76:	4602      	mov	r2, r0
    dd78:	460b      	mov	r3, r1
    dd7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    dd7e:	f7f9 f963 	bl	7048 <__aeabi_dsub>
    dd82:	2200      	movs	r2, #0
    dd84:	2300      	movs	r3, #0
    dd86:	4682      	mov	sl, r0
    dd88:	468b      	mov	fp, r1
    dd8a:	f002 fa59 	bl	10240 <__aeabi_dcmpeq>
    dd8e:	2800      	cmp	r0, #0
    dd90:	f47f af38 	bne.w	dc04 <_strtod_r+0x7bc>
    dd94:	e125      	b.n	dfe2 <_strtod_r+0xb9a>
    dd96:	4640      	mov	r0, r8
    dd98:	9903      	ldr	r1, [sp, #12]
    dd9a:	f7ff f880 	bl	ce9e <__ratio>
    dd9e:	2200      	movs	r2, #0
    dda0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dda4:	4604      	mov	r4, r0
    dda6:	460d      	mov	r5, r1
    dda8:	f002 fa5e 	bl	10268 <__aeabi_dcmple>
    ddac:	2800      	cmp	r0, #0
    ddae:	d032      	beq.n	de16 <_strtod_r+0x9ce>
    ddb0:	9e08      	ldr	r6, [sp, #32]
    ddb2:	b126      	cbz	r6, ddbe <_strtod_r+0x976>
    ddb4:	4f23      	ldr	r7, [pc, #140]	; (de44 <_strtod_r+0x9fc>)
    ddb6:	2600      	movs	r6, #0
    ddb8:	4634      	mov	r4, r6
    ddba:	463d      	mov	r5, r7
    ddbc:	e04c      	b.n	de58 <_strtod_r+0xa10>
    ddbe:	f1ba 0f00 	cmp.w	sl, #0
    ddc2:	d103      	bne.n	ddcc <_strtod_r+0x984>
    ddc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
    ddc8:	b93b      	cbnz	r3, ddda <_strtod_r+0x992>
    ddca:	e00b      	b.n	dde4 <_strtod_r+0x99c>
    ddcc:	f1ba 0f01 	cmp.w	sl, #1
    ddd0:	d103      	bne.n	ddda <_strtod_r+0x992>
    ddd2:	f1bb 0f00 	cmp.w	fp, #0
    ddd6:	f43f af15 	beq.w	dc04 <_strtod_r+0x7bc>
    ddda:	2600      	movs	r6, #0
    dddc:	4f1a      	ldr	r7, [pc, #104]	; (de48 <_strtod_r+0xa00>)
    ddde:	4d19      	ldr	r5, [pc, #100]	; (de44 <_strtod_r+0x9fc>)
    dde0:	2400      	movs	r4, #0
    dde2:	e039      	b.n	de58 <_strtod_r+0xa10>
    dde4:	4620      	mov	r0, r4
    dde6:	4629      	mov	r1, r5
    dde8:	2200      	movs	r2, #0
    ddea:	4b16      	ldr	r3, [pc, #88]	; (de44 <_strtod_r+0x9fc>)
    ddec:	f002 fa32 	bl	10254 <__aeabi_dcmplt>
    ddf0:	b940      	cbnz	r0, de04 <_strtod_r+0x9bc>
    ddf2:	4620      	mov	r0, r4
    ddf4:	4629      	mov	r1, r5
    ddf6:	2200      	movs	r2, #0
    ddf8:	4b14      	ldr	r3, [pc, #80]	; (de4c <_strtod_r+0xa04>)
    ddfa:	f7f9 fad9 	bl	73b0 <__aeabi_dmul>
    ddfe:	4604      	mov	r4, r0
    de00:	460d      	mov	r5, r1
    de02:	e001      	b.n	de08 <_strtod_r+0x9c0>
    de04:	4d11      	ldr	r5, [pc, #68]	; (de4c <_strtod_r+0xa04>)
    de06:	2400      	movs	r4, #0
    de08:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
    de0c:	9416      	str	r4, [sp, #88]	; 0x58
    de0e:	9717      	str	r7, [sp, #92]	; 0x5c
    de10:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    de14:	e020      	b.n	de58 <_strtod_r+0xa10>
    de16:	4620      	mov	r0, r4
    de18:	4629      	mov	r1, r5
    de1a:	2200      	movs	r2, #0
    de1c:	4b0b      	ldr	r3, [pc, #44]	; (de4c <_strtod_r+0xa04>)
    de1e:	f7f9 fac7 	bl	73b0 <__aeabi_dmul>
    de22:	9e08      	ldr	r6, [sp, #32]
    de24:	4604      	mov	r4, r0
    de26:	460d      	mov	r5, r1
    de28:	b996      	cbnz	r6, de50 <_strtod_r+0xa08>
    de2a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    de2e:	9010      	str	r0, [sp, #64]	; 0x40
    de30:	9711      	str	r7, [sp, #68]	; 0x44
    de32:	e00f      	b.n	de54 <_strtod_r+0xa0c>
    de34:	fffffbe3 	.word	0xfffffbe3
    de38:	000fffff 	.word	0x000fffff
    de3c:	7ff00000 	.word	0x7ff00000
    de40:	7fefffff 	.word	0x7fefffff
    de44:	3ff00000 	.word	0x3ff00000
    de48:	bff00000 	.word	0xbff00000
    de4c:	3fe00000 	.word	0x3fe00000
    de50:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
    de54:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    de58:	f02b 4c00 	bic.w	ip, fp, #2147483648	; 0x80000000
    de5c:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
    de60:	4b83      	ldr	r3, [pc, #524]	; (e070 <_strtod_r+0xc28>)
    de62:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
    de66:	459c      	cmp	ip, r3
    de68:	d131      	bne.n	dece <_strtod_r+0xa86>
    de6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    de6e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    de72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    de76:	4650      	mov	r0, sl
    de78:	4659      	mov	r1, fp
    de7a:	f8cd c008 	str.w	ip, [sp, #8]
    de7e:	f7fe ff47 	bl	cd10 <__ulp>
    de82:	4602      	mov	r2, r0
    de84:	460b      	mov	r3, r1
    de86:	4630      	mov	r0, r6
    de88:	4639      	mov	r1, r7
    de8a:	f7f9 fa91 	bl	73b0 <__aeabi_dmul>
    de8e:	4602      	mov	r2, r0
    de90:	460b      	mov	r3, r1
    de92:	4650      	mov	r0, sl
    de94:	4659      	mov	r1, fp
    de96:	f7f9 f8d9 	bl	704c <__adddf3>
    de9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    de9e:	0d1b      	lsrs	r3, r3, #20
    dea0:	4a74      	ldr	r2, [pc, #464]	; (e074 <_strtod_r+0xc2c>)
    dea2:	f8dd c008 	ldr.w	ip, [sp, #8]
    dea6:	051b      	lsls	r3, r3, #20
    dea8:	4293      	cmp	r3, r2
    deaa:	4682      	mov	sl, r0
    deac:	d90c      	bls.n	dec8 <_strtod_r+0xa80>
    deae:	4b72      	ldr	r3, [pc, #456]	; (e078 <_strtod_r+0xc30>)
    deb0:	990d      	ldr	r1, [sp, #52]	; 0x34
    deb2:	4299      	cmp	r1, r3
    deb4:	d103      	bne.n	debe <_strtod_r+0xa76>
    deb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    deb8:	3201      	adds	r2, #1
    deba:	f43f ad1f 	beq.w	d8fc <_strtod_r+0x4b4>
    debe:	f8df b1b8 	ldr.w	fp, [pc, #440]	; e078 <_strtod_r+0xc30>
    dec2:	f04f 3aff 	mov.w	sl, #4294967295
    dec6:	e07b      	b.n	dfc0 <_strtod_r+0xb78>
    dec8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
    decc:	e042      	b.n	df54 <_strtod_r+0xb0c>
    dece:	9b04      	ldr	r3, [sp, #16]
    ded0:	b353      	cbz	r3, df28 <_strtod_r+0xae0>
    ded2:	f1bc 6fd4 	cmp.w	ip, #111149056	; 0x6a00000
    ded6:	d827      	bhi.n	df28 <_strtod_r+0xae0>
    ded8:	4620      	mov	r0, r4
    deda:	4629      	mov	r1, r5
    dedc:	a35c      	add	r3, pc, #368	; (adr r3, e050 <_strtod_r+0xc08>)
    dede:	e9d3 2300 	ldrd	r2, r3, [r3]
    dee2:	f8cd c008 	str.w	ip, [sp, #8]
    dee6:	f002 f9bf 	bl	10268 <__aeabi_dcmple>
    deea:	f8dd c008 	ldr.w	ip, [sp, #8]
    deee:	b1b8      	cbz	r0, df20 <_strtod_r+0xad8>
    def0:	4629      	mov	r1, r5
    def2:	4620      	mov	r0, r4
    def4:	f7f9 fc6e 	bl	77d4 <__aeabi_d2uiz>
    def8:	2800      	cmp	r0, #0
    defa:	bf08      	it	eq
    defc:	2001      	moveq	r0, #1
    defe:	f7f9 f9e1 	bl	72c4 <__aeabi_ui2d>
    df02:	9e08      	ldr	r6, [sp, #32]
    df04:	f8dd c008 	ldr.w	ip, [sp, #8]
    df08:	4604      	mov	r4, r0
    df0a:	460d      	mov	r5, r1
    df0c:	b926      	cbnz	r6, df18 <_strtod_r+0xad0>
    df0e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    df12:	9012      	str	r0, [sp, #72]	; 0x48
    df14:	9713      	str	r7, [sp, #76]	; 0x4c
    df16:	e001      	b.n	df1c <_strtod_r+0xad4>
    df18:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    df1c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    df20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    df24:	ebcc 0703 	rsb	r7, ip, r3
    df28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    df2c:	f8cd c008 	str.w	ip, [sp, #8]
    df30:	f7fe feee 	bl	cd10 <__ulp>
    df34:	4602      	mov	r2, r0
    df36:	460b      	mov	r3, r1
    df38:	4630      	mov	r0, r6
    df3a:	4639      	mov	r1, r7
    df3c:	f7f9 fa38 	bl	73b0 <__aeabi_dmul>
    df40:	4602      	mov	r2, r0
    df42:	460b      	mov	r3, r1
    df44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    df48:	f7f9 f880 	bl	704c <__adddf3>
    df4c:	f8dd c008 	ldr.w	ip, [sp, #8]
    df50:	4682      	mov	sl, r0
    df52:	468b      	mov	fp, r1
    df54:	9f04      	ldr	r7, [sp, #16]
    df56:	2f00      	cmp	r7, #0
    df58:	d132      	bne.n	dfc0 <_strtod_r+0xb78>
    df5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    df5e:	0d1b      	lsrs	r3, r3, #20
    df60:	051b      	lsls	r3, r3, #20
    df62:	459c      	cmp	ip, r3
    df64:	d12c      	bne.n	dfc0 <_strtod_r+0xb78>
    df66:	4629      	mov	r1, r5
    df68:	4620      	mov	r0, r4
    df6a:	f002 f99b 	bl	102a4 <__aeabi_d2iz>
    df6e:	f7f9 f9b9 	bl	72e4 <__aeabi_i2d>
    df72:	4602      	mov	r2, r0
    df74:	460b      	mov	r3, r1
    df76:	4620      	mov	r0, r4
    df78:	4629      	mov	r1, r5
    df7a:	f7f9 f865 	bl	7048 <__aeabi_dsub>
    df7e:	9f08      	ldr	r7, [sp, #32]
    df80:	4604      	mov	r4, r0
    df82:	460d      	mov	r5, r1
    df84:	b92f      	cbnz	r7, df92 <_strtod_r+0xb4a>
    df86:	f1ba 0f00 	cmp.w	sl, #0
    df8a:	d102      	bne.n	df92 <_strtod_r+0xb4a>
    df8c:	f3cb 0613 	ubfx	r6, fp, #0, #20
    df90:	b186      	cbz	r6, dfb4 <_strtod_r+0xb6c>
    df92:	4620      	mov	r0, r4
    df94:	4629      	mov	r1, r5
    df96:	a330      	add	r3, pc, #192	; (adr r3, e058 <_strtod_r+0xc10>)
    df98:	e9d3 2300 	ldrd	r2, r3, [r3]
    df9c:	f002 f95a 	bl	10254 <__aeabi_dcmplt>
    dfa0:	2800      	cmp	r0, #0
    dfa2:	d131      	bne.n	e008 <_strtod_r+0xbc0>
    dfa4:	4620      	mov	r0, r4
    dfa6:	4629      	mov	r1, r5
    dfa8:	a32d      	add	r3, pc, #180	; (adr r3, e060 <_strtod_r+0xc18>)
    dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    dfae:	f002 f96f 	bl	10290 <__aeabi_dcmpgt>
    dfb2:	e004      	b.n	dfbe <_strtod_r+0xb76>
    dfb4:	a32c      	add	r3, pc, #176	; (adr r3, e068 <_strtod_r+0xc20>)
    dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    dfba:	f002 f94b 	bl	10254 <__aeabi_dcmplt>
    dfbe:	bb18      	cbnz	r0, e008 <_strtod_r+0xbc0>
    dfc0:	4648      	mov	r0, r9
    dfc2:	991a      	ldr	r1, [sp, #104]	; 0x68
    dfc4:	f7fe fc24 	bl	c810 <_Bfree>
    dfc8:	4648      	mov	r0, r9
    dfca:	9905      	ldr	r1, [sp, #20]
    dfcc:	f7fe fc20 	bl	c810 <_Bfree>
    dfd0:	4648      	mov	r0, r9
    dfd2:	9903      	ldr	r1, [sp, #12]
    dfd4:	f7fe fc1c 	bl	c810 <_Bfree>
    dfd8:	4648      	mov	r0, r9
    dfda:	4641      	mov	r1, r8
    dfdc:	f7fe fc18 	bl	c810 <_Bfree>
    dfe0:	e561      	b.n	daa6 <_strtod_r+0x65e>
    dfe2:	9e04      	ldr	r6, [sp, #16]
    dfe4:	b186      	cbz	r6, e008 <_strtod_r+0xbc0>
    dfe6:	2000      	movs	r0, #0
    dfe8:	4f24      	ldr	r7, [pc, #144]	; (e07c <_strtod_r+0xc34>)
    dfea:	900c      	str	r0, [sp, #48]	; 0x30
    dfec:	970d      	str	r7, [sp, #52]	; 0x34
    dfee:	4650      	mov	r0, sl
    dff0:	4659      	mov	r1, fp
    dff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    dff6:	f7f9 f9db 	bl	73b0 <__aeabi_dmul>
    dffa:	4682      	mov	sl, r0
    dffc:	468b      	mov	fp, r1
    dffe:	b919      	cbnz	r1, e008 <_strtod_r+0xbc0>
    e000:	b910      	cbnz	r0, e008 <_strtod_r+0xbc0>
    e002:	2322      	movs	r3, #34	; 0x22
    e004:	f8c9 3000 	str.w	r3, [r9]
    e008:	4648      	mov	r0, r9
    e00a:	991a      	ldr	r1, [sp, #104]	; 0x68
    e00c:	f7fe fc00 	bl	c810 <_Bfree>
    e010:	4648      	mov	r0, r9
    e012:	9905      	ldr	r1, [sp, #20]
    e014:	f7fe fbfc 	bl	c810 <_Bfree>
    e018:	4648      	mov	r0, r9
    e01a:	9903      	ldr	r1, [sp, #12]
    e01c:	f7fe fbf8 	bl	c810 <_Bfree>
    e020:	4648      	mov	r0, r9
    e022:	9907      	ldr	r1, [sp, #28]
    e024:	f7fe fbf4 	bl	c810 <_Bfree>
    e028:	4648      	mov	r0, r9
    e02a:	4641      	mov	r1, r8
    e02c:	f7fe fbf0 	bl	c810 <_Bfree>
    e030:	9e15      	ldr	r6, [sp, #84]	; 0x54
    e032:	b10e      	cbz	r6, e038 <_strtod_r+0xbf0>
    e034:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e036:	6033      	str	r3, [r6, #0]
    e038:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e03a:	b11f      	cbz	r7, e044 <_strtod_r+0xbfc>
    e03c:	4650      	mov	r0, sl
    e03e:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
    e042:	e001      	b.n	e048 <_strtod_r+0xc00>
    e044:	4650      	mov	r0, sl
    e046:	4659      	mov	r1, fp
    e048:	b01f      	add	sp, #124	; 0x7c
    e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e04e:	bf00      	nop
    e050:	ffc00000 	.word	0xffc00000
    e054:	41dfffff 	.word	0x41dfffff
    e058:	94a03595 	.word	0x94a03595
    e05c:	3fdfffff 	.word	0x3fdfffff
    e060:	35afe535 	.word	0x35afe535
    e064:	3fe00000 	.word	0x3fe00000
    e068:	94a03595 	.word	0x94a03595
    e06c:	3fcfffff 	.word	0x3fcfffff
    e070:	7fe00000 	.word	0x7fe00000
    e074:	7c9fffff 	.word	0x7c9fffff
    e078:	7fefffff 	.word	0x7fefffff
    e07c:	39500000 	.word	0x39500000

0000e080 <strtod>:
    e080:	460a      	mov	r2, r1
    e082:	4903      	ldr	r1, [pc, #12]	; (e090 <strtod+0x10>)
    e084:	4603      	mov	r3, r0
    e086:	6808      	ldr	r0, [r1, #0]
    e088:	4619      	mov	r1, r3
    e08a:	f7ff b9dd 	b.w	d448 <_strtod_r>
    e08e:	bf00      	nop
    e090:	200004a0 	.word	0x200004a0

0000e094 <strtof>:
    e094:	460a      	mov	r2, r1
    e096:	490a      	ldr	r1, [pc, #40]	; (e0c0 <strtof+0x2c>)
    e098:	b538      	push	{r3, r4, r5, lr}
    e09a:	4603      	mov	r3, r0
    e09c:	6808      	ldr	r0, [r1, #0]
    e09e:	4619      	mov	r1, r3
    e0a0:	f7ff f9d2 	bl	d448 <_strtod_r>
    e0a4:	4604      	mov	r4, r0
    e0a6:	460d      	mov	r5, r1
    e0a8:	f7ff f930 	bl	d30c <__fpclassifyd>
    e0ac:	b918      	cbnz	r0, e0b6 <strtof+0x22>
    e0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e0b2:	f7ff b98f 	b.w	d3d4 <nanf>
    e0b6:	4620      	mov	r0, r4
    e0b8:	4629      	mov	r1, r5
    e0ba:	f002 f91b 	bl	102f4 <__aeabi_d2f>
    e0be:	bd38      	pop	{r3, r4, r5, pc}
    e0c0:	200004a0 	.word	0x200004a0
    e0c4:	f3af 8000 	nop.w

0000e0c8 <_strtol_r>:
    e0c8:	4684      	mov	ip, r0
    e0ca:	483f      	ldr	r0, [pc, #252]	; (e1c8 <_strtol_r+0x100>)
    e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0d0:	f8d0 8000 	ldr.w	r8, [r0]
    e0d4:	460e      	mov	r6, r1
    e0d6:	4634      	mov	r4, r6
    e0d8:	f814 5b01 	ldrb.w	r5, [r4], #1
    e0dc:	eb08 0005 	add.w	r0, r8, r5
    e0e0:	7840      	ldrb	r0, [r0, #1]
    e0e2:	f000 0008 	and.w	r0, r0, #8
    e0e6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    e0ea:	b108      	cbz	r0, e0f0 <_strtol_r+0x28>
    e0ec:	4626      	mov	r6, r4
    e0ee:	e7f2      	b.n	e0d6 <_strtol_r+0xe>
    e0f0:	2d2d      	cmp	r5, #45	; 0x2d
    e0f2:	d103      	bne.n	e0fc <_strtol_r+0x34>
    e0f4:	1cb4      	adds	r4, r6, #2
    e0f6:	7875      	ldrb	r5, [r6, #1]
    e0f8:	2701      	movs	r7, #1
    e0fa:	e003      	b.n	e104 <_strtol_r+0x3c>
    e0fc:	2d2b      	cmp	r5, #43	; 0x2b
    e0fe:	bf04      	itt	eq
    e100:	7875      	ldrbeq	r5, [r6, #1]
    e102:	1cb4      	addeq	r4, r6, #2
    e104:	f033 0010 	bics.w	r0, r3, #16
    e108:	d10d      	bne.n	e126 <_strtol_r+0x5e>
    e10a:	2d30      	cmp	r5, #48	; 0x30
    e10c:	d108      	bne.n	e120 <_strtol_r+0x58>
    e10e:	7820      	ldrb	r0, [r4, #0]
    e110:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    e114:	2858      	cmp	r0, #88	; 0x58
    e116:	d151      	bne.n	e1bc <_strtol_r+0xf4>
    e118:	7865      	ldrb	r5, [r4, #1]
    e11a:	2310      	movs	r3, #16
    e11c:	3402      	adds	r4, #2
    e11e:	e002      	b.n	e126 <_strtol_r+0x5e>
    e120:	2b00      	cmp	r3, #0
    e122:	bf08      	it	eq
    e124:	230a      	moveq	r3, #10
    e126:	2f00      	cmp	r7, #0
    e128:	bf0c      	ite	eq
    e12a:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    e12e:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    e132:	fbba f9f3 	udiv	r9, sl, r3
    e136:	2600      	movs	r6, #0
    e138:	fb03 aa19 	mls	sl, r3, r9, sl
    e13c:	4630      	mov	r0, r6
    e13e:	eb08 0b05 	add.w	fp, r8, r5
    e142:	f89b b001 	ldrb.w	fp, [fp, #1]
    e146:	f01b 0f04 	tst.w	fp, #4
    e14a:	d001      	beq.n	e150 <_strtol_r+0x88>
    e14c:	3d30      	subs	r5, #48	; 0x30
    e14e:	e00b      	b.n	e168 <_strtol_r+0xa0>
    e150:	f01b 0b03 	ands.w	fp, fp, #3
    e154:	d01b      	beq.n	e18e <_strtol_r+0xc6>
    e156:	f1bb 0f01 	cmp.w	fp, #1
    e15a:	bf14      	ite	ne
    e15c:	f04f 0b57 	movne.w	fp, #87	; 0x57
    e160:	f04f 0b37 	moveq.w	fp, #55	; 0x37
    e164:	ebcb 0505 	rsb	r5, fp, r5
    e168:	429d      	cmp	r5, r3
    e16a:	da10      	bge.n	e18e <_strtol_r+0xc6>
    e16c:	f1b6 3fff 	cmp.w	r6, #4294967295
    e170:	d00a      	beq.n	e188 <_strtol_r+0xc0>
    e172:	4548      	cmp	r0, r9
    e174:	d806      	bhi.n	e184 <_strtol_r+0xbc>
    e176:	d101      	bne.n	e17c <_strtol_r+0xb4>
    e178:	4555      	cmp	r5, sl
    e17a:	dc03      	bgt.n	e184 <_strtol_r+0xbc>
    e17c:	fb03 5000 	mla	r0, r3, r0, r5
    e180:	2601      	movs	r6, #1
    e182:	e001      	b.n	e188 <_strtol_r+0xc0>
    e184:	f04f 36ff 	mov.w	r6, #4294967295
    e188:	f814 5b01 	ldrb.w	r5, [r4], #1
    e18c:	e7d7      	b.n	e13e <_strtol_r+0x76>
    e18e:	1c73      	adds	r3, r6, #1
    e190:	d10c      	bne.n	e1ac <_strtol_r+0xe4>
    e192:	2f00      	cmp	r7, #0
    e194:	f04f 0322 	mov.w	r3, #34	; 0x22
    e198:	bf0c      	ite	eq
    e19a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    e19e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    e1a2:	f8cc 3000 	str.w	r3, [ip]
    e1a6:	b92a      	cbnz	r2, e1b4 <_strtol_r+0xec>
    e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1ac:	b107      	cbz	r7, e1b0 <_strtol_r+0xe8>
    e1ae:	4240      	negs	r0, r0
    e1b0:	b142      	cbz	r2, e1c4 <_strtol_r+0xfc>
    e1b2:	b106      	cbz	r6, e1b6 <_strtol_r+0xee>
    e1b4:	1e61      	subs	r1, r4, #1
    e1b6:	6011      	str	r1, [r2, #0]
    e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1bc:	2b00      	cmp	r3, #0
    e1be:	bf08      	it	eq
    e1c0:	2308      	moveq	r3, #8
    e1c2:	e7b0      	b.n	e126 <_strtol_r+0x5e>
    e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1c8:	20000498 	.word	0x20000498

0000e1cc <strtol>:
    e1cc:	b530      	push	{r4, r5, lr}
    e1ce:	4613      	mov	r3, r2
    e1d0:	4a04      	ldr	r2, [pc, #16]	; (e1e4 <strtol+0x18>)
    e1d2:	4605      	mov	r5, r0
    e1d4:	460c      	mov	r4, r1
    e1d6:	6810      	ldr	r0, [r2, #0]
    e1d8:	4629      	mov	r1, r5
    e1da:	4622      	mov	r2, r4
    e1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e1e0:	f7ff bf72 	b.w	e0c8 <_strtol_r>
    e1e4:	200004a0 	.word	0x200004a0

0000e1e8 <_strtoll_r>:
    e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1ec:	461f      	mov	r7, r3
    e1ee:	b087      	sub	sp, #28
    e1f0:	4b5c      	ldr	r3, [pc, #368]	; (e364 <_strtoll_r+0x17c>)
    e1f2:	9005      	str	r0, [sp, #20]
    e1f4:	f8d3 b000 	ldr.w	fp, [r3]
    e1f8:	468c      	mov	ip, r1
    e1fa:	4692      	mov	sl, r2
    e1fc:	460b      	mov	r3, r1
    e1fe:	461e      	mov	r6, r3
    e200:	f816 8b01 	ldrb.w	r8, [r6], #1
    e204:	eb0b 0208 	add.w	r2, fp, r8
    e208:	7852      	ldrb	r2, [r2, #1]
    e20a:	f002 0208 	and.w	r2, r2, #8
    e20e:	f002 09ff 	and.w	r9, r2, #255	; 0xff
    e212:	b10a      	cbz	r2, e218 <_strtoll_r+0x30>
    e214:	4633      	mov	r3, r6
    e216:	e7f2      	b.n	e1fe <_strtoll_r+0x16>
    e218:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
    e21c:	d105      	bne.n	e22a <_strtoll_r+0x42>
    e21e:	1c9e      	adds	r6, r3, #2
    e220:	f893 8001 	ldrb.w	r8, [r3, #1]
    e224:	f04f 0901 	mov.w	r9, #1
    e228:	e005      	b.n	e236 <_strtoll_r+0x4e>
    e22a:	f1b8 0f2b 	cmp.w	r8, #43	; 0x2b
    e22e:	bf04      	itt	eq
    e230:	f893 8001 	ldrbeq.w	r8, [r3, #1]
    e234:	1c9e      	addeq	r6, r3, #2
    e236:	f037 0210 	bics.w	r2, r7, #16
    e23a:	d110      	bne.n	e25e <_strtoll_r+0x76>
    e23c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
    e240:	d10a      	bne.n	e258 <_strtoll_r+0x70>
    e242:	7833      	ldrb	r3, [r6, #0]
    e244:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e248:	2b58      	cmp	r3, #88	; 0x58
    e24a:	f040 8084 	bne.w	e356 <_strtoll_r+0x16e>
    e24e:	f896 8001 	ldrb.w	r8, [r6, #1]
    e252:	2710      	movs	r7, #16
    e254:	3602      	adds	r6, #2
    e256:	e002      	b.n	e25e <_strtoll_r+0x76>
    e258:	2f00      	cmp	r7, #0
    e25a:	bf08      	it	eq
    e25c:	270a      	moveq	r7, #10
    e25e:	f1b9 0f00 	cmp.w	r9, #0
    e262:	d003      	beq.n	e26c <_strtoll_r+0x84>
    e264:	2400      	movs	r4, #0
    e266:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    e26a:	e003      	b.n	e274 <_strtoll_r+0x8c>
    e26c:	f04f 34ff 	mov.w	r4, #4294967295
    e270:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e274:	463a      	mov	r2, r7
    e276:	17fb      	asrs	r3, r7, #31
    e278:	4620      	mov	r0, r4
    e27a:	4629      	mov	r1, r5
    e27c:	f8cd c004 	str.w	ip, [sp, #4]
    e280:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e284:	f7f9 fd24 	bl	7cd0 <__aeabi_uldivmod>
    e288:	4620      	mov	r0, r4
    e28a:	9204      	str	r2, [sp, #16]
    e28c:	4629      	mov	r1, r5
    e28e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e292:	f7f9 fd1d 	bl	7cd0 <__aeabi_uldivmod>
    e296:	f8dd c004 	ldr.w	ip, [sp, #4]
    e29a:	4604      	mov	r4, r0
    e29c:	460d      	mov	r5, r1
    e29e:	2300      	movs	r3, #0
    e2a0:	2000      	movs	r0, #0
    e2a2:	2100      	movs	r1, #0
    e2a4:	eb0b 0208 	add.w	r2, fp, r8
    e2a8:	7852      	ldrb	r2, [r2, #1]
    e2aa:	f012 0f04 	tst.w	r2, #4
    e2ae:	d002      	beq.n	e2b6 <_strtoll_r+0xce>
    e2b0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    e2b4:	e008      	b.n	e2c8 <_strtoll_r+0xe0>
    e2b6:	f012 0203 	ands.w	r2, r2, #3
    e2ba:	d028      	beq.n	e30e <_strtoll_r+0x126>
    e2bc:	2a01      	cmp	r2, #1
    e2be:	bf14      	ite	ne
    e2c0:	2257      	movne	r2, #87	; 0x57
    e2c2:	2237      	moveq	r2, #55	; 0x37
    e2c4:	ebc2 0808 	rsb	r8, r2, r8
    e2c8:	45b8      	cmp	r8, r7
    e2ca:	da20      	bge.n	e30e <_strtoll_r+0x126>
    e2cc:	1c5a      	adds	r2, r3, #1
    e2ce:	d01b      	beq.n	e308 <_strtoll_r+0x120>
    e2d0:	428d      	cmp	r5, r1
    e2d2:	bf08      	it	eq
    e2d4:	4284      	cmpeq	r4, r0
    e2d6:	d315      	bcc.n	e304 <_strtoll_r+0x11c>
    e2d8:	42a9      	cmp	r1, r5
    e2da:	bf08      	it	eq
    e2dc:	42a0      	cmpeq	r0, r4
    e2de:	d102      	bne.n	e2e6 <_strtoll_r+0xfe>
    e2e0:	9b04      	ldr	r3, [sp, #16]
    e2e2:	4598      	cmp	r8, r3
    e2e4:	dc0e      	bgt.n	e304 <_strtoll_r+0x11c>
    e2e6:	9a03      	ldr	r2, [sp, #12]
    e2e8:	fb00 f302 	mul.w	r3, r0, r2
    e2ec:	9a02      	ldr	r2, [sp, #8]
    e2ee:	fb02 3301 	mla	r3, r2, r1, r3
    e2f2:	fba0 0102 	umull	r0, r1, r0, r2
    e2f6:	4419      	add	r1, r3
    e2f8:	eb10 0008 	adds.w	r0, r0, r8
    e2fc:	eb41 71e8 	adc.w	r1, r1, r8, asr #31
    e300:	2301      	movs	r3, #1
    e302:	e001      	b.n	e308 <_strtoll_r+0x120>
    e304:	f04f 33ff 	mov.w	r3, #4294967295
    e308:	f816 8b01 	ldrb.w	r8, [r6], #1
    e30c:	e7ca      	b.n	e2a4 <_strtoll_r+0xbc>
    e30e:	1c5a      	adds	r2, r3, #1
    e310:	d111      	bne.n	e336 <_strtoll_r+0x14e>
    e312:	f1b9 0f00 	cmp.w	r9, #0
    e316:	d003      	beq.n	e320 <_strtoll_r+0x138>
    e318:	2000      	movs	r0, #0
    e31a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    e31e:	e003      	b.n	e328 <_strtoll_r+0x140>
    e320:	f04f 30ff 	mov.w	r0, #4294967295
    e324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e328:	9a05      	ldr	r2, [sp, #20]
    e32a:	2322      	movs	r3, #34	; 0x22
    e32c:	6013      	str	r3, [r2, #0]
    e32e:	f1ba 0f00 	cmp.w	sl, #0
    e332:	d10a      	bne.n	e34a <_strtoll_r+0x162>
    e334:	e013      	b.n	e35e <_strtoll_r+0x176>
    e336:	f1b9 0f00 	cmp.w	r9, #0
    e33a:	d002      	beq.n	e342 <_strtoll_r+0x15a>
    e33c:	4240      	negs	r0, r0
    e33e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e342:	f1ba 0f00 	cmp.w	sl, #0
    e346:	d00a      	beq.n	e35e <_strtoll_r+0x176>
    e348:	b10b      	cbz	r3, e34e <_strtoll_r+0x166>
    e34a:	3e01      	subs	r6, #1
    e34c:	e000      	b.n	e350 <_strtoll_r+0x168>
    e34e:	4666      	mov	r6, ip
    e350:	f8ca 6000 	str.w	r6, [sl]
    e354:	e003      	b.n	e35e <_strtoll_r+0x176>
    e356:	2f00      	cmp	r7, #0
    e358:	bf08      	it	eq
    e35a:	2708      	moveq	r7, #8
    e35c:	e77f      	b.n	e25e <_strtoll_r+0x76>
    e35e:	b007      	add	sp, #28
    e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e364:	20000498 	.word	0x20000498

0000e368 <_strtoul_r>:
    e368:	4684      	mov	ip, r0
    e36a:	483a      	ldr	r0, [pc, #232]	; (e454 <_strtoul_r+0xec>)
    e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e370:	f8d0 8000 	ldr.w	r8, [r0]
    e374:	460e      	mov	r6, r1
    e376:	4634      	mov	r4, r6
    e378:	f814 5b01 	ldrb.w	r5, [r4], #1
    e37c:	eb08 0005 	add.w	r0, r8, r5
    e380:	7840      	ldrb	r0, [r0, #1]
    e382:	f000 0008 	and.w	r0, r0, #8
    e386:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    e38a:	b108      	cbz	r0, e390 <_strtoul_r+0x28>
    e38c:	4626      	mov	r6, r4
    e38e:	e7f2      	b.n	e376 <_strtoul_r+0xe>
    e390:	2d2d      	cmp	r5, #45	; 0x2d
    e392:	d103      	bne.n	e39c <_strtoul_r+0x34>
    e394:	1cb4      	adds	r4, r6, #2
    e396:	7875      	ldrb	r5, [r6, #1]
    e398:	2701      	movs	r7, #1
    e39a:	e003      	b.n	e3a4 <_strtoul_r+0x3c>
    e39c:	2d2b      	cmp	r5, #43	; 0x2b
    e39e:	bf04      	itt	eq
    e3a0:	7875      	ldrbeq	r5, [r6, #1]
    e3a2:	1cb4      	addeq	r4, r6, #2
    e3a4:	f033 0010 	bics.w	r0, r3, #16
    e3a8:	d10d      	bne.n	e3c6 <_strtoul_r+0x5e>
    e3aa:	2d30      	cmp	r5, #48	; 0x30
    e3ac:	d108      	bne.n	e3c0 <_strtoul_r+0x58>
    e3ae:	7820      	ldrb	r0, [r4, #0]
    e3b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    e3b4:	2858      	cmp	r0, #88	; 0x58
    e3b6:	d147      	bne.n	e448 <_strtoul_r+0xe0>
    e3b8:	7865      	ldrb	r5, [r4, #1]
    e3ba:	2310      	movs	r3, #16
    e3bc:	3402      	adds	r4, #2
    e3be:	e002      	b.n	e3c6 <_strtoul_r+0x5e>
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	bf08      	it	eq
    e3c4:	230a      	moveq	r3, #10
    e3c6:	f04f 39ff 	mov.w	r9, #4294967295
    e3ca:	fbb9 f9f3 	udiv	r9, r9, r3
    e3ce:	fb03 fa09 	mul.w	sl, r3, r9
    e3d2:	2600      	movs	r6, #0
    e3d4:	ea6f 0a0a 	mvn.w	sl, sl
    e3d8:	4630      	mov	r0, r6
    e3da:	eb08 0b05 	add.w	fp, r8, r5
    e3de:	f89b b001 	ldrb.w	fp, [fp, #1]
    e3e2:	f01b 0f04 	tst.w	fp, #4
    e3e6:	d001      	beq.n	e3ec <_strtoul_r+0x84>
    e3e8:	3d30      	subs	r5, #48	; 0x30
    e3ea:	e00b      	b.n	e404 <_strtoul_r+0x9c>
    e3ec:	f01b 0b03 	ands.w	fp, fp, #3
    e3f0:	d01a      	beq.n	e428 <_strtoul_r+0xc0>
    e3f2:	f1bb 0f01 	cmp.w	fp, #1
    e3f6:	bf14      	ite	ne
    e3f8:	f04f 0b57 	movne.w	fp, #87	; 0x57
    e3fc:	f04f 0b37 	moveq.w	fp, #55	; 0x37
    e400:	ebcb 0505 	rsb	r5, fp, r5
    e404:	429d      	cmp	r5, r3
    e406:	da0f      	bge.n	e428 <_strtoul_r+0xc0>
    e408:	2e00      	cmp	r6, #0
    e40a:	db08      	blt.n	e41e <_strtoul_r+0xb6>
    e40c:	4548      	cmp	r0, r9
    e40e:	d806      	bhi.n	e41e <_strtoul_r+0xb6>
    e410:	d101      	bne.n	e416 <_strtoul_r+0xae>
    e412:	4555      	cmp	r5, sl
    e414:	dc03      	bgt.n	e41e <_strtoul_r+0xb6>
    e416:	fb03 5000 	mla	r0, r3, r0, r5
    e41a:	2601      	movs	r6, #1
    e41c:	e001      	b.n	e422 <_strtoul_r+0xba>
    e41e:	f04f 36ff 	mov.w	r6, #4294967295
    e422:	f814 5b01 	ldrb.w	r5, [r4], #1
    e426:	e7d8      	b.n	e3da <_strtoul_r+0x72>
    e428:	2e00      	cmp	r6, #0
    e42a:	da05      	bge.n	e438 <_strtoul_r+0xd0>
    e42c:	2322      	movs	r3, #34	; 0x22
    e42e:	f8cc 3000 	str.w	r3, [ip]
    e432:	f04f 30ff 	mov.w	r0, #4294967295
    e436:	e001      	b.n	e43c <_strtoul_r+0xd4>
    e438:	b107      	cbz	r7, e43c <_strtoul_r+0xd4>
    e43a:	4240      	negs	r0, r0
    e43c:	b142      	cbz	r2, e450 <_strtoul_r+0xe8>
    e43e:	b106      	cbz	r6, e442 <_strtoul_r+0xda>
    e440:	1e61      	subs	r1, r4, #1
    e442:	6011      	str	r1, [r2, #0]
    e444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e448:	2b00      	cmp	r3, #0
    e44a:	bf08      	it	eq
    e44c:	2308      	moveq	r3, #8
    e44e:	e7ba      	b.n	e3c6 <_strtoul_r+0x5e>
    e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e454:	20000498 	.word	0x20000498

0000e458 <strtoul>:
    e458:	b530      	push	{r4, r5, lr}
    e45a:	4613      	mov	r3, r2
    e45c:	4a04      	ldr	r2, [pc, #16]	; (e470 <strtoul+0x18>)
    e45e:	4605      	mov	r5, r0
    e460:	460c      	mov	r4, r1
    e462:	6810      	ldr	r0, [r2, #0]
    e464:	4629      	mov	r1, r5
    e466:	4622      	mov	r2, r4
    e468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e46c:	f7ff bf7c 	b.w	e368 <_strtoul_r>
    e470:	200004a0 	.word	0x200004a0

0000e474 <_strtoull_r>:
    e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e478:	461d      	mov	r5, r3
    e47a:	b087      	sub	sp, #28
    e47c:	4b4e      	ldr	r3, [pc, #312]	; (e5b8 <_strtoull_r+0x144>)
    e47e:	9005      	str	r0, [sp, #20]
    e480:	f8d3 8000 	ldr.w	r8, [r3]
    e484:	9204      	str	r2, [sp, #16]
    e486:	4689      	mov	r9, r1
    e488:	460b      	mov	r3, r1
    e48a:	461c      	mov	r4, r3
    e48c:	f814 6b01 	ldrb.w	r6, [r4], #1
    e490:	eb08 0206 	add.w	r2, r8, r6
    e494:	7852      	ldrb	r2, [r2, #1]
    e496:	f002 0208 	and.w	r2, r2, #8
    e49a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    e49e:	b10a      	cbz	r2, e4a4 <_strtoull_r+0x30>
    e4a0:	4623      	mov	r3, r4
    e4a2:	e7f2      	b.n	e48a <_strtoull_r+0x16>
    e4a4:	2e2d      	cmp	r6, #45	; 0x2d
    e4a6:	d103      	bne.n	e4b0 <_strtoull_r+0x3c>
    e4a8:	1c9c      	adds	r4, r3, #2
    e4aa:	785e      	ldrb	r6, [r3, #1]
    e4ac:	2701      	movs	r7, #1
    e4ae:	e003      	b.n	e4b8 <_strtoull_r+0x44>
    e4b0:	2e2b      	cmp	r6, #43	; 0x2b
    e4b2:	bf04      	itt	eq
    e4b4:	785e      	ldrbeq	r6, [r3, #1]
    e4b6:	1c9c      	addeq	r4, r3, #2
    e4b8:	f035 0110 	bics.w	r1, r5, #16
    e4bc:	d10d      	bne.n	e4da <_strtoull_r+0x66>
    e4be:	2e30      	cmp	r6, #48	; 0x30
    e4c0:	d108      	bne.n	e4d4 <_strtoull_r+0x60>
    e4c2:	7823      	ldrb	r3, [r4, #0]
    e4c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e4c8:	2b58      	cmp	r3, #88	; 0x58
    e4ca:	d16d      	bne.n	e5a8 <_strtoull_r+0x134>
    e4cc:	7866      	ldrb	r6, [r4, #1]
    e4ce:	2510      	movs	r5, #16
    e4d0:	3402      	adds	r4, #2
    e4d2:	e002      	b.n	e4da <_strtoull_r+0x66>
    e4d4:	2d00      	cmp	r5, #0
    e4d6:	bf08      	it	eq
    e4d8:	250a      	moveq	r5, #10
    e4da:	ea4f 7be5 	mov.w	fp, r5, asr #31
    e4de:	462a      	mov	r2, r5
    e4e0:	465b      	mov	r3, fp
    e4e2:	f04f 30ff 	mov.w	r0, #4294967295
    e4e6:	f04f 31ff 	mov.w	r1, #4294967295
    e4ea:	f7f9 fbf1 	bl	7cd0 <__aeabi_uldivmod>
    e4ee:	462a      	mov	r2, r5
    e4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    e4f4:	465b      	mov	r3, fp
    e4f6:	f04f 30ff 	mov.w	r0, #4294967295
    e4fa:	f04f 31ff 	mov.w	r1, #4294967295
    e4fe:	f7f9 fbe7 	bl	7cd0 <__aeabi_uldivmod>
    e502:	46aa      	mov	sl, r5
    e504:	9201      	str	r2, [sp, #4]
    e506:	2300      	movs	r3, #0
    e508:	2000      	movs	r0, #0
    e50a:	2100      	movs	r1, #0
    e50c:	eb08 0c06 	add.w	ip, r8, r6
    e510:	f89c c001 	ldrb.w	ip, [ip, #1]
    e514:	f01c 0f04 	tst.w	ip, #4
    e518:	d001      	beq.n	e51e <_strtoull_r+0xaa>
    e51a:	3e30      	subs	r6, #48	; 0x30
    e51c:	e00b      	b.n	e536 <_strtoull_r+0xc2>
    e51e:	f01c 0c03 	ands.w	ip, ip, #3
    e522:	d02a      	beq.n	e57a <_strtoull_r+0x106>
    e524:	f1bc 0f01 	cmp.w	ip, #1
    e528:	bf14      	ite	ne
    e52a:	f04f 0c57 	movne.w	ip, #87	; 0x57
    e52e:	f04f 0c37 	moveq.w	ip, #55	; 0x37
    e532:	ebcc 0606 	rsb	r6, ip, r6
    e536:	42ae      	cmp	r6, r5
    e538:	da1f      	bge.n	e57a <_strtoull_r+0x106>
    e53a:	2b00      	cmp	r3, #0
    e53c:	db18      	blt.n	e570 <_strtoull_r+0xfc>
    e53e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e542:	428b      	cmp	r3, r1
    e544:	bf08      	it	eq
    e546:	4282      	cmpeq	r2, r0
    e548:	d312      	bcc.n	e570 <_strtoull_r+0xfc>
    e54a:	4299      	cmp	r1, r3
    e54c:	bf08      	it	eq
    e54e:	4290      	cmpeq	r0, r2
    e550:	d102      	bne.n	e558 <_strtoull_r+0xe4>
    e552:	9b01      	ldr	r3, [sp, #4]
    e554:	429e      	cmp	r6, r3
    e556:	dc0b      	bgt.n	e570 <_strtoull_r+0xfc>
    e558:	fb00 f30b 	mul.w	r3, r0, fp
    e55c:	fb0a 3301 	mla	r3, sl, r1, r3
    e560:	fba0 010a 	umull	r0, r1, r0, sl
    e564:	4419      	add	r1, r3
    e566:	1980      	adds	r0, r0, r6
    e568:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    e56c:	2301      	movs	r3, #1
    e56e:	e001      	b.n	e574 <_strtoull_r+0x100>
    e570:	f04f 33ff 	mov.w	r3, #4294967295
    e574:	f814 6b01 	ldrb.w	r6, [r4], #1
    e578:	e7c8      	b.n	e50c <_strtoull_r+0x98>
    e57a:	2b00      	cmp	r3, #0
    e57c:	da07      	bge.n	e58e <_strtoull_r+0x11a>
    e57e:	9905      	ldr	r1, [sp, #20]
    e580:	2222      	movs	r2, #34	; 0x22
    e582:	600a      	str	r2, [r1, #0]
    e584:	f04f 30ff 	mov.w	r0, #4294967295
    e588:	f04f 31ff 	mov.w	r1, #4294967295
    e58c:	e003      	b.n	e596 <_strtoull_r+0x122>
    e58e:	b117      	cbz	r7, e596 <_strtoull_r+0x122>
    e590:	4240      	negs	r0, r0
    e592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e596:	9a04      	ldr	r2, [sp, #16]
    e598:	b152      	cbz	r2, e5b0 <_strtoull_r+0x13c>
    e59a:	b10b      	cbz	r3, e5a0 <_strtoull_r+0x12c>
    e59c:	3c01      	subs	r4, #1
    e59e:	e000      	b.n	e5a2 <_strtoull_r+0x12e>
    e5a0:	464c      	mov	r4, r9
    e5a2:	9b04      	ldr	r3, [sp, #16]
    e5a4:	601c      	str	r4, [r3, #0]
    e5a6:	e003      	b.n	e5b0 <_strtoull_r+0x13c>
    e5a8:	2d00      	cmp	r5, #0
    e5aa:	bf08      	it	eq
    e5ac:	2508      	moveq	r5, #8
    e5ae:	e794      	b.n	e4da <_strtoull_r+0x66>
    e5b0:	b007      	add	sp, #28
    e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5b6:	bf00      	nop
    e5b8:	20000498 	.word	0x20000498

0000e5bc <__ssprint_r>:
    e5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5c0:	4680      	mov	r8, r0
    e5c2:	6890      	ldr	r0, [r2, #8]
    e5c4:	f8d2 9000 	ldr.w	r9, [r2]
    e5c8:	460c      	mov	r4, r1
    e5ca:	4615      	mov	r5, r2
    e5cc:	b118      	cbz	r0, e5d6 <__ssprint_r+0x1a>
    e5ce:	2300      	movs	r3, #0
    e5d0:	9301      	str	r3, [sp, #4]
    e5d2:	461e      	mov	r6, r3
    e5d4:	e008      	b.n	e5e8 <__ssprint_r+0x2c>
    e5d6:	6050      	str	r0, [r2, #4]
    e5d8:	e066      	b.n	e6a8 <__ssprint_r+0xec>
    e5da:	f8d9 3000 	ldr.w	r3, [r9]
    e5de:	f8d9 6004 	ldr.w	r6, [r9, #4]
    e5e2:	9301      	str	r3, [sp, #4]
    e5e4:	f109 0908 	add.w	r9, r9, #8
    e5e8:	2e00      	cmp	r6, #0
    e5ea:	d0f6      	beq.n	e5da <__ssprint_r+0x1e>
    e5ec:	68a7      	ldr	r7, [r4, #8]
    e5ee:	42be      	cmp	r6, r7
    e5f0:	d347      	bcc.n	e682 <__ssprint_r+0xc6>
    e5f2:	89a2      	ldrh	r2, [r4, #12]
    e5f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    e5f8:	d041      	beq.n	e67e <__ssprint_r+0xc2>
    e5fa:	6823      	ldr	r3, [r4, #0]
    e5fc:	6921      	ldr	r1, [r4, #16]
    e5fe:	ebc1 0a03 	rsb	sl, r1, r3
    e602:	6963      	ldr	r3, [r4, #20]
    e604:	2002      	movs	r0, #2
    e606:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e60a:	fb93 fbf0 	sdiv	fp, r3, r0
    e60e:	f10a 0001 	add.w	r0, sl, #1
    e612:	4430      	add	r0, r6
    e614:	4583      	cmp	fp, r0
    e616:	bf38      	it	cc
    e618:	4683      	movcc	fp, r0
    e61a:	0553      	lsls	r3, r2, #21
    e61c:	4640      	mov	r0, r8
    e61e:	d50f      	bpl.n	e640 <__ssprint_r+0x84>
    e620:	4659      	mov	r1, fp
    e622:	f7fd fe2b 	bl	c27c <_malloc_r>
    e626:	4607      	mov	r7, r0
    e628:	b198      	cbz	r0, e652 <__ssprint_r+0x96>
    e62a:	4652      	mov	r2, sl
    e62c:	6921      	ldr	r1, [r4, #16]
    e62e:	f7fe f8a2 	bl	c776 <memcpy>
    e632:	89a2      	ldrh	r2, [r4, #12]
    e634:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    e638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e63c:	81a2      	strh	r2, [r4, #12]
    e63e:	e015      	b.n	e66c <__ssprint_r+0xb0>
    e640:	465a      	mov	r2, fp
    e642:	f7fe fcbb 	bl	cfbc <_realloc_r>
    e646:	4607      	mov	r7, r0
    e648:	b980      	cbnz	r0, e66c <__ssprint_r+0xb0>
    e64a:	4640      	mov	r0, r8
    e64c:	6921      	ldr	r1, [r4, #16]
    e64e:	f7fd fb01 	bl	bc54 <_free_r>
    e652:	230c      	movs	r3, #12
    e654:	f8c8 3000 	str.w	r3, [r8]
    e658:	89a3      	ldrh	r3, [r4, #12]
    e65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e65e:	81a3      	strh	r3, [r4, #12]
    e660:	2300      	movs	r3, #0
    e662:	60ab      	str	r3, [r5, #8]
    e664:	606b      	str	r3, [r5, #4]
    e666:	f04f 30ff 	mov.w	r0, #4294967295
    e66a:	e01d      	b.n	e6a8 <__ssprint_r+0xec>
    e66c:	6127      	str	r7, [r4, #16]
    e66e:	ebca 030b 	rsb	r3, sl, fp
    e672:	4457      	add	r7, sl
    e674:	6027      	str	r7, [r4, #0]
    e676:	f8c4 b014 	str.w	fp, [r4, #20]
    e67a:	4637      	mov	r7, r6
    e67c:	60a3      	str	r3, [r4, #8]
    e67e:	42be      	cmp	r6, r7
    e680:	d200      	bcs.n	e684 <__ssprint_r+0xc8>
    e682:	4637      	mov	r7, r6
    e684:	463a      	mov	r2, r7
    e686:	6820      	ldr	r0, [r4, #0]
    e688:	9901      	ldr	r1, [sp, #4]
    e68a:	f7fe f87d 	bl	c788 <memmove>
    e68e:	68a3      	ldr	r3, [r4, #8]
    e690:	1bdb      	subs	r3, r3, r7
    e692:	60a3      	str	r3, [r4, #8]
    e694:	6823      	ldr	r3, [r4, #0]
    e696:	441f      	add	r7, r3
    e698:	68ab      	ldr	r3, [r5, #8]
    e69a:	6027      	str	r7, [r4, #0]
    e69c:	1b9e      	subs	r6, r3, r6
    e69e:	60ae      	str	r6, [r5, #8]
    e6a0:	2e00      	cmp	r6, #0
    e6a2:	d19a      	bne.n	e5da <__ssprint_r+0x1e>
    e6a4:	606e      	str	r6, [r5, #4]
    e6a6:	4630      	mov	r0, r6
    e6a8:	b003      	add	sp, #12
    e6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e6ae <_svfiprintf_r>:
    e6ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6b2:	461e      	mov	r6, r3
    e6b4:	898b      	ldrh	r3, [r1, #12]
    e6b6:	b0ad      	sub	sp, #180	; 0xb4
    e6b8:	4688      	mov	r8, r1
    e6ba:	0619      	lsls	r1, r3, #24
    e6bc:	4683      	mov	fp, r0
    e6be:	9202      	str	r2, [sp, #8]
    e6c0:	d513      	bpl.n	e6ea <_svfiprintf_r+0x3c>
    e6c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e6c6:	b983      	cbnz	r3, e6ea <_svfiprintf_r+0x3c>
    e6c8:	2140      	movs	r1, #64	; 0x40
    e6ca:	f7fd fdd7 	bl	c27c <_malloc_r>
    e6ce:	f8c8 0000 	str.w	r0, [r8]
    e6d2:	f8c8 0010 	str.w	r0, [r8, #16]
    e6d6:	b928      	cbnz	r0, e6e4 <_svfiprintf_r+0x36>
    e6d8:	230c      	movs	r3, #12
    e6da:	f8cb 3000 	str.w	r3, [fp]
    e6de:	f04f 30ff 	mov.w	r0, #4294967295
    e6e2:	e3d6      	b.n	ee92 <_svfiprintf_r+0x7e4>
    e6e4:	2340      	movs	r3, #64	; 0x40
    e6e6:	f8c8 3014 	str.w	r3, [r8, #20]
    e6ea:	2300      	movs	r3, #0
    e6ec:	aa1c      	add	r2, sp, #112	; 0x70
    e6ee:	920f      	str	r2, [sp, #60]	; 0x3c
    e6f0:	9311      	str	r3, [sp, #68]	; 0x44
    e6f2:	9310      	str	r3, [sp, #64]	; 0x40
    e6f4:	4694      	mov	ip, r2
    e6f6:	930a      	str	r3, [sp, #40]	; 0x28
    e6f8:	9305      	str	r3, [sp, #20]
    e6fa:	9b02      	ldr	r3, [sp, #8]
    e6fc:	461c      	mov	r4, r3
    e6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    e702:	b91a      	cbnz	r2, e70c <_svfiprintf_r+0x5e>
    e704:	9802      	ldr	r0, [sp, #8]
    e706:	1a25      	subs	r5, r4, r0
    e708:	d103      	bne.n	e712 <_svfiprintf_r+0x64>
    e70a:	e01d      	b.n	e748 <_svfiprintf_r+0x9a>
    e70c:	2a25      	cmp	r2, #37	; 0x25
    e70e:	d1f5      	bne.n	e6fc <_svfiprintf_r+0x4e>
    e710:	e7f8      	b.n	e704 <_svfiprintf_r+0x56>
    e712:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e714:	9902      	ldr	r1, [sp, #8]
    e716:	442b      	add	r3, r5
    e718:	9311      	str	r3, [sp, #68]	; 0x44
    e71a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e71c:	3301      	adds	r3, #1
    e71e:	2b07      	cmp	r3, #7
    e720:	e88c 0022 	stmia.w	ip, {r1, r5}
    e724:	9310      	str	r3, [sp, #64]	; 0x40
    e726:	dc02      	bgt.n	e72e <_svfiprintf_r+0x80>
    e728:	f10c 0c08 	add.w	ip, ip, #8
    e72c:	e009      	b.n	e742 <_svfiprintf_r+0x94>
    e72e:	4658      	mov	r0, fp
    e730:	4641      	mov	r1, r8
    e732:	aa0f      	add	r2, sp, #60	; 0x3c
    e734:	f7ff ff42 	bl	e5bc <__ssprint_r>
    e738:	2800      	cmp	r0, #0
    e73a:	f040 83a2 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    e73e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    e742:	9a05      	ldr	r2, [sp, #20]
    e744:	442a      	add	r2, r5
    e746:	9205      	str	r2, [sp, #20]
    e748:	7823      	ldrb	r3, [r4, #0]
    e74a:	2b00      	cmp	r3, #0
    e74c:	f000 8392 	beq.w	ee74 <_svfiprintf_r+0x7c6>
    e750:	2200      	movs	r2, #0
    e752:	3401      	adds	r4, #1
    e754:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    e758:	f04f 3aff 	mov.w	sl, #4294967295
    e75c:	9204      	str	r2, [sp, #16]
    e75e:	4617      	mov	r7, r2
    e760:	1c65      	adds	r5, r4, #1
    e762:	7823      	ldrb	r3, [r4, #0]
    e764:	9502      	str	r5, [sp, #8]
    e766:	2b58      	cmp	r3, #88	; 0x58
    e768:	d065      	beq.n	e836 <_svfiprintf_r+0x188>
    e76a:	dc2e      	bgt.n	e7ca <_svfiprintf_r+0x11c>
    e76c:	2b2e      	cmp	r3, #46	; 0x2e
    e76e:	d077      	beq.n	e860 <_svfiprintf_r+0x1b2>
    e770:	dc12      	bgt.n	e798 <_svfiprintf_r+0xea>
    e772:	2b2a      	cmp	r3, #42	; 0x2a
    e774:	d067      	beq.n	e846 <_svfiprintf_r+0x198>
    e776:	dc08      	bgt.n	e78a <_svfiprintf_r+0xdc>
    e778:	2b20      	cmp	r3, #32
    e77a:	d060      	beq.n	e83e <_svfiprintf_r+0x190>
    e77c:	2b23      	cmp	r3, #35	; 0x23
    e77e:	f040 8203 	bne.w	eb88 <_svfiprintf_r+0x4da>
    e782:	f047 0701 	orr.w	r7, r7, #1
    e786:	9c02      	ldr	r4, [sp, #8]
    e788:	e7ea      	b.n	e760 <_svfiprintf_r+0xb2>
    e78a:	2b2b      	cmp	r3, #43	; 0x2b
    e78c:	d101      	bne.n	e792 <_svfiprintf_r+0xe4>
    e78e:	461a      	mov	r2, r3
    e790:	e7f9      	b.n	e786 <_svfiprintf_r+0xd8>
    e792:	2b2d      	cmp	r3, #45	; 0x2d
    e794:	d061      	beq.n	e85a <_svfiprintf_r+0x1ac>
    e796:	e1f7      	b.n	eb88 <_svfiprintf_r+0x4da>
    e798:	2b39      	cmp	r3, #57	; 0x39
    e79a:	dc08      	bgt.n	e7ae <_svfiprintf_r+0x100>
    e79c:	2b31      	cmp	r3, #49	; 0x31
    e79e:	f280 8081 	bge.w	e8a4 <_svfiprintf_r+0x1f6>
    e7a2:	2b30      	cmp	r3, #48	; 0x30
    e7a4:	f040 81f0 	bne.w	eb88 <_svfiprintf_r+0x4da>
    e7a8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    e7ac:	e7eb      	b.n	e786 <_svfiprintf_r+0xd8>
    e7ae:	2b4f      	cmp	r3, #79	; 0x4f
    e7b0:	f000 80e1 	beq.w	e976 <_svfiprintf_r+0x2c8>
    e7b4:	2b55      	cmp	r3, #85	; 0x55
    e7b6:	f000 8121 	beq.w	e9fc <_svfiprintf_r+0x34e>
    e7ba:	2b44      	cmp	r3, #68	; 0x44
    e7bc:	f040 81e4 	bne.w	eb88 <_svfiprintf_r+0x4da>
    e7c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    e7c4:	f047 0710 	orr.w	r7, r7, #16
    e7c8:	e095      	b.n	e8f6 <_svfiprintf_r+0x248>
    e7ca:	2b6e      	cmp	r3, #110	; 0x6e
    e7cc:	f000 80b7 	beq.w	e93e <_svfiprintf_r+0x290>
    e7d0:	dc0d      	bgt.n	e7ee <_svfiprintf_r+0x140>
    e7d2:	2b68      	cmp	r3, #104	; 0x68
    e7d4:	d077      	beq.n	e8c6 <_svfiprintf_r+0x218>
    e7d6:	dc05      	bgt.n	e7e4 <_svfiprintf_r+0x136>
    e7d8:	2b63      	cmp	r3, #99	; 0x63
    e7da:	f000 8084 	beq.w	e8e6 <_svfiprintf_r+0x238>
    e7de:	2b64      	cmp	r3, #100	; 0x64
    e7e0:	d026      	beq.n	e830 <_svfiprintf_r+0x182>
    e7e2:	e1d1      	b.n	eb88 <_svfiprintf_r+0x4da>
    e7e4:	2b69      	cmp	r3, #105	; 0x69
    e7e6:	d023      	beq.n	e830 <_svfiprintf_r+0x182>
    e7e8:	2b6c      	cmp	r3, #108	; 0x6c
    e7ea:	d06f      	beq.n	e8cc <_svfiprintf_r+0x21e>
    e7ec:	e1cc      	b.n	eb88 <_svfiprintf_r+0x4da>
    e7ee:	2b71      	cmp	r3, #113	; 0x71
    e7f0:	d076      	beq.n	e8e0 <_svfiprintf_r+0x232>
    e7f2:	dc13      	bgt.n	e81c <_svfiprintf_r+0x16e>
    e7f4:	2b6f      	cmp	r3, #111	; 0x6f
    e7f6:	f000 80c0 	beq.w	e97a <_svfiprintf_r+0x2cc>
    e7fa:	2b70      	cmp	r3, #112	; 0x70
    e7fc:	f040 81c4 	bne.w	eb88 <_svfiprintf_r+0x4da>
    e800:	2330      	movs	r3, #48	; 0x30
    e802:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    e806:	48a0      	ldr	r0, [pc, #640]	; (ea88 <_svfiprintf_r+0x3da>)
    e808:	6834      	ldr	r4, [r6, #0]
    e80a:	900a      	str	r0, [sp, #40]	; 0x28
    e80c:	2378      	movs	r3, #120	; 0x78
    e80e:	2500      	movs	r5, #0
    e810:	f047 0702 	orr.w	r7, r7, #2
    e814:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    e818:	3604      	adds	r6, #4
    e81a:	e12f      	b.n	ea7c <_svfiprintf_r+0x3ce>
    e81c:	2b75      	cmp	r3, #117	; 0x75
    e81e:	f000 80ef 	beq.w	ea00 <_svfiprintf_r+0x352>
    e822:	2b78      	cmp	r3, #120	; 0x78
    e824:	f000 8104 	beq.w	ea30 <_svfiprintf_r+0x382>
    e828:	2b73      	cmp	r3, #115	; 0x73
    e82a:	f040 81ad 	bne.w	eb88 <_svfiprintf_r+0x4da>
    e82e:	e0c0      	b.n	e9b2 <_svfiprintf_r+0x304>
    e830:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    e834:	e05f      	b.n	e8f6 <_svfiprintf_r+0x248>
    e836:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    e83a:	4c94      	ldr	r4, [pc, #592]	; (ea8c <_svfiprintf_r+0x3de>)
    e83c:	e0fb      	b.n	ea36 <_svfiprintf_r+0x388>
    e83e:	2a00      	cmp	r2, #0
    e840:	bf08      	it	eq
    e842:	2220      	moveq	r2, #32
    e844:	e79f      	b.n	e786 <_svfiprintf_r+0xd8>
    e846:	1d33      	adds	r3, r6, #4
    e848:	6836      	ldr	r6, [r6, #0]
    e84a:	9604      	str	r6, [sp, #16]
    e84c:	2e00      	cmp	r6, #0
    e84e:	db01      	blt.n	e854 <_svfiprintf_r+0x1a6>
    e850:	461e      	mov	r6, r3
    e852:	e798      	b.n	e786 <_svfiprintf_r+0xd8>
    e854:	4275      	negs	r5, r6
    e856:	9504      	str	r5, [sp, #16]
    e858:	461e      	mov	r6, r3
    e85a:	f047 0704 	orr.w	r7, r7, #4
    e85e:	e792      	b.n	e786 <_svfiprintf_r+0xd8>
    e860:	9c02      	ldr	r4, [sp, #8]
    e862:	7823      	ldrb	r3, [r4, #0]
    e864:	2b2a      	cmp	r3, #42	; 0x2a
    e866:	f104 0101 	add.w	r1, r4, #1
    e86a:	d002      	beq.n	e872 <_svfiprintf_r+0x1c4>
    e86c:	f04f 0a00 	mov.w	sl, #0
    e870:	e00a      	b.n	e888 <_svfiprintf_r+0x1da>
    e872:	f8d6 a000 	ldr.w	sl, [r6]
    e876:	9102      	str	r1, [sp, #8]
    e878:	1d33      	adds	r3, r6, #4
    e87a:	f1ba 0f00 	cmp.w	sl, #0
    e87e:	461e      	mov	r6, r3
    e880:	da81      	bge.n	e786 <_svfiprintf_r+0xd8>
    e882:	f04f 3aff 	mov.w	sl, #4294967295
    e886:	e77e      	b.n	e786 <_svfiprintf_r+0xd8>
    e888:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e88c:	2809      	cmp	r0, #9
    e88e:	d805      	bhi.n	e89c <_svfiprintf_r+0x1ee>
    e890:	230a      	movs	r3, #10
    e892:	fb03 0a0a 	mla	sl, r3, sl, r0
    e896:	f811 3b01 	ldrb.w	r3, [r1], #1
    e89a:	e7f5      	b.n	e888 <_svfiprintf_r+0x1da>
    e89c:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
    e8a0:	9102      	str	r1, [sp, #8]
    e8a2:	e760      	b.n	e766 <_svfiprintf_r+0xb8>
    e8a4:	2500      	movs	r5, #0
    e8a6:	9504      	str	r5, [sp, #16]
    e8a8:	9c04      	ldr	r4, [sp, #16]
    e8aa:	3b30      	subs	r3, #48	; 0x30
    e8ac:	210a      	movs	r1, #10
    e8ae:	fb01 3404 	mla	r4, r1, r4, r3
    e8b2:	9902      	ldr	r1, [sp, #8]
    e8b4:	9404      	str	r4, [sp, #16]
    e8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
    e8ba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e8be:	2809      	cmp	r0, #9
    e8c0:	d8ee      	bhi.n	e8a0 <_svfiprintf_r+0x1f2>
    e8c2:	9102      	str	r1, [sp, #8]
    e8c4:	e7f0      	b.n	e8a8 <_svfiprintf_r+0x1fa>
    e8c6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    e8ca:	e75c      	b.n	e786 <_svfiprintf_r+0xd8>
    e8cc:	9d02      	ldr	r5, [sp, #8]
    e8ce:	782b      	ldrb	r3, [r5, #0]
    e8d0:	2b6c      	cmp	r3, #108	; 0x6c
    e8d2:	d102      	bne.n	e8da <_svfiprintf_r+0x22c>
    e8d4:	3501      	adds	r5, #1
    e8d6:	9502      	str	r5, [sp, #8]
    e8d8:	e002      	b.n	e8e0 <_svfiprintf_r+0x232>
    e8da:	f047 0710 	orr.w	r7, r7, #16
    e8de:	e752      	b.n	e786 <_svfiprintf_r+0xd8>
    e8e0:	f047 0720 	orr.w	r7, r7, #32
    e8e4:	e74f      	b.n	e786 <_svfiprintf_r+0xd8>
    e8e6:	6833      	ldr	r3, [r6, #0]
    e8e8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e8ec:	2500      	movs	r5, #0
    e8ee:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    e8f2:	3604      	adds	r6, #4
    e8f4:	e152      	b.n	eb9c <_svfiprintf_r+0x4ee>
    e8f6:	06ba      	lsls	r2, r7, #26
    e8f8:	d507      	bpl.n	e90a <_svfiprintf_r+0x25c>
    e8fa:	3607      	adds	r6, #7
    e8fc:	f026 0307 	bic.w	r3, r6, #7
    e900:	f103 0608 	add.w	r6, r3, #8
    e904:	e9d3 4500 	ldrd	r4, r5, [r3]
    e908:	e00d      	b.n	e926 <_svfiprintf_r+0x278>
    e90a:	f017 0f10 	tst.w	r7, #16
    e90e:	f106 0304 	add.w	r3, r6, #4
    e912:	d001      	beq.n	e918 <_svfiprintf_r+0x26a>
    e914:	6834      	ldr	r4, [r6, #0]
    e916:	e004      	b.n	e922 <_svfiprintf_r+0x274>
    e918:	6834      	ldr	r4, [r6, #0]
    e91a:	f017 0f40 	tst.w	r7, #64	; 0x40
    e91e:	bf18      	it	ne
    e920:	b224      	sxthne	r4, r4
    e922:	17e5      	asrs	r5, r4, #31
    e924:	461e      	mov	r6, r3
    e926:	2c00      	cmp	r4, #0
    e928:	f175 0000 	sbcs.w	r0, r5, #0
    e92c:	f280 80b0 	bge.w	ea90 <_svfiprintf_r+0x3e2>
    e930:	232d      	movs	r3, #45	; 0x2d
    e932:	4264      	negs	r4, r4
    e934:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    e938:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    e93c:	e0a8      	b.n	ea90 <_svfiprintf_r+0x3e2>
    e93e:	f017 0f20 	tst.w	r7, #32
    e942:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    e946:	f106 0104 	add.w	r1, r6, #4
    e94a:	d007      	beq.n	e95c <_svfiprintf_r+0x2ae>
    e94c:	9c05      	ldr	r4, [sp, #20]
    e94e:	6830      	ldr	r0, [r6, #0]
    e950:	17e5      	asrs	r5, r4, #31
    e952:	4622      	mov	r2, r4
    e954:	462b      	mov	r3, r5
    e956:	e9c0 2300 	strd	r2, r3, [r0]
    e95a:	e00a      	b.n	e972 <_svfiprintf_r+0x2c4>
    e95c:	06fb      	lsls	r3, r7, #27
    e95e:	d405      	bmi.n	e96c <_svfiprintf_r+0x2be>
    e960:	067f      	lsls	r7, r7, #25
    e962:	d503      	bpl.n	e96c <_svfiprintf_r+0x2be>
    e964:	6833      	ldr	r3, [r6, #0]
    e966:	9c05      	ldr	r4, [sp, #20]
    e968:	801c      	strh	r4, [r3, #0]
    e96a:	e002      	b.n	e972 <_svfiprintf_r+0x2c4>
    e96c:	6833      	ldr	r3, [r6, #0]
    e96e:	9d05      	ldr	r5, [sp, #20]
    e970:	601d      	str	r5, [r3, #0]
    e972:	460e      	mov	r6, r1
    e974:	e6c1      	b.n	e6fa <_svfiprintf_r+0x4c>
    e976:	f047 0710 	orr.w	r7, r7, #16
    e97a:	f017 0320 	ands.w	r3, r7, #32
    e97e:	d008      	beq.n	e992 <_svfiprintf_r+0x2e4>
    e980:	3607      	adds	r6, #7
    e982:	f026 0307 	bic.w	r3, r6, #7
    e986:	e9d3 4500 	ldrd	r4, r5, [r3]
    e98a:	f103 0608 	add.w	r6, r3, #8
    e98e:	2300      	movs	r3, #0
    e990:	e075      	b.n	ea7e <_svfiprintf_r+0x3d0>
    e992:	f017 0110 	ands.w	r1, r7, #16
    e996:	f106 0204 	add.w	r2, r6, #4
    e99a:	d106      	bne.n	e9aa <_svfiprintf_r+0x2fc>
    e99c:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    e9a0:	d003      	beq.n	e9aa <_svfiprintf_r+0x2fc>
    e9a2:	8834      	ldrh	r4, [r6, #0]
    e9a4:	2500      	movs	r5, #0
    e9a6:	4616      	mov	r6, r2
    e9a8:	e7f1      	b.n	e98e <_svfiprintf_r+0x2e0>
    e9aa:	6834      	ldr	r4, [r6, #0]
    e9ac:	2500      	movs	r5, #0
    e9ae:	4616      	mov	r6, r2
    e9b0:	e065      	b.n	ea7e <_svfiprintf_r+0x3d0>
    e9b2:	f8d6 9000 	ldr.w	r9, [r6]
    e9b6:	2300      	movs	r3, #0
    e9b8:	459a      	cmp	sl, r3
    e9ba:	f106 0604 	add.w	r6, r6, #4
    e9be:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    e9c2:	4648      	mov	r0, r9
    e9c4:	db11      	blt.n	e9ea <_svfiprintf_r+0x33c>
    e9c6:	4619      	mov	r1, r3
    e9c8:	4652      	mov	r2, sl
    e9ca:	f8cd c004 	str.w	ip, [sp, #4]
    e9ce:	f7fd fec3 	bl	c758 <memchr>
    e9d2:	f8dd c004 	ldr.w	ip, [sp, #4]
    e9d6:	2800      	cmp	r0, #0
    e9d8:	f000 80e5 	beq.w	eba6 <_svfiprintf_r+0x4f8>
    e9dc:	ebc9 0000 	rsb	r0, r9, r0
    e9e0:	4550      	cmp	r0, sl
    e9e2:	bfb8      	it	lt
    e9e4:	4682      	movlt	sl, r0
    e9e6:	2500      	movs	r5, #0
    e9e8:	e0de      	b.n	eba8 <_svfiprintf_r+0x4fa>
    e9ea:	f8cd c004 	str.w	ip, [sp, #4]
    e9ee:	f7f9 fe12 	bl	8616 <strlen>
    e9f2:	2500      	movs	r5, #0
    e9f4:	4682      	mov	sl, r0
    e9f6:	f8dd c004 	ldr.w	ip, [sp, #4]
    e9fa:	e0d5      	b.n	eba8 <_svfiprintf_r+0x4fa>
    e9fc:	f047 0710 	orr.w	r7, r7, #16
    ea00:	06bd      	lsls	r5, r7, #26
    ea02:	d507      	bpl.n	ea14 <_svfiprintf_r+0x366>
    ea04:	3607      	adds	r6, #7
    ea06:	f026 0307 	bic.w	r3, r6, #7
    ea0a:	f103 0608 	add.w	r6, r3, #8
    ea0e:	e9d3 4500 	ldrd	r4, r5, [r3]
    ea12:	e00b      	b.n	ea2c <_svfiprintf_r+0x37e>
    ea14:	f017 0f10 	tst.w	r7, #16
    ea18:	f106 0304 	add.w	r3, r6, #4
    ea1c:	d103      	bne.n	ea26 <_svfiprintf_r+0x378>
    ea1e:	067c      	lsls	r4, r7, #25
    ea20:	d501      	bpl.n	ea26 <_svfiprintf_r+0x378>
    ea22:	8834      	ldrh	r4, [r6, #0]
    ea24:	e000      	b.n	ea28 <_svfiprintf_r+0x37a>
    ea26:	6834      	ldr	r4, [r6, #0]
    ea28:	2500      	movs	r5, #0
    ea2a:	461e      	mov	r6, r3
    ea2c:	2301      	movs	r3, #1
    ea2e:	e026      	b.n	ea7e <_svfiprintf_r+0x3d0>
    ea30:	4c15      	ldr	r4, [pc, #84]	; (ea88 <_svfiprintf_r+0x3da>)
    ea32:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    ea36:	06b8      	lsls	r0, r7, #26
    ea38:	940a      	str	r4, [sp, #40]	; 0x28
    ea3a:	d507      	bpl.n	ea4c <_svfiprintf_r+0x39e>
    ea3c:	3607      	adds	r6, #7
    ea3e:	f026 0207 	bic.w	r2, r6, #7
    ea42:	f102 0608 	add.w	r6, r2, #8
    ea46:	e9d2 4500 	ldrd	r4, r5, [r2]
    ea4a:	e00b      	b.n	ea64 <_svfiprintf_r+0x3b6>
    ea4c:	f017 0f10 	tst.w	r7, #16
    ea50:	f106 0204 	add.w	r2, r6, #4
    ea54:	d103      	bne.n	ea5e <_svfiprintf_r+0x3b0>
    ea56:	0679      	lsls	r1, r7, #25
    ea58:	d501      	bpl.n	ea5e <_svfiprintf_r+0x3b0>
    ea5a:	8834      	ldrh	r4, [r6, #0]
    ea5c:	e000      	b.n	ea60 <_svfiprintf_r+0x3b2>
    ea5e:	6834      	ldr	r4, [r6, #0]
    ea60:	2500      	movs	r5, #0
    ea62:	4616      	mov	r6, r2
    ea64:	07fa      	lsls	r2, r7, #31
    ea66:	d509      	bpl.n	ea7c <_svfiprintf_r+0x3ce>
    ea68:	ea54 0005 	orrs.w	r0, r4, r5
    ea6c:	d006      	beq.n	ea7c <_svfiprintf_r+0x3ce>
    ea6e:	2230      	movs	r2, #48	; 0x30
    ea70:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    ea74:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    ea78:	f047 0702 	orr.w	r7, r7, #2
    ea7c:	2302      	movs	r3, #2
    ea7e:	2200      	movs	r2, #0
    ea80:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    ea84:	e005      	b.n	ea92 <_svfiprintf_r+0x3e4>
    ea86:	bf00      	nop
    ea88:	00010adf 	.word	0x00010adf
    ea8c:	00010ace 	.word	0x00010ace
    ea90:	2301      	movs	r3, #1
    ea92:	f1ba 0f00 	cmp.w	sl, #0
    ea96:	bfa8      	it	ge
    ea98:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    ea9c:	ea54 0105 	orrs.w	r1, r4, r5
    eaa0:	d102      	bne.n	eaa8 <_svfiprintf_r+0x3fa>
    eaa2:	f1ba 0f00 	cmp.w	sl, #0
    eaa6:	d05e      	beq.n	eb66 <_svfiprintf_r+0x4b8>
    eaa8:	2b01      	cmp	r3, #1
    eaaa:	d01f      	beq.n	eaec <_svfiprintf_r+0x43e>
    eaac:	2b02      	cmp	r3, #2
    eaae:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
    eab2:	d045      	beq.n	eb40 <_svfiprintf_r+0x492>
    eab4:	08e0      	lsrs	r0, r4, #3
    eab6:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
    eaba:	08e8      	lsrs	r0, r5, #3
    eabc:	9106      	str	r1, [sp, #24]
    eabe:	9007      	str	r0, [sp, #28]
    eac0:	f004 0207 	and.w	r2, r4, #7
    eac4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    eac8:	3230      	adds	r2, #48	; 0x30
    eaca:	ea54 0105 	orrs.w	r1, r4, r5
    eace:	4699      	mov	r9, r3
    ead0:	701a      	strb	r2, [r3, #0]
    ead2:	f103 33ff 	add.w	r3, r3, #4294967295
    ead6:	d1ed      	bne.n	eab4 <_svfiprintf_r+0x406>
    ead8:	07f8      	lsls	r0, r7, #31
    eada:	4649      	mov	r1, r9
    eadc:	d54e      	bpl.n	eb7c <_svfiprintf_r+0x4ce>
    eade:	2a30      	cmp	r2, #48	; 0x30
    eae0:	d04c      	beq.n	eb7c <_svfiprintf_r+0x4ce>
    eae2:	4699      	mov	r9, r3
    eae4:	2330      	movs	r3, #48	; 0x30
    eae6:	f801 3c01 	strb.w	r3, [r1, #-1]
    eaea:	e047      	b.n	eb7c <_svfiprintf_r+0x4ce>
    eaec:	2d00      	cmp	r5, #0
    eaee:	bf08      	it	eq
    eaf0:	2c0a      	cmpeq	r4, #10
    eaf2:	d205      	bcs.n	eb00 <_svfiprintf_r+0x452>
    eaf4:	3430      	adds	r4, #48	; 0x30
    eaf6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    eafa:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
    eafe:	e03d      	b.n	eb7c <_svfiprintf_r+0x4ce>
    eb00:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
    eb04:	9203      	str	r2, [sp, #12]
    eb06:	4620      	mov	r0, r4
    eb08:	4629      	mov	r1, r5
    eb0a:	220a      	movs	r2, #10
    eb0c:	2300      	movs	r3, #0
    eb0e:	f8cd c004 	str.w	ip, [sp, #4]
    eb12:	f7f9 f8dd 	bl	7cd0 <__aeabi_uldivmod>
    eb16:	9b03      	ldr	r3, [sp, #12]
    eb18:	f8dd 900c 	ldr.w	r9, [sp, #12]
    eb1c:	3230      	adds	r2, #48	; 0x30
    eb1e:	f803 2901 	strb.w	r2, [r3], #-1
    eb22:	4620      	mov	r0, r4
    eb24:	9303      	str	r3, [sp, #12]
    eb26:	4629      	mov	r1, r5
    eb28:	220a      	movs	r2, #10
    eb2a:	2300      	movs	r3, #0
    eb2c:	f7f9 f8d0 	bl	7cd0 <__aeabi_uldivmod>
    eb30:	4604      	mov	r4, r0
    eb32:	460d      	mov	r5, r1
    eb34:	ea54 0005 	orrs.w	r0, r4, r5
    eb38:	f8dd c004 	ldr.w	ip, [sp, #4]
    eb3c:	d1e3      	bne.n	eb06 <_svfiprintf_r+0x458>
    eb3e:	e01d      	b.n	eb7c <_svfiprintf_r+0x4ce>
    eb40:	f004 020f 	and.w	r2, r4, #15
    eb44:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb46:	5c8a      	ldrb	r2, [r1, r2]
    eb48:	4699      	mov	r9, r3
    eb4a:	f803 2901 	strb.w	r2, [r3], #-1
    eb4e:	0922      	lsrs	r2, r4, #4
    eb50:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
    eb54:	0929      	lsrs	r1, r5, #4
    eb56:	9008      	str	r0, [sp, #32]
    eb58:	9109      	str	r1, [sp, #36]	; 0x24
    eb5a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    eb5e:	ea54 0205 	orrs.w	r2, r4, r5
    eb62:	d1ed      	bne.n	eb40 <_svfiprintf_r+0x492>
    eb64:	e00a      	b.n	eb7c <_svfiprintf_r+0x4ce>
    eb66:	b93b      	cbnz	r3, eb78 <_svfiprintf_r+0x4ca>
    eb68:	07f9      	lsls	r1, r7, #31
    eb6a:	d505      	bpl.n	eb78 <_svfiprintf_r+0x4ca>
    eb6c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    eb70:	2330      	movs	r3, #48	; 0x30
    eb72:	f809 3d41 	strb.w	r3, [r9, #-65]!
    eb76:	e001      	b.n	eb7c <_svfiprintf_r+0x4ce>
    eb78:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    eb7c:	4655      	mov	r5, sl
    eb7e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    eb82:	ebc9 0a0a 	rsb	sl, r9, sl
    eb86:	e00f      	b.n	eba8 <_svfiprintf_r+0x4fa>
    eb88:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	f000 8171 	beq.w	ee74 <_svfiprintf_r+0x7c6>
    eb92:	2500      	movs	r5, #0
    eb94:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    eb98:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    eb9c:	f04f 0a01 	mov.w	sl, #1
    eba0:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    eba4:	e000      	b.n	eba8 <_svfiprintf_r+0x4fa>
    eba6:	4605      	mov	r5, r0
    eba8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ebac:	45aa      	cmp	sl, r5
    ebae:	bfac      	ite	ge
    ebb0:	4654      	movge	r4, sl
    ebb2:	462c      	movlt	r4, r5
    ebb4:	b103      	cbz	r3, ebb8 <_svfiprintf_r+0x50a>
    ebb6:	3401      	adds	r4, #1
    ebb8:	f017 0302 	ands.w	r3, r7, #2
    ebbc:	9303      	str	r3, [sp, #12]
    ebbe:	bf18      	it	ne
    ebc0:	3402      	addne	r4, #2
    ebc2:	f017 0384 	ands.w	r3, r7, #132	; 0x84
    ebc6:	930b      	str	r3, [sp, #44]	; 0x2c
    ebc8:	d13b      	bne.n	ec42 <_svfiprintf_r+0x594>
    ebca:	9804      	ldr	r0, [sp, #16]
    ebcc:	1b03      	subs	r3, r0, r4
    ebce:	2b00      	cmp	r3, #0
    ebd0:	dd37      	ble.n	ec42 <_svfiprintf_r+0x594>
    ebd2:	4aa6      	ldr	r2, [pc, #664]	; (ee6c <_svfiprintf_r+0x7be>)
    ebd4:	f8cc 2000 	str.w	r2, [ip]
    ebd8:	2b10      	cmp	r3, #16
    ebda:	dd1b      	ble.n	ec14 <_svfiprintf_r+0x566>
    ebdc:	2210      	movs	r2, #16
    ebde:	f8cc 2004 	str.w	r2, [ip, #4]
    ebe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ebe4:	3210      	adds	r2, #16
    ebe6:	9211      	str	r2, [sp, #68]	; 0x44
    ebe8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebea:	3201      	adds	r2, #1
    ebec:	2a07      	cmp	r2, #7
    ebee:	9210      	str	r2, [sp, #64]	; 0x40
    ebf0:	dc02      	bgt.n	ebf8 <_svfiprintf_r+0x54a>
    ebf2:	f10c 0c08 	add.w	ip, ip, #8
    ebf6:	e00b      	b.n	ec10 <_svfiprintf_r+0x562>
    ebf8:	4658      	mov	r0, fp
    ebfa:	4641      	mov	r1, r8
    ebfc:	aa0f      	add	r2, sp, #60	; 0x3c
    ebfe:	9301      	str	r3, [sp, #4]
    ec00:	f7ff fcdc 	bl	e5bc <__ssprint_r>
    ec04:	9b01      	ldr	r3, [sp, #4]
    ec06:	2800      	cmp	r0, #0
    ec08:	f040 813b 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ec0c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ec10:	3b10      	subs	r3, #16
    ec12:	e7de      	b.n	ebd2 <_svfiprintf_r+0x524>
    ec14:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ec16:	f8cc 3004 	str.w	r3, [ip, #4]
    ec1a:	4413      	add	r3, r2
    ec1c:	9311      	str	r3, [sp, #68]	; 0x44
    ec1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ec20:	3301      	adds	r3, #1
    ec22:	2b07      	cmp	r3, #7
    ec24:	9310      	str	r3, [sp, #64]	; 0x40
    ec26:	dc02      	bgt.n	ec2e <_svfiprintf_r+0x580>
    ec28:	f10c 0c08 	add.w	ip, ip, #8
    ec2c:	e009      	b.n	ec42 <_svfiprintf_r+0x594>
    ec2e:	4658      	mov	r0, fp
    ec30:	4641      	mov	r1, r8
    ec32:	aa0f      	add	r2, sp, #60	; 0x3c
    ec34:	f7ff fcc2 	bl	e5bc <__ssprint_r>
    ec38:	2800      	cmp	r0, #0
    ec3a:	f040 8122 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ec3e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ec42:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ec46:	b1db      	cbz	r3, ec80 <_svfiprintf_r+0x5d2>
    ec48:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    ec4c:	f8cc 3000 	str.w	r3, [ip]
    ec50:	2301      	movs	r3, #1
    ec52:	f8cc 3004 	str.w	r3, [ip, #4]
    ec56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec58:	3301      	adds	r3, #1
    ec5a:	9311      	str	r3, [sp, #68]	; 0x44
    ec5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ec5e:	3301      	adds	r3, #1
    ec60:	2b07      	cmp	r3, #7
    ec62:	9310      	str	r3, [sp, #64]	; 0x40
    ec64:	dc02      	bgt.n	ec6c <_svfiprintf_r+0x5be>
    ec66:	f10c 0c08 	add.w	ip, ip, #8
    ec6a:	e009      	b.n	ec80 <_svfiprintf_r+0x5d2>
    ec6c:	4658      	mov	r0, fp
    ec6e:	4641      	mov	r1, r8
    ec70:	aa0f      	add	r2, sp, #60	; 0x3c
    ec72:	f7ff fca3 	bl	e5bc <__ssprint_r>
    ec76:	2800      	cmp	r0, #0
    ec78:	f040 8103 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ec7c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ec80:	9b03      	ldr	r3, [sp, #12]
    ec82:	b1d3      	cbz	r3, ecba <_svfiprintf_r+0x60c>
    ec84:	ab0e      	add	r3, sp, #56	; 0x38
    ec86:	f8cc 3000 	str.w	r3, [ip]
    ec8a:	2302      	movs	r3, #2
    ec8c:	f8cc 3004 	str.w	r3, [ip, #4]
    ec90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec92:	3302      	adds	r3, #2
    ec94:	9311      	str	r3, [sp, #68]	; 0x44
    ec96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ec98:	3301      	adds	r3, #1
    ec9a:	2b07      	cmp	r3, #7
    ec9c:	9310      	str	r3, [sp, #64]	; 0x40
    ec9e:	dc02      	bgt.n	eca6 <_svfiprintf_r+0x5f8>
    eca0:	f10c 0c08 	add.w	ip, ip, #8
    eca4:	e009      	b.n	ecba <_svfiprintf_r+0x60c>
    eca6:	4658      	mov	r0, fp
    eca8:	4641      	mov	r1, r8
    ecaa:	aa0f      	add	r2, sp, #60	; 0x3c
    ecac:	f7ff fc86 	bl	e5bc <__ssprint_r>
    ecb0:	2800      	cmp	r0, #0
    ecb2:	f040 80e6 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ecb6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ecba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ecbc:	2b80      	cmp	r3, #128	; 0x80
    ecbe:	d13f      	bne.n	ed40 <_svfiprintf_r+0x692>
    ecc0:	9b04      	ldr	r3, [sp, #16]
    ecc2:	1b1b      	subs	r3, r3, r4
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	9303      	str	r3, [sp, #12]
    ecc8:	dd3a      	ble.n	ed40 <_svfiprintf_r+0x692>
    ecca:	9b03      	ldr	r3, [sp, #12]
    eccc:	2b10      	cmp	r3, #16
    ecce:	4b68      	ldr	r3, [pc, #416]	; (ee70 <_svfiprintf_r+0x7c2>)
    ecd0:	f8cc 3000 	str.w	r3, [ip]
    ecd4:	dd1b      	ble.n	ed0e <_svfiprintf_r+0x660>
    ecd6:	2310      	movs	r3, #16
    ecd8:	f8cc 3004 	str.w	r3, [ip, #4]
    ecdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ecde:	3310      	adds	r3, #16
    ece0:	9311      	str	r3, [sp, #68]	; 0x44
    ece2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ece4:	3301      	adds	r3, #1
    ece6:	2b07      	cmp	r3, #7
    ece8:	9310      	str	r3, [sp, #64]	; 0x40
    ecea:	dc02      	bgt.n	ecf2 <_svfiprintf_r+0x644>
    ecec:	f10c 0c08 	add.w	ip, ip, #8
    ecf0:	e009      	b.n	ed06 <_svfiprintf_r+0x658>
    ecf2:	4658      	mov	r0, fp
    ecf4:	4641      	mov	r1, r8
    ecf6:	aa0f      	add	r2, sp, #60	; 0x3c
    ecf8:	f7ff fc60 	bl	e5bc <__ssprint_r>
    ecfc:	2800      	cmp	r0, #0
    ecfe:	f040 80c0 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ed02:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ed06:	9b03      	ldr	r3, [sp, #12]
    ed08:	3b10      	subs	r3, #16
    ed0a:	9303      	str	r3, [sp, #12]
    ed0c:	e7dd      	b.n	ecca <_svfiprintf_r+0x61c>
    ed0e:	9b03      	ldr	r3, [sp, #12]
    ed10:	f8cc 3004 	str.w	r3, [ip, #4]
    ed14:	9803      	ldr	r0, [sp, #12]
    ed16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed18:	4403      	add	r3, r0
    ed1a:	9311      	str	r3, [sp, #68]	; 0x44
    ed1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed1e:	3301      	adds	r3, #1
    ed20:	2b07      	cmp	r3, #7
    ed22:	9310      	str	r3, [sp, #64]	; 0x40
    ed24:	dc02      	bgt.n	ed2c <_svfiprintf_r+0x67e>
    ed26:	f10c 0c08 	add.w	ip, ip, #8
    ed2a:	e009      	b.n	ed40 <_svfiprintf_r+0x692>
    ed2c:	4658      	mov	r0, fp
    ed2e:	4641      	mov	r1, r8
    ed30:	aa0f      	add	r2, sp, #60	; 0x3c
    ed32:	f7ff fc43 	bl	e5bc <__ssprint_r>
    ed36:	2800      	cmp	r0, #0
    ed38:	f040 80a3 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ed3c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ed40:	ebca 0505 	rsb	r5, sl, r5
    ed44:	2d00      	cmp	r5, #0
    ed46:	dd34      	ble.n	edb2 <_svfiprintf_r+0x704>
    ed48:	4b49      	ldr	r3, [pc, #292]	; (ee70 <_svfiprintf_r+0x7c2>)
    ed4a:	f8cc 3000 	str.w	r3, [ip]
    ed4e:	2d10      	cmp	r5, #16
    ed50:	dd19      	ble.n	ed86 <_svfiprintf_r+0x6d8>
    ed52:	2310      	movs	r3, #16
    ed54:	f8cc 3004 	str.w	r3, [ip, #4]
    ed58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed5a:	3310      	adds	r3, #16
    ed5c:	9311      	str	r3, [sp, #68]	; 0x44
    ed5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed60:	3301      	adds	r3, #1
    ed62:	2b07      	cmp	r3, #7
    ed64:	9310      	str	r3, [sp, #64]	; 0x40
    ed66:	dc02      	bgt.n	ed6e <_svfiprintf_r+0x6c0>
    ed68:	f10c 0c08 	add.w	ip, ip, #8
    ed6c:	e009      	b.n	ed82 <_svfiprintf_r+0x6d4>
    ed6e:	4658      	mov	r0, fp
    ed70:	4641      	mov	r1, r8
    ed72:	aa0f      	add	r2, sp, #60	; 0x3c
    ed74:	f7ff fc22 	bl	e5bc <__ssprint_r>
    ed78:	2800      	cmp	r0, #0
    ed7a:	f040 8082 	bne.w	ee82 <_svfiprintf_r+0x7d4>
    ed7e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ed82:	3d10      	subs	r5, #16
    ed84:	e7e0      	b.n	ed48 <_svfiprintf_r+0x69a>
    ed86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed88:	f8cc 5004 	str.w	r5, [ip, #4]
    ed8c:	441d      	add	r5, r3
    ed8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed90:	9511      	str	r5, [sp, #68]	; 0x44
    ed92:	3301      	adds	r3, #1
    ed94:	2b07      	cmp	r3, #7
    ed96:	9310      	str	r3, [sp, #64]	; 0x40
    ed98:	dc02      	bgt.n	eda0 <_svfiprintf_r+0x6f2>
    ed9a:	f10c 0c08 	add.w	ip, ip, #8
    ed9e:	e008      	b.n	edb2 <_svfiprintf_r+0x704>
    eda0:	4658      	mov	r0, fp
    eda2:	4641      	mov	r1, r8
    eda4:	aa0f      	add	r2, sp, #60	; 0x3c
    eda6:	f7ff fc09 	bl	e5bc <__ssprint_r>
    edaa:	2800      	cmp	r0, #0
    edac:	d169      	bne.n	ee82 <_svfiprintf_r+0x7d4>
    edae:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    edb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    edb4:	4453      	add	r3, sl
    edb6:	9311      	str	r3, [sp, #68]	; 0x44
    edb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    edba:	3301      	adds	r3, #1
    edbc:	2b07      	cmp	r3, #7
    edbe:	e88c 0600 	stmia.w	ip, {r9, sl}
    edc2:	9310      	str	r3, [sp, #64]	; 0x40
    edc4:	dc02      	bgt.n	edcc <_svfiprintf_r+0x71e>
    edc6:	f10c 0308 	add.w	r3, ip, #8
    edca:	e007      	b.n	eddc <_svfiprintf_r+0x72e>
    edcc:	4658      	mov	r0, fp
    edce:	4641      	mov	r1, r8
    edd0:	aa0f      	add	r2, sp, #60	; 0x3c
    edd2:	f7ff fbf3 	bl	e5bc <__ssprint_r>
    edd6:	2800      	cmp	r0, #0
    edd8:	d153      	bne.n	ee82 <_svfiprintf_r+0x7d4>
    edda:	ab1c      	add	r3, sp, #112	; 0x70
    eddc:	077a      	lsls	r2, r7, #29
    edde:	d40a      	bmi.n	edf6 <_svfiprintf_r+0x748>
    ede0:	9d05      	ldr	r5, [sp, #20]
    ede2:	9804      	ldr	r0, [sp, #16]
    ede4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ede6:	4284      	cmp	r4, r0
    ede8:	bfac      	ite	ge
    edea:	192d      	addge	r5, r5, r4
    edec:	182d      	addlt	r5, r5, r0
    edee:	9505      	str	r5, [sp, #20]
    edf0:	2b00      	cmp	r3, #0
    edf2:	d035      	beq.n	ee60 <_svfiprintf_r+0x7b2>
    edf4:	e02e      	b.n	ee54 <_svfiprintf_r+0x7a6>
    edf6:	9904      	ldr	r1, [sp, #16]
    edf8:	1b0d      	subs	r5, r1, r4
    edfa:	2d00      	cmp	r5, #0
    edfc:	ddf0      	ble.n	ede0 <_svfiprintf_r+0x732>
    edfe:	4a1b      	ldr	r2, [pc, #108]	; (ee6c <_svfiprintf_r+0x7be>)
    ee00:	601a      	str	r2, [r3, #0]
    ee02:	2d10      	cmp	r5, #16
    ee04:	dd15      	ble.n	ee32 <_svfiprintf_r+0x784>
    ee06:	2210      	movs	r2, #16
    ee08:	605a      	str	r2, [r3, #4]
    ee0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ee0c:	3210      	adds	r2, #16
    ee0e:	9211      	str	r2, [sp, #68]	; 0x44
    ee10:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ee12:	3201      	adds	r2, #1
    ee14:	2a07      	cmp	r2, #7
    ee16:	9210      	str	r2, [sp, #64]	; 0x40
    ee18:	dc01      	bgt.n	ee1e <_svfiprintf_r+0x770>
    ee1a:	3308      	adds	r3, #8
    ee1c:	e007      	b.n	ee2e <_svfiprintf_r+0x780>
    ee1e:	4658      	mov	r0, fp
    ee20:	4641      	mov	r1, r8
    ee22:	aa0f      	add	r2, sp, #60	; 0x3c
    ee24:	f7ff fbca 	bl	e5bc <__ssprint_r>
    ee28:	2800      	cmp	r0, #0
    ee2a:	d12a      	bne.n	ee82 <_svfiprintf_r+0x7d4>
    ee2c:	ab1c      	add	r3, sp, #112	; 0x70
    ee2e:	3d10      	subs	r5, #16
    ee30:	e7e5      	b.n	edfe <_svfiprintf_r+0x750>
    ee32:	605d      	str	r5, [r3, #4]
    ee34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee36:	441d      	add	r5, r3
    ee38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ee3a:	9511      	str	r5, [sp, #68]	; 0x44
    ee3c:	3301      	adds	r3, #1
    ee3e:	2b07      	cmp	r3, #7
    ee40:	9310      	str	r3, [sp, #64]	; 0x40
    ee42:	ddcd      	ble.n	ede0 <_svfiprintf_r+0x732>
    ee44:	4658      	mov	r0, fp
    ee46:	4641      	mov	r1, r8
    ee48:	aa0f      	add	r2, sp, #60	; 0x3c
    ee4a:	f7ff fbb7 	bl	e5bc <__ssprint_r>
    ee4e:	2800      	cmp	r0, #0
    ee50:	d0c6      	beq.n	ede0 <_svfiprintf_r+0x732>
    ee52:	e016      	b.n	ee82 <_svfiprintf_r+0x7d4>
    ee54:	4658      	mov	r0, fp
    ee56:	4641      	mov	r1, r8
    ee58:	aa0f      	add	r2, sp, #60	; 0x3c
    ee5a:	f7ff fbaf 	bl	e5bc <__ssprint_r>
    ee5e:	b980      	cbnz	r0, ee82 <_svfiprintf_r+0x7d4>
    ee60:	2300      	movs	r3, #0
    ee62:	9310      	str	r3, [sp, #64]	; 0x40
    ee64:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ee68:	e447      	b.n	e6fa <_svfiprintf_r+0x4c>
    ee6a:	bf00      	nop
    ee6c:	00010cc8 	.word	0x00010cc8
    ee70:	00010cd8 	.word	0x00010cd8
    ee74:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee76:	b123      	cbz	r3, ee82 <_svfiprintf_r+0x7d4>
    ee78:	4658      	mov	r0, fp
    ee7a:	4641      	mov	r1, r8
    ee7c:	aa0f      	add	r2, sp, #60	; 0x3c
    ee7e:	f7ff fb9d 	bl	e5bc <__ssprint_r>
    ee82:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ee86:	9805      	ldr	r0, [sp, #20]
    ee88:	f013 0f40 	tst.w	r3, #64	; 0x40
    ee8c:	bf18      	it	ne
    ee8e:	f04f 30ff 	movne.w	r0, #4294967295
    ee92:	b02d      	add	sp, #180	; 0xb4
    ee94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ee98 <_sungetc_r>:
    ee98:	b538      	push	{r3, r4, r5, lr}
    ee9a:	1c4b      	adds	r3, r1, #1
    ee9c:	4614      	mov	r4, r2
    ee9e:	d102      	bne.n	eea6 <_sungetc_r+0xe>
    eea0:	f04f 30ff 	mov.w	r0, #4294967295
    eea4:	bd38      	pop	{r3, r4, r5, pc}
    eea6:	8993      	ldrh	r3, [r2, #12]
    eea8:	f023 0320 	bic.w	r3, r3, #32
    eeac:	8193      	strh	r3, [r2, #12]
    eeae:	6b13      	ldr	r3, [r2, #48]	; 0x30
    eeb0:	6852      	ldr	r2, [r2, #4]
    eeb2:	b2cd      	uxtb	r5, r1
    eeb4:	b183      	cbz	r3, eed8 <_sungetc_r+0x40>
    eeb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    eeb8:	429a      	cmp	r2, r3
    eeba:	da07      	bge.n	eecc <_sungetc_r+0x34>
    eebc:	6823      	ldr	r3, [r4, #0]
    eebe:	1e5a      	subs	r2, r3, #1
    eec0:	6022      	str	r2, [r4, #0]
    eec2:	f803 5c01 	strb.w	r5, [r3, #-1]
    eec6:	6863      	ldr	r3, [r4, #4]
    eec8:	3301      	adds	r3, #1
    eeca:	e01f      	b.n	ef0c <_sungetc_r+0x74>
    eecc:	4621      	mov	r1, r4
    eece:	f000 fc3d 	bl	f74c <__submore>
    eed2:	2800      	cmp	r0, #0
    eed4:	d0f2      	beq.n	eebc <_sungetc_r+0x24>
    eed6:	e7e3      	b.n	eea0 <_sungetc_r+0x8>
    eed8:	6921      	ldr	r1, [r4, #16]
    eeda:	6823      	ldr	r3, [r4, #0]
    eedc:	b151      	cbz	r1, eef4 <_sungetc_r+0x5c>
    eede:	428b      	cmp	r3, r1
    eee0:	d908      	bls.n	eef4 <_sungetc_r+0x5c>
    eee2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    eee6:	42a8      	cmp	r0, r5
    eee8:	d104      	bne.n	eef4 <_sungetc_r+0x5c>
    eeea:	3b01      	subs	r3, #1
    eeec:	3201      	adds	r2, #1
    eeee:	6023      	str	r3, [r4, #0]
    eef0:	6062      	str	r2, [r4, #4]
    eef2:	bd38      	pop	{r3, r4, r5, pc}
    eef4:	63a3      	str	r3, [r4, #56]	; 0x38
    eef6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    eefa:	6323      	str	r3, [r4, #48]	; 0x30
    eefc:	2303      	movs	r3, #3
    eefe:	6363      	str	r3, [r4, #52]	; 0x34
    ef00:	4623      	mov	r3, r4
    ef02:	63e2      	str	r2, [r4, #60]	; 0x3c
    ef04:	f803 5f42 	strb.w	r5, [r3, #66]!
    ef08:	6023      	str	r3, [r4, #0]
    ef0a:	2301      	movs	r3, #1
    ef0c:	6063      	str	r3, [r4, #4]
    ef0e:	4628      	mov	r0, r5
    ef10:	bd38      	pop	{r3, r4, r5, pc}

0000ef12 <__ssrefill_r>:
    ef12:	b510      	push	{r4, lr}
    ef14:	460c      	mov	r4, r1
    ef16:	6b09      	ldr	r1, [r1, #48]	; 0x30
    ef18:	b169      	cbz	r1, ef36 <__ssrefill_r+0x24>
    ef1a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ef1e:	4299      	cmp	r1, r3
    ef20:	d001      	beq.n	ef26 <__ssrefill_r+0x14>
    ef22:	f7fc fe97 	bl	bc54 <_free_r>
    ef26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ef28:	6063      	str	r3, [r4, #4]
    ef2a:	2000      	movs	r0, #0
    ef2c:	6320      	str	r0, [r4, #48]	; 0x30
    ef2e:	b113      	cbz	r3, ef36 <__ssrefill_r+0x24>
    ef30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ef32:	6023      	str	r3, [r4, #0]
    ef34:	bd10      	pop	{r4, pc}
    ef36:	6923      	ldr	r3, [r4, #16]
    ef38:	6023      	str	r3, [r4, #0]
    ef3a:	2300      	movs	r3, #0
    ef3c:	6063      	str	r3, [r4, #4]
    ef3e:	89a3      	ldrh	r3, [r4, #12]
    ef40:	f043 0320 	orr.w	r3, r3, #32
    ef44:	81a3      	strh	r3, [r4, #12]
    ef46:	f04f 30ff 	mov.w	r0, #4294967295
    ef4a:	bd10      	pop	{r4, pc}

0000ef4c <_sfread_r>:
    ef4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef50:	4691      	mov	r9, r2
    ef52:	435a      	muls	r2, r3
    ef54:	4683      	mov	fp, r0
    ef56:	460f      	mov	r7, r1
    ef58:	4698      	mov	r8, r3
    ef5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ef5c:	4692      	mov	sl, r2
    ef5e:	d027      	beq.n	efb0 <_sfread_r+0x64>
    ef60:	4615      	mov	r5, r2
    ef62:	6866      	ldr	r6, [r4, #4]
    ef64:	6821      	ldr	r1, [r4, #0]
    ef66:	42b5      	cmp	r5, r6
    ef68:	4638      	mov	r0, r7
    ef6a:	d915      	bls.n	ef98 <_sfread_r+0x4c>
    ef6c:	4632      	mov	r2, r6
    ef6e:	f7fd fc02 	bl	c776 <memcpy>
    ef72:	6823      	ldr	r3, [r4, #0]
    ef74:	4433      	add	r3, r6
    ef76:	6023      	str	r3, [r4, #0]
    ef78:	2300      	movs	r3, #0
    ef7a:	6063      	str	r3, [r4, #4]
    ef7c:	4658      	mov	r0, fp
    ef7e:	4621      	mov	r1, r4
    ef80:	4437      	add	r7, r6
    ef82:	1bad      	subs	r5, r5, r6
    ef84:	f7ff ffc5 	bl	ef12 <__ssrefill_r>
    ef88:	2800      	cmp	r0, #0
    ef8a:	d0ea      	beq.n	ef62 <_sfread_r+0x16>
    ef8c:	ebc5 0a0a 	rsb	sl, r5, sl
    ef90:	fbba f0f9 	udiv	r0, sl, r9
    ef94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef98:	462a      	mov	r2, r5
    ef9a:	f7fd fbec 	bl	c776 <memcpy>
    ef9e:	6863      	ldr	r3, [r4, #4]
    efa0:	1b5b      	subs	r3, r3, r5
    efa2:	6063      	str	r3, [r4, #4]
    efa4:	6823      	ldr	r3, [r4, #0]
    efa6:	441d      	add	r5, r3
    efa8:	6025      	str	r5, [r4, #0]
    efaa:	4640      	mov	r0, r8
    efac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efb0:	4610      	mov	r0, r2
    efb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000efb6 <__ssvfiscanf_r>:
    efb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efba:	461d      	mov	r5, r3
    efbc:	898b      	ldrh	r3, [r1, #12]
    efbe:	b0d7      	sub	sp, #348	; 0x15c
    efc0:	049e      	lsls	r6, r3, #18
    efc2:	4681      	mov	r9, r0
    efc4:	460c      	mov	r4, r1
    efc6:	9206      	str	r2, [sp, #24]
    efc8:	d406      	bmi.n	efd8 <__ssvfiscanf_r+0x22>
    efca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    efce:	818b      	strh	r3, [r1, #12]
    efd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    efd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    efd6:	664b      	str	r3, [r1, #100]	; 0x64
    efd8:	2600      	movs	r6, #0
    efda:	9605      	str	r6, [sp, #20]
    efdc:	46b0      	mov	r8, r6
    efde:	4637      	mov	r7, r6
    efe0:	9604      	str	r6, [sp, #16]
    efe2:	9e06      	ldr	r6, [sp, #24]
    efe4:	f816 3b01 	ldrb.w	r3, [r6], #1
    efe8:	9606      	str	r6, [sp, #24]
    efea:	9309      	str	r3, [sp, #36]	; 0x24
    efec:	2b00      	cmp	r3, #0
    efee:	f000 83a7 	beq.w	f740 <__ssvfiscanf_r+0x78a>
    eff2:	4e9e      	ldr	r6, [pc, #632]	; (f26c <__ssvfiscanf_r+0x2b6>)
    eff4:	6831      	ldr	r1, [r6, #0]
    eff6:	18ca      	adds	r2, r1, r3
    eff8:	7852      	ldrb	r2, [r2, #1]
    effa:	f002 0208 	and.w	r2, r2, #8
    effe:	f002 0bff 	and.w	fp, r2, #255	; 0xff
    f002:	b1ba      	cbz	r2, f034 <__ssvfiscanf_r+0x7e>
    f004:	6863      	ldr	r3, [r4, #4]
    f006:	2b00      	cmp	r3, #0
    f008:	dd0d      	ble.n	f026 <__ssvfiscanf_r+0x70>
    f00a:	6823      	ldr	r3, [r4, #0]
    f00c:	6832      	ldr	r2, [r6, #0]
    f00e:	7819      	ldrb	r1, [r3, #0]
    f010:	440a      	add	r2, r1
    f012:	7852      	ldrb	r2, [r2, #1]
    f014:	0710      	lsls	r0, r2, #28
    f016:	d5e4      	bpl.n	efe2 <__ssvfiscanf_r+0x2c>
    f018:	6862      	ldr	r2, [r4, #4]
    f01a:	3301      	adds	r3, #1
    f01c:	3a01      	subs	r2, #1
    f01e:	3701      	adds	r7, #1
    f020:	6062      	str	r2, [r4, #4]
    f022:	6023      	str	r3, [r4, #0]
    f024:	e7ee      	b.n	f004 <__ssvfiscanf_r+0x4e>
    f026:	4648      	mov	r0, r9
    f028:	4621      	mov	r1, r4
    f02a:	f7ff ff72 	bl	ef12 <__ssrefill_r>
    f02e:	2800      	cmp	r0, #0
    f030:	d0eb      	beq.n	f00a <__ssvfiscanf_r+0x54>
    f032:	e7d6      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f034:	2b25      	cmp	r3, #37	; 0x25
    f036:	d150      	bne.n	f0da <__ssvfiscanf_r+0x124>
    f038:	9a06      	ldr	r2, [sp, #24]
    f03a:	465e      	mov	r6, fp
    f03c:	9806      	ldr	r0, [sp, #24]
    f03e:	7813      	ldrb	r3, [r2, #0]
    f040:	3001      	adds	r0, #1
    f042:	2b63      	cmp	r3, #99	; 0x63
    f044:	9006      	str	r0, [sp, #24]
    f046:	f000 8090 	beq.w	f16a <__ssvfiscanf_r+0x1b4>
    f04a:	d822      	bhi.n	f092 <__ssvfiscanf_r+0xdc>
    f04c:	2b39      	cmp	r3, #57	; 0x39
    f04e:	d809      	bhi.n	f064 <__ssvfiscanf_r+0xae>
    f050:	2b30      	cmp	r3, #48	; 0x30
    f052:	d26e      	bcs.n	f132 <__ssvfiscanf_r+0x17c>
    f054:	2b25      	cmp	r3, #37	; 0x25
    f056:	d040      	beq.n	f0da <__ssvfiscanf_r+0x124>
    f058:	2b2a      	cmp	r3, #42	; 0x2a
    f05a:	d057      	beq.n	f10c <__ssvfiscanf_r+0x156>
    f05c:	2b00      	cmp	r3, #0
    f05e:	f040 80a8 	bne.w	f1b2 <__ssvfiscanf_r+0x1fc>
    f062:	e36a      	b.n	f73a <__ssvfiscanf_r+0x784>
    f064:	2b4f      	cmp	r3, #79	; 0x4f
    f066:	d06e      	beq.n	f146 <__ssvfiscanf_r+0x190>
    f068:	d804      	bhi.n	f074 <__ssvfiscanf_r+0xbe>
    f06a:	2b44      	cmp	r3, #68	; 0x44
    f06c:	d066      	beq.n	f13c <__ssvfiscanf_r+0x186>
    f06e:	2b4c      	cmp	r3, #76	; 0x4c
    f070:	d059      	beq.n	f126 <__ssvfiscanf_r+0x170>
    f072:	e09e      	b.n	f1b2 <__ssvfiscanf_r+0x1fc>
    f074:	2b58      	cmp	r3, #88	; 0x58
    f076:	d070      	beq.n	f15a <__ssvfiscanf_r+0x1a4>
    f078:	2b5b      	cmp	r3, #91	; 0x5b
    f07a:	f040 809a 	bne.w	f1b2 <__ssvfiscanf_r+0x1fc>
    f07e:	a816      	add	r0, sp, #88	; 0x58
    f080:	9906      	ldr	r1, [sp, #24]
    f082:	f7fe f975 	bl	d370 <__sccl>
    f086:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    f08a:	9006      	str	r0, [sp, #24]
    f08c:	f04f 0a01 	mov.w	sl, #1
    f090:	e0a5      	b.n	f1de <__ssvfiscanf_r+0x228>
    f092:	2b6e      	cmp	r3, #110	; 0x6e
    f094:	d071      	beq.n	f17a <__ssvfiscanf_r+0x1c4>
    f096:	d80c      	bhi.n	f0b2 <__ssvfiscanf_r+0xfc>
    f098:	2b68      	cmp	r3, #104	; 0x68
    f09a:	d047      	beq.n	f12c <__ssvfiscanf_r+0x176>
    f09c:	d803      	bhi.n	f0a6 <__ssvfiscanf_r+0xf0>
    f09e:	2b64      	cmp	r3, #100	; 0x64
    f0a0:	f000 808f 	beq.w	f1c2 <__ssvfiscanf_r+0x20c>
    f0a4:	e085      	b.n	f1b2 <__ssvfiscanf_r+0x1fc>
    f0a6:	2b69      	cmp	r3, #105	; 0x69
    f0a8:	f000 808e 	beq.w	f1c8 <__ssvfiscanf_r+0x212>
    f0ac:	2b6c      	cmp	r3, #108	; 0x6c
    f0ae:	d031      	beq.n	f114 <__ssvfiscanf_r+0x15e>
    f0b0:	e07f      	b.n	f1b2 <__ssvfiscanf_r+0x1fc>
    f0b2:	2b73      	cmp	r3, #115	; 0x73
    f0b4:	d056      	beq.n	f164 <__ssvfiscanf_r+0x1ae>
    f0b6:	d808      	bhi.n	f0ca <__ssvfiscanf_r+0x114>
    f0b8:	2b6f      	cmp	r3, #111	; 0x6f
    f0ba:	d00b      	beq.n	f0d4 <__ssvfiscanf_r+0x11e>
    f0bc:	2b70      	cmp	r3, #112	; 0x70
    f0be:	d178      	bne.n	f1b2 <__ssvfiscanf_r+0x1fc>
    f0c0:	486b      	ldr	r0, [pc, #428]	; (f270 <__ssvfiscanf_r+0x2ba>)
    f0c2:	9005      	str	r0, [sp, #20]
    f0c4:	f44b 7b08 	orr.w	fp, fp, #544	; 0x220
    f0c8:	e054      	b.n	f174 <__ssvfiscanf_r+0x1be>
    f0ca:	2b75      	cmp	r3, #117	; 0x75
    f0cc:	d042      	beq.n	f154 <__ssvfiscanf_r+0x19e>
    f0ce:	2b78      	cmp	r3, #120	; 0x78
    f0d0:	d043      	beq.n	f15a <__ssvfiscanf_r+0x1a4>
    f0d2:	e06e      	b.n	f1b2 <__ssvfiscanf_r+0x1fc>
    f0d4:	4a66      	ldr	r2, [pc, #408]	; (f270 <__ssvfiscanf_r+0x2ba>)
    f0d6:	9205      	str	r2, [sp, #20]
    f0d8:	e039      	b.n	f14e <__ssvfiscanf_r+0x198>
    f0da:	6863      	ldr	r3, [r4, #4]
    f0dc:	2b00      	cmp	r3, #0
    f0de:	dd0e      	ble.n	f0fe <__ssvfiscanf_r+0x148>
    f0e0:	6823      	ldr	r3, [r4, #0]
    f0e2:	9e06      	ldr	r6, [sp, #24]
    f0e4:	7819      	ldrb	r1, [r3, #0]
    f0e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
    f0ea:	4291      	cmp	r1, r2
    f0ec:	f040 8328 	bne.w	f740 <__ssvfiscanf_r+0x78a>
    f0f0:	6862      	ldr	r2, [r4, #4]
    f0f2:	3301      	adds	r3, #1
    f0f4:	3a01      	subs	r2, #1
    f0f6:	6062      	str	r2, [r4, #4]
    f0f8:	6023      	str	r3, [r4, #0]
    f0fa:	3701      	adds	r7, #1
    f0fc:	e771      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f0fe:	4648      	mov	r0, r9
    f100:	4621      	mov	r1, r4
    f102:	f7ff ff06 	bl	ef12 <__ssrefill_r>
    f106:	2800      	cmp	r0, #0
    f108:	d0ea      	beq.n	f0e0 <__ssvfiscanf_r+0x12a>
    f10a:	e311      	b.n	f730 <__ssvfiscanf_r+0x77a>
    f10c:	f04b 0b10 	orr.w	fp, fp, #16
    f110:	9a06      	ldr	r2, [sp, #24]
    f112:	e793      	b.n	f03c <__ssvfiscanf_r+0x86>
    f114:	7853      	ldrb	r3, [r2, #1]
    f116:	2b6c      	cmp	r3, #108	; 0x6c
    f118:	d102      	bne.n	f120 <__ssvfiscanf_r+0x16a>
    f11a:	3202      	adds	r2, #2
    f11c:	9206      	str	r2, [sp, #24]
    f11e:	e002      	b.n	f126 <__ssvfiscanf_r+0x170>
    f120:	f04b 0b01 	orr.w	fp, fp, #1
    f124:	e7f4      	b.n	f110 <__ssvfiscanf_r+0x15a>
    f126:	f04b 0b02 	orr.w	fp, fp, #2
    f12a:	e7f1      	b.n	f110 <__ssvfiscanf_r+0x15a>
    f12c:	f04b 0b04 	orr.w	fp, fp, #4
    f130:	e7ee      	b.n	f110 <__ssvfiscanf_r+0x15a>
    f132:	220a      	movs	r2, #10
    f134:	fb02 3606 	mla	r6, r2, r6, r3
    f138:	3e30      	subs	r6, #48	; 0x30
    f13a:	e7e9      	b.n	f110 <__ssvfiscanf_r+0x15a>
    f13c:	484d      	ldr	r0, [pc, #308]	; (f274 <__ssvfiscanf_r+0x2be>)
    f13e:	9005      	str	r0, [sp, #20]
    f140:	f04b 0b01 	orr.w	fp, fp, #1
    f144:	e047      	b.n	f1d6 <__ssvfiscanf_r+0x220>
    f146:	494a      	ldr	r1, [pc, #296]	; (f270 <__ssvfiscanf_r+0x2ba>)
    f148:	9105      	str	r1, [sp, #20]
    f14a:	f04b 0b01 	orr.w	fp, fp, #1
    f14e:	f04f 0808 	mov.w	r8, #8
    f152:	e042      	b.n	f1da <__ssvfiscanf_r+0x224>
    f154:	4a46      	ldr	r2, [pc, #280]	; (f270 <__ssvfiscanf_r+0x2ba>)
    f156:	9205      	str	r2, [sp, #20]
    f158:	e03d      	b.n	f1d6 <__ssvfiscanf_r+0x220>
    f15a:	4b45      	ldr	r3, [pc, #276]	; (f270 <__ssvfiscanf_r+0x2ba>)
    f15c:	9305      	str	r3, [sp, #20]
    f15e:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
    f162:	e007      	b.n	f174 <__ssvfiscanf_r+0x1be>
    f164:	f04f 0a02 	mov.w	sl, #2
    f168:	e039      	b.n	f1de <__ssvfiscanf_r+0x228>
    f16a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    f16e:	f04f 0a00 	mov.w	sl, #0
    f172:	e034      	b.n	f1de <__ssvfiscanf_r+0x228>
    f174:	f04f 0810 	mov.w	r8, #16
    f178:	e02f      	b.n	f1da <__ssvfiscanf_r+0x224>
    f17a:	f01b 0f10 	tst.w	fp, #16
    f17e:	f47f af30 	bne.w	efe2 <__ssvfiscanf_r+0x2c>
    f182:	f01b 0f04 	tst.w	fp, #4
    f186:	f105 0104 	add.w	r1, r5, #4
    f18a:	d002      	beq.n	f192 <__ssvfiscanf_r+0x1dc>
    f18c:	682b      	ldr	r3, [r5, #0]
    f18e:	801f      	strh	r7, [r3, #0]
    f190:	e004      	b.n	f19c <__ssvfiscanf_r+0x1e6>
    f192:	f01b 0f01 	tst.w	fp, #1
    f196:	d003      	beq.n	f1a0 <__ssvfiscanf_r+0x1ea>
    f198:	682b      	ldr	r3, [r5, #0]
    f19a:	601f      	str	r7, [r3, #0]
    f19c:	460d      	mov	r5, r1
    f19e:	e720      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f1a0:	f01b 0f02 	tst.w	fp, #2
    f1a4:	d0f8      	beq.n	f198 <__ssvfiscanf_r+0x1e2>
    f1a6:	6828      	ldr	r0, [r5, #0]
    f1a8:	463a      	mov	r2, r7
    f1aa:	17fb      	asrs	r3, r7, #31
    f1ac:	e9c0 2300 	strd	r2, r3, [r0]
    f1b0:	e7f4      	b.n	f19c <__ssvfiscanf_r+0x1e6>
    f1b2:	440b      	add	r3, r1
    f1b4:	785b      	ldrb	r3, [r3, #1]
    f1b6:	f003 0303 	and.w	r3, r3, #3
    f1ba:	2b01      	cmp	r3, #1
    f1bc:	d109      	bne.n	f1d2 <__ssvfiscanf_r+0x21c>
    f1be:	f04b 0b01 	orr.w	fp, fp, #1
    f1c2:	492c      	ldr	r1, [pc, #176]	; (f274 <__ssvfiscanf_r+0x2be>)
    f1c4:	9105      	str	r1, [sp, #20]
    f1c6:	e006      	b.n	f1d6 <__ssvfiscanf_r+0x220>
    f1c8:	4a2a      	ldr	r2, [pc, #168]	; (f274 <__ssvfiscanf_r+0x2be>)
    f1ca:	9205      	str	r2, [sp, #20]
    f1cc:	f04f 0800 	mov.w	r8, #0
    f1d0:	e003      	b.n	f1da <__ssvfiscanf_r+0x224>
    f1d2:	4b28      	ldr	r3, [pc, #160]	; (f274 <__ssvfiscanf_r+0x2be>)
    f1d4:	9305      	str	r3, [sp, #20]
    f1d6:	f04f 080a 	mov.w	r8, #10
    f1da:	f04f 0a03 	mov.w	sl, #3
    f1de:	6863      	ldr	r3, [r4, #4]
    f1e0:	2b00      	cmp	r3, #0
    f1e2:	dd03      	ble.n	f1ec <__ssvfiscanf_r+0x236>
    f1e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f1e8:	d010      	beq.n	f20c <__ssvfiscanf_r+0x256>
    f1ea:	e01f      	b.n	f22c <__ssvfiscanf_r+0x276>
    f1ec:	4648      	mov	r0, r9
    f1ee:	4621      	mov	r1, r4
    f1f0:	f7ff fe8f 	bl	ef12 <__ssrefill_r>
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d0f5      	beq.n	f1e4 <__ssvfiscanf_r+0x22e>
    f1f8:	e29a      	b.n	f730 <__ssvfiscanf_r+0x77a>
    f1fa:	6862      	ldr	r2, [r4, #4]
    f1fc:	3a01      	subs	r2, #1
    f1fe:	2a00      	cmp	r2, #0
    f200:	f107 0701 	add.w	r7, r7, #1
    f204:	6062      	str	r2, [r4, #4]
    f206:	dd0a      	ble.n	f21e <__ssvfiscanf_r+0x268>
    f208:	3301      	adds	r3, #1
    f20a:	6023      	str	r3, [r4, #0]
    f20c:	6823      	ldr	r3, [r4, #0]
    f20e:	4917      	ldr	r1, [pc, #92]	; (f26c <__ssvfiscanf_r+0x2b6>)
    f210:	781a      	ldrb	r2, [r3, #0]
    f212:	6809      	ldr	r1, [r1, #0]
    f214:	440a      	add	r2, r1
    f216:	7852      	ldrb	r2, [r2, #1]
    f218:	0711      	lsls	r1, r2, #28
    f21a:	d4ee      	bmi.n	f1fa <__ssvfiscanf_r+0x244>
    f21c:	e006      	b.n	f22c <__ssvfiscanf_r+0x276>
    f21e:	4648      	mov	r0, r9
    f220:	4621      	mov	r1, r4
    f222:	f7ff fe76 	bl	ef12 <__ssrefill_r>
    f226:	2800      	cmp	r0, #0
    f228:	d0f0      	beq.n	f20c <__ssvfiscanf_r+0x256>
    f22a:	e281      	b.n	f730 <__ssvfiscanf_r+0x77a>
    f22c:	f1ba 0f02 	cmp.w	sl, #2
    f230:	f000 80f3 	beq.w	f41a <__ssvfiscanf_r+0x464>
    f234:	f1ba 0f03 	cmp.w	sl, #3
    f238:	f000 81b0 	beq.w	f59c <__ssvfiscanf_r+0x5e6>
    f23c:	f1ba 0f01 	cmp.w	sl, #1
    f240:	f00b 0a10 	and.w	sl, fp, #16
    f244:	f000 8096 	beq.w	f374 <__ssvfiscanf_r+0x3be>
    f248:	2e00      	cmp	r6, #0
    f24a:	bf08      	it	eq
    f24c:	2601      	moveq	r6, #1
    f24e:	f01b 0b01 	ands.w	fp, fp, #1
    f252:	d061      	beq.n	f318 <__ssvfiscanf_r+0x362>
    f254:	a80a      	add	r0, sp, #40	; 0x28
    f256:	2100      	movs	r1, #0
    f258:	2208      	movs	r2, #8
    f25a:	f7f9 f871 	bl	8340 <memset>
    f25e:	f1ba 0f00 	cmp.w	sl, #0
    f262:	d109      	bne.n	f278 <__ssvfiscanf_r+0x2c2>
    f264:	f8d5 b000 	ldr.w	fp, [r5]
    f268:	3504      	adds	r5, #4
    f26a:	e007      	b.n	f27c <__ssvfiscanf_r+0x2c6>
    f26c:	20000498 	.word	0x20000498
    f270:	0000e369 	.word	0x0000e369
    f274:	0000e0c9 	.word	0x0000e0c9
    f278:	f04f 0b00 	mov.w	fp, #0
    f27c:	2300      	movs	r3, #0
    f27e:	9303      	str	r3, [sp, #12]
    f280:	f7fc ff58 	bl	c134 <__locale_mb_cur_max>
    f284:	9b03      	ldr	r3, [sp, #12]
    f286:	4283      	cmp	r3, r0
    f288:	f000 8252 	beq.w	f730 <__ssvfiscanf_r+0x77a>
    f28c:	6821      	ldr	r1, [r4, #0]
    f28e:	aa0c      	add	r2, sp, #48	; 0x30
    f290:	f811 0b01 	ldrb.w	r0, [r1], #1
    f294:	54d0      	strb	r0, [r2, r3]
    f296:	f103 0c01 	add.w	ip, r3, #1
    f29a:	6863      	ldr	r3, [r4, #4]
    f29c:	f8cd c00c 	str.w	ip, [sp, #12]
    f2a0:	3b01      	subs	r3, #1
    f2a2:	e884 000a 	stmia.w	r4, {r1, r3}
    f2a6:	ab0a      	add	r3, sp, #40	; 0x28
    f2a8:	9300      	str	r3, [sp, #0]
    f2aa:	4648      	mov	r0, r9
    f2ac:	4663      	mov	r3, ip
    f2ae:	4659      	mov	r1, fp
    f2b0:	f7fd f9ee 	bl	c690 <_mbrtowc_r>
    f2b4:	1c42      	adds	r2, r0, #1
    f2b6:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f2ba:	f000 8239 	beq.w	f730 <__ssvfiscanf_r+0x77a>
    f2be:	b928      	cbnz	r0, f2cc <__ssvfiscanf_r+0x316>
    f2c0:	f1ba 0f00 	cmp.w	sl, #0
    f2c4:	d104      	bne.n	f2d0 <__ssvfiscanf_r+0x31a>
    f2c6:	f8cb a000 	str.w	sl, [fp]
    f2ca:	e001      	b.n	f2d0 <__ssvfiscanf_r+0x31a>
    f2cc:	3002      	adds	r0, #2
    f2ce:	d00a      	beq.n	f2e6 <__ssvfiscanf_r+0x330>
    f2d0:	4467      	add	r7, ip
    f2d2:	3e01      	subs	r6, #1
    f2d4:	f1ba 0f00 	cmp.w	sl, #0
    f2d8:	d103      	bne.n	f2e2 <__ssvfiscanf_r+0x32c>
    f2da:	f10b 0b04 	add.w	fp, fp, #4
    f2de:	46d4      	mov	ip, sl
    f2e0:	e001      	b.n	f2e6 <__ssvfiscanf_r+0x330>
    f2e2:	f04f 0c00 	mov.w	ip, #0
    f2e6:	6863      	ldr	r3, [r4, #4]
    f2e8:	2b00      	cmp	r3, #0
    f2ea:	dc11      	bgt.n	f310 <__ssvfiscanf_r+0x35a>
    f2ec:	4648      	mov	r0, r9
    f2ee:	4621      	mov	r1, r4
    f2f0:	f8cd c00c 	str.w	ip, [sp, #12]
    f2f4:	f7ff fe0d 	bl	ef12 <__ssrefill_r>
    f2f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f2fc:	b140      	cbz	r0, f310 <__ssvfiscanf_r+0x35a>
    f2fe:	f1bc 0f00 	cmp.w	ip, #0
    f302:	f040 8215 	bne.w	f730 <__ssvfiscanf_r+0x77a>
    f306:	f1ba 0f00 	cmp.w	sl, #0
    f30a:	f000 80fa 	beq.w	f502 <__ssvfiscanf_r+0x54c>
    f30e:	e668      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f310:	2e00      	cmp	r6, #0
    f312:	d0f8      	beq.n	f306 <__ssvfiscanf_r+0x350>
    f314:	4663      	mov	r3, ip
    f316:	e7b2      	b.n	f27e <__ssvfiscanf_r+0x2c8>
    f318:	f1ba 0f00 	cmp.w	sl, #0
    f31c:	d018      	beq.n	f350 <__ssvfiscanf_r+0x39a>
    f31e:	6863      	ldr	r3, [r4, #4]
    f320:	6822      	ldr	r2, [r4, #0]
    f322:	42b3      	cmp	r3, r6
    f324:	da0d      	bge.n	f342 <__ssvfiscanf_r+0x38c>
    f326:	449b      	add	fp, r3
    f328:	1af6      	subs	r6, r6, r3
    f32a:	4413      	add	r3, r2
    f32c:	6023      	str	r3, [r4, #0]
    f32e:	4648      	mov	r0, r9
    f330:	4621      	mov	r1, r4
    f332:	f7ff fdee 	bl	ef12 <__ssrefill_r>
    f336:	2800      	cmp	r0, #0
    f338:	d0f1      	beq.n	f31e <__ssvfiscanf_r+0x368>
    f33a:	f1bb 0f00 	cmp.w	fp, #0
    f33e:	d105      	bne.n	f34c <__ssvfiscanf_r+0x396>
    f340:	e1f6      	b.n	f730 <__ssvfiscanf_r+0x77a>
    f342:	1b9b      	subs	r3, r3, r6
    f344:	44b3      	add	fp, r6
    f346:	4416      	add	r6, r2
    f348:	6063      	str	r3, [r4, #4]
    f34a:	6026      	str	r6, [r4, #0]
    f34c:	445f      	add	r7, fp
    f34e:	e648      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f350:	9400      	str	r4, [sp, #0]
    f352:	4648      	mov	r0, r9
    f354:	6829      	ldr	r1, [r5, #0]
    f356:	2201      	movs	r2, #1
    f358:	4633      	mov	r3, r6
    f35a:	f105 0a04 	add.w	sl, r5, #4
    f35e:	f7ff fdf5 	bl	ef4c <_sfread_r>
    f362:	2800      	cmp	r0, #0
    f364:	f000 81e4 	beq.w	f730 <__ssvfiscanf_r+0x77a>
    f368:	9e04      	ldr	r6, [sp, #16]
    f36a:	3601      	adds	r6, #1
    f36c:	4407      	add	r7, r0
    f36e:	9604      	str	r6, [sp, #16]
    f370:	4655      	mov	r5, sl
    f372:	e636      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f374:	2e00      	cmp	r6, #0
    f376:	bf08      	it	eq
    f378:	f04f 36ff 	moveq.w	r6, #4294967295
    f37c:	f1ba 0f00 	cmp.w	sl, #0
    f380:	d01e      	beq.n	f3c0 <__ssvfiscanf_r+0x40a>
    f382:	f04f 0a00 	mov.w	sl, #0
    f386:	6823      	ldr	r3, [r4, #0]
    f388:	a916      	add	r1, sp, #88	; 0x58
    f38a:	781a      	ldrb	r2, [r3, #0]
    f38c:	5c8a      	ldrb	r2, [r1, r2]
    f38e:	b192      	cbz	r2, f3b6 <__ssvfiscanf_r+0x400>
    f390:	6862      	ldr	r2, [r4, #4]
    f392:	f10a 0a01 	add.w	sl, sl, #1
    f396:	3a01      	subs	r2, #1
    f398:	3301      	adds	r3, #1
    f39a:	4556      	cmp	r6, sl
    f39c:	6062      	str	r2, [r4, #4]
    f39e:	6023      	str	r3, [r4, #0]
    f3a0:	f000 81c4 	beq.w	f72c <__ssvfiscanf_r+0x776>
    f3a4:	2a00      	cmp	r2, #0
    f3a6:	dcee      	bgt.n	f386 <__ssvfiscanf_r+0x3d0>
    f3a8:	4648      	mov	r0, r9
    f3aa:	4621      	mov	r1, r4
    f3ac:	f7ff fdb1 	bl	ef12 <__ssrefill_r>
    f3b0:	2800      	cmp	r0, #0
    f3b2:	d0e8      	beq.n	f386 <__ssvfiscanf_r+0x3d0>
    f3b4:	e1ba      	b.n	f72c <__ssvfiscanf_r+0x776>
    f3b6:	f1ba 0f00 	cmp.w	sl, #0
    f3ba:	f040 81b7 	bne.w	f72c <__ssvfiscanf_r+0x776>
    f3be:	e1bf      	b.n	f740 <__ssvfiscanf_r+0x78a>
    f3c0:	f8d5 a000 	ldr.w	sl, [r5]
    f3c4:	f105 0b04 	add.w	fp, r5, #4
    f3c8:	4655      	mov	r5, sl
    f3ca:	6823      	ldr	r3, [r4, #0]
    f3cc:	a916      	add	r1, sp, #88	; 0x58
    f3ce:	781a      	ldrb	r2, [r3, #0]
    f3d0:	5c8a      	ldrb	r2, [r1, r2]
    f3d2:	b1ba      	cbz	r2, f404 <__ssvfiscanf_r+0x44e>
    f3d4:	6862      	ldr	r2, [r4, #4]
    f3d6:	3a01      	subs	r2, #1
    f3d8:	6062      	str	r2, [r4, #4]
    f3da:	1c5a      	adds	r2, r3, #1
    f3dc:	6022      	str	r2, [r4, #0]
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	f805 3b01 	strb.w	r3, [r5], #1
    f3e4:	eb0a 0306 	add.w	r3, sl, r6
    f3e8:	429d      	cmp	r5, r3
    f3ea:	d00b      	beq.n	f404 <__ssvfiscanf_r+0x44e>
    f3ec:	6863      	ldr	r3, [r4, #4]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	dceb      	bgt.n	f3ca <__ssvfiscanf_r+0x414>
    f3f2:	4648      	mov	r0, r9
    f3f4:	4621      	mov	r1, r4
    f3f6:	f7ff fd8c 	bl	ef12 <__ssrefill_r>
    f3fa:	2800      	cmp	r0, #0
    f3fc:	d0e5      	beq.n	f3ca <__ssvfiscanf_r+0x414>
    f3fe:	4555      	cmp	r5, sl
    f400:	f000 8196 	beq.w	f730 <__ssvfiscanf_r+0x77a>
    f404:	ebb5 0a0a 	subs.w	sl, r5, sl
    f408:	f000 819a 	beq.w	f740 <__ssvfiscanf_r+0x78a>
    f40c:	9e04      	ldr	r6, [sp, #16]
    f40e:	2300      	movs	r3, #0
    f410:	3601      	adds	r6, #1
    f412:	702b      	strb	r3, [r5, #0]
    f414:	9604      	str	r6, [sp, #16]
    f416:	465d      	mov	r5, fp
    f418:	e188      	b.n	f72c <__ssvfiscanf_r+0x776>
    f41a:	2e00      	cmp	r6, #0
    f41c:	bf08      	it	eq
    f41e:	f04f 36ff 	moveq.w	r6, #4294967295
    f422:	f00b 0010 	and.w	r0, fp, #16
    f426:	f01b 0a01 	ands.w	sl, fp, #1
    f42a:	9007      	str	r0, [sp, #28]
    f42c:	d06c      	beq.n	f508 <__ssvfiscanf_r+0x552>
    f42e:	2100      	movs	r1, #0
    f430:	a80a      	add	r0, sp, #40	; 0x28
    f432:	2208      	movs	r2, #8
    f434:	f7f8 ff84 	bl	8340 <memset>
    f438:	9907      	ldr	r1, [sp, #28]
    f43a:	b919      	cbnz	r1, f444 <__ssvfiscanf_r+0x48e>
    f43c:	f8d5 a000 	ldr.w	sl, [r5]
    f440:	3504      	adds	r5, #4
    f442:	e001      	b.n	f448 <__ssvfiscanf_r+0x492>
    f444:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    f448:	2300      	movs	r3, #0
    f44a:	6822      	ldr	r2, [r4, #0]
    f44c:	49a4      	ldr	r1, [pc, #656]	; (f6e0 <__ssvfiscanf_r+0x72a>)
    f44e:	7812      	ldrb	r2, [r2, #0]
    f450:	6809      	ldr	r1, [r1, #0]
    f452:	440a      	add	r2, r1
    f454:	7852      	ldrb	r2, [r2, #1]
    f456:	0710      	lsls	r0, r2, #28
    f458:	d44d      	bmi.n	f4f6 <__ssvfiscanf_r+0x540>
    f45a:	2e00      	cmp	r6, #0
    f45c:	d04b      	beq.n	f4f6 <__ssvfiscanf_r+0x540>
    f45e:	9303      	str	r3, [sp, #12]
    f460:	f7fc fe68 	bl	c134 <__locale_mb_cur_max>
    f464:	9b03      	ldr	r3, [sp, #12]
    f466:	4283      	cmp	r3, r0
    f468:	f000 8162 	beq.w	f730 <__ssvfiscanf_r+0x77a>
    f46c:	6821      	ldr	r1, [r4, #0]
    f46e:	aa0c      	add	r2, sp, #48	; 0x30
    f470:	f811 0b01 	ldrb.w	r0, [r1], #1
    f474:	54d0      	strb	r0, [r2, r3]
    f476:	f103 0b01 	add.w	fp, r3, #1
    f47a:	6863      	ldr	r3, [r4, #4]
    f47c:	3b01      	subs	r3, #1
    f47e:	e884 000a 	stmia.w	r4, {r1, r3}
    f482:	ab0a      	add	r3, sp, #40	; 0x28
    f484:	9300      	str	r3, [sp, #0]
    f486:	4648      	mov	r0, r9
    f488:	465b      	mov	r3, fp
    f48a:	4651      	mov	r1, sl
    f48c:	f7fd f900 	bl	c690 <_mbrtowc_r>
    f490:	1c43      	adds	r3, r0, #1
    f492:	f000 814d 	beq.w	f730 <__ssvfiscanf_r+0x77a>
    f496:	b910      	cbnz	r0, f49e <__ssvfiscanf_r+0x4e8>
    f498:	f8ca 0000 	str.w	r0, [sl]
    f49c:	e001      	b.n	f4a2 <__ssvfiscanf_r+0x4ec>
    f49e:	3002      	adds	r0, #2
    f4a0:	d01a      	beq.n	f4d8 <__ssvfiscanf_r+0x522>
    f4a2:	f8da 0000 	ldr.w	r0, [sl]
    f4a6:	f7fc fe13 	bl	c0d0 <iswspace>
    f4aa:	b160      	cbz	r0, f4c6 <__ssvfiscanf_r+0x510>
    f4ac:	f1bb 0f00 	cmp.w	fp, #0
    f4b0:	d021      	beq.n	f4f6 <__ssvfiscanf_r+0x540>
    f4b2:	f10b 3bff 	add.w	fp, fp, #4294967295
    f4b6:	ab0c      	add	r3, sp, #48	; 0x30
    f4b8:	4648      	mov	r0, r9
    f4ba:	f813 100b 	ldrb.w	r1, [r3, fp]
    f4be:	4622      	mov	r2, r4
    f4c0:	f7ff fcea 	bl	ee98 <_sungetc_r>
    f4c4:	e7f2      	b.n	f4ac <__ssvfiscanf_r+0x4f6>
    f4c6:	9a07      	ldr	r2, [sp, #28]
    f4c8:	445f      	add	r7, fp
    f4ca:	3e01      	subs	r6, #1
    f4cc:	b91a      	cbnz	r2, f4d6 <__ssvfiscanf_r+0x520>
    f4ce:	f10a 0a04 	add.w	sl, sl, #4
    f4d2:	4693      	mov	fp, r2
    f4d4:	e000      	b.n	f4d8 <__ssvfiscanf_r+0x522>
    f4d6:	4683      	mov	fp, r0
    f4d8:	6863      	ldr	r3, [r4, #4]
    f4da:	2b00      	cmp	r3, #0
    f4dc:	dc09      	bgt.n	f4f2 <__ssvfiscanf_r+0x53c>
    f4de:	4648      	mov	r0, r9
    f4e0:	4621      	mov	r1, r4
    f4e2:	f7ff fd16 	bl	ef12 <__ssrefill_r>
    f4e6:	b120      	cbz	r0, f4f2 <__ssvfiscanf_r+0x53c>
    f4e8:	f1bb 0f00 	cmp.w	fp, #0
    f4ec:	f040 8120 	bne.w	f730 <__ssvfiscanf_r+0x77a>
    f4f0:	e001      	b.n	f4f6 <__ssvfiscanf_r+0x540>
    f4f2:	465b      	mov	r3, fp
    f4f4:	e7a9      	b.n	f44a <__ssvfiscanf_r+0x494>
    f4f6:	9e07      	ldr	r6, [sp, #28]
    f4f8:	2e00      	cmp	r6, #0
    f4fa:	f47f ad72 	bne.w	efe2 <__ssvfiscanf_r+0x2c>
    f4fe:	f8ca 6000 	str.w	r6, [sl]
    f502:	9e04      	ldr	r6, [sp, #16]
    f504:	3601      	adds	r6, #1
    f506:	e56b      	b.n	efe0 <__ssvfiscanf_r+0x2a>
    f508:	9807      	ldr	r0, [sp, #28]
    f50a:	b1d8      	cbz	r0, f544 <__ssvfiscanf_r+0x58e>
    f50c:	6823      	ldr	r3, [r4, #0]
    f50e:	4974      	ldr	r1, [pc, #464]	; (f6e0 <__ssvfiscanf_r+0x72a>)
    f510:	781a      	ldrb	r2, [r3, #0]
    f512:	6809      	ldr	r1, [r1, #0]
    f514:	440a      	add	r2, r1
    f516:	7852      	ldrb	r2, [r2, #1]
    f518:	0711      	lsls	r1, r2, #28
    f51a:	f100 8107 	bmi.w	f72c <__ssvfiscanf_r+0x776>
    f51e:	6862      	ldr	r2, [r4, #4]
    f520:	f10a 0a01 	add.w	sl, sl, #1
    f524:	3a01      	subs	r2, #1
    f526:	3301      	adds	r3, #1
    f528:	4556      	cmp	r6, sl
    f52a:	6062      	str	r2, [r4, #4]
    f52c:	6023      	str	r3, [r4, #0]
    f52e:	f000 80fd 	beq.w	f72c <__ssvfiscanf_r+0x776>
    f532:	2a00      	cmp	r2, #0
    f534:	dcea      	bgt.n	f50c <__ssvfiscanf_r+0x556>
    f536:	4648      	mov	r0, r9
    f538:	4621      	mov	r1, r4
    f53a:	f7ff fcea 	bl	ef12 <__ssrefill_r>
    f53e:	2800      	cmp	r0, #0
    f540:	d0e4      	beq.n	f50c <__ssvfiscanf_r+0x556>
    f542:	e0f3      	b.n	f72c <__ssvfiscanf_r+0x776>
    f544:	f8d5 a000 	ldr.w	sl, [r5]
    f548:	f105 0b04 	add.w	fp, r5, #4
    f54c:	4655      	mov	r5, sl
    f54e:	6823      	ldr	r3, [r4, #0]
    f550:	4963      	ldr	r1, [pc, #396]	; (f6e0 <__ssvfiscanf_r+0x72a>)
    f552:	781a      	ldrb	r2, [r3, #0]
    f554:	6809      	ldr	r1, [r1, #0]
    f556:	440a      	add	r2, r1
    f558:	7852      	ldrb	r2, [r2, #1]
    f55a:	0712      	lsls	r2, r2, #28
    f55c:	d414      	bmi.n	f588 <__ssvfiscanf_r+0x5d2>
    f55e:	6862      	ldr	r2, [r4, #4]
    f560:	3a01      	subs	r2, #1
    f562:	6062      	str	r2, [r4, #4]
    f564:	1c5a      	adds	r2, r3, #1
    f566:	6022      	str	r2, [r4, #0]
    f568:	781b      	ldrb	r3, [r3, #0]
    f56a:	f805 3b01 	strb.w	r3, [r5], #1
    f56e:	eb0a 0306 	add.w	r3, sl, r6
    f572:	429d      	cmp	r5, r3
    f574:	d008      	beq.n	f588 <__ssvfiscanf_r+0x5d2>
    f576:	6863      	ldr	r3, [r4, #4]
    f578:	2b00      	cmp	r3, #0
    f57a:	dce8      	bgt.n	f54e <__ssvfiscanf_r+0x598>
    f57c:	4648      	mov	r0, r9
    f57e:	4621      	mov	r1, r4
    f580:	f7ff fcc7 	bl	ef12 <__ssrefill_r>
    f584:	2800      	cmp	r0, #0
    f586:	d0e2      	beq.n	f54e <__ssvfiscanf_r+0x598>
    f588:	9e04      	ldr	r6, [sp, #16]
    f58a:	2300      	movs	r3, #0
    f58c:	702b      	strb	r3, [r5, #0]
    f58e:	3601      	adds	r6, #1
    f590:	ebca 0505 	rsb	r5, sl, r5
    f594:	442f      	add	r7, r5
    f596:	9604      	str	r6, [sp, #16]
    f598:	465d      	mov	r5, fp
    f59a:	e522      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f59c:	1e73      	subs	r3, r6, #1
    f59e:	2b26      	cmp	r3, #38	; 0x26
    f5a0:	f04f 0000 	mov.w	r0, #0
    f5a4:	bf8a      	itet	hi
    f5a6:	f1a6 0327 	subhi.w	r3, r6, #39	; 0x27
    f5aa:	2300      	movls	r3, #0
    f5ac:	2627      	movhi	r6, #39	; 0x27
    f5ae:	f44b 6b58 	orr.w	fp, fp, #3456	; 0xd80
    f5b2:	9007      	str	r0, [sp, #28]
    f5b4:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    f5b8:	6821      	ldr	r1, [r4, #0]
    f5ba:	780a      	ldrb	r2, [r1, #0]
    f5bc:	2a39      	cmp	r2, #57	; 0x39
    f5be:	d809      	bhi.n	f5d4 <__ssvfiscanf_r+0x61e>
    f5c0:	2a38      	cmp	r2, #56	; 0x38
    f5c2:	d233      	bcs.n	f62c <__ssvfiscanf_r+0x676>
    f5c4:	2a30      	cmp	r2, #48	; 0x30
    f5c6:	d014      	beq.n	f5f2 <__ssvfiscanf_r+0x63c>
    f5c8:	d82c      	bhi.n	f624 <__ssvfiscanf_r+0x66e>
    f5ca:	2a2b      	cmp	r2, #43	; 0x2b
    f5cc:	d03a      	beq.n	f644 <__ssvfiscanf_r+0x68e>
    f5ce:	2a2d      	cmp	r2, #45	; 0x2d
    f5d0:	d038      	beq.n	f644 <__ssvfiscanf_r+0x68e>
    f5d2:	e05d      	b.n	f690 <__ssvfiscanf_r+0x6da>
    f5d4:	2a58      	cmp	r2, #88	; 0x58
    f5d6:	d03b      	beq.n	f650 <__ssvfiscanf_r+0x69a>
    f5d8:	d804      	bhi.n	f5e4 <__ssvfiscanf_r+0x62e>
    f5da:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    f5de:	2805      	cmp	r0, #5
    f5e0:	d92a      	bls.n	f638 <__ssvfiscanf_r+0x682>
    f5e2:	e055      	b.n	f690 <__ssvfiscanf_r+0x6da>
    f5e4:	2a61      	cmp	r2, #97	; 0x61
    f5e6:	d353      	bcc.n	f690 <__ssvfiscanf_r+0x6da>
    f5e8:	2a66      	cmp	r2, #102	; 0x66
    f5ea:	d925      	bls.n	f638 <__ssvfiscanf_r+0x682>
    f5ec:	2a78      	cmp	r2, #120	; 0x78
    f5ee:	d02f      	beq.n	f650 <__ssvfiscanf_r+0x69a>
    f5f0:	e04e      	b.n	f690 <__ssvfiscanf_r+0x6da>
    f5f2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
    f5f6:	d036      	beq.n	f666 <__ssvfiscanf_r+0x6b0>
    f5f8:	f1b8 0f00 	cmp.w	r8, #0
    f5fc:	d103      	bne.n	f606 <__ssvfiscanf_r+0x650>
    f5fe:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
    f602:	f04f 0808 	mov.w	r8, #8
    f606:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    f60a:	d002      	beq.n	f612 <__ssvfiscanf_r+0x65c>
    f60c:	f42b 6bb0 	bic.w	fp, fp, #1408	; 0x580
    f610:	e029      	b.n	f666 <__ssvfiscanf_r+0x6b0>
    f612:	f42b 7b60 	bic.w	fp, fp, #896	; 0x380
    f616:	b10b      	cbz	r3, f61c <__ssvfiscanf_r+0x666>
    f618:	3b01      	subs	r3, #1
    f61a:	3601      	adds	r6, #1
    f61c:	9a07      	ldr	r2, [sp, #28]
    f61e:	3201      	adds	r2, #1
    f620:	9207      	str	r2, [sp, #28]
    f622:	e024      	b.n	f66e <__ssvfiscanf_r+0x6b8>
    f624:	482f      	ldr	r0, [pc, #188]	; (f6e4 <__ssvfiscanf_r+0x72e>)
    f626:	f930 8018 	ldrsh.w	r8, [r0, r8, lsl #1]
    f62a:	e008      	b.n	f63e <__ssvfiscanf_r+0x688>
    f62c:	482d      	ldr	r0, [pc, #180]	; (f6e4 <__ssvfiscanf_r+0x72e>)
    f62e:	f930 8018 	ldrsh.w	r8, [r0, r8, lsl #1]
    f632:	f1b8 0f08 	cmp.w	r8, #8
    f636:	e001      	b.n	f63c <__ssvfiscanf_r+0x686>
    f638:	f1b8 0f0a 	cmp.w	r8, #10
    f63c:	dd28      	ble.n	f690 <__ssvfiscanf_r+0x6da>
    f63e:	f42b 6b38 	bic.w	fp, fp, #2944	; 0xb80
    f642:	e010      	b.n	f666 <__ssvfiscanf_r+0x6b0>
    f644:	f01b 0f80 	tst.w	fp, #128	; 0x80
    f648:	d022      	beq.n	f690 <__ssvfiscanf_r+0x6da>
    f64a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f64e:	e00a      	b.n	f666 <__ssvfiscanf_r+0x6b0>
    f650:	f40b 60c0 	and.w	r0, fp, #1536	; 0x600
    f654:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    f658:	d11a      	bne.n	f690 <__ssvfiscanf_r+0x6da>
    f65a:	f42b 7b00 	bic.w	fp, fp, #512	; 0x200
    f65e:	f44b 6ba0 	orr.w	fp, fp, #1280	; 0x500
    f662:	f04f 0810 	mov.w	r8, #16
    f666:	f88a 2000 	strb.w	r2, [sl]
    f66a:	f10a 0a01 	add.w	sl, sl, #1
    f66e:	6862      	ldr	r2, [r4, #4]
    f670:	3a01      	subs	r2, #1
    f672:	2a00      	cmp	r2, #0
    f674:	6062      	str	r2, [r4, #4]
    f676:	dd02      	ble.n	f67e <__ssvfiscanf_r+0x6c8>
    f678:	3101      	adds	r1, #1
    f67a:	6021      	str	r1, [r4, #0]
    f67c:	e006      	b.n	f68c <__ssvfiscanf_r+0x6d6>
    f67e:	4648      	mov	r0, r9
    f680:	4621      	mov	r1, r4
    f682:	9303      	str	r3, [sp, #12]
    f684:	f7ff fc45 	bl	ef12 <__ssrefill_r>
    f688:	9b03      	ldr	r3, [sp, #12]
    f68a:	b908      	cbnz	r0, f690 <__ssvfiscanf_r+0x6da>
    f68c:	3e01      	subs	r6, #1
    f68e:	d193      	bne.n	f5b8 <__ssvfiscanf_r+0x602>
    f690:	f41b 7f80 	tst.w	fp, #256	; 0x100
    f694:	d00e      	beq.n	f6b4 <__ssvfiscanf_r+0x6fe>
    f696:	ab0c      	add	r3, sp, #48	; 0x30
    f698:	459a      	cmp	sl, r3
    f69a:	d908      	bls.n	f6ae <__ssvfiscanf_r+0x6f8>
    f69c:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    f6a0:	4648      	mov	r0, r9
    f6a2:	4622      	mov	r2, r4
    f6a4:	f7ff fbf8 	bl	ee98 <_sungetc_r>
    f6a8:	f10a 36ff 	add.w	r6, sl, #4294967295
    f6ac:	46b2      	mov	sl, r6
    f6ae:	ab0c      	add	r3, sp, #48	; 0x30
    f6b0:	459a      	cmp	sl, r3
    f6b2:	d045      	beq.n	f740 <__ssvfiscanf_r+0x78a>
    f6b4:	f01b 0210 	ands.w	r2, fp, #16
    f6b8:	d133      	bne.n	f722 <__ssvfiscanf_r+0x76c>
    f6ba:	4643      	mov	r3, r8
    f6bc:	4648      	mov	r0, r9
    f6be:	a90c      	add	r1, sp, #48	; 0x30
    f6c0:	9e05      	ldr	r6, [sp, #20]
    f6c2:	f88a 2000 	strb.w	r2, [sl]
    f6c6:	47b0      	blx	r6
    f6c8:	f01b 0f20 	tst.w	fp, #32
    f6cc:	f105 0304 	add.w	r3, r5, #4
    f6d0:	d121      	bne.n	f716 <__ssvfiscanf_r+0x760>
    f6d2:	f01b 0f04 	tst.w	fp, #4
    f6d6:	d007      	beq.n	f6e8 <__ssvfiscanf_r+0x732>
    f6d8:	682a      	ldr	r2, [r5, #0]
    f6da:	8010      	strh	r0, [r2, #0]
    f6dc:	e01d      	b.n	f71a <__ssvfiscanf_r+0x764>
    f6de:	bf00      	nop
    f6e0:	20000498 	.word	0x20000498
    f6e4:	00010ce8 	.word	0x00010ce8
    f6e8:	f01b 0201 	ands.w	r2, fp, #1
    f6ec:	d113      	bne.n	f716 <__ssvfiscanf_r+0x760>
    f6ee:	f01b 0f02 	tst.w	fp, #2
    f6f2:	d010      	beq.n	f716 <__ssvfiscanf_r+0x760>
    f6f4:	4b14      	ldr	r3, [pc, #80]	; (f748 <__ssvfiscanf_r+0x792>)
    f6f6:	9e05      	ldr	r6, [sp, #20]
    f6f8:	429e      	cmp	r6, r3
    f6fa:	4648      	mov	r0, r9
    f6fc:	a90c      	add	r1, sp, #48	; 0x30
    f6fe:	4643      	mov	r3, r8
    f700:	d102      	bne.n	f708 <__ssvfiscanf_r+0x752>
    f702:	f7fe feb7 	bl	e474 <_strtoull_r>
    f706:	e001      	b.n	f70c <__ssvfiscanf_r+0x756>
    f708:	f7fe fd6e 	bl	e1e8 <_strtoll_r>
    f70c:	682b      	ldr	r3, [r5, #0]
    f70e:	3504      	adds	r5, #4
    f710:	e9c3 0100 	strd	r0, r1, [r3]
    f714:	e002      	b.n	f71c <__ssvfiscanf_r+0x766>
    f716:	682a      	ldr	r2, [r5, #0]
    f718:	6010      	str	r0, [r2, #0]
    f71a:	461d      	mov	r5, r3
    f71c:	9e04      	ldr	r6, [sp, #16]
    f71e:	3601      	adds	r6, #1
    f720:	9604      	str	r6, [sp, #16]
    f722:	ab0c      	add	r3, sp, #48	; 0x30
    f724:	9e07      	ldr	r6, [sp, #28]
    f726:	ebc3 0a0a 	rsb	sl, r3, sl
    f72a:	44b2      	add	sl, r6
    f72c:	4457      	add	r7, sl
    f72e:	e458      	b.n	efe2 <__ssvfiscanf_r+0x2c>
    f730:	9e04      	ldr	r6, [sp, #16]
    f732:	b116      	cbz	r6, f73a <__ssvfiscanf_r+0x784>
    f734:	89a3      	ldrh	r3, [r4, #12]
    f736:	065b      	lsls	r3, r3, #25
    f738:	d502      	bpl.n	f740 <__ssvfiscanf_r+0x78a>
    f73a:	f04f 30ff 	mov.w	r0, #4294967295
    f73e:	e000      	b.n	f742 <__ssvfiscanf_r+0x78c>
    f740:	9804      	ldr	r0, [sp, #16]
    f742:	b057      	add	sp, #348	; 0x15c
    f744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f748:	0000e369 	.word	0x0000e369

0000f74c <__submore>:
    f74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f750:	460c      	mov	r4, r1
    f752:	6b09      	ldr	r1, [r1, #48]	; 0x30
    f754:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f758:	4299      	cmp	r1, r3
    f75a:	d11c      	bne.n	f796 <__submore+0x4a>
    f75c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    f760:	f7fc fd8c 	bl	c27c <_malloc_r>
    f764:	b918      	cbnz	r0, f76e <__submore+0x22>
    f766:	f04f 30ff 	mov.w	r0, #4294967295
    f76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    f772:	6363      	str	r3, [r4, #52]	; 0x34
    f774:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    f778:	6320      	str	r0, [r4, #48]	; 0x30
    f77a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    f77e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    f782:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    f786:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    f78a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    f78e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    f792:	6020      	str	r0, [r4, #0]
    f794:	e012      	b.n	f7bc <__submore+0x70>
    f796:	6b66      	ldr	r6, [r4, #52]	; 0x34
    f798:	0077      	lsls	r7, r6, #1
    f79a:	463a      	mov	r2, r7
    f79c:	f7fd fc0e 	bl	cfbc <_realloc_r>
    f7a0:	4605      	mov	r5, r0
    f7a2:	2800      	cmp	r0, #0
    f7a4:	d0df      	beq.n	f766 <__submore+0x1a>
    f7a6:	eb00 0806 	add.w	r8, r0, r6
    f7aa:	4640      	mov	r0, r8
    f7ac:	4629      	mov	r1, r5
    f7ae:	4632      	mov	r2, r6
    f7b0:	f7fc ffe1 	bl	c776 <memcpy>
    f7b4:	f8c4 8000 	str.w	r8, [r4]
    f7b8:	6325      	str	r5, [r4, #48]	; 0x30
    f7ba:	6367      	str	r7, [r4, #52]	; 0x34
    f7bc:	2000      	movs	r0, #0
    f7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f7c2 <_ungetc_r>:
    f7c2:	1c4b      	adds	r3, r1, #1
    f7c4:	b570      	push	{r4, r5, r6, lr}
    f7c6:	4606      	mov	r6, r0
    f7c8:	460d      	mov	r5, r1
    f7ca:	4614      	mov	r4, r2
    f7cc:	d102      	bne.n	f7d4 <_ungetc_r+0x12>
    f7ce:	f04f 30ff 	mov.w	r0, #4294967295
    f7d2:	bd70      	pop	{r4, r5, r6, pc}
    f7d4:	b118      	cbz	r0, f7de <_ungetc_r+0x1c>
    f7d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    f7d8:	b90b      	cbnz	r3, f7de <_ungetc_r+0x1c>
    f7da:	f7fc f8b7 	bl	b94c <__sinit>
    f7de:	89a3      	ldrh	r3, [r4, #12]
    f7e0:	0498      	lsls	r0, r3, #18
    f7e2:	d406      	bmi.n	f7f2 <_ungetc_r+0x30>
    f7e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f7e8:	81a3      	strh	r3, [r4, #12]
    f7ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f7ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f7f0:	6663      	str	r3, [r4, #100]	; 0x64
    f7f2:	89a3      	ldrh	r3, [r4, #12]
    f7f4:	f023 0320 	bic.w	r3, r3, #32
    f7f8:	b29b      	uxth	r3, r3
    f7fa:	81a3      	strh	r3, [r4, #12]
    f7fc:	b29b      	uxth	r3, r3
    f7fe:	0759      	lsls	r1, r3, #29
    f800:	d413      	bmi.n	f82a <_ungetc_r+0x68>
    f802:	06da      	lsls	r2, r3, #27
    f804:	d5e3      	bpl.n	f7ce <_ungetc_r+0xc>
    f806:	071b      	lsls	r3, r3, #28
    f808:	d50b      	bpl.n	f822 <_ungetc_r+0x60>
    f80a:	4630      	mov	r0, r6
    f80c:	4621      	mov	r1, r4
    f80e:	f7fc f853 	bl	b8b8 <_fflush_r>
    f812:	2800      	cmp	r0, #0
    f814:	d1db      	bne.n	f7ce <_ungetc_r+0xc>
    f816:	89a3      	ldrh	r3, [r4, #12]
    f818:	60a0      	str	r0, [r4, #8]
    f81a:	f023 0308 	bic.w	r3, r3, #8
    f81e:	81a3      	strh	r3, [r4, #12]
    f820:	61a0      	str	r0, [r4, #24]
    f822:	89a3      	ldrh	r3, [r4, #12]
    f824:	f043 0304 	orr.w	r3, r3, #4
    f828:	81a3      	strh	r3, [r4, #12]
    f82a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f82c:	6862      	ldr	r2, [r4, #4]
    f82e:	b2ed      	uxtb	r5, r5
    f830:	b18b      	cbz	r3, f856 <_ungetc_r+0x94>
    f832:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f834:	429a      	cmp	r2, r3
    f836:	da07      	bge.n	f848 <_ungetc_r+0x86>
    f838:	6823      	ldr	r3, [r4, #0]
    f83a:	1e5a      	subs	r2, r3, #1
    f83c:	6022      	str	r2, [r4, #0]
    f83e:	f803 5c01 	strb.w	r5, [r3, #-1]
    f842:	6863      	ldr	r3, [r4, #4]
    f844:	3301      	adds	r3, #1
    f846:	e020      	b.n	f88a <_ungetc_r+0xc8>
    f848:	4630      	mov	r0, r6
    f84a:	4621      	mov	r1, r4
    f84c:	f7ff ff7e 	bl	f74c <__submore>
    f850:	2800      	cmp	r0, #0
    f852:	d0f1      	beq.n	f838 <_ungetc_r+0x76>
    f854:	e7bb      	b.n	f7ce <_ungetc_r+0xc>
    f856:	6921      	ldr	r1, [r4, #16]
    f858:	6823      	ldr	r3, [r4, #0]
    f85a:	b151      	cbz	r1, f872 <_ungetc_r+0xb0>
    f85c:	428b      	cmp	r3, r1
    f85e:	d908      	bls.n	f872 <_ungetc_r+0xb0>
    f860:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    f864:	42a8      	cmp	r0, r5
    f866:	d104      	bne.n	f872 <_ungetc_r+0xb0>
    f868:	3b01      	subs	r3, #1
    f86a:	3201      	adds	r2, #1
    f86c:	6023      	str	r3, [r4, #0]
    f86e:	6062      	str	r2, [r4, #4]
    f870:	bd70      	pop	{r4, r5, r6, pc}
    f872:	63a3      	str	r3, [r4, #56]	; 0x38
    f874:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f878:	6323      	str	r3, [r4, #48]	; 0x30
    f87a:	2303      	movs	r3, #3
    f87c:	6363      	str	r3, [r4, #52]	; 0x34
    f87e:	4623      	mov	r3, r4
    f880:	63e2      	str	r2, [r4, #60]	; 0x3c
    f882:	f803 5f42 	strb.w	r5, [r3, #66]!
    f886:	6023      	str	r3, [r4, #0]
    f888:	2301      	movs	r3, #1
    f88a:	6063      	str	r3, [r4, #4]
    f88c:	4628      	mov	r0, r5
    f88e:	bd70      	pop	{r4, r5, r6, pc}

0000f890 <ungetc>:
    f890:	460a      	mov	r2, r1
    f892:	4903      	ldr	r1, [pc, #12]	; (f8a0 <ungetc+0x10>)
    f894:	4603      	mov	r3, r0
    f896:	6808      	ldr	r0, [r1, #0]
    f898:	4619      	mov	r1, r3
    f89a:	f7ff bf92 	b.w	f7c2 <_ungetc_r>
    f89e:	bf00      	nop
    f8a0:	200004a0 	.word	0x200004a0

0000f8a4 <__swbuf_r>:
    f8a4:	b570      	push	{r4, r5, r6, lr}
    f8a6:	460d      	mov	r5, r1
    f8a8:	4614      	mov	r4, r2
    f8aa:	4606      	mov	r6, r0
    f8ac:	b118      	cbz	r0, f8b6 <__swbuf_r+0x12>
    f8ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
    f8b0:	b90b      	cbnz	r3, f8b6 <__swbuf_r+0x12>
    f8b2:	f7fc f84b 	bl	b94c <__sinit>
    f8b6:	69a3      	ldr	r3, [r4, #24]
    f8b8:	60a3      	str	r3, [r4, #8]
    f8ba:	89a3      	ldrh	r3, [r4, #12]
    f8bc:	0719      	lsls	r1, r3, #28
    f8be:	d50d      	bpl.n	f8dc <__swbuf_r+0x38>
    f8c0:	6923      	ldr	r3, [r4, #16]
    f8c2:	b15b      	cbz	r3, f8dc <__swbuf_r+0x38>
    f8c4:	89a3      	ldrh	r3, [r4, #12]
    f8c6:	049a      	lsls	r2, r3, #18
    f8c8:	b2ed      	uxtb	r5, r5
    f8ca:	d410      	bmi.n	f8ee <__swbuf_r+0x4a>
    f8cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f8d0:	81a3      	strh	r3, [r4, #12]
    f8d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f8d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f8d8:	6663      	str	r3, [r4, #100]	; 0x64
    f8da:	e008      	b.n	f8ee <__swbuf_r+0x4a>
    f8dc:	4630      	mov	r0, r6
    f8de:	4621      	mov	r1, r4
    f8e0:	f7fb f860 	bl	a9a4 <__swsetup_r>
    f8e4:	2800      	cmp	r0, #0
    f8e6:	d0ed      	beq.n	f8c4 <__swbuf_r+0x20>
    f8e8:	f04f 30ff 	mov.w	r0, #4294967295
    f8ec:	bd70      	pop	{r4, r5, r6, pc}
    f8ee:	6923      	ldr	r3, [r4, #16]
    f8f0:	6820      	ldr	r0, [r4, #0]
    f8f2:	1ac0      	subs	r0, r0, r3
    f8f4:	6963      	ldr	r3, [r4, #20]
    f8f6:	4298      	cmp	r0, r3
    f8f8:	db05      	blt.n	f906 <__swbuf_r+0x62>
    f8fa:	4630      	mov	r0, r6
    f8fc:	4621      	mov	r1, r4
    f8fe:	f7fb ffdb 	bl	b8b8 <_fflush_r>
    f902:	2800      	cmp	r0, #0
    f904:	d1f0      	bne.n	f8e8 <__swbuf_r+0x44>
    f906:	68a3      	ldr	r3, [r4, #8]
    f908:	3b01      	subs	r3, #1
    f90a:	60a3      	str	r3, [r4, #8]
    f90c:	6823      	ldr	r3, [r4, #0]
    f90e:	1c5a      	adds	r2, r3, #1
    f910:	6022      	str	r2, [r4, #0]
    f912:	701d      	strb	r5, [r3, #0]
    f914:	6963      	ldr	r3, [r4, #20]
    f916:	3001      	adds	r0, #1
    f918:	4298      	cmp	r0, r3
    f91a:	d004      	beq.n	f926 <__swbuf_r+0x82>
    f91c:	89a3      	ldrh	r3, [r4, #12]
    f91e:	07db      	lsls	r3, r3, #31
    f920:	d507      	bpl.n	f932 <__swbuf_r+0x8e>
    f922:	2d0a      	cmp	r5, #10
    f924:	d105      	bne.n	f932 <__swbuf_r+0x8e>
    f926:	4630      	mov	r0, r6
    f928:	4621      	mov	r1, r4
    f92a:	f7fb ffc5 	bl	b8b8 <_fflush_r>
    f92e:	2800      	cmp	r0, #0
    f930:	d1da      	bne.n	f8e8 <__swbuf_r+0x44>
    f932:	4628      	mov	r0, r5
    f934:	bd70      	pop	{r4, r5, r6, pc}

0000f936 <__swbuf>:
    f936:	460a      	mov	r2, r1
    f938:	4902      	ldr	r1, [pc, #8]	; (f944 <__swbuf+0xe>)
    f93a:	4603      	mov	r3, r0
    f93c:	6808      	ldr	r0, [r1, #0]
    f93e:	4619      	mov	r1, r3
    f940:	f7ff bfb0 	b.w	f8a4 <__swbuf_r>
    f944:	200004a0 	.word	0x200004a0

0000f948 <_wcrtomb_r>:
    f948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f94c:	461d      	mov	r5, r3
    f94e:	4b10      	ldr	r3, [pc, #64]	; (f990 <_wcrtomb_r+0x48>)
    f950:	b086      	sub	sp, #24
    f952:	4604      	mov	r4, r0
    f954:	4690      	mov	r8, r2
    f956:	460e      	mov	r6, r1
    f958:	681f      	ldr	r7, [r3, #0]
    f95a:	b939      	cbnz	r1, f96c <_wcrtomb_r+0x24>
    f95c:	f7fc fbe6 	bl	c12c <__locale_charset>
    f960:	9500      	str	r5, [sp, #0]
    f962:	4603      	mov	r3, r0
    f964:	a903      	add	r1, sp, #12
    f966:	4620      	mov	r0, r4
    f968:	4632      	mov	r2, r6
    f96a:	e006      	b.n	f97a <_wcrtomb_r+0x32>
    f96c:	f7fc fbde 	bl	c12c <__locale_charset>
    f970:	9500      	str	r5, [sp, #0]
    f972:	4603      	mov	r3, r0
    f974:	4631      	mov	r1, r6
    f976:	4620      	mov	r0, r4
    f978:	4642      	mov	r2, r8
    f97a:	47b8      	blx	r7
    f97c:	1c43      	adds	r3, r0, #1
    f97e:	d103      	bne.n	f988 <_wcrtomb_r+0x40>
    f980:	2300      	movs	r3, #0
    f982:	602b      	str	r3, [r5, #0]
    f984:	238a      	movs	r3, #138	; 0x8a
    f986:	6023      	str	r3, [r4, #0]
    f988:	b006      	add	sp, #24
    f98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f98e:	bf00      	nop
    f990:	20000d60 	.word	0x20000d60

0000f994 <wcrtomb>:
    f994:	b530      	push	{r4, r5, lr}
    f996:	4613      	mov	r3, r2
    f998:	4a04      	ldr	r2, [pc, #16]	; (f9ac <wcrtomb+0x18>)
    f99a:	4605      	mov	r5, r0
    f99c:	460c      	mov	r4, r1
    f99e:	6810      	ldr	r0, [r2, #0]
    f9a0:	4629      	mov	r1, r5
    f9a2:	4622      	mov	r2, r4
    f9a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f9a8:	f7ff bfce 	b.w	f948 <_wcrtomb_r>
    f9ac:	200004a0 	.word	0x200004a0

0000f9b0 <__ascii_wctomb>:
    f9b0:	b149      	cbz	r1, f9c6 <__ascii_wctomb+0x16>
    f9b2:	2aff      	cmp	r2, #255	; 0xff
    f9b4:	d904      	bls.n	f9c0 <__ascii_wctomb+0x10>
    f9b6:	238a      	movs	r3, #138	; 0x8a
    f9b8:	6003      	str	r3, [r0, #0]
    f9ba:	f04f 30ff 	mov.w	r0, #4294967295
    f9be:	4770      	bx	lr
    f9c0:	700a      	strb	r2, [r1, #0]
    f9c2:	2001      	movs	r0, #1
    f9c4:	4770      	bx	lr
    f9c6:	4608      	mov	r0, r1
    f9c8:	4770      	bx	lr

0000f9ca <_wctomb_r>:
    f9ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f9ce:	4698      	mov	r8, r3
    f9d0:	4b08      	ldr	r3, [pc, #32]	; (f9f4 <_wctomb_r+0x2a>)
    f9d2:	4605      	mov	r5, r0
    f9d4:	681c      	ldr	r4, [r3, #0]
    f9d6:	460f      	mov	r7, r1
    f9d8:	4616      	mov	r6, r2
    f9da:	f7fc fba7 	bl	c12c <__locale_charset>
    f9de:	f8cd 8000 	str.w	r8, [sp]
    f9e2:	4603      	mov	r3, r0
    f9e4:	4639      	mov	r1, r7
    f9e6:	4628      	mov	r0, r5
    f9e8:	4632      	mov	r2, r6
    f9ea:	47a0      	blx	r4
    f9ec:	b002      	add	sp, #8
    f9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9f2:	bf00      	nop
    f9f4:	20000d60 	.word	0x20000d60

0000f9f8 <_calloc_r>:
    f9f8:	b510      	push	{r4, lr}
    f9fa:	4351      	muls	r1, r2
    f9fc:	f7fc fc3e 	bl	c27c <_malloc_r>
    fa00:	4604      	mov	r4, r0
    fa02:	b320      	cbz	r0, fa4e <_calloc_r+0x56>
    fa04:	f850 2c04 	ldr.w	r2, [r0, #-4]
    fa08:	f022 0203 	bic.w	r2, r2, #3
    fa0c:	3a04      	subs	r2, #4
    fa0e:	2a24      	cmp	r2, #36	; 0x24
    fa10:	d81a      	bhi.n	fa48 <_calloc_r+0x50>
    fa12:	2a13      	cmp	r2, #19
    fa14:	d912      	bls.n	fa3c <_calloc_r+0x44>
    fa16:	2100      	movs	r1, #0
    fa18:	2a1b      	cmp	r2, #27
    fa1a:	6001      	str	r1, [r0, #0]
    fa1c:	6041      	str	r1, [r0, #4]
    fa1e:	d802      	bhi.n	fa26 <_calloc_r+0x2e>
    fa20:	f100 0308 	add.w	r3, r0, #8
    fa24:	e00b      	b.n	fa3e <_calloc_r+0x46>
    fa26:	2a24      	cmp	r2, #36	; 0x24
    fa28:	6081      	str	r1, [r0, #8]
    fa2a:	60c1      	str	r1, [r0, #12]
    fa2c:	bf11      	iteee	ne
    fa2e:	f100 0310 	addne.w	r3, r0, #16
    fa32:	6101      	streq	r1, [r0, #16]
    fa34:	f100 0318 	addeq.w	r3, r0, #24
    fa38:	6141      	streq	r1, [r0, #20]
    fa3a:	e000      	b.n	fa3e <_calloc_r+0x46>
    fa3c:	4603      	mov	r3, r0
    fa3e:	2200      	movs	r2, #0
    fa40:	601a      	str	r2, [r3, #0]
    fa42:	605a      	str	r2, [r3, #4]
    fa44:	609a      	str	r2, [r3, #8]
    fa46:	e002      	b.n	fa4e <_calloc_r+0x56>
    fa48:	2100      	movs	r1, #0
    fa4a:	f7f8 fc79 	bl	8340 <memset>
    fa4e:	4620      	mov	r0, r4
    fa50:	bd10      	pop	{r4, pc}
	...

0000fa54 <_fclose_r>:
    fa54:	b570      	push	{r4, r5, r6, lr}
    fa56:	4605      	mov	r5, r0
    fa58:	460c      	mov	r4, r1
    fa5a:	b909      	cbnz	r1, fa60 <_fclose_r+0xc>
    fa5c:	2000      	movs	r0, #0
    fa5e:	bd70      	pop	{r4, r5, r6, pc}
    fa60:	b118      	cbz	r0, fa6a <_fclose_r+0x16>
    fa62:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fa64:	b90b      	cbnz	r3, fa6a <_fclose_r+0x16>
    fa66:	f7fb ff71 	bl	b94c <__sinit>
    fa6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fa6e:	2b00      	cmp	r3, #0
    fa70:	d0f4      	beq.n	fa5c <_fclose_r+0x8>
    fa72:	4628      	mov	r0, r5
    fa74:	4621      	mov	r1, r4
    fa76:	f7fb ff1f 	bl	b8b8 <_fflush_r>
    fa7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fa7c:	4606      	mov	r6, r0
    fa7e:	b133      	cbz	r3, fa8e <_fclose_r+0x3a>
    fa80:	4628      	mov	r0, r5
    fa82:	69e1      	ldr	r1, [r4, #28]
    fa84:	4798      	blx	r3
    fa86:	2800      	cmp	r0, #0
    fa88:	bfb8      	it	lt
    fa8a:	f04f 36ff 	movlt.w	r6, #4294967295
    fa8e:	89a3      	ldrh	r3, [r4, #12]
    fa90:	061b      	lsls	r3, r3, #24
    fa92:	d503      	bpl.n	fa9c <_fclose_r+0x48>
    fa94:	4628      	mov	r0, r5
    fa96:	6921      	ldr	r1, [r4, #16]
    fa98:	f7fc f8dc 	bl	bc54 <_free_r>
    fa9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fa9e:	b141      	cbz	r1, fab2 <_fclose_r+0x5e>
    faa0:	f104 0340 	add.w	r3, r4, #64	; 0x40
    faa4:	4299      	cmp	r1, r3
    faa6:	d002      	beq.n	faae <_fclose_r+0x5a>
    faa8:	4628      	mov	r0, r5
    faaa:	f7fc f8d3 	bl	bc54 <_free_r>
    faae:	2300      	movs	r3, #0
    fab0:	6323      	str	r3, [r4, #48]	; 0x30
    fab2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    fab4:	b121      	cbz	r1, fac0 <_fclose_r+0x6c>
    fab6:	4628      	mov	r0, r5
    fab8:	f7fc f8cc 	bl	bc54 <_free_r>
    fabc:	2300      	movs	r3, #0
    fabe:	6463      	str	r3, [r4, #68]	; 0x44
    fac0:	f7fb fff6 	bl	bab0 <__sfp_lock_acquire>
    fac4:	2300      	movs	r3, #0
    fac6:	81a3      	strh	r3, [r4, #12]
    fac8:	f7fb fff3 	bl	bab2 <__sfp_lock_release>
    facc:	4630      	mov	r0, r6
    face:	bd70      	pop	{r4, r5, r6, pc}

0000fad0 <fclose>:
    fad0:	4b02      	ldr	r3, [pc, #8]	; (fadc <fclose+0xc>)
    fad2:	4601      	mov	r1, r0
    fad4:	6818      	ldr	r0, [r3, #0]
    fad6:	f7ff bfbd 	b.w	fa54 <_fclose_r>
    fada:	bf00      	nop
    fadc:	200004a0 	.word	0x200004a0

0000fae0 <_fstat_r>:
    fae0:	b538      	push	{r3, r4, r5, lr}
    fae2:	4c07      	ldr	r4, [pc, #28]	; (fb00 <_fstat_r+0x20>)
    fae4:	2300      	movs	r3, #0
    fae6:	4605      	mov	r5, r0
    fae8:	4608      	mov	r0, r1
    faea:	4611      	mov	r1, r2
    faec:	6023      	str	r3, [r4, #0]
    faee:	f7f6 fb5d 	bl	61ac <_fstat>
    faf2:	1c43      	adds	r3, r0, #1
    faf4:	d102      	bne.n	fafc <_fstat_r+0x1c>
    faf6:	6823      	ldr	r3, [r4, #0]
    faf8:	b103      	cbz	r3, fafc <_fstat_r+0x1c>
    fafa:	602b      	str	r3, [r5, #0]
    fafc:	bd38      	pop	{r3, r4, r5, pc}
    fafe:	bf00      	nop
    fb00:	20000fa8 	.word	0x20000fa8

0000fb04 <rshift>:
    fb04:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb06:	6906      	ldr	r6, [r0, #16]
    fb08:	114b      	asrs	r3, r1, #5
    fb0a:	42b3      	cmp	r3, r6
    fb0c:	f100 0214 	add.w	r2, r0, #20
    fb10:	da26      	bge.n	fb60 <rshift+0x5c>
    fb12:	f011 011f 	ands.w	r1, r1, #31
    fb16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    fb1a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    fb1e:	d101      	bne.n	fb24 <rshift+0x20>
    fb20:	4613      	mov	r3, r2
    fb22:	e016      	b.n	fb52 <rshift+0x4e>
    fb24:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    fb28:	f1c1 0c20 	rsb	ip, r1, #32
    fb2c:	3404      	adds	r4, #4
    fb2e:	40cd      	lsrs	r5, r1
    fb30:	4613      	mov	r3, r2
    fb32:	42b4      	cmp	r4, r6
    fb34:	d209      	bcs.n	fb4a <rshift+0x46>
    fb36:	6827      	ldr	r7, [r4, #0]
    fb38:	fa07 f70c 	lsl.w	r7, r7, ip
    fb3c:	433d      	orrs	r5, r7
    fb3e:	f843 5b04 	str.w	r5, [r3], #4
    fb42:	f854 5b04 	ldr.w	r5, [r4], #4
    fb46:	40cd      	lsrs	r5, r1
    fb48:	e7f3      	b.n	fb32 <rshift+0x2e>
    fb4a:	601d      	str	r5, [r3, #0]
    fb4c:	b14d      	cbz	r5, fb62 <rshift+0x5e>
    fb4e:	3304      	adds	r3, #4
    fb50:	e007      	b.n	fb62 <rshift+0x5e>
    fb52:	42b4      	cmp	r4, r6
    fb54:	d205      	bcs.n	fb62 <rshift+0x5e>
    fb56:	f854 1b04 	ldr.w	r1, [r4], #4
    fb5a:	f843 1b04 	str.w	r1, [r3], #4
    fb5e:	e7f8      	b.n	fb52 <rshift+0x4e>
    fb60:	4613      	mov	r3, r2
    fb62:	1a9b      	subs	r3, r3, r2
    fb64:	109b      	asrs	r3, r3, #2
    fb66:	6103      	str	r3, [r0, #16]
    fb68:	b903      	cbnz	r3, fb6c <rshift+0x68>
    fb6a:	6143      	str	r3, [r0, #20]
    fb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fb6e <__hexdig_fun>:
    fb6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    fb72:	b2db      	uxtb	r3, r3
    fb74:	2b09      	cmp	r3, #9
    fb76:	d801      	bhi.n	fb7c <__hexdig_fun+0xe>
    fb78:	3820      	subs	r0, #32
    fb7a:	e00c      	b.n	fb96 <__hexdig_fun+0x28>
    fb7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    fb80:	b2db      	uxtb	r3, r3
    fb82:	2b05      	cmp	r3, #5
    fb84:	d801      	bhi.n	fb8a <__hexdig_fun+0x1c>
    fb86:	3847      	subs	r0, #71	; 0x47
    fb88:	e005      	b.n	fb96 <__hexdig_fun+0x28>
    fb8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    fb8e:	b2db      	uxtb	r3, r3
    fb90:	2b05      	cmp	r3, #5
    fb92:	d802      	bhi.n	fb9a <__hexdig_fun+0x2c>
    fb94:	3827      	subs	r0, #39	; 0x27
    fb96:	b2c0      	uxtb	r0, r0
    fb98:	4770      	bx	lr
    fb9a:	2000      	movs	r0, #0
    fb9c:	4770      	bx	lr

0000fb9e <__gethex>:
    fb9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fba2:	b089      	sub	sp, #36	; 0x24
    fba4:	4690      	mov	r8, r2
    fba6:	9105      	str	r1, [sp, #20]
    fba8:	9306      	str	r3, [sp, #24]
    fbaa:	9003      	str	r0, [sp, #12]
    fbac:	f7fc face 	bl	c14c <_localeconv_r>
    fbb0:	6800      	ldr	r0, [r0, #0]
    fbb2:	9004      	str	r0, [sp, #16]
    fbb4:	f7f8 fd2f 	bl	8616 <strlen>
    fbb8:	9b04      	ldr	r3, [sp, #16]
    fbba:	9905      	ldr	r1, [sp, #20]
    fbbc:	9002      	str	r0, [sp, #8]
    fbbe:	4403      	add	r3, r0
    fbc0:	f04f 0b00 	mov.w	fp, #0
    fbc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    fbc8:	9307      	str	r3, [sp, #28]
    fbca:	680b      	ldr	r3, [r1, #0]
    fbcc:	3302      	adds	r3, #2
    fbce:	461f      	mov	r7, r3
    fbd0:	f813 0b01 	ldrb.w	r0, [r3], #1
    fbd4:	2830      	cmp	r0, #48	; 0x30
    fbd6:	d102      	bne.n	fbde <__gethex+0x40>
    fbd8:	f10b 0b01 	add.w	fp, fp, #1
    fbdc:	e7f7      	b.n	fbce <__gethex+0x30>
    fbde:	f7ff ffc6 	bl	fb6e <__hexdig_fun>
    fbe2:	4606      	mov	r6, r0
    fbe4:	b9f8      	cbnz	r0, fc26 <__gethex+0x88>
    fbe6:	4638      	mov	r0, r7
    fbe8:	9904      	ldr	r1, [sp, #16]
    fbea:	9a02      	ldr	r2, [sp, #8]
    fbec:	f000 faba 	bl	10164 <strncmp>
    fbf0:	2800      	cmp	r0, #0
    fbf2:	d139      	bne.n	fc68 <__gethex+0xca>
    fbf4:	9b02      	ldr	r3, [sp, #8]
    fbf6:	9d02      	ldr	r5, [sp, #8]
    fbf8:	5cf8      	ldrb	r0, [r7, r3]
    fbfa:	443d      	add	r5, r7
    fbfc:	f7ff ffb7 	bl	fb6e <__hexdig_fun>
    fc00:	2800      	cmp	r0, #0
    fc02:	d033      	beq.n	fc6c <__gethex+0xce>
    fc04:	462b      	mov	r3, r5
    fc06:	7818      	ldrb	r0, [r3, #0]
    fc08:	2830      	cmp	r0, #48	; 0x30
    fc0a:	461f      	mov	r7, r3
    fc0c:	f103 0301 	add.w	r3, r3, #1
    fc10:	d0f9      	beq.n	fc06 <__gethex+0x68>
    fc12:	f7ff ffac 	bl	fb6e <__hexdig_fun>
    fc16:	f1d0 0401 	rsbs	r4, r0, #1
    fc1a:	bf38      	it	cc
    fc1c:	2400      	movcc	r4, #0
    fc1e:	462e      	mov	r6, r5
    fc20:	f04f 0b01 	mov.w	fp, #1
    fc24:	e001      	b.n	fc2a <__gethex+0x8c>
    fc26:	2400      	movs	r4, #0
    fc28:	4626      	mov	r6, r4
    fc2a:	46b9      	mov	r9, r7
    fc2c:	464d      	mov	r5, r9
    fc2e:	f109 0901 	add.w	r9, r9, #1
    fc32:	7828      	ldrb	r0, [r5, #0]
    fc34:	f7ff ff9b 	bl	fb6e <__hexdig_fun>
    fc38:	2800      	cmp	r0, #0
    fc3a:	d1f7      	bne.n	fc2c <__gethex+0x8e>
    fc3c:	4628      	mov	r0, r5
    fc3e:	9904      	ldr	r1, [sp, #16]
    fc40:	9a02      	ldr	r2, [sp, #8]
    fc42:	f000 fa8f 	bl	10164 <strncmp>
    fc46:	b958      	cbnz	r0, fc60 <__gethex+0xc2>
    fc48:	b95e      	cbnz	r6, fc62 <__gethex+0xc4>
    fc4a:	9e02      	ldr	r6, [sp, #8]
    fc4c:	442e      	add	r6, r5
    fc4e:	46b1      	mov	r9, r6
    fc50:	464d      	mov	r5, r9
    fc52:	f109 0901 	add.w	r9, r9, #1
    fc56:	7828      	ldrb	r0, [r5, #0]
    fc58:	f7ff ff89 	bl	fb6e <__hexdig_fun>
    fc5c:	2800      	cmp	r0, #0
    fc5e:	d1f7      	bne.n	fc50 <__gethex+0xb2>
    fc60:	b136      	cbz	r6, fc70 <__gethex+0xd2>
    fc62:	1b76      	subs	r6, r6, r5
    fc64:	00b6      	lsls	r6, r6, #2
    fc66:	e003      	b.n	fc70 <__gethex+0xd2>
    fc68:	463d      	mov	r5, r7
    fc6a:	e000      	b.n	fc6e <__gethex+0xd0>
    fc6c:	4606      	mov	r6, r0
    fc6e:	2401      	movs	r4, #1
    fc70:	782b      	ldrb	r3, [r5, #0]
    fc72:	2b50      	cmp	r3, #80	; 0x50
    fc74:	d001      	beq.n	fc7a <__gethex+0xdc>
    fc76:	2b70      	cmp	r3, #112	; 0x70
    fc78:	d134      	bne.n	fce4 <__gethex+0x146>
    fc7a:	786b      	ldrb	r3, [r5, #1]
    fc7c:	2b2b      	cmp	r3, #43	; 0x2b
    fc7e:	d005      	beq.n	fc8c <__gethex+0xee>
    fc80:	2b2d      	cmp	r3, #45	; 0x2d
    fc82:	d005      	beq.n	fc90 <__gethex+0xf2>
    fc84:	f105 0901 	add.w	r9, r5, #1
    fc88:	2100      	movs	r1, #0
    fc8a:	e004      	b.n	fc96 <__gethex+0xf8>
    fc8c:	2100      	movs	r1, #0
    fc8e:	e000      	b.n	fc92 <__gethex+0xf4>
    fc90:	2101      	movs	r1, #1
    fc92:	f105 0902 	add.w	r9, r5, #2
    fc96:	f899 0000 	ldrb.w	r0, [r9]
    fc9a:	9101      	str	r1, [sp, #4]
    fc9c:	f7ff ff67 	bl	fb6e <__hexdig_fun>
    fca0:	1e43      	subs	r3, r0, #1
    fca2:	b2db      	uxtb	r3, r3
    fca4:	2b18      	cmp	r3, #24
    fca6:	9901      	ldr	r1, [sp, #4]
    fca8:	d81c      	bhi.n	fce4 <__gethex+0x146>
    fcaa:	f1a0 0a10 	sub.w	sl, r0, #16
    fcae:	f109 0301 	add.w	r3, r9, #1
    fcb2:	4699      	mov	r9, r3
    fcb4:	3301      	adds	r3, #1
    fcb6:	f899 0000 	ldrb.w	r0, [r9]
    fcba:	9101      	str	r1, [sp, #4]
    fcbc:	9300      	str	r3, [sp, #0]
    fcbe:	f7ff ff56 	bl	fb6e <__hexdig_fun>
    fcc2:	1e42      	subs	r2, r0, #1
    fcc4:	b2d2      	uxtb	r2, r2
    fcc6:	2a18      	cmp	r2, #24
    fcc8:	9901      	ldr	r1, [sp, #4]
    fcca:	9b00      	ldr	r3, [sp, #0]
    fccc:	d805      	bhi.n	fcda <__gethex+0x13c>
    fcce:	220a      	movs	r2, #10
    fcd0:	fb02 0a0a 	mla	sl, r2, sl, r0
    fcd4:	f1aa 0a10 	sub.w	sl, sl, #16
    fcd8:	e7eb      	b.n	fcb2 <__gethex+0x114>
    fcda:	b109      	cbz	r1, fce0 <__gethex+0x142>
    fcdc:	f1ca 0a00 	rsb	sl, sl, #0
    fce0:	4456      	add	r6, sl
    fce2:	e000      	b.n	fce6 <__gethex+0x148>
    fce4:	46a9      	mov	r9, r5
    fce6:	9905      	ldr	r1, [sp, #20]
    fce8:	f8c1 9000 	str.w	r9, [r1]
    fcec:	b12c      	cbz	r4, fcfa <__gethex+0x15c>
    fcee:	f1bb 0f00 	cmp.w	fp, #0
    fcf2:	bf0c      	ite	eq
    fcf4:	2006      	moveq	r0, #6
    fcf6:	2000      	movne	r0, #0
    fcf8:	e17d      	b.n	fff6 <__gethex+0x458>
    fcfa:	1beb      	subs	r3, r5, r7
    fcfc:	3b01      	subs	r3, #1
    fcfe:	4621      	mov	r1, r4
    fd00:	2b07      	cmp	r3, #7
    fd02:	dd02      	ble.n	fd0a <__gethex+0x16c>
    fd04:	3101      	adds	r1, #1
    fd06:	105b      	asrs	r3, r3, #1
    fd08:	e7fa      	b.n	fd00 <__gethex+0x162>
    fd0a:	9803      	ldr	r0, [sp, #12]
    fd0c:	f7fc fd5a 	bl	c7c4 <_Balloc>
    fd10:	f04f 0900 	mov.w	r9, #0
    fd14:	f100 0a14 	add.w	sl, r0, #20
    fd18:	4604      	mov	r4, r0
    fd1a:	4653      	mov	r3, sl
    fd1c:	46cb      	mov	fp, r9
    fd1e:	42bd      	cmp	r5, r7
    fd20:	d933      	bls.n	fd8a <__gethex+0x1ec>
    fd22:	1e6a      	subs	r2, r5, #1
    fd24:	9205      	str	r2, [sp, #20]
    fd26:	9907      	ldr	r1, [sp, #28]
    fd28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    fd2c:	428a      	cmp	r2, r1
    fd2e:	d009      	beq.n	fd44 <__gethex+0x1a6>
    fd30:	f1bb 0f20 	cmp.w	fp, #32
    fd34:	d117      	bne.n	fd66 <__gethex+0x1c8>
    fd36:	f8c3 9000 	str.w	r9, [r3]
    fd3a:	f04f 0900 	mov.w	r9, #0
    fd3e:	3304      	adds	r3, #4
    fd40:	46cb      	mov	fp, r9
    fd42:	e010      	b.n	fd66 <__gethex+0x1c8>
    fd44:	9a02      	ldr	r2, [sp, #8]
    fd46:	9905      	ldr	r1, [sp, #20]
    fd48:	f1c2 0c01 	rsb	ip, r2, #1
    fd4c:	448c      	add	ip, r1
    fd4e:	45bc      	cmp	ip, r7
    fd50:	d3ee      	bcc.n	fd30 <__gethex+0x192>
    fd52:	4660      	mov	r0, ip
    fd54:	9904      	ldr	r1, [sp, #16]
    fd56:	e88d 1008 	stmia.w	sp, {r3, ip}
    fd5a:	f000 fa03 	bl	10164 <strncmp>
    fd5e:	e89d 1008 	ldmia.w	sp, {r3, ip}
    fd62:	b180      	cbz	r0, fd86 <__gethex+0x1e8>
    fd64:	e7e4      	b.n	fd30 <__gethex+0x192>
    fd66:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    fd6a:	9300      	str	r3, [sp, #0]
    fd6c:	f7ff feff 	bl	fb6e <__hexdig_fun>
    fd70:	f000 000f 	and.w	r0, r0, #15
    fd74:	fa00 f00b 	lsl.w	r0, r0, fp
    fd78:	f8dd c014 	ldr.w	ip, [sp, #20]
    fd7c:	9b00      	ldr	r3, [sp, #0]
    fd7e:	ea49 0900 	orr.w	r9, r9, r0
    fd82:	f10b 0b04 	add.w	fp, fp, #4
    fd86:	4665      	mov	r5, ip
    fd88:	e7c9      	b.n	fd1e <__gethex+0x180>
    fd8a:	f843 9b04 	str.w	r9, [r3], #4
    fd8e:	ebca 0303 	rsb	r3, sl, r3
    fd92:	109b      	asrs	r3, r3, #2
    fd94:	6123      	str	r3, [r4, #16]
    fd96:	4648      	mov	r0, r9
    fd98:	015f      	lsls	r7, r3, #5
    fd9a:	f7fc fdbe 	bl	c91a <__hi0bits>
    fd9e:	f8d8 5000 	ldr.w	r5, [r8]
    fda2:	1a38      	subs	r0, r7, r0
    fda4:	42a8      	cmp	r0, r5
    fda6:	dd26      	ble.n	fdf6 <__gethex+0x258>
    fda8:	1b47      	subs	r7, r0, r5
    fdaa:	4639      	mov	r1, r7
    fdac:	4620      	mov	r0, r4
    fdae:	f7fd f8ce 	bl	cf4e <__any_on>
    fdb2:	b1c8      	cbz	r0, fde8 <__gethex+0x24a>
    fdb4:	1e7b      	subs	r3, r7, #1
    fdb6:	115a      	asrs	r2, r3, #5
    fdb8:	f003 011f 	and.w	r1, r3, #31
    fdbc:	f04f 0901 	mov.w	r9, #1
    fdc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    fdc4:	fa09 f101 	lsl.w	r1, r9, r1
    fdc8:	4211      	tst	r1, r2
    fdca:	d00e      	beq.n	fdea <__gethex+0x24c>
    fdcc:	454b      	cmp	r3, r9
    fdce:	dc02      	bgt.n	fdd6 <__gethex+0x238>
    fdd0:	f04f 0902 	mov.w	r9, #2
    fdd4:	e009      	b.n	fdea <__gethex+0x24c>
    fdd6:	4620      	mov	r0, r4
    fdd8:	1eb9      	subs	r1, r7, #2
    fdda:	f7fd f8b8 	bl	cf4e <__any_on>
    fdde:	2800      	cmp	r0, #0
    fde0:	d0f6      	beq.n	fdd0 <__gethex+0x232>
    fde2:	f04f 0903 	mov.w	r9, #3
    fde6:	e000      	b.n	fdea <__gethex+0x24c>
    fde8:	4681      	mov	r9, r0
    fdea:	4620      	mov	r0, r4
    fdec:	4639      	mov	r1, r7
    fdee:	f7ff fe89 	bl	fb04 <rshift>
    fdf2:	443e      	add	r6, r7
    fdf4:	e00c      	b.n	fe10 <__gethex+0x272>
    fdf6:	da09      	bge.n	fe0c <__gethex+0x26e>
    fdf8:	1a2f      	subs	r7, r5, r0
    fdfa:	4621      	mov	r1, r4
    fdfc:	9803      	ldr	r0, [sp, #12]
    fdfe:	463a      	mov	r2, r7
    fe00:	f7fc feb8 	bl	cb74 <__lshift>
    fe04:	1bf6      	subs	r6, r6, r7
    fe06:	4604      	mov	r4, r0
    fe08:	f100 0a14 	add.w	sl, r0, #20
    fe0c:	f04f 0900 	mov.w	r9, #0
    fe10:	f8d8 3008 	ldr.w	r3, [r8, #8]
    fe14:	429e      	cmp	r6, r3
    fe16:	dd08      	ble.n	fe2a <__gethex+0x28c>
    fe18:	9803      	ldr	r0, [sp, #12]
    fe1a:	4621      	mov	r1, r4
    fe1c:	f7fc fcf8 	bl	c810 <_Bfree>
    fe20:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fe22:	2300      	movs	r3, #0
    fe24:	6013      	str	r3, [r2, #0]
    fe26:	20a3      	movs	r0, #163	; 0xa3
    fe28:	e0e5      	b.n	fff6 <__gethex+0x458>
    fe2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fe2e:	429e      	cmp	r6, r3
    fe30:	da54      	bge.n	fedc <__gethex+0x33e>
    fe32:	1b9e      	subs	r6, r3, r6
    fe34:	42ae      	cmp	r6, r5
    fe36:	db2e      	blt.n	fe96 <__gethex+0x2f8>
    fe38:	f8d8 300c 	ldr.w	r3, [r8, #12]
    fe3c:	2b02      	cmp	r3, #2
    fe3e:	d01a      	beq.n	fe76 <__gethex+0x2d8>
    fe40:	2b03      	cmp	r3, #3
    fe42:	d01c      	beq.n	fe7e <__gethex+0x2e0>
    fe44:	2b01      	cmp	r3, #1
    fe46:	d11d      	bne.n	fe84 <__gethex+0x2e6>
    fe48:	42ae      	cmp	r6, r5
    fe4a:	d11b      	bne.n	fe84 <__gethex+0x2e6>
    fe4c:	2d01      	cmp	r5, #1
    fe4e:	dc0b      	bgt.n	fe68 <__gethex+0x2ca>
    fe50:	9906      	ldr	r1, [sp, #24]
    fe52:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fe56:	600b      	str	r3, [r1, #0]
    fe58:	2301      	movs	r3, #1
    fe5a:	6123      	str	r3, [r4, #16]
    fe5c:	f8ca 3000 	str.w	r3, [sl]
    fe60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fe62:	2062      	movs	r0, #98	; 0x62
    fe64:	601c      	str	r4, [r3, #0]
    fe66:	e0c6      	b.n	fff6 <__gethex+0x458>
    fe68:	4620      	mov	r0, r4
    fe6a:	1e69      	subs	r1, r5, #1
    fe6c:	f7fd f86f 	bl	cf4e <__any_on>
    fe70:	2800      	cmp	r0, #0
    fe72:	d1ed      	bne.n	fe50 <__gethex+0x2b2>
    fe74:	e006      	b.n	fe84 <__gethex+0x2e6>
    fe76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe78:	2b00      	cmp	r3, #0
    fe7a:	d0e9      	beq.n	fe50 <__gethex+0x2b2>
    fe7c:	e002      	b.n	fe84 <__gethex+0x2e6>
    fe7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe80:	2b00      	cmp	r3, #0
    fe82:	d1e5      	bne.n	fe50 <__gethex+0x2b2>
    fe84:	9803      	ldr	r0, [sp, #12]
    fe86:	4621      	mov	r1, r4
    fe88:	f7fc fcc2 	bl	c810 <_Bfree>
    fe8c:	9912      	ldr	r1, [sp, #72]	; 0x48
    fe8e:	2300      	movs	r3, #0
    fe90:	600b      	str	r3, [r1, #0]
    fe92:	2050      	movs	r0, #80	; 0x50
    fe94:	e0af      	b.n	fff6 <__gethex+0x458>
    fe96:	1e77      	subs	r7, r6, #1
    fe98:	f1b9 0f00 	cmp.w	r9, #0
    fe9c:	d107      	bne.n	feae <__gethex+0x310>
    fe9e:	2f00      	cmp	r7, #0
    fea0:	dd07      	ble.n	feb2 <__gethex+0x314>
    fea2:	4620      	mov	r0, r4
    fea4:	4639      	mov	r1, r7
    fea6:	f7fd f852 	bl	cf4e <__any_on>
    feaa:	4681      	mov	r9, r0
    feac:	e001      	b.n	feb2 <__gethex+0x314>
    feae:	f04f 0901 	mov.w	r9, #1
    feb2:	117b      	asrs	r3, r7, #5
    feb4:	2201      	movs	r2, #1
    feb6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
    feba:	f007 071f 	and.w	r7, r7, #31
    febe:	fa02 f707 	lsl.w	r7, r2, r7
    fec2:	421f      	tst	r7, r3
    fec4:	4631      	mov	r1, r6
    fec6:	4620      	mov	r0, r4
    fec8:	bf18      	it	ne
    feca:	f049 0902 	orrne.w	r9, r9, #2
    fece:	1bad      	subs	r5, r5, r6
    fed0:	f7ff fe18 	bl	fb04 <rshift>
    fed4:	2702      	movs	r7, #2
    fed6:	f8d8 6004 	ldr.w	r6, [r8, #4]
    feda:	e000      	b.n	fede <__gethex+0x340>
    fedc:	2701      	movs	r7, #1
    fede:	f1b9 0f00 	cmp.w	r9, #0
    fee2:	f000 8083 	beq.w	ffec <__gethex+0x44e>
    fee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
    feea:	2b02      	cmp	r3, #2
    feec:	d00e      	beq.n	ff0c <__gethex+0x36e>
    feee:	2b03      	cmp	r3, #3
    fef0:	d010      	beq.n	ff14 <__gethex+0x376>
    fef2:	2b01      	cmp	r3, #1
    fef4:	d178      	bne.n	ffe8 <__gethex+0x44a>
    fef6:	f019 0f02 	tst.w	r9, #2
    fefa:	d075      	beq.n	ffe8 <__gethex+0x44a>
    fefc:	f8da 3000 	ldr.w	r3, [sl]
    ff00:	ea49 0903 	orr.w	r9, r9, r3
    ff04:	f019 0f01 	tst.w	r9, #1
    ff08:	d107      	bne.n	ff1a <__gethex+0x37c>
    ff0a:	e06d      	b.n	ffe8 <__gethex+0x44a>
    ff0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff0e:	f1c3 0301 	rsb	r3, r3, #1
    ff12:	9313      	str	r3, [sp, #76]	; 0x4c
    ff14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff16:	2b00      	cmp	r3, #0
    ff18:	d066      	beq.n	ffe8 <__gethex+0x44a>
    ff1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
    ff1e:	f104 0314 	add.w	r3, r4, #20
    ff22:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    ff26:	eb03 010a 	add.w	r1, r3, sl
    ff2a:	4618      	mov	r0, r3
    ff2c:	f853 2b04 	ldr.w	r2, [r3], #4
    ff30:	f1b2 3fff 	cmp.w	r2, #4294967295
    ff34:	d002      	beq.n	ff3c <__gethex+0x39e>
    ff36:	3201      	adds	r2, #1
    ff38:	6002      	str	r2, [r0, #0]
    ff3a:	e021      	b.n	ff80 <__gethex+0x3e2>
    ff3c:	2200      	movs	r2, #0
    ff3e:	428b      	cmp	r3, r1
    ff40:	f843 2c04 	str.w	r2, [r3, #-4]
    ff44:	d3f1      	bcc.n	ff2a <__gethex+0x38c>
    ff46:	68a3      	ldr	r3, [r4, #8]
    ff48:	4599      	cmp	r9, r3
    ff4a:	db12      	blt.n	ff72 <__gethex+0x3d4>
    ff4c:	6861      	ldr	r1, [r4, #4]
    ff4e:	9803      	ldr	r0, [sp, #12]
    ff50:	3101      	adds	r1, #1
    ff52:	f7fc fc37 	bl	c7c4 <_Balloc>
    ff56:	6922      	ldr	r2, [r4, #16]
    ff58:	3202      	adds	r2, #2
    ff5a:	f104 010c 	add.w	r1, r4, #12
    ff5e:	4683      	mov	fp, r0
    ff60:	0092      	lsls	r2, r2, #2
    ff62:	300c      	adds	r0, #12
    ff64:	f7fc fc07 	bl	c776 <memcpy>
    ff68:	4621      	mov	r1, r4
    ff6a:	9803      	ldr	r0, [sp, #12]
    ff6c:	f7fc fc50 	bl	c810 <_Bfree>
    ff70:	465c      	mov	r4, fp
    ff72:	6923      	ldr	r3, [r4, #16]
    ff74:	1c5a      	adds	r2, r3, #1
    ff76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ff7a:	6122      	str	r2, [r4, #16]
    ff7c:	2201      	movs	r2, #1
    ff7e:	615a      	str	r2, [r3, #20]
    ff80:	2f02      	cmp	r7, #2
    ff82:	f104 0314 	add.w	r3, r4, #20
    ff86:	d111      	bne.n	ffac <__gethex+0x40e>
    ff88:	f8d8 2000 	ldr.w	r2, [r8]
    ff8c:	3a01      	subs	r2, #1
    ff8e:	4295      	cmp	r5, r2
    ff90:	d127      	bne.n	ffe2 <__gethex+0x444>
    ff92:	116a      	asrs	r2, r5, #5
    ff94:	2101      	movs	r1, #1
    ff96:	f005 051f 	and.w	r5, r5, #31
    ff9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ff9e:	fa01 f505 	lsl.w	r5, r1, r5
    ffa2:	421d      	tst	r5, r3
    ffa4:	bf0c      	ite	eq
    ffa6:	2702      	moveq	r7, #2
    ffa8:	460f      	movne	r7, r1
    ffaa:	e01a      	b.n	ffe2 <__gethex+0x444>
    ffac:	6922      	ldr	r2, [r4, #16]
    ffae:	454a      	cmp	r2, r9
    ffb0:	dd0a      	ble.n	ffc8 <__gethex+0x42a>
    ffb2:	4620      	mov	r0, r4
    ffb4:	2101      	movs	r1, #1
    ffb6:	f7ff fda5 	bl	fb04 <rshift>
    ffba:	f8d8 3008 	ldr.w	r3, [r8, #8]
    ffbe:	3601      	adds	r6, #1
    ffc0:	429e      	cmp	r6, r3
    ffc2:	f73f af29 	bgt.w	fe18 <__gethex+0x27a>
    ffc6:	e00b      	b.n	ffe0 <__gethex+0x442>
    ffc8:	f015 051f 	ands.w	r5, r5, #31
    ffcc:	d008      	beq.n	ffe0 <__gethex+0x442>
    ffce:	4453      	add	r3, sl
    ffd0:	f1c5 0520 	rsb	r5, r5, #32
    ffd4:	f853 0c04 	ldr.w	r0, [r3, #-4]
    ffd8:	f7fc fc9f 	bl	c91a <__hi0bits>
    ffdc:	42a8      	cmp	r0, r5
    ffde:	dbe8      	blt.n	ffb2 <__gethex+0x414>
    ffe0:	2701      	movs	r7, #1
    ffe2:	f047 0720 	orr.w	r7, r7, #32
    ffe6:	e001      	b.n	ffec <__gethex+0x44e>
    ffe8:	f047 0710 	orr.w	r7, r7, #16
    ffec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ffee:	601c      	str	r4, [r3, #0]
    fff0:	9b06      	ldr	r3, [sp, #24]
    fff2:	4638      	mov	r0, r7
    fff4:	601e      	str	r6, [r3, #0]
    fff6:	b009      	add	sp, #36	; 0x24
    fff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fffc <L_shift>:
    fffc:	f1c2 0208 	rsb	r2, r2, #8
   10000:	0092      	lsls	r2, r2, #2
   10002:	b570      	push	{r4, r5, r6, lr}
   10004:	f1c2 0420 	rsb	r4, r2, #32
   10008:	6805      	ldr	r5, [r0, #0]
   1000a:	f850 3f04 	ldr.w	r3, [r0, #4]!
   1000e:	fa03 f604 	lsl.w	r6, r3, r4
   10012:	4335      	orrs	r5, r6
   10014:	40d3      	lsrs	r3, r2
   10016:	4288      	cmp	r0, r1
   10018:	f840 5c04 	str.w	r5, [r0, #-4]
   1001c:	6003      	str	r3, [r0, #0]
   1001e:	d3f3      	bcc.n	10008 <L_shift+0xc>
   10020:	bd70      	pop	{r4, r5, r6, pc}

00010022 <__hexnan>:
   10022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10026:	680b      	ldr	r3, [r1, #0]
   10028:	b085      	sub	sp, #20
   1002a:	115e      	asrs	r6, r3, #5
   1002c:	9003      	str	r0, [sp, #12]
   1002e:	f013 031f 	ands.w	r3, r3, #31
   10032:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   10036:	9302      	str	r3, [sp, #8]
   10038:	9b03      	ldr	r3, [sp, #12]
   1003a:	bf18      	it	ne
   1003c:	3604      	addne	r6, #4
   1003e:	f1a6 0804 	sub.w	r8, r6, #4
   10042:	4615      	mov	r5, r2
   10044:	f8d3 9000 	ldr.w	r9, [r3]
   10048:	2200      	movs	r2, #0
   1004a:	f846 2c04 	str.w	r2, [r6, #-4]
   1004e:	4647      	mov	r7, r8
   10050:	4644      	mov	r4, r8
   10052:	4692      	mov	sl, r2
   10054:	4693      	mov	fp, r2
   10056:	f899 1001 	ldrb.w	r1, [r9, #1]
   1005a:	2900      	cmp	r1, #0
   1005c:	d03a      	beq.n	100d4 <__hexnan+0xb2>
   1005e:	4608      	mov	r0, r1
   10060:	e88d 0006 	stmia.w	sp, {r1, r2}
   10064:	f7ff fd83 	bl	fb6e <__hexdig_fun>
   10068:	e89d 0006 	ldmia.w	sp, {r1, r2}
   1006c:	b9d8      	cbnz	r0, 100a6 <__hexnan+0x84>
   1006e:	2920      	cmp	r1, #32
   10070:	d812      	bhi.n	10098 <__hexnan+0x76>
   10072:	45da      	cmp	sl, fp
   10074:	da2b      	bge.n	100ce <__hexnan+0xac>
   10076:	42bc      	cmp	r4, r7
   10078:	d205      	bcs.n	10086 <__hexnan+0x64>
   1007a:	2a07      	cmp	r2, #7
   1007c:	dc03      	bgt.n	10086 <__hexnan+0x64>
   1007e:	4620      	mov	r0, r4
   10080:	4639      	mov	r1, r7
   10082:	f7ff ffbb 	bl	fffc <L_shift>
   10086:	42ac      	cmp	r4, r5
   10088:	d920      	bls.n	100cc <__hexnan+0xaa>
   1008a:	1f27      	subs	r7, r4, #4
   1008c:	2200      	movs	r2, #0
   1008e:	f844 2c04 	str.w	r2, [r4, #-4]
   10092:	46da      	mov	sl, fp
   10094:	463c      	mov	r4, r7
   10096:	e01a      	b.n	100ce <__hexnan+0xac>
   10098:	2929      	cmp	r1, #41	; 0x29
   1009a:	d14c      	bne.n	10136 <__hexnan+0x114>
   1009c:	9b03      	ldr	r3, [sp, #12]
   1009e:	f109 0102 	add.w	r1, r9, #2
   100a2:	6019      	str	r1, [r3, #0]
   100a4:	e016      	b.n	100d4 <__hexnan+0xb2>
   100a6:	3201      	adds	r2, #1
   100a8:	2a08      	cmp	r2, #8
   100aa:	f10b 0b01 	add.w	fp, fp, #1
   100ae:	dd06      	ble.n	100be <__hexnan+0x9c>
   100b0:	42ac      	cmp	r4, r5
   100b2:	d90c      	bls.n	100ce <__hexnan+0xac>
   100b4:	2200      	movs	r2, #0
   100b6:	f844 2c04 	str.w	r2, [r4, #-4]
   100ba:	3c04      	subs	r4, #4
   100bc:	2201      	movs	r2, #1
   100be:	6821      	ldr	r1, [r4, #0]
   100c0:	f000 000f 	and.w	r0, r0, #15
   100c4:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
   100c8:	6021      	str	r1, [r4, #0]
   100ca:	e000      	b.n	100ce <__hexnan+0xac>
   100cc:	2208      	movs	r2, #8
   100ce:	f109 0901 	add.w	r9, r9, #1
   100d2:	e7c0      	b.n	10056 <__hexnan+0x34>
   100d4:	f1bb 0f00 	cmp.w	fp, #0
   100d8:	d02d      	beq.n	10136 <__hexnan+0x114>
   100da:	42bc      	cmp	r4, r7
   100dc:	d205      	bcs.n	100ea <__hexnan+0xc8>
   100de:	2a07      	cmp	r2, #7
   100e0:	dc03      	bgt.n	100ea <__hexnan+0xc8>
   100e2:	4620      	mov	r0, r4
   100e4:	4639      	mov	r1, r7
   100e6:	f7ff ff89 	bl	fffc <L_shift>
   100ea:	42ac      	cmp	r4, r5
   100ec:	d90c      	bls.n	10108 <__hexnan+0xe6>
   100ee:	462b      	mov	r3, r5
   100f0:	f854 2b04 	ldr.w	r2, [r4], #4
   100f4:	f843 2b04 	str.w	r2, [r3], #4
   100f8:	4544      	cmp	r4, r8
   100fa:	d9f9      	bls.n	100f0 <__hexnan+0xce>
   100fc:	2200      	movs	r2, #0
   100fe:	f843 2b04 	str.w	r2, [r3], #4
   10102:	4543      	cmp	r3, r8
   10104:	d9fa      	bls.n	100fc <__hexnan+0xda>
   10106:	e00d      	b.n	10124 <__hexnan+0x102>
   10108:	9b02      	ldr	r3, [sp, #8]
   1010a:	b15b      	cbz	r3, 10124 <__hexnan+0x102>
   1010c:	f1c3 0920 	rsb	r9, r3, #32
   10110:	f04f 33ff 	mov.w	r3, #4294967295
   10114:	fa23 f909 	lsr.w	r9, r3, r9
   10118:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1011c:	ea03 0309 	and.w	r3, r3, r9
   10120:	f846 3c04 	str.w	r3, [r6, #-4]
   10124:	f856 3c04 	ldr.w	r3, [r6, #-4]
   10128:	3e04      	subs	r6, #4
   1012a:	b933      	cbnz	r3, 1013a <__hexnan+0x118>
   1012c:	42b5      	cmp	r5, r6
   1012e:	d1f9      	bne.n	10124 <__hexnan+0x102>
   10130:	2301      	movs	r3, #1
   10132:	602b      	str	r3, [r5, #0]
   10134:	e001      	b.n	1013a <__hexnan+0x118>
   10136:	2004      	movs	r0, #4
   10138:	e000      	b.n	1013c <__hexnan+0x11a>
   1013a:	2005      	movs	r0, #5
   1013c:	b005      	add	sp, #20
   1013e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00010144 <_isatty_r>:
   10144:	b538      	push	{r3, r4, r5, lr}
   10146:	4c06      	ldr	r4, [pc, #24]	; (10160 <_isatty_r+0x1c>)
   10148:	2300      	movs	r3, #0
   1014a:	4605      	mov	r5, r0
   1014c:	4608      	mov	r0, r1
   1014e:	6023      	str	r3, [r4, #0]
   10150:	f7f6 f83c 	bl	61cc <_isatty>
   10154:	1c43      	adds	r3, r0, #1
   10156:	d102      	bne.n	1015e <_isatty_r+0x1a>
   10158:	6823      	ldr	r3, [r4, #0]
   1015a:	b103      	cbz	r3, 1015e <_isatty_r+0x1a>
   1015c:	602b      	str	r3, [r5, #0]
   1015e:	bd38      	pop	{r3, r4, r5, pc}
   10160:	20000fa8 	.word	0x20000fa8

00010164 <strncmp>:
   10164:	b570      	push	{r4, r5, r6, lr}
   10166:	b192      	cbz	r2, 1018e <strncmp+0x2a>
   10168:	460b      	mov	r3, r1
   1016a:	4605      	mov	r5, r0
   1016c:	781c      	ldrb	r4, [r3, #0]
   1016e:	f810 6b01 	ldrb.w	r6, [r0], #1
   10172:	42b4      	cmp	r4, r6
   10174:	f101 0101 	add.w	r1, r1, #1
   10178:	d101      	bne.n	1017e <strncmp+0x1a>
   1017a:	2a01      	cmp	r2, #1
   1017c:	d103      	bne.n	10186 <strncmp+0x22>
   1017e:	7828      	ldrb	r0, [r5, #0]
   10180:	781b      	ldrb	r3, [r3, #0]
   10182:	1ac0      	subs	r0, r0, r3
   10184:	bd70      	pop	{r4, r5, r6, pc}
   10186:	3a01      	subs	r2, #1
   10188:	2c00      	cmp	r4, #0
   1018a:	d1ed      	bne.n	10168 <strncmp+0x4>
   1018c:	e7f7      	b.n	1017e <strncmp+0x1a>
   1018e:	4610      	mov	r0, r2
   10190:	bd70      	pop	{r4, r5, r6, pc}
	...

00010194 <__gedf2>:
   10194:	f04f 3cff 	mov.w	ip, #4294967295
   10198:	e006      	b.n	101a8 <__cmpdf2+0x4>
   1019a:	bf00      	nop

0001019c <__ledf2>:
   1019c:	f04f 0c01 	mov.w	ip, #1
   101a0:	e002      	b.n	101a8 <__cmpdf2+0x4>
   101a2:	bf00      	nop

000101a4 <__cmpdf2>:
   101a4:	f04f 0c01 	mov.w	ip, #1
   101a8:	f84d cd04 	str.w	ip, [sp, #-4]!
   101ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   101b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   101b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   101b8:	bf18      	it	ne
   101ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   101be:	d01b      	beq.n	101f8 <__cmpdf2+0x54>
   101c0:	b001      	add	sp, #4
   101c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   101c6:	bf0c      	ite	eq
   101c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   101cc:	ea91 0f03 	teqne	r1, r3
   101d0:	bf02      	ittt	eq
   101d2:	ea90 0f02 	teqeq	r0, r2
   101d6:	2000      	moveq	r0, #0
   101d8:	4770      	bxeq	lr
   101da:	f110 0f00 	cmn.w	r0, #0
   101de:	ea91 0f03 	teq	r1, r3
   101e2:	bf58      	it	pl
   101e4:	4299      	cmppl	r1, r3
   101e6:	bf08      	it	eq
   101e8:	4290      	cmpeq	r0, r2
   101ea:	bf2c      	ite	cs
   101ec:	17d8      	asrcs	r0, r3, #31
   101ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   101f2:	f040 0001 	orr.w	r0, r0, #1
   101f6:	4770      	bx	lr
   101f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   101fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10200:	d102      	bne.n	10208 <__cmpdf2+0x64>
   10202:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10206:	d107      	bne.n	10218 <__cmpdf2+0x74>
   10208:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1020c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10210:	d1d6      	bne.n	101c0 <__cmpdf2+0x1c>
   10212:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10216:	d0d3      	beq.n	101c0 <__cmpdf2+0x1c>
   10218:	f85d 0b04 	ldr.w	r0, [sp], #4
   1021c:	4770      	bx	lr
   1021e:	bf00      	nop

00010220 <__aeabi_cdrcmple>:
   10220:	4684      	mov	ip, r0
   10222:	4610      	mov	r0, r2
   10224:	4662      	mov	r2, ip
   10226:	468c      	mov	ip, r1
   10228:	4619      	mov	r1, r3
   1022a:	4663      	mov	r3, ip
   1022c:	e000      	b.n	10230 <__aeabi_cdcmpeq>
   1022e:	bf00      	nop

00010230 <__aeabi_cdcmpeq>:
   10230:	b501      	push	{r0, lr}
   10232:	f7ff ffb7 	bl	101a4 <__cmpdf2>
   10236:	2800      	cmp	r0, #0
   10238:	bf48      	it	mi
   1023a:	f110 0f00 	cmnmi.w	r0, #0
   1023e:	bd01      	pop	{r0, pc}

00010240 <__aeabi_dcmpeq>:
   10240:	f84d ed08 	str.w	lr, [sp, #-8]!
   10244:	f7ff fff4 	bl	10230 <__aeabi_cdcmpeq>
   10248:	bf0c      	ite	eq
   1024a:	2001      	moveq	r0, #1
   1024c:	2000      	movne	r0, #0
   1024e:	f85d fb08 	ldr.w	pc, [sp], #8
   10252:	bf00      	nop

00010254 <__aeabi_dcmplt>:
   10254:	f84d ed08 	str.w	lr, [sp, #-8]!
   10258:	f7ff ffea 	bl	10230 <__aeabi_cdcmpeq>
   1025c:	bf34      	ite	cc
   1025e:	2001      	movcc	r0, #1
   10260:	2000      	movcs	r0, #0
   10262:	f85d fb08 	ldr.w	pc, [sp], #8
   10266:	bf00      	nop

00010268 <__aeabi_dcmple>:
   10268:	f84d ed08 	str.w	lr, [sp, #-8]!
   1026c:	f7ff ffe0 	bl	10230 <__aeabi_cdcmpeq>
   10270:	bf94      	ite	ls
   10272:	2001      	movls	r0, #1
   10274:	2000      	movhi	r0, #0
   10276:	f85d fb08 	ldr.w	pc, [sp], #8
   1027a:	bf00      	nop

0001027c <__aeabi_dcmpge>:
   1027c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10280:	f7ff ffce 	bl	10220 <__aeabi_cdrcmple>
   10284:	bf94      	ite	ls
   10286:	2001      	movls	r0, #1
   10288:	2000      	movhi	r0, #0
   1028a:	f85d fb08 	ldr.w	pc, [sp], #8
   1028e:	bf00      	nop

00010290 <__aeabi_dcmpgt>:
   10290:	f84d ed08 	str.w	lr, [sp, #-8]!
   10294:	f7ff ffc4 	bl	10220 <__aeabi_cdrcmple>
   10298:	bf34      	ite	cc
   1029a:	2001      	movcc	r0, #1
   1029c:	2000      	movcs	r0, #0
   1029e:	f85d fb08 	ldr.w	pc, [sp], #8
   102a2:	bf00      	nop

000102a4 <__aeabi_d2iz>:
   102a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   102a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   102ac:	d215      	bcs.n	102da <__aeabi_d2iz+0x36>
   102ae:	d511      	bpl.n	102d4 <__aeabi_d2iz+0x30>
   102b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   102b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   102b8:	d912      	bls.n	102e0 <__aeabi_d2iz+0x3c>
   102ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   102be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   102c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   102c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102ca:	fa23 f002 	lsr.w	r0, r3, r2
   102ce:	bf18      	it	ne
   102d0:	4240      	negne	r0, r0
   102d2:	4770      	bx	lr
   102d4:	f04f 0000 	mov.w	r0, #0
   102d8:	4770      	bx	lr
   102da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   102de:	d105      	bne.n	102ec <__aeabi_d2iz+0x48>
   102e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   102e4:	bf08      	it	eq
   102e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   102ea:	4770      	bx	lr
   102ec:	f04f 0000 	mov.w	r0, #0
   102f0:	4770      	bx	lr
   102f2:	bf00      	nop

000102f4 <__aeabi_d2f>:
   102f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   102f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   102fc:	bf24      	itt	cs
   102fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10302:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10306:	d90d      	bls.n	10324 <__aeabi_d2f+0x30>
   10308:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1030c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10310:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10314:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10318:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1031c:	bf08      	it	eq
   1031e:	f020 0001 	biceq.w	r0, r0, #1
   10322:	4770      	bx	lr
   10324:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10328:	d121      	bne.n	1036e <__aeabi_d2f+0x7a>
   1032a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1032e:	bfbc      	itt	lt
   10330:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10334:	4770      	bxlt	lr
   10336:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1033a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1033e:	f1c2 0218 	rsb	r2, r2, #24
   10342:	f1c2 0c20 	rsb	ip, r2, #32
   10346:	fa10 f30c 	lsls.w	r3, r0, ip
   1034a:	fa20 f002 	lsr.w	r0, r0, r2
   1034e:	bf18      	it	ne
   10350:	f040 0001 	orrne.w	r0, r0, #1
   10354:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10358:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1035c:	fa03 fc0c 	lsl.w	ip, r3, ip
   10360:	ea40 000c 	orr.w	r0, r0, ip
   10364:	fa23 f302 	lsr.w	r3, r3, r2
   10368:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1036c:	e7cc      	b.n	10308 <__aeabi_d2f+0x14>
   1036e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10372:	d107      	bne.n	10384 <__aeabi_d2f+0x90>
   10374:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10378:	bf1e      	ittt	ne
   1037a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1037e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10382:	4770      	bxne	lr
   10384:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10388:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1038c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10390:	4770      	bx	lr
   10392:	bf00      	nop
   10394:	4f525245 	.word	0x4f525245
   10398:	66203a52 	.word	0x66203a52
   1039c:	6873616c 	.word	0x6873616c
   103a0:	776c6163 	.word	0x776c6163
   103a4:	5f73695f 	.word	0x5f73695f
   103a8:	6b636f6c 	.word	0x6b636f6c
   103ac:	7272655f 	.word	0x7272655f
   103b0:	0a0d726f 	.word	0x0a0d726f
   103b4:	00000000 	.word	0x00000000
   103b8:	4f525245 	.word	0x4f525245
   103bc:	66203a52 	.word	0x66203a52
   103c0:	6873616c 	.word	0x6873616c
   103c4:	776c6163 	.word	0x776c6163
   103c8:	5f73695f 	.word	0x5f73695f
   103cc:	676f7270 	.word	0x676f7270
   103d0:	6d6d6172 	.word	0x6d6d6172
   103d4:	5f676e69 	.word	0x5f676e69
   103d8:	6f727265 	.word	0x6f727265
   103dc:	000a0d72 	.word	0x000a0d72
   103e0:	00006325 	.word	0x00006325
   103e4:	200a7325 	.word	0x200a7325
   103e8:	00756825 	.word	0x00756825
   103ec:	00000050 	.word	0x00000050
   103f0:	74746553 	.word	0x74746553
   103f4:	20676e69 	.word	0x20676e69
   103f8:	75676572 	.word	0x75676572
   103fc:	6f74616c 	.word	0x6f74616c
   10400:	2d502072 	.word	0x2d502072
   10404:	61726170 	.word	0x61726170
   10408:	6574656d 	.word	0x6574656d
   1040c:	6f742072 	.word	0x6f742072
   10410:	0d642520 	.word	0x0d642520
   10414:	0000000a 	.word	0x0000000a
   10418:	756c6156 	.word	0x756c6156
   1041c:	756d2065 	.word	0x756d2065
   10420:	62207473 	.word	0x62207473
   10424:	65622065 	.word	0x65622065
   10428:	65657774 	.word	0x65657774
   1042c:	2030206e 	.word	0x2030206e
   10430:	20646e61 	.word	0x20646e61
   10434:	00303031 	.word	0x00303031
   10438:	00000049 	.word	0x00000049
   1043c:	74746553 	.word	0x74746553
   10440:	20676e69 	.word	0x20676e69
   10444:	75676572 	.word	0x75676572
   10448:	6f74616c 	.word	0x6f74616c
   1044c:	2d492072 	.word	0x2d492072
   10450:	61726170 	.word	0x61726170
   10454:	6574656d 	.word	0x6574656d
   10458:	6f742072 	.word	0x6f742072
   1045c:	0d642520 	.word	0x0d642520
   10460:	0000000a 	.word	0x0000000a
   10464:	00000044 	.word	0x00000044
   10468:	74746553 	.word	0x74746553
   1046c:	20676e69 	.word	0x20676e69
   10470:	75676572 	.word	0x75676572
   10474:	6f74616c 	.word	0x6f74616c
   10478:	2d442072 	.word	0x2d442072
   1047c:	61726170 	.word	0x61726170
   10480:	6574656d 	.word	0x6574656d
   10484:	6f742072 	.word	0x6f742072
   10488:	0d642520 	.word	0x0d642520
   1048c:	0000000a 	.word	0x0000000a
   10490:	41464544 	.word	0x41464544
   10494:	00544c55 	.word	0x00544c55
   10498:	74746553 	.word	0x74746553
   1049c:	20676e69 	.word	0x20676e69
   104a0:	61666544 	.word	0x61666544
   104a4:	20746c75 	.word	0x20746c75
   104a8:	61726170 	.word	0x61726170
   104ac:	6574656d 	.word	0x6574656d
   104b0:	0a0d7372 	.word	0x0a0d7372
   104b4:	00000000 	.word	0x00000000
   104b8:	64647552 	.word	0x64647552
   104bc:	72207265 	.word	0x72207265
   104c0:	6c756765 	.word	0x6c756765
   104c4:	726f7461 	.word	0x726f7461
   104c8:	000a0d3a 	.word	0x000a0d3a
   104cc:	25203a50 	.word	0x25203a50
   104d0:	000a0d64 	.word	0x000a0d64
   104d4:	25203a49 	.word	0x25203a49
   104d8:	000a0d64 	.word	0x000a0d64
   104dc:	25203a44 	.word	0x25203a44
   104e0:	000a0d64 	.word	0x000a0d64
   104e4:	70746553 	.word	0x70746553
   104e8:	746e696f 	.word	0x746e696f
   104ec:	6425203a 	.word	0x6425203a
   104f0:	00000a0d 	.word	0x00000a0d
   104f4:	65656853 	.word	0x65656853
   104f8:	676e6974 	.word	0x676e6974
   104fc:	67657220 	.word	0x67657220
   10500:	74616c75 	.word	0x74616c75
   10504:	0d3a726f 	.word	0x0d3a726f
   10508:	0000000a 	.word	0x0000000a
   1050c:	54415453 	.word	0x54415453
   10510:	00005355 	.word	0x00005355
   10514:	74533e3e 	.word	0x74533e3e
   10518:	73757461 	.word	0x73757461
   1051c:	726f6620 	.word	0x726f6620
   10520:	53544120 	.word	0x53544120
   10524:	4c344d41 	.word	0x4c344d41
   10528:	74754120 	.word	0x74754120
   1052c:	6c69706f 	.word	0x6c69706f
   10530:	0d3a746f 	.word	0x0d3a746f
   10534:	0000000a 	.word	0x0000000a
   10538:	646e6957 	.word	0x646e6957
   1053c:	6e657320 	.word	0x6e657320
   10540:	3a726f73 	.word	0x3a726f73
   10544:	0d732520 	.word	0x0d732520
   10548:	0000000a 	.word	0x0000000a
   1054c:	616c6572 	.word	0x616c6572
   10550:	65766974 	.word	0x65766974
   10554:	676e6120 	.word	0x676e6120
   10558:	203a656c 	.word	0x203a656c
   1055c:	0a0d6425 	.word	0x0a0d6425
   10560:	00000000 	.word	0x00000000
   10564:	616c6572 	.word	0x616c6572
   10568:	65766974 	.word	0x65766974
   1056c:	65707320 	.word	0x65707320
   10570:	6b5b6465 	.word	0x6b5b6465
   10574:	73746f6e 	.word	0x73746f6e
   10578:	25203a5d 	.word	0x25203a5d
   1057c:	000a0d64 	.word	0x000a0d64
   10580:	2d2d2d2d 	.word	0x2d2d2d2d
   10584:	2d2d2d2d 	.word	0x2d2d2d2d
   10588:	2d2d2d2d 	.word	0x2d2d2d2d
   1058c:	2d2d2d2d 	.word	0x2d2d2d2d
   10590:	2d2d2d2d 	.word	0x2d2d2d2d
   10594:	00000000 	.word	0x00000000
   10598:	75676552 	.word	0x75676552
   1059c:	6f74616c 	.word	0x6f74616c
   105a0:	61442072 	.word	0x61442072
   105a4:	0d3a6174 	.word	0x0d3a6174
   105a8:	0000000a 	.word	0x0000000a
   105ac:	7074754f 	.word	0x7074754f
   105b0:	65207475 	.word	0x65207475
   105b4:	6c62616e 	.word	0x6c62616e
   105b8:	25203a65 	.word	0x25203a65
   105bc:	000a0d64 	.word	0x000a0d64
   105c0:	636f6c43 	.word	0x636f6c43
   105c4:	6144206b 	.word	0x6144206b
   105c8:	0d3a6174 	.word	0x0d3a6174
   105cc:	0000000a 	.word	0x0000000a
   105d0:	3a555043 	.word	0x3a555043
   105d4:	48642520 	.word	0x48642520
   105d8:	000a0d7a 	.word	0x000a0d7a
   105dc:	3a414250 	.word	0x3a414250
   105e0:	48642520 	.word	0x48642520
   105e4:	000a0d7a 	.word	0x000a0d7a
   105e8:	3a424250 	.word	0x3a424250
   105ec:	48642520 	.word	0x48642520
   105f0:	000a0d7a 	.word	0x000a0d7a
   105f4:	3a434250 	.word	0x3a434250
   105f8:	48642520 	.word	0x48642520
   105fc:	000a0d7a 	.word	0x000a0d7a
   10600:	3a444250 	.word	0x3a444250
   10604:	48642520 	.word	0x48642520
   10608:	000a0d7a 	.word	0x000a0d7a
   1060c:	44445552 	.word	0x44445552
   10610:	535f5245 	.word	0x535f5245
   10614:	4f505445 	.word	0x4f505445
   10618:	00544e49 	.word	0x00544e49
   1061c:	74746553 	.word	0x74746553
   10620:	20676e69 	.word	0x20676e69
   10624:	64647572 	.word	0x64647572
   10628:	72207265 	.word	0x72207265
   1062c:	6c756765 	.word	0x6c756765
   10630:	726f7461 	.word	0x726f7461
   10634:	74657320 	.word	0x74657320
   10638:	6e696f70 	.word	0x6e696f70
   1063c:	6f742074 	.word	0x6f742074
   10640:	0d642520 	.word	0x0d642520
   10644:	0000000a 	.word	0x0000000a
   10648:	45454853 	.word	0x45454853
   1064c:	45535f54 	.word	0x45535f54
   10650:	494f5054 	.word	0x494f5054
   10654:	0000544e 	.word	0x0000544e
   10658:	74746553 	.word	0x74746553
   1065c:	20676e69 	.word	0x20676e69
   10660:	65656873 	.word	0x65656873
   10664:	676e6974 	.word	0x676e6974
   10668:	67657220 	.word	0x67657220
   1066c:	74616c75 	.word	0x74616c75
   10670:	7320726f 	.word	0x7320726f
   10674:	6f707465 	.word	0x6f707465
   10678:	20746e69 	.word	0x20746e69
   1067c:	25206f74 	.word	0x25206f74
   10680:	000a0d64 	.word	0x000a0d64
   10684:	44454c4f 	.word	0x44454c4f
   10688:	454c435f 	.word	0x454c435f
   1068c:	00005241 	.word	0x00005241
   10690:	61656c43 	.word	0x61656c43
   10694:	676e6972 	.word	0x676e6972
   10698:	454c4f20 	.word	0x454c4f20
   1069c:	69642044 	.word	0x69642044
   106a0:	616c7073 	.word	0x616c7073
   106a4:	000a0d79 	.word	0x000a0d79
   106a8:	5054554f 	.word	0x5054554f
   106ac:	00005455 	.word	0x00005455
   106b0:	756c6156 	.word	0x756c6156
   106b4:	756d2065 	.word	0x756d2065
   106b8:	62207473 	.word	0x62207473
   106bc:	69652065 	.word	0x69652065
   106c0:	72656874 	.word	0x72656874
   106c4:	6f203020 	.word	0x6f203020
   106c8:	00312072 	.word	0x00312072
   106cc:	534e4553 	.word	0x534e4553
   106d0:	0000524f 	.word	0x0000524f
   106d4:	74746553 	.word	0x74746553
   106d8:	20676e69 	.word	0x20676e69
   106dc:	20375643 	.word	0x20375643
   106e0:	646e6977 	.word	0x646e6977
   106e4:	6e657320 	.word	0x6e657320
   106e8:	0d726f73 	.word	0x0d726f73
   106ec:	0000000a 	.word	0x0000000a
   106f0:	74746553 	.word	0x74746553
   106f4:	20676e69 	.word	0x20676e69
   106f8:	204d5750 	.word	0x204d5750
   106fc:	646e6977 	.word	0x646e6977
   10700:	6e657320 	.word	0x6e657320
   10704:	0d726f73 	.word	0x0d726f73
   10708:	0000000a 	.word	0x0000000a
   1070c:	444e4957 	.word	0x444e4957
   10710:	00000000 	.word	0x00000000
   10714:	4d494924 	.word	0x4d494924
   10718:	252c5657 	.word	0x252c5657
   1071c:	2c522c64 	.word	0x2c522c64
   10720:	4e2c6425 	.word	0x4e2c6425
   10724:	0a0d412c 	.word	0x0a0d412c
   10728:	00000000 	.word	0x00000000
   1072c:	494e494d 	.word	0x494e494d
   10730:	534d554d 	.word	0x534d554d
   10734:	44454550 	.word	0x44454550
   10738:	00000000 	.word	0x00000000
   1073c:	74746553 	.word	0x74746553
   10740:	20676e69 	.word	0x20676e69
   10744:	696e696d 	.word	0x696e696d
   10748:	206d756d 	.word	0x206d756d
   1074c:	646e6977 	.word	0x646e6977
   10750:	65707320 	.word	0x65707320
   10754:	74206465 	.word	0x74206465
   10758:	6425206f 	.word	0x6425206f
   1075c:	00000a0d 	.word	0x00000a0d
   10760:	00005344 	.word	0x00005344
   10764:	70736944 	.word	0x70736944
   10768:	6979616c 	.word	0x6979616c
   1076c:	5220676e 	.word	0x5220676e
   10770:	6c756765 	.word	0x6c756765
   10774:	726f7461 	.word	0x726f7461
   10778:	74616420 	.word	0x74616420
   1077c:	000a0d61 	.word	0x000a0d61
   10780:	70736944 	.word	0x70736944
   10784:	6979616c 	.word	0x6979616c
   10788:	5320676e 	.word	0x5320676e
   1078c:	6f736e65 	.word	0x6f736e65
   10790:	69682072 	.word	0x69682072
   10794:	726f7473 	.word	0x726f7473
   10798:	000a0d79 	.word	0x000a0d79
   1079c:	70736944 	.word	0x70736944
   107a0:	6979616c 	.word	0x6979616c
   107a4:	5320676e 	.word	0x5320676e
   107a8:	6f736e65 	.word	0x6f736e65
   107ac:	61642072 	.word	0x61642072
   107b0:	0a0d6174 	.word	0x0a0d6174
   107b4:	00000000 	.word	0x00000000
   107b8:	756c6156 	.word	0x756c6156
   107bc:	756d2065 	.word	0x756d2065
   107c0:	62207473 	.word	0x62207473
   107c4:	65622065 	.word	0x65622065
   107c8:	65657774 	.word	0x65657774
   107cc:	2031206e 	.word	0x2031206e
   107d0:	20646e61 	.word	0x20646e61
   107d4:	000a0d33 	.word	0x000a0d33
   107d8:	6e6b6e55 	.word	0x6e6b6e55
   107dc:	206e776f 	.word	0x206e776f
   107e0:	6d6d6f63 	.word	0x6d6d6f63
   107e4:	3a646e61 	.word	0x3a646e61
   107e8:	2c732520 	.word	0x2c732520
   107ec:	6c617620 	.word	0x6c617620
   107f0:	203a6575 	.word	0x203a6575
   107f4:	0a0d6425 	.word	0x0a0d6425
   107f8:	00000000 	.word	0x00000000
   107fc:	0001c200 	.word	0x0001c200
   10800:	000000c0 	.word	0x000000c0
   10804:	00000800 	.word	0x00000800
   10808:	00000000 	.word	0x00000000
   1080c:	000012c0 	.word	0x000012c0
   10810:	000000c0 	.word	0x000000c0
   10814:	00000800 	.word	0x00000800
   10818:	00000000 	.word	0x00000000
   1081c:	5e5b2524 	.word	0x5e5b2524
   10820:	252c5d2c 	.word	0x252c5d2c
   10824:	00002c73 	.word	0x00002c73
   10828:	574d4949 	.word	0x574d4949
   1082c:	00000056 	.word	0x00000056
   10830:	252c6425 	.word	0x252c6425
   10834:	64252c63 	.word	0x64252c63
   10838:	0063252c 	.word	0x0063252c
   1083c:	66667542 	.word	0x66667542
   10840:	69207265 	.word	0x69207265
   10844:	75662073 	.word	0x75662073
   10848:	0a0d6c6c 	.word	0x0a0d6c6c
   1084c:	00000000 	.word	0x00000000
   10850:	75676552 	.word	0x75676552
   10854:	6f74616c 	.word	0x6f74616c
   10858:	61502072 	.word	0x61502072
   1085c:	656d6172 	.word	0x656d6172
   10860:	73726574 	.word	0x73726574
   10864:	00000000 	.word	0x00000000
   10868:	203a5650 	.word	0x203a5650
   1086c:	25256425 	.word	0x25256425
   10870:	754f202c 	.word	0x754f202c
   10874:	74757074 	.word	0x74757074
   10878:	6425203a 	.word	0x6425203a
   1087c:	202c2525 	.word	0x202c2525
   10880:	203a5053 	.word	0x203a5053
   10884:	25256425 	.word	0x25256425
   10888:	00000000 	.word	0x00000000
   1088c:	64253d50 	.word	0x64253d50
   10890:	3d49202c 	.word	0x3d49202c
   10894:	202c6425 	.word	0x202c6425
   10898:	64253d44 	.word	0x64253d44
   1089c:	00000000 	.word	0x00000000
   108a0:	646e6957 	.word	0x646e6957
   108a4:	3425203a 	.word	0x3425203a
   108a8:	00000064 	.word	0x00000064
   108ac:	64332520 	.word	0x64332520
   108b0:	00632520 	.word	0x00632520
   108b4:	7074754f 	.word	0x7074754f
   108b8:	203a7475 	.word	0x203a7475
   108bc:	25643325 	.word	0x25643325
   108c0:	00000025 	.word	0x00000025
   108c4:	74617453 	.word	0x74617453
   108c8:	203a7375 	.word	0x203a7375
   108cc:	00006325 	.word	0x00006325
   108d0:	00375643 	.word	0x00375643
   108d4:	004d5750 	.word	0x004d5750
   108d8:	736e6553 	.word	0x736e6553
   108dc:	6820726f 	.word	0x6820726f
   108e0:	6f747369 	.word	0x6f747369
   108e4:	00007972 	.word	0x00007972
   108e8:	6c676e41 	.word	0x6c676e41
   108ec:	25203a65 	.word	0x25203a65
   108f0:	00000064 	.word	0x00000064
   108f4:	736e6553 	.word	0x736e6553
   108f8:	6420726f 	.word	0x6420726f
   108fc:	00617461 	.word	0x00617461
   10900:	656c6177 	.word	0x656c6177
   10904:	00000073 	.word	0x00000073
   10908:	53202d2d 	.word	0x53202d2d
   1090c:	696c6961 	.word	0x696c6961
   10910:	5220676e 	.word	0x5220676e
   10914:	746f626f 	.word	0x746f626f
   10918:	6d654420 	.word	0x6d654420
   1091c:	202d206f 	.word	0x202d206f
   10920:	6c696153 	.word	0x6c696153
   10924:	20676e69 	.word	0x20676e69
   10928:	6f626f72 	.word	0x6f626f72
   1092c:	6f4e2074 	.word	0x6f4e2074
   10930:	2d2d3220 	.word	0x2d2d3220
   10934:	2d2d0a0d 	.word	0x2d2d0a0d
   10938:	4d415320 	.word	0x4d415320
   1093c:	58204c34 	.word	0x58204c34
   10940:	69616c70 	.word	0x69616c70
   10944:	2064656e 	.word	0x2064656e
   10948:	206f7250 	.word	0x206f7250
   1094c:	0a0d2d2d 	.word	0x0a0d2d2d
   10950:	43202d2d 	.word	0x43202d2d
   10954:	69706d6f 	.word	0x69706d6f
   10958:	3a64656c 	.word	0x3a64656c
   1095c:	6c754a20 	.word	0x6c754a20
   10960:	20342020 	.word	0x20342020
   10964:	34313032 	.word	0x34313032
   10968:	3a343120 	.word	0x3a343120
   1096c:	333a3333 	.word	0x333a3333
   10970:	2d2d2032 	.word	0x2d2d2032
   10974:	41202d2d 	.word	0x41202d2d
   10978:	706f7475 	.word	0x706f7475
   1097c:	746f6c69 	.word	0x746f6c69
   10980:	61657220 	.word	0x61657220
   10984:	66207964 	.word	0x66207964
   10988:	6f20726f 	.word	0x6f20726f
   1098c:	72656472 	.word	0x72656472
   10990:	00000d73 	.word	0x00000d73

00010994 <_ctype_>:
   10994:	20202000 20202020 28282020 20282828     .         ((((( 
   109a4:	20202020 20202020 20202020 20202020                     
   109b4:	10108820 10101010 10101010 10101010      ...............
   109c4:	04040410 04040404 10040404 10101010     ................
   109d4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   109e4:	01010101 01010101 01010101 10101010     ................
   109f4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10a04:	02020202 02020202 02020202 10101010     ................
   10a14:	00000020 00000000 00000000 00000000      ...............
	...

00010a98 <_global_impure_ptr>:
   10a98:	200004a8 20200043                                ... C.

00010a9e <blanks.6743>:
   10a9e:	20202020 20202020 20202020 20202020                     

00010aae <zeroes.6744>:
   10aae:	30303030 30303030 30303030 30303030     0000000000000000
   10abe:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   10ace:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   10ade:	32313000 36353433 61393837 65646362     .0123456789abcde
   10aee:	00300066                                f.0.

00010af2 <basefix.6659>:
   10af2:	0001000a 00030002 00050004 00070006     ................
   10b02:	00090008 000b000a 000d000c 000f000e     ................
   10b12:	25650010 2000646c                                ..e%ld.

00010b19 <blanks.6701>:
   10b19:	20202020 20202020 20202020 20202020                     

00010b29 <zeroes.6702>:
   10b29:	30303030 30303030 30303030 30303030     0000000000000000
   10b39:	69666e49 7974696e 4e614e00 534f5000     Infinity.NaN.POS
   10b49:	2e005849 05000000                                IX.....

00010b50 <p05.5289>:
   10b50:	00000005 00000019 0000007d 00000000     ........}.......

00010b60 <__mprec_tens>:
   10b60:	00000000 3ff00000 00000000 40240000     .......?......$@
   10b70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   10b80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   10b90:	00000000 412e8480 00000000 416312d0     .......A......cA
   10ba0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   10bb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   10bc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   10bd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10be0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10bf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10c00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   10c10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   10c20:	79d99db4 44ea7843                       ...yCx.D

00010c28 <__mprec_tinytens>:
   10c28:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   10c38:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   10c48:	64ac6f43 0ac80628                       Co.d(...

00010c50 <__mprec_bigtens>:
   10c50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   10c60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   10c70:	7f73bf3c 75154fdd                       <.s..O.u

00010c78 <fpi.5258>:
   10c78:	00000035 fffffbce 000003cb 00000001     5...............
   10c88:	00000000                                ....

00010c8c <fpinan.5294>:
   10c8c:	00000034 fffffbce 000003cb 00000001     4...............
   10c9c:	00000000                                ....

00010ca0 <tinytens>:
   10ca0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   10cb0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   10cc0:	64ac6f43 11680628                       Co.d(.h.

00010cc8 <blanks.6687>:
   10cc8:	20202020 20202020 20202020 20202020                     

00010cd8 <zeroes.6688>:
   10cd8:	30303030 30303030 30303030 30303030     0000000000000000

00010ce8 <basefix.6159>:
   10ce8:	0001000a 00030002 00050004 00070006     ................
   10cf8:	00090008 000b000a 000d000c 000f000e     ................
   10d08:	00000010                                ....

00010d0c <_init>:
   10d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d0e:	bf00      	nop
   10d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10d12:	bc08      	pop	{r3}
   10d14:	469e      	mov	lr, r3
   10d16:	4770      	bx	lr

00010d18 <__init_array_start>:
   10d18:	0000aaf1 	.word	0x0000aaf1

00010d1c <__frame_dummy_init_array_entry>:
   10d1c:	000001f9                                ....

00010d20 <_fini>:
   10d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d22:	bf00      	nop
   10d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10d26:	bc08      	pop	{r3}
   10d28:	469e      	mov	lr, r3
   10d2a:	4770      	bx	lr

00010d2c <__fini_array_start>:
   10d2c:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <bpm_ps_no_halt_exec>:
 * \param pmcon BPM_PMCON value to write
 *
 * \return PSOK status, true if set.
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
2000001c:	b480      	push	{r7}
2000001e:	b085      	sub	sp, #20
20000020:	af00      	add	r7, sp, #0
20000022:	6078      	str	r0, [r7, #4]
20000024:	6039      	str	r1, [r7, #0]
	bool b_psok = false;
20000026:	2300      	movs	r3, #0
20000028:	73fb      	strb	r3, [r7, #15]
	bool b_timeout = false;
2000002a:	2300      	movs	r3, #0
2000002c:	73bb      	strb	r3, [r7, #14]
	BPM_UNLOCK(PMCON);
2000002e:	4b15      	ldr	r3, [pc, #84]	; (20000084 <bpm_ps_no_halt_exec+0x68>)
20000030:	4a15      	ldr	r2, [pc, #84]	; (20000088 <bpm_ps_no_halt_exec+0x6c>)
20000032:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000034:	687b      	ldr	r3, [r7, #4]
20000036:	683a      	ldr	r2, [r7, #0]
20000038:	61da      	str	r2, [r3, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000003a:	4b12      	ldr	r3, [pc, #72]	; (20000084 <bpm_ps_no_halt_exec+0x68>)
2000003c:	695b      	ldr	r3, [r3, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b00      	cmp	r3, #0
20000044:	bf0c      	ite	eq
20000046:	2300      	moveq	r3, #0
20000048:	2301      	movne	r3, #1
2000004a:	73fb      	strb	r3, [r7, #15]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000004c:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <bpm_ps_no_halt_exec+0x70>)
2000004e:	681b      	ldr	r3, [r3, #0]
20000050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000054:	2b00      	cmp	r3, #0
20000056:	bf0c      	ite	eq
20000058:	2300      	moveq	r3, #0
2000005a:	2301      	movne	r3, #1
2000005c:	73bb      	strb	r3, [r7, #14]
	} while (!b_psok && !b_timeout);
2000005e:	7bfb      	ldrb	r3, [r7, #15]
20000060:	f083 0301 	eor.w	r3, r3, #1
20000064:	b2db      	uxtb	r3, r3
20000066:	2b00      	cmp	r3, #0
20000068:	d005      	beq.n	20000076 <bpm_ps_no_halt_exec+0x5a>
2000006a:	7bbb      	ldrb	r3, [r7, #14]
2000006c:	f083 0301 	eor.w	r3, r3, #1
20000070:	b2db      	uxtb	r3, r3
20000072:	2b00      	cmp	r3, #0
20000074:	d1e1      	bne.n	2000003a <bpm_ps_no_halt_exec+0x1e>
	return b_psok;
20000076:	7bfb      	ldrb	r3, [r7, #15]
}
20000078:	4618      	mov	r0, r3
2000007a:	3714      	adds	r7, #20
2000007c:	46bd      	mov	sp, r7
2000007e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000082:	4770      	bx	lr
20000084:	400f0000 	.word	0x400f0000
20000088:	aa00001c 	.word	0xaa00001c
2000008c:	e000e010 	.word	0xe000e010

20000090 <font_table>:
20000090:	2000020c 20000210 20000214 20000218     ... ... ... ... 
200000a0:	20000220 20000228 20000230 20000238      .. (.. 0.. 8.. 
200000b0:	2000023c 20000240 20000244 20000248     <.. @.. D.. H.. 
200000c0:	2000024c 20000250 20000254 20000258     L.. P.. T.. X.. 
200000d0:	2000025c 20000264 2000026c 20000274     \.. d.. l.. t.. 
200000e0:	2000027c 20000284 2000028c 20000294     |.. ... ... ... 
200000f0:	2000029c 200002a4 200002ac 200002b0     ... ... ... ... 
20000100:	200002b4 200002bc 200002c4 200002cc     ... ... ... ... 
20000110:	200002d4 200002e0 200002e8 200002f0     ... ... ... ... 
20000120:	200002f8 20000300 20000308 20000310     ... ... ... ... 
20000130:	20000318 20000320 20000324 2000032c     ...  .. $.. ,.. 
20000140:	20000334 2000033c 20000344 2000034c     4.. <.. D.. L.. 
20000150:	20000354 2000035c 20000364 2000036c     T.. \.. d.. l.. 
20000160:	20000374 2000037c 20000384 2000038c     t.. |.. ... ... 
20000170:	20000394 2000039c 200003a4 200003ac     ... ... ... ... 
20000180:	200003b0 200003b4 200003b8 200003bc     ... ... ... ... 
20000190:	200003c0 200003c4 200003cc 200003d4     ... ... ... ... 
200001a0:	200003dc 200003e4 200003ec 200003f0     ... ... ... ... 
200001b0:	200003f8 20000400 20000404 20000408     ... ... ... ... 
200001c0:	20000410 20000414 2000041c 20000424     ... ... ... $.. 
200001d0:	2000042c 20000434 2000043c 20000440     ,.. 4.. <.. @.. 
200001e0:	20000448 2000044c 20000454 2000045c     H.. L.. T.. \.. 
200001f0:	20000464 2000046c 20000474 20000478     d.. l.. t.. x.. 
20000200:	2000047c 20000480 20000484              |.. ... ... 

2000020c <Font08px_32>:
2000020c:	00000002                                ....

20000210 <Font08px_33>:
20000210:	0000be01                                ....

20000214 <Font08px_34>:
20000214:	06000603                                ....

20000218 <Font08px_35>:
20000218:	28fe2805 000028fe                       .(.(.(..

20000220 <Font08px_36>:
20000220:	fe544805 00002454                       .HT.T$..

20000228 <Font08px_37>:
20000228:	10264605 0000c4c8                       .F&.....

20000230 <Font08px_38>:
20000230:	ac926c05 0000a040                       .l..@...

20000238 <Font08px_39>:
20000238:	00000601                                ....

2000023c <Font08px_40>:
2000023c:	82443803                                .8D.

20000240 <Font08px_41>:
20000240:	38448203                                ..D8

20000244 <Font08px_42>:
20000244:	28102803                                .(.(

20000248 <Font08px_43>:
20000248:	10381003                                ..8.

2000024c <Font08px_44>:
2000024c:	0000c001                                ....

20000250 <Font08px_45>:
20000250:	10101003                                ....

20000254 <Font08px_46>:
20000254:	00008001                                ....

20000258 <Font08px_47>:
20000258:	0638c003                                ..8.

2000025c <Font08px_N0>:
2000025c:	92a27c05 00007c8a                       .|...|..

20000264 <Font08px_N1>:
20000264:	fe840005 00000080                       ........

2000026c <Font08px_N2>:
2000026c:	a2c28405 00008c92                       ........

20000274 <Font08px_N3>:
20000274:	92824405 00006c92                       .D...l..

2000027c <Font08px_N4>:
2000027c:	24283005 000020fe                       .0($. ..

20000284 <Font08px_N5>:
20000284:	8a8a5e05 0000728a                       .^...r..

2000028c <Font08px_N6>:
2000028c:	92927c05 00006492                       .|...d..

20000294 <Font08px_N7>:
20000294:	f2020205 0000060a                       ........

2000029c <Font08px_N8>:
2000029c:	92926c05 00006c92                       .l...l..

200002a4 <Font08px_N9>:
200002a4:	92924c05 00007c92                       .L...|..

200002ac <Font08px_58>:
200002ac:	00004401                                .D..

200002b0 <Font08px_59>:
200002b0:	0000c401                                ....

200002b4 <Font08px_60>:
200002b4:	44281004 00000082                       ..(D....

200002bc <Font08px_61>:
200002bc:	28282804 00000028                       .((((...

200002c4 <Font08px_62>:
200002c4:	28448204 00000010                       ..D(....

200002cc <Font08px_63>:
200002cc:	a2020405 00000c12                       ........

200002d4 <Font08px_64>:
200002d4:	92443808 24baaaaa 00000018              .8D....$....

200002e0 <Font08px_UA>:
200002e0:	1214f805 0000f814                       ........

200002e8 <Font08px_UB>:
200002e8:	9292fe04 0000006c                       ....l...

200002f0 <Font08px_UC>:
200002f0:	82827c04 00000044                       .|..D...

200002f8 <Font08px_UD>:
200002f8:	8282fe04 0000007c                       ....|...

20000300 <Font08px_UE>:
20000300:	9292fe04 00000082                       ........

20000308 <Font08px_UF>:
20000308:	1212fe04 00000002                       ........

20000310 <Font08px_UG>:
20000310:	92827c05 0000f492                       .|......

20000318 <Font08px_UH>:
20000318:	1010fe04 000000fe                       ........

20000320 <Font08px_UI>:
20000320:	82fe8203                                ....

20000324 <Font08px_UJ>:
20000324:	80804004 0000007e                       .@..~...

2000032c <Font08px_UK>:
2000032c:	2810fe05 00008244                       ...(D...

20000334 <Font08px_UL>:
20000334:	8080fe04 00000080                       ........

2000033c <Font08px_UM>:
2000033c:	0804fe05 0000fe04                       ........

20000344 <Font08px_UN>:
20000344:	1804fe05 0000fe60                       ....`...

2000034c <Font08px_UO>:
2000034c:	82827c04 0000007c                       .|..|...

20000354 <Font08px_UP>:
20000354:	1212fe04 0000000c                       ........

2000035c <Font08px_UQ>:
2000035c:	a2827c05 0000bc42                       .|..B...

20000364 <Font08px_UR>:
20000364:	3212fe04 000000cc                       ...2....

2000036c <Font08px_US>:
2000036c:	92924c04 00000064                       .L..d...

20000374 <Font08px_UT>:
20000374:	fe020205 00000202                       ........

2000037c <Font08px_UU>:
2000037c:	80807e04 0000007e                       .~..~...

20000384 <Font08px_UV>:
20000384:	c0300e05 00000e30                       ..0.0...

2000038c <Font08px_UW>:
2000038c:	38c03e05 00003ec0                       .>.8.>..

20000394 <Font08px_UX>:
20000394:	1028c605 0000c628                       ..(.(...

2000039c <Font08px_UY>:
2000039c:	f0080605 00000608                       ........

200003a4 <Font08px_UZ>:
200003a4:	92a2c205 0000868a                       ........

200003ac <Font08px_91>:
200003ac:	8282fe03                                ....

200003b0 <Font08px_92>:
200003b0:	c0380603                                ..8.

200003b4 <Font08px_93>:
200003b4:	fe828203                                ....

200003b8 <Font08px_94>:
200003b8:	04020403                                ....

200003bc <Font08px_95>:
200003bc:	80808003                                ....

200003c0 <Font08px_96>:
200003c0:	00040202                                ....

200003c4 <Font08px_la>:
200003c4:	88887004 000000f8                       .p......

200003cc <Font08px_lb>:
200003cc:	8888fe04 00000070                       ....p...

200003d4 <Font08px_lc>:
200003d4:	88887004 00000088                       .p......

200003dc <Font08px_ld>:
200003dc:	88887004 000000fe                       .p......

200003e4 <Font08px_le>:
200003e4:	a8a87004 00000030                       .p..0...

200003ec <Font08px_lf>:
200003ec:	0212fc03                                ....

200003f0 <Font08px_lg>:
200003f0:	a8a81004 00000078                       ....x...

200003f8 <Font08px_lh>:
200003f8:	0810fe04 000000f0                       ........

20000400 <Font08px_li>:
20000400:	0000fa01                                ....

20000404 <Font08px_lj>:
20000404:	007a8002                                ..z.

20000408 <Font08px_lk>:
20000408:	5020fe04 00000088                       .. P....

20000410 <Font08px_ll>:
20000410:	0000fe01                                ....

20000414 <Font08px_lm>:
20000414:	f008f805 0000f008                       ........

2000041c <Font08px_ln>:
2000041c:	0810f804 000000f0                       ........

20000424 <Font08px_lo>:
20000424:	88887004 00000070                       .p..p...

2000042c <Font08px_lp>:
2000042c:	2828f804 00000010                       ..((....

20000434 <Font08px_lq>:
20000434:	28281004 000000f8                       ..((....

2000043c <Font08px_lr>:
2000043c:	0810f803                                ....

20000440 <Font08px_ls>:
20000440:	a8a89004 00000048                       ....H...

20000448 <Font08px_lt>:
20000448:	887c0803                                ..|.

2000044c <Font08px_lu>:
2000044c:	80807804 000000f8                       .x......

20000454 <Font08px_lv>:
20000454:	80601805 00001860                       ..`.`...

2000045c <Font08px_lw>:
2000045c:	30c03805 000038c0                       .8.0.8..

20000464 <Font08px_lx>:
20000464:	20508805 00008850                       ..P P...

2000046c <Font08px_ly>:
2000046c:	a0a01804 00000078                       ....x...

20000474 <Font08px_lz>:
20000474:	98a8c803                                ....

20000478 <Font08px_123>:
20000478:	826c1003                                ..l.

2000047c <Font08px_124>:
2000047c:	0000fe01                                ....

20000480 <Font08px_125>:
20000480:	106c8203                                ..l.

20000484 <Font08px_126>:
20000484:	10081005 00001020                       .... ...

2000048c <g_interrupt_enabled>:
2000048c:	00000001                                ....

20000490 <flashcalw_wait_until_ready>:
20000490:	00005a95                                .Z..

20000494 <display_selection>:
20000494:	00000102                                         .

20000495 <display_change>:
20000495:	94000001                                         ...

20000498 <__ctype_ptr__>:
20000498:	00010994 00000000                       ........

200004a0 <_impure_ptr>:
200004a0:	200004a8 00000000                       ... ....

200004a8 <impure_data>:
200004a8:	00000000 20000794 200007fc 20000864     ....... ... d.. 
	...
200004dc:	00010a9c 00000000 00000000 00000000     ................
	...
20000550:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000560:	0005deec 0000000b 00000000 00000000     ................
	...

200008d0 <lc_ctype_charset>:
200008d0:	49435341 00000049 00000000 00000000     ASCII...........
	...

200008f0 <__mb_cur_max>:
200008f0:	00000001                                ....

200008f4 <lc_message_charset>:
200008f4:	49435341 00000049 00000000 00000000     ASCII...........
	...

20000914 <lconv>:
20000914:	00010b4c 00010b4d 00010b4d 00010b4d     L...M...M...M...
20000924:	00010b4d 00010b4d 00010b4d 00010b4d     M...M...M...M...
20000934:	00010b4d 00010b4d ffffffff ffffffff     M...M...........
20000944:	ffffffff 0000ffff                       ........

2000094c <__malloc_av_>:
	...
20000954:	2000094c 2000094c 20000954 20000954     L.. L.. T.. T.. 
20000964:	2000095c 2000095c 20000964 20000964     \.. \.. d.. d.. 
20000974:	2000096c 2000096c 20000974 20000974     l.. l.. t.. t.. 
20000984:	2000097c 2000097c 20000984 20000984     |.. |.. ... ... 
20000994:	2000098c 2000098c 20000994 20000994     ... ... ... ... 
200009a4:	2000099c 2000099c 200009a4 200009a4     ... ... ... ... 
200009b4:	200009ac 200009ac 200009b4 200009b4     ... ... ... ... 
200009c4:	200009bc 200009bc 200009c4 200009c4     ... ... ... ... 
200009d4:	200009cc 200009cc 200009d4 200009d4     ... ... ... ... 
200009e4:	200009dc 200009dc 200009e4 200009e4     ... ... ... ... 
200009f4:	200009ec 200009ec 200009f4 200009f4     ... ... ... ... 
20000a04:	200009fc 200009fc 20000a04 20000a04     ... ... ... ... 
20000a14:	20000a0c 20000a0c 20000a14 20000a14     ... ... ... ... 
20000a24:	20000a1c 20000a1c 20000a24 20000a24     ... ... $.. $.. 
20000a34:	20000a2c 20000a2c 20000a34 20000a34     ,.. ,.. 4.. 4.. 
20000a44:	20000a3c 20000a3c 20000a44 20000a44     <.. <.. D.. D.. 
20000a54:	20000a4c 20000a4c 20000a54 20000a54     L.. L.. T.. T.. 
20000a64:	20000a5c 20000a5c 20000a64 20000a64     \.. \.. d.. d.. 
20000a74:	20000a6c 20000a6c 20000a74 20000a74     l.. l.. t.. t.. 
20000a84:	20000a7c 20000a7c 20000a84 20000a84     |.. |.. ... ... 
20000a94:	20000a8c 20000a8c 20000a94 20000a94     ... ... ... ... 
20000aa4:	20000a9c 20000a9c 20000aa4 20000aa4     ... ... ... ... 
20000ab4:	20000aac 20000aac 20000ab4 20000ab4     ... ... ... ... 
20000ac4:	20000abc 20000abc 20000ac4 20000ac4     ... ... ... ... 
20000ad4:	20000acc 20000acc 20000ad4 20000ad4     ... ... ... ... 
20000ae4:	20000adc 20000adc 20000ae4 20000ae4     ... ... ... ... 
20000af4:	20000aec 20000aec 20000af4 20000af4     ... ... ... ... 
20000b04:	20000afc 20000afc 20000b04 20000b04     ... ... ... ... 
20000b14:	20000b0c 20000b0c 20000b14 20000b14     ... ... ... ... 
20000b24:	20000b1c 20000b1c 20000b24 20000b24     ... ... $.. $.. 
20000b34:	20000b2c 20000b2c 20000b34 20000b34     ,.. ,.. 4.. 4.. 
20000b44:	20000b3c 20000b3c 20000b44 20000b44     <.. <.. D.. D.. 
20000b54:	20000b4c 20000b4c 20000b54 20000b54     L.. L.. T.. T.. 
20000b64:	20000b5c 20000b5c 20000b64 20000b64     \.. \.. d.. d.. 
20000b74:	20000b6c 20000b6c 20000b74 20000b74     l.. l.. t.. t.. 
20000b84:	20000b7c 20000b7c 20000b84 20000b84     |.. |.. ... ... 
20000b94:	20000b8c 20000b8c 20000b94 20000b94     ... ... ... ... 
20000ba4:	20000b9c 20000b9c 20000ba4 20000ba4     ... ... ... ... 
20000bb4:	20000bac 20000bac 20000bb4 20000bb4     ... ... ... ... 
20000bc4:	20000bbc 20000bbc 20000bc4 20000bc4     ... ... ... ... 
20000bd4:	20000bcc 20000bcc 20000bd4 20000bd4     ... ... ... ... 
20000be4:	20000bdc 20000bdc 20000be4 20000be4     ... ... ... ... 
20000bf4:	20000bec 20000bec 20000bf4 20000bf4     ... ... ... ... 
20000c04:	20000bfc 20000bfc 20000c04 20000c04     ... ... ... ... 
20000c14:	20000c0c 20000c0c 20000c14 20000c14     ... ... ... ... 
20000c24:	20000c1c 20000c1c 20000c24 20000c24     ... ... $.. $.. 
20000c34:	20000c2c 20000c2c 20000c34 20000c34     ,.. ,.. 4.. 4.. 
20000c44:	20000c3c 20000c3c 20000c44 20000c44     <.. <.. D.. D.. 
20000c54:	20000c4c 20000c4c 20000c54 20000c54     L.. L.. T.. T.. 
20000c64:	20000c5c 20000c5c 20000c64 20000c64     \.. \.. d.. d.. 
20000c74:	20000c6c 20000c6c 20000c74 20000c74     l.. l.. t.. t.. 
20000c84:	20000c7c 20000c7c 20000c84 20000c84     |.. |.. ... ... 
20000c94:	20000c8c 20000c8c 20000c94 20000c94     ... ... ... ... 
20000ca4:	20000c9c 20000c9c 20000ca4 20000ca4     ... ... ... ... 
20000cb4:	20000cac 20000cac 20000cb4 20000cb4     ... ... ... ... 
20000cc4:	20000cbc 20000cbc 20000cc4 20000cc4     ... ... ... ... 
20000cd4:	20000ccc 20000ccc 20000cd4 20000cd4     ... ... ... ... 
20000ce4:	20000cdc 20000cdc 20000ce4 20000ce4     ... ... ... ... 
20000cf4:	20000cec 20000cec 20000cf4 20000cf4     ... ... ... ... 
20000d04:	20000cfc 20000cfc 20000d04 20000d04     ... ... ... ... 
20000d14:	20000d0c 20000d0c 20000d14 20000d14     ... ... ... ... 
20000d24:	20000d1c 20000d1c 20000d24 20000d24     ... ... $.. $.. 
20000d34:	20000d2c 20000d2c 20000d34 20000d34     ,.. ,.. 4.. 4.. 
20000d44:	20000d3c 20000d3c 20000d44 20000d44     <.. <.. D.. D.. 

20000d54 <__malloc_sbrk_base>:
20000d54:	ffffffff                                ....

20000d58 <__malloc_trim_threshold>:
20000d58:	00020000                                ....

20000d5c <__mbtowc>:
20000d5c:	0000c705                                ....

20000d60 <__wctomb>:
20000d60:	0000f9b1                                ....
